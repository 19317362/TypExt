// Type definitions for ExtJS 5.1.1
// Forked Project: http://www.sencha.com/products/extjs/
// Groovy engine created by: Brian Kotek <https://github.com/brian428/>
// Groovy engine forked by: Jeremie Turbet <https://github.com/turbet/>
// Replace definitions: https://github.com/borisyankov/DefinitelyTyped
// 2016-f√©vr.-22 12:50:44 PM

declare module Ext {
	export interface IAbstractManager extends Ext.IBase {
		/** [Property] (Ext.util.HashMap) */
		all?: Ext.util.IHashMap;

		/** [Method] Creates and returns an instance of whatever this manager manages based on the supplied type and config object  
		* @param config Object The config object 
		* @param defaultType String If no type is discovered in the config object, we fall back to this type 
		* @returns Object The instance of whatever this manager is managing 
		*/
		create?( config?:any, defaultType?:string ): any;

		/** [Method] Executes the specified function once for each item in the collection  
		* @param fn Function The function to execute. 
		* @param scope Object The scope to execute in. Defaults to this. 
		*/
		each?( fn?:any, scope?:any ): void;

		/** [Method] Returns an item by id  
		* @param id String The id of the item 
		* @returns Object The item, undefined if not found. 
		*/
		get?( id?:string ): any;

		/** [Method] Gets the number of items in the collection  
		* @returns Number The number of items in the collection. 
		*/
		getCount?(): number;

		/** [Method] Checks if an item type is registered  
		* @param type String The mnemonic string by which the class may be looked up 
		* @returns Boolean Whether the type is registered. 
		*/
		isRegistered?( type?:string ): boolean;

		/** [Method] Registers a function that will be called when an item with the specified id is added to the manager  
		* @param id String The item id 
		* @param fn Function The callback function. Called with a single parameter, the item. 
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to the item. 
		*/
		onAvailable?( id?:string, fn?:any, scope?:any ): void;

		/** [Method] Registers an item to be managed 
		* @param item Object The item to register 
		*/
		register?( item?:any ): void;

		/** [Method] Registers a new item constructor keyed by a type key  
		* @param type String The mnemonic string by which the class may be looked up. 
		* @param cls Function The new instance class. 
		*/
		registerType?( type?:string, cls?:any ): void;

		/** [Method] Unregisters an item by removing it from this manager 
		* @param item Object The item to unregister 
		*/
		unregister?( item?:any ): void;

	}

}

declare module Ext {
	export interface IAction extends Ext.IBase {
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Function) */
		handler?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (String) */
		itemId?: string;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		text?: string;
		/** [Method] Disables all components configured by this Action  */
		disable?(): void;

		/** [Method] Executes the specified function once for each Component currently tied to this Action  
		* @param fn Function The function to execute for each component 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Component. 
		*/
		each?( fn?:any, scope?:any ): void;

		/** [Method] Enables all components configured by this Action  */
		enable?(): void;

		/** [Method] Executes this Action manually using the handler function specified in the original config object or the handler funct  
		* @param args Object... Variable number of arguments passed to the handler function 
		*/
		execute?( ...args:any[] ): void;

		/** [Method] Gets the icon CSS class currently used by all components configured by this Action  */
		getIconCls?(): void;

		/** [Method] Gets the text currently displayed by all components configured by this Action  */
		getText?(): void;

		/** [Method] Hides all components configured by this Action  */
		hide?(): void;

		/** [Method] Returns true if the components using this Action are currently disabled else returns false  */
		isDisabled?(): void;

		/** [Method] Returns true if the components configured by this Action are currently hidden else returns false  */
		isHidden?(): void;

		/** [Method] Sets the disabled state of all components configured by this Action  
		* @param disabled Boolean True to disable the component, false to enable it 
		*/
		setDisabled?( disabled?:boolean ): void;

		/** [Method] Sets the function that will be called by each Component using this action when its primary event is triggered  
		* @param fn Function The function that will be invoked by the action's components. The function will be called with no arguments. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Component firing the event. 
		*/
		setHandler?( fn?:any, scope?:any ): void;

		/** [Method] Sets the hidden state of all components configured by this Action  
		* @param hidden Boolean True to hide the component, false to show it. 
		*/
		setHidden?( hidden?:boolean ): void;

		/** [Method] Sets the icon CSS class for all components configured by this Action  
		* @param cls String The CSS class supplying the icon image 
		*/
		setIconCls?( cls?:string ): void;

		/** [Method] Sets the text to be displayed by all components configured by this Action  
		* @param text String The text to display 
		*/
		setText?( text?:string ): void;

		/** [Method] Shows all components configured by this Action  */
		show?(): void;

	}

}

declare module Ext {
	export interface IAjax extends Ext.data.IConnection {
	}
	export class Ajax {
		/** [Property] (Boolean) */
		static autoAbort: boolean;

		/** [Property] (Object) */
		static defaultHeaders: any;

		/** [Property] (Boolean) */
		static disableCaching: boolean;

		/** [Property] (Object) */
		static extraParams: any;

		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (String) */
		static method: string;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (Number) */
		static timeout: number;

		/** [Property] (String) */
		static url: string;

		/** [Method] Aborts an active request  
		* @param request Object Defaults to the last request 
		*/
		static abort( request?:any ): void;

		/** [Method] Aborts all active requests */
		static abortAll(): void;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the value of async  
		* @returns Boolean 
		*/
		static getAsync(): boolean;

		/** [Method] Returns the value of autoAbort  
		* @returns Boolean 
		*/
		static getAutoAbort(): boolean;

		/** [Method] Returns the value of binary  
		* @returns Boolean 
		*/
		static getBinary(): boolean;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the value of cors  
		* @returns Boolean 
		*/
		static getCors(): boolean;

		/** [Method] Returns the value of defaultHeaders  
		* @returns Object 
		*/
		static getDefaultHeaders(): any;

		/** [Method] Returns the value of defaultPostHeader  
		* @returns String 
		*/
		static getDefaultPostHeader(): string;

		/** [Method] Returns the value of defaultXdrContentType  
		* @returns String 
		*/
		static getDefaultXdrContentType(): string;

		/** [Method] Returns the value of defaultXhrHeader  
		* @returns String 
		*/
		static getDefaultXhrHeader(): string;

		/** [Method] Returns the value of disableCaching  
		* @returns Boolean 
		*/
		static getDisableCaching(): boolean;

		/** [Method] Returns the value of disableCachingParam  
		* @returns String 
		*/
		static getDisableCachingParam(): string;

		/** [Method] Returns the value of extraParams  
		* @returns Object 
		*/
		static getExtraParams(): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Returns the value of isXdr  
		* @returns Boolean 
		*/
		static getIsXdr(): boolean;

		/** [Method] Returns the value of method  
		* @returns String 
		*/
		static getMethod(): string;

		/** [Method] Returns the value of password  
		* @returns String 
		*/
		static getPassword(): string;

		/** [Method] Returns the value of timeout  
		* @returns Number 
		*/
		static getTimeout(): number;

		/** [Method] Returns the value of url  
		* @returns String 
		*/
		static getUrl(): string;

		/** [Method] Returns the value of useDefaultXhrHeader  
		* @returns Boolean 
		*/
		static getUseDefaultXhrHeader(): boolean;

		/** [Method] Returns the value of username  
		* @returns String 
		*/
		static getUsername(): string;

		/** [Method] Returns the value of withCredentials  
		* @returns Boolean 
		*/
		static getWithCredentials(): boolean;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Determines whether this object has a request outstanding  
		* @param request Object Defaults to the last transaction 
		* @returns Boolean True if there is an outstanding request. 
		*/
		static isLoading( request?:any ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Checks if the response status was successful 
		* @param status Number The status code 
		* @returns Object An object containing success/status state 
		*/
		static parseStatus( status?:number ): any;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Sends an HTTP request to a remote server  
		* @param options Object An object which may contain the following properties: (The options object may also contain any other property which might be needed to perform postprocessing in a callback because it is passed to callback functions.) 
		* @returns Object The request object. This may be used to cancel the request. 
		*/
		static request( options?:any ): any;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets the value of async  
		* @param async Boolean The new value. 
		*/
		static setAsync( async?:boolean ): void;

		/** [Method] Sets the value of autoAbort  
		* @param autoAbort Boolean The new value. 
		*/
		static setAutoAbort( autoAbort?:boolean ): void;

		/** [Method] Sets the value of binary  
		* @param binary Boolean The new value. 
		*/
		static setBinary( binary?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Sets the value of cors  
		* @param cors Boolean The new value. 
		*/
		static setCors( cors?:boolean ): void;

		/** [Method] Sets the value of defaultHeaders  
		* @param defaultHeaders Object The new value. 
		*/
		static setDefaultHeaders( defaultHeaders?:any ): void;

		/** [Method] Sets the value of defaultPostHeader  
		* @param defaultPostHeader String The new value. 
		*/
		static setDefaultPostHeader( defaultPostHeader?:string ): void;

		/** [Method] Sets the value of defaultXdrContentType  
		* @param defaultXdrContentType String The new value. 
		*/
		static setDefaultXdrContentType( defaultXdrContentType?:string ): void;

		/** [Method] Sets the value of defaultXhrHeader  
		* @param defaultXhrHeader String The new value. 
		*/
		static setDefaultXhrHeader( defaultXhrHeader?:string ): void;

		/** [Method] Sets the value of disableCaching  
		* @param disableCaching Boolean The new value. 
		*/
		static setDisableCaching( disableCaching?:boolean ): void;

		/** [Method] Sets the value of disableCachingParam  
		* @param disableCachingParam String The new value. 
		*/
		static setDisableCachingParam( disableCachingParam?:string ): void;

		/** [Method] Sets the value of extraParams  
		* @param extraParams Object The new value. 
		*/
		static setExtraParams( extraParams?:any ): void;

		/** [Method] Sets the value of isXdr  
		* @param isXdr Boolean The new value. 
		*/
		static setIsXdr( isXdr?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Sets the value of method  
		* @param method String The new value. 
		*/
		static setMethod( method?:string ): void;

		/** [Method] Sets various options such as the url params for the request 
		* @param options Object The initial options 
		* @param scope Object The scope to execute in 
		* @returns Object The params for the request 
		*/
		static setOptions( options?:any, scope?:any ): any;

		/** [Method] Sets the value of password  
		* @param password String The new value. 
		*/
		static setPassword( password?:string ): void;

		/** [Method] Sets the value of timeout  
		* @param timeout Number The new value. 
		*/
		static setTimeout( timeout?:number ): void;

		/** [Method] Sets the value of url  
		* @param url String The new value. 
		*/
		static setUrl( url?:string ): void;

		/** [Method] Sets the value of useDefaultXhrHeader  
		* @param useDefaultXhrHeader Boolean The new value. 
		*/
		static setUseDefaultXhrHeader( useDefaultXhrHeader?:boolean ): void;

		/** [Method] Sets the value of username  
		* @param username String The new value. 
		*/
		static setUsername( username?:string ): void;

		/** [Method] Sets the value of withCredentials  
		* @param withCredentials Boolean The new value. 
		*/
		static setWithCredentials( withCredentials?:boolean ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Uploads a form using a hidden iframe  
		* @param form String/HTMLElement/Ext.dom.Element The form to upload 
		* @param url String The url to post to 
		* @param params String Any extra parameters to pass 
		* @param options Object The initial options 
		*/
		static upload( form?:any, url?:string, params?:string, options?:any ): void;

	}

}

declare module Ext {
	export interface IAnimationQueue extends Ext.IBase {
	}
	export class AnimationQueue {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method]  
		* @param fn Function 
		* @param scope Object 
		* @param args Object 
		*/
		static start( fn?:any, scope?:any, args?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method]  
		* @param fn Function 
		* @param scope Object 
		* @param args Object 
		*/
		static stop( fn?:any, scope?:any, args?:any ): void;

	}

}

declare module Ext.app {
	export interface IApplication extends Ext.app.IController {
		/** [Config Option] (String) */
		appFolder?: string;
		/** [Config Option] (String) */
		appProperty?: string;
		/** [Config Option] (Boolean/String) */
		autoCreateViewport?: any;
		/** [Config Option] (String/String[]) */
		controllers?: any;
		/** [Config Option] (String) */
		defaultToken?: string;
		/** [Config Option] (Boolean) */
		enableQuickTips?: boolean;
		/** [Config Option] (String) */
		extend?: string;
		/** [Config Option] (String) */
		glyphFontFamily?: string;
		/** [Config Option] (String/Object) */
		mainView?: any;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (String/String[]) */
		namespaces?: any;
		/** [Config Option] (Object) */
		paths?: any;
		/** [Config Option] (String/String[]) */
		profiles?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Method] Create an instance of a controller by name  
		* @param name String The name of the controller. For a controller with the full class name MyApp.controller.Foo, the name parameter should be Foo. If the controller already exists, it will be returned. 
		* @returns Ext.app.Controller controller 
		*/
		createController?( name?:string ): Ext.app.IController;

		/** [Method] Inherit docs 
		* @param destroyRefs Object 
		*/
		destroy?( destroyRefs?:any ): void;

		/** [Method] Destroys a controller any listeners are unbound  
		* @param controller String/Ext.app.Controller The controller 
		*/
		destroyController?( controller?:any ): void;

		/** [Method] Returns the value of appProperty  
		* @returns String 
		*/
		getAppProperty?(): string;

		/** [Method] Inherit docs 
		* @returns Ext.app.Application 
		*/
		getApplication?(): Ext.app.IApplication;

		/** [Method] Returns instance of a Controller with the given id  
		* @param name Object 
		* @param preventCreate Object 
		* @returns Ext.app.Controller controller instance or undefined. 
		*/
		getController?( name?:any, preventCreate?:any ): Ext.app.IController;

		/** [Method] Returns the value of currentProfile  
		* @returns Object 
		*/
		getCurrentProfile?(): any;

		/** [Method] Returns the value of defaultToken  
		* @returns String 
		*/
		getDefaultToken?(): string;

		/** [Method] Returns the value of enableQuickTips  
		* @returns Boolean 
		*/
		getEnableQuickTips?(): boolean;

		/** [Method] Returns the value of glyphFontFamily  
		* @returns String 
		*/
		getGlyphFontFamily?(): string;

		/** [Method] Returns the value of mainView  
		* @returns String/Object 
		*/
		getMainView?(): any;

		/** [Method] Returns the value of moduleClassName  
		* @param name Object 
		* @param kind Object 
		* @returns Object 
		*/
		getModuleClassName?( name?:any, kind?:any ): any;

		/** [Method] Returns the value of name  
		* @returns String 
		*/
		getName?(): string;

		/** [Method] Returns the value of profiles  
		* @returns String/String[] 
		*/
		getProfiles?(): any;

		/** [Method] Called automatically when the page has completely loaded  
		* @param profile String The detected application profile 
		* @returns Boolean By default, the Application will dispatch to the configured startup controller and action immediately after running the launch function. Return false to prevent this behavior. 
		*/
		launch?( profile?:string ): boolean;

		/** [Method] Sets the value of appProperty  
		* @param appProperty String The new value. 
		*/
		setAppProperty?( appProperty?:string ): void;

		/** [Method] Sets the value of currentProfile  
		* @param currentProfile Object The new value. 
		*/
		setCurrentProfile?( currentProfile?:any ): void;

		/** [Method] Sets the value of defaultToken  
		* @param defaultToken String The new value. 
		*/
		setDefaultToken?( defaultToken?:string ): void;

		/** [Method] Sets the value of enableQuickTips  
		* @param enableQuickTips Boolean The new value. 
		*/
		setEnableQuickTips?( enableQuickTips?:boolean ): void;

		/** [Method] Sets the value of glyphFontFamily  
		* @param glyphFontFamily String The new value. 
		*/
		setGlyphFontFamily?( glyphFontFamily?:string ): void;

		/** [Method] Sets the value of mainView  
		* @param mainView String/Object The new value. 
		*/
		setMainView?( mainView?:any ): void;

		/** [Method] Sets the value of name  
		* @param name String The new value. 
		*/
		setName?( name?:string ): void;

		/** [Method] Sets the value of profiles  
		* @param profiles String/String[] The new value. 
		*/
		setProfiles?( profiles?:any ): void;

	}

}

declare module Ext.app {
	export interface IBaseController extends Ext.IBase, Ext.mixin.IObservable {
		/** [Config Option] (Object) */
		control?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (Object) */
		listen?: any;
		/** [Config Option] (Object) */
		routes?: any;
		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the value of before  
		* @returns Object 
		*/
		getBefore?(): any;

		/** [Method] Returns the value of control  
		* @returns Object 
		*/
		getControl?(): any;

		/** [Method] Returns the value of id  
		* @returns String 
		*/
		getId?(): string;

		/** [Method] Returns the value of listen  
		* @returns Object 
		*/
		getListen?(): any;

		/** [Method] Returns the value of routes  
		* @returns Object 
		*/
		getRoutes?(): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Update the hash  
		* @param token String/Ext.data.Model The token to redirect to. Can be either a String or a Model instance - if a Model instance is passed it will internally be converted into a String token by calling the Model's toUrl function. 
		* @param force Boolean Force the update of the hash regardless of the current token. 
		* @returns Boolean Will return true if the token was updated. 
		*/
		redirectTo?( token?:any, force?:boolean ): boolean;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of before  
		* @param before Object The new value. 
		*/
		setBefore?( before?:any ): void;

		/** [Method] Sets the value of control  
		* @param control Object The new value. 
		*/
		setControl?( control?:any ): void;

		/** [Method] Sets the value of id  
		* @param id String The new value. 
		*/
		setId?( id?:string ): void;

		/** [Method] Sets the value of listen  
		* @param listen Object The new value. 
		*/
		setListen?( listen?:any ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of routes  
		* @param routes Object The new value. 
		*/
		setRoutes?( routes?:any ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.app.bind {
	export interface IAbstractStub extends Ext.util.ISchedulable {
		/** [Property] (Ext.data.Session/Ext.app.ViewModel) */
		owner?: any;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.app.bind {
	export interface IBaseBinding extends Ext.util.ISchedulable {
		/** [Config Option] (Boolean) */
		single?: boolean;
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.app.bind {
	export interface IBinding extends Ext.app.bind.IBaseBinding {
		/** [Config Option] (Boolean) */
		deep?: boolean;
		/** [Method] Binds to the validation association for the bound property  
		* @param callback Function The function to call when the validation changes. 
		* @param scope Object The scope on which to call the callback. 
		* @returns Ext.app.bind.Binding A binding to the validation of the bound property. 
		*/
		bindValidation?( callback?:any, scope?:any ): Ext.app.bind.IBinding;

		/** [Method] Destroys this binding  
		* @param fromParent Object 
		*/
		destroy?( fromParent?:any ): void;

		/** [Method] Returns the diagnostic name for this binding  
		* @returns String 
		*/
		getFullName?(): string;

		/** [Method] Returns the current value of the bound property  
		* @returns Mixed The value of the bound property. 
		*/
		getValue?(): any;

		/** [Method] Returns true if the bound property is loading  
		* @returns Boolean 
		*/
		isLoading?(): boolean;

		/** [Method] This method returns true if this binding can only be read  
		* @returns boolean 
		*/
		isReadOnly?(): boolean;

		/** [Method] Tells the bound property to refresh itself  */
		refresh?(): void;

		/** [Method] Sets the value of the bound property  
		* @param value Mixed The new value. 
		*/
		setValue?( value?:any ): void;

	}

}

declare module Ext.app.bind {
	export interface IFormula extends Ext.util.ISchedulable {
		/** [Config Option] (Object) */
		bind?: any;
		/** [Config Option] (Function) */
		get?: any;
		/** [Config Option] (Function) */
		set?: any;
		/** [Config Option] (Boolean) */
		single?: boolean;
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.app.bind {
	export interface ILinkStub extends Ext.app.bind.IStub {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.app.bind {
	export interface IMulti extends Ext.app.bind.IBaseBinding {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.app.bind {
	export interface IRootStub extends Ext.app.bind.IAbstractStub {
		/** [Method] Schedules this item with the associated Ext util Scheduler  */
		schedule?(): void;

		/** [Method] Unschedules this item with the associated Ext util Scheduler  */
		unschedule?(): void;

	}

}

declare module Ext.app.bind {
	export interface IStub extends Ext.app.bind.IAbstractStub {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.app.bind {
	export interface ITemplate extends Ext.IBase {
		/** [Method] Applies this template to the given values  
		* @param values Array The values of the tokens. 
		* @param scope Object The object instance to use for "this." formatter calls in the template. 
		* @returns String 
		*/
		apply?( values?:any[], scope?:any ): string;

		/** [Method] Returns the distinct set of binding tokens for this template  
		* @returns String[] The tokens for this template. 
		*/
		getTokens?(): string[];

	}

}

declare module Ext.app.bind {
	export interface ITemplateBinding extends Ext.app.bind.IBaseBinding {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.app.bindinspector {
	export interface IEnvironment extends Ext.IBase {
	}

}

declare module Ext.app.bindinspector {
	export interface IUtil extends Ext.IBase {
	}
	export class Util {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.app {
	export interface IController extends Ext.app.IBaseController {
		/** [Config Option] (Ext.app.Application) */
		application?: Ext.app.IApplication;
		/** [Config Option] (String/String[]) */
		models?: any;
		/** [Config Option] (Object[]) */
		refs?: any[];
		/** [Config Option] (String/String[]) */
		stores?: any;
		/** [Config Option] (String/String[]) */
		views?: any;
		/** [Method] Allow the controller to resume receiving events from the event bus  */
		activate?(): void;

		/** [Method] Registers one or more references  
		* @param refs Object/Object[] 
		*/
		addRef?( refs?:any ): void;

		/** [Method] Prevent this controller from receiving events from the event bus  */
		deactivate?(): void;

		/** [Method] This method is called to cleanup an object and its resources  
		* @param destroyRefs Object 
		* @param fromApp Object 
		*/
		destroy?( destroyRefs?:any, fromApp?:any ): void;

		/** [Method] Returns the value of active  
		* @returns Boolean 
		*/
		getActive?(): boolean;

		/** [Method] Returns the value of application  
		* @returns Ext.app.Application 
		*/
		getApplication?(): Ext.app.IApplication;

		/** [Method] Returns instance of a Controller with the given id  
		* @param id String 
		* @returns Ext.app.Controller controller instance or undefined. 
		*/
		getController?( id?:string ): Ext.app.IController;

		/** [Method] Returns a Model class with the given name  
		* @param name String 
		* @returns Ext.Class A class ultimately derived from Ext.data.Model. 
		*/
		getModel?( name?:string ): Ext.IClass;

		/** [Method] Returns the value of moduleClassName  
		* @returns Object 
		*/
		getModuleClassName?(): any;

		/** [Method] Returns instance of a Profile with the given name  
		* @param name String 
		* @returns String a profile instance. 
		*/
		getProfile?( name?:string ): string;

		/** [Method] Returns the value of refs  
		* @returns Object[] 
		*/
		getRefs?(): any[];

		/** [Method] Returns instance of a Store with the given name  
		* @param name String 
		* @returns Ext.data.Store a store instance. 
		*/
		getStore?( name?:string ): Ext.data.IStore;

		/** [Method] Returns a View class with the given name  
		* @param view String 
		* @returns Ext.Base a view class. 
		*/
		getView?( view?:string ): Ext.IBase;

		/** [Method] Returns true if a reference is registered  
		* @param ref String The name of the ref to check for. 
		* @returns Boolean 
		*/
		hasRef?( ref?:string ): boolean;

		/** [Method] A template method that is called when your application boots  
		* @param application Ext.app.Application 
		*/
		init?( application?:Ext.app.IApplication ): void;

		/** [Method] Checks if this controller is active  
		* @returns Boolean true if this controller is active. 
		*/
		isActive?(): boolean;

		/** [Method] A template method like init but called after the viewport is created  
		* @param application Ext.app.Application 
		*/
		onLaunch?( application?:Ext.app.IApplication ): void;

		/** [Method] Sets the value of active  
		* @param active Boolean The new value. 
		*/
		setActive?( active?:boolean ): void;

		/** [Method] Sets the value of application  
		* @param application Ext.app.Application The new value. 
		*/
		setApplication?( application?:Ext.app.IApplication ): void;

		/** [Method] Sets the value of moduleClassName  
		* @param moduleClassName Object The new value. 
		*/
		setModuleClassName?( moduleClassName?:any ): void;

		/** [Method] Sets the value of refs  
		* @param refs Object[] The new value. 
		*/
		setRefs?( refs?:any[] ): void;

	}

}

declare module Ext.app.domain {
	export interface IComponent extends Ext.app.IEventDomain {
	}
	export class Component {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] This method matches the firer of the event the target to the given selector  
		* @param target Object 
		* @param selector Object 
		* @returns Boolean true if the target matches the selector. 
		*/
		static match( target?:any, selector?:any ): boolean;

		/** [Method] This method is called by the derived class to monitor fireEvent calls  
		* @param observable Ext.Class The Observable to monitor for events. 
		*/
		static monitor( observable?:Ext.IClass ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.app.domain {
	export interface IController extends Ext.app.IEventDomain {
	}
	export class Controller {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] This method matches the firer of the event the target to the given selector  
		* @param target Object 
		* @param selector Object 
		* @returns Boolean true if the target matches the selector. 
		*/
		static match( target?:any, selector?:any ): boolean;

		/** [Method] This method is called by the derived class to monitor fireEvent calls  
		* @param observable Ext.Class The Observable to monitor for events. 
		*/
		static monitor( observable?:Ext.IClass ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.app.domain {
	export interface IDirect extends Ext.app.IEventDomain {
	}
	export class Direct {
		/** [Config Option] (String) */
		static idProperty: string;
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] This method matches the firer of the event the target to the given selector  
		* @param target Object The firer of the event. 
		* @param selector String The selector to which to match the target. 
		* @returns Boolean true if the target matches the selector. 
		*/
		static match( target?:any, selector?:string ): boolean;

		/** [Method] This method is called by the derived class to monitor fireEvent calls  
		* @param observable Ext.Class The Observable to monitor for events. 
		*/
		static monitor( observable?:Ext.IClass ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.app.domain {
	export interface IGlobal extends Ext.app.IEventDomain {
	}
	export class Global {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] This method matches the firer of the event the target to the given selector  
		* @param target Object The firer of the event. 
		* @param selector String The selector to which to match the target. 
		* @returns Boolean true if the target matches the selector. 
		*/
		static match( target?:any, selector?:string ): boolean;

		/** [Method] This method is called by the derived class to monitor fireEvent calls  
		* @param observable Ext.Class The Observable to monitor for events. 
		*/
		static monitor( observable?:Ext.IClass ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.app.domain {
	export interface IStore extends Ext.app.IEventDomain {
	}
	export class Store {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] This method matches the firer of the event the target to the given selector  
		* @param target Object 
		* @param selector Object 
		* @returns Boolean true if the target matches the selector. 
		*/
		static match( target?:any, selector?:any ): boolean;

		/** [Method] This method is called by the derived class to monitor fireEvent calls  
		* @param observable Ext.Class The Observable to monitor for events. 
		*/
		static monitor( observable?:Ext.IClass ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.app.domain {
	export interface IView extends Ext.app.IEventDomain {
		/** [Property] (Boolean) */
		isInstance?: boolean;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] This method matches the firer of the event the target to the given selector  
		* @param target Object 
		* @param selector Object 
		* @param controller Object 
		* @returns Boolean true if the target matches the selector. 
		*/
		match?( target?:any, selector?:any, controller?:any ): boolean;

	}

}

declare module Ext.app {
	export interface IEventBus extends Ext.IBase {
	}
	export class EventBus {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Adds a set of component event listeners for a controller  
		* @param selectors Object Config object containing selectors and listeners. 
		* @param controller Ext.app.BaseController The listening controller instance. 
		*/
		static control( selectors?:any, controller?:Ext.app.IBaseController ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Adds a set of event domain listeners for a controller  
		* @param to Object Config object containing domains, selectors and listeners. 
		* @param controller Ext.app.BaseController The listening controller instance. 
		*/
		static listen( to?:any, controller?:Ext.app.IBaseController ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Removes all of a controller s attached listeners  
		* @param controllerId String/Ext.app.BaseController The id or the controller instance. 
		*/
		static unlisten( controllerId?:any ): void;

	}

}

declare module Ext.app {
	export interface IEventDomain extends Ext.IBase {
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Property] (Boolean) */
		isInstance?: boolean;

		/** [Property] (Object) */
		instances?: any;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] This method matches the firer of the event the target to the given selector  
		* @param target Object The firer of the event. 
		* @param selector String The selector to which to match the target. 
		* @returns Boolean true if the target matches the selector. 
		*/
		match?( target?:any, selector?:string ): boolean;

		/** [Method] This method is called by the derived class to monitor fireEvent calls  
		* @param observable Ext.Class The Observable to monitor for events. 
		*/
		monitor?( observable?:Ext.IClass ): void;

	}

}

declare module Ext.app {
	export interface IProfile extends Ext.IBase, Ext.mixin.IObservable {
		/** [Config Option] (Ext.app.Application) */
		application?: Ext.app.IApplication;
		/** [Config Option] (Array) */
		controllers?: any[];
		/** [Config Option] (String) */
		mainView?: string;
		/** [Config Option] (Array) */
		models?: any[];
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (String) */
		namespace?: string;
		/** [Config Option] (Array) */
		stores?: any[];
		/** [Config Option] (Array) */
		views?: any[];
		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the value of application  
		* @returns Ext.app.Application 
		*/
		getApplication?(): Ext.app.IApplication;

		/** [Method] Returns the value of controllers  
		* @returns Array 
		*/
		getControllers?(): any[];

		/** [Method] Returns the value of mainView  
		* @returns String 
		*/
		getMainView?(): string;

		/** [Method] Returns the value of models  
		* @returns Array 
		*/
		getModels?(): any[];

		/** [Method] Returns the value of name  
		* @returns String 
		*/
		getName?(): string;

		/** [Method] Returns the value of namespace  
		* @returns String 
		*/
		getNamespace?(): string;

		/** [Method] Returns the value of stores  
		* @returns Array 
		*/
		getStores?(): any[];

		/** [Method] Returns the value of views  
		* @returns Array 
		*/
		getViews?(): any[];

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Determines whether or not this Profile is active on the device isActive is executed on  
		* @returns Boolean True if this Profile should be activated on the device it is running on, false otherwise 
		*/
		isActive?(): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] The launch function is called by the Application if this Profile s isActive function returned true  */
		launch?(): void;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of application  
		* @param application Ext.app.Application The new value. 
		*/
		setApplication?( application?:Ext.app.IApplication ): void;

		/** [Method] Sets the value of controllers  
		* @param controllers Array The new value. 
		*/
		setControllers?( controllers?:any[] ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of mainView  
		* @param mainView String The new value. 
		*/
		setMainView?( mainView?:string ): void;

		/** [Method] Sets the value of models  
		* @param models Array The new value. 
		*/
		setModels?( models?:any[] ): void;

		/** [Method] Sets the value of name  
		* @param name String The new value. 
		*/
		setName?( name?:string ): void;

		/** [Method] Sets the value of namespace  
		* @param namespace String The new value. 
		*/
		setNamespace?( namespace?:string ): void;

		/** [Method] Sets the value of stores  
		* @param stores Array The new value. 
		*/
		setStores?( stores?:any[] ): void;

		/** [Method] Sets the value of views  
		* @param views Array The new value. 
		*/
		setViews?( views?:any[] ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.app.route {
	export interface IQueue extends Ext.IBase {
		/** [Property] (Object) */
		token?: any;

		/** [Method] Clear all queued actions  */
		clearQueue?(): void;

		/** [Method] Handle the execution of a queued action and optionally clear all queued actions  
		* @param clearQueue Boolean If true was returned, will clear all queued actions. 
		*/
		onActionExecute?( clearQueue?:boolean ): void;

		/** [Method] Add a Ext app route Route to the queue  
		* @param route Ext.app.route.Route The route to add to the queue. 
		* @param args Object The arguments recognized by the {Ext.app.route.Route}. 
		*/
		queueAction?( route?:Ext.app.route.IRoute, args?:any ): void;

		/** [Method] Run the queue one by one  */
		runQueue?(): void;

	}

}

declare module Ext.app.route {
	export interface IRoute extends Ext.IBase {
		/** [Config Option] (String) */
		action?: string;
		/** [Config Option] (Boolean) */
		allowInactive?: boolean;
		/** [Config Option] (Function) */
		before?: any;
		/** [Config Option] (Boolean) */
		caseInsensitive?: boolean;
		/** [Config Option] (Object) */
		conditions?: any;
		/** [Config Option] (String) */
		controller?: string;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Attempts to recognize a given url string and return controller action pair for it  
		* @param url String The url to recognize. 
		* @returns Object/Boolean The matched data, or false if no match. 
		*/
		recognize?( url?:string ): any;

	}

}

declare module Ext.app.route {
	export interface IRouter extends Ext.IBase {
	}
	export class Router {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (String) */
		static multipleToken: string;

		/** [Property] (Boolean) */
		static queueRoutes: boolean;

		/** [Property] (Ext.app.route.Route[]) */
		static routes: Ext.app.route.IRoute[];

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Clear all the recognized routes  */
		static clear(): void;

		/** [Method] Create the Ext app route Route instance and connect to the Ext app route Router singleton  
		* @param url String The url to recognize. 
		* @param action String The action on the controller to execute when the url is matched. 
		* @param controller Ext.app.Controller The controller associated with the Ext.app.route.Route 
		*/
		static connect( url?:string, action?:string, controller?:Ext.app.IController ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Disconnects all routes for a controller  
		* @param controller Ext.app.Controller The controller to disconnect routes from. 
		*/
		static disconnectAll( controller?:Ext.app.IController ): void;

		/** [Method] Convenience method which just calls the supplied function with the Ext app route Router singleton  
		* @param fn Function The function to call 
		*/
		static draw( fn?:any ): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Recognizes a url string connected to the Router return the controller action pair plus any additional config associa  
		* @param url String The url to recognize. 
		* @returns Object/Boolean If the url was recognized, the controller and action to call, else false. 
		*/
		static recognize( url?:string ): any;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.app {
	export interface IUtil extends Ext.IBase {
	}

}

declare module Ext.app {
	export interface IViewController extends Ext.app.IBaseController, Ext.mixin.IFactoryable {
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Method] Called before the view initializes  
		* @param view Ext.Component The view 
		*/
		beforeInit?( view?:Ext.IComponent ): void;

		/** [Method] This method closes the associated view  */
		closeView?(): void;

		/** [Method] Adds listeners to components selected via Ext ComponentQuery  
		* @param selectors Object 
		* @param listeners Object 
		*/
		control?( selectors?:any, listeners?:any ): void;

		/** [Method] Destroy the view controller  */
		destroy?(): void;

		/** [Method] Fires an event on the view  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireViewEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Returns the value of closeViewAction  
		* @returns String 
		*/
		getCloseViewAction?(): string;

		/** [Method] Returns an object holding the descendants of this view keyed by their reference  
		* @returns Object An object with each child reference. This will be null if this container has no descendants with a reference specified. 
		*/
		getReferences?(): any;

		/** [Method] Get a Ext data Session attached to the view for this controller  
		* @returns Ext.data.Session The session. null if no session is found. 
		*/
		getSession?(): Ext.data.ISession;

		/** [Method] Get a Ext data Store attached to the ViewModel attached to this controller  
		* @param name String The name of the store. 
		* @returns Ext.data.Store The store. null if no store is found, or there is no Ext.app.ViewModel attached to the view for this controller. 
		*/
		getStore?( name?:string ): Ext.data.IStore;

		/** [Method] Get the view for this controller  
		* @returns Ext.Component The view. 
		*/
		getView?(): Ext.IComponent;

		/** [Method] Get a Ext app ViewModel attached to the view for this controller  
		* @returns Ext.app.ViewModel The ViewModel. null if no ViewModel is found. 
		*/
		getViewModel?(): Ext.app.IViewModel;

		/** [Method] Called when the view initializes  
		* @param view Ext.Component The view 
		*/
		init?( view?:Ext.IComponent ): void;

		/** [Method] Called when the view model instance for an attached view is first created  
		* @param viewModel Ext.app.ViewModel The ViewModel 
		*/
		initViewModel?( viewModel?:Ext.app.IViewModel ): void;

		/** [Method] Adds listeners to different event sources also called event domains  
		* @param to Object 
		* @param controller Object 
		*/
		listen?( to?:any, controller?:any ): void;

		/** [Method] Get a reference to a component set with the Ext Component reference configuration  
		* @param key String The key for the reference 
		* @returns Ext.Component The component, null if the reference doesn't exist. 
		*/
		lookupReference?( key?:string ): Ext.IComponent;

		/** [Method] Sets the value of closeViewAction  
		* @param closeViewAction String The new value. 
		*/
		setCloseViewAction?( closeViewAction?:string ): void;

	}

}

declare module Ext.app {
	export interface IViewModel extends Ext.IBase, Ext.mixin.IFactoryable, Ext.mixin.IIdentifiable {
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (Object) */
		formulas?: any;
		/** [Config Option] (Object) */
		links?: any;
		/** [Config Option] (Ext.app.ViewModel) */
		parent?: Ext.app.IViewModel;
		/** [Config Option] (String/Ext.data.schema.Schema) */
		schema?: any;
		/** [Config Option] (Ext.data.Session) */
		session?: Ext.data.ISession;
		/** [Config Option] (Object) */
		stores?: any;
		/** [Config Option] (Ext.container.Container) */
		view?: Ext.container.IContainer;
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Method] This method requests that data in this ViewModel be delivered to the specified callback  
		* @param descriptor String/Object/Array The bind descriptor. See class description for details. 
		* @param callback Function The function to call with the value of the bound property. 
		* @param scope Object The scope (this pointer) for the callback. 
		* @param options Object 
		* @returns Ext.app.bind.BaseBinding/Ext.app.bind.Binding The binding. 
		*/
		bind?( descriptor?:any, callback?:any, scope?:any, options?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Get a value from the data for this viewmodel  
		* @param path String The path of the data to retrieve.  var value = vm.get('theUser.address.city'); 
		* @returns Object The data stored at the passed path. 
		*/
		get?( path?:string ): any;

		/** [Method] Returns the value of data  
		* @returns Object 
		*/
		getData?(): any;

		/** [Method] Returns the value of formulas  
		* @returns Object 
		*/
		getFormulas?(): any;

		/** [Method] Retrieves the id of this component  
		* @returns String id 
		*/
		getId?(): string;

		/** [Method] Returns the value of links  
		* @returns Object 
		*/
		getLinks?(): any;

		/** [Method] Returns the value of parent  
		* @returns Ext.app.ViewModel 
		*/
		getParent?(): Ext.app.IViewModel;

		/** [Method] Returns the value of schema  
		* @returns String/Ext.data.schema.Schema 
		*/
		getSchema?(): any;

		/** [Method] Gets the session attached to this or a parent ViewModel  
		* @returns Ext.data.Session The session. null if no session exists. 
		*/
		getSession?(): Ext.data.ISession;

		/** [Method] Gets a store configured via the stores configuration  
		* @param key String The name of the store. 
		* @returns Ext.data.Store The store. null if no store exists. 
		*/
		getStore?( key?:string ): Ext.data.IStore;

		/** [Method] Returns the value of view  
		* @returns Ext.container.Container 
		*/
		getView?(): Ext.container.IContainer;

		/** [Method] Create a link to a reference  
		* @param key String The name for the link. 
		* @param reference Object The reference descriptor. 
		*/
		linkTo?( key?:string, reference?:any ): void;

		/** [Method] Forces all bindings in this ViewModel hierarchy to evaluate immediately  */
		notify?(): void;

		/** [Method] Set a value in the data for this viewmodel  
		* @param path Object/String The path of the value to set, or an object literal to set at the root of the viewmodel. 
		* @param value Object The data to set at the value. If the value is an object literal, any required paths will be created. // Set a single property at the root level viewModel.set('expiry', Ext.Date.add(new Date(), Ext.Date.DAY, 7)); console.log(viewModel.get('expiry')); // Sets a single property in user.address, does not overwrite any hierarchy. viewModel.set('user.address.city', 'London'); console.log(viewModel.get('user.address.city')); // Sets 2 properties of "user". Overwrites any existing hierarchy. viewModel.set('user', {firstName: 'Foo', lastName: 'Bar'}); console.log(viewModel.get('user.firstName')); // Sets a single property at the root level. Overwrites any existing hierarchy. viewModel.set({rootKey: 1}); console.log(viewModel.get('rootKey')); 
		*/
		set?( path?:any, value?:any ): void;

		/** [Method] Sets the value of data  
		* @param data Object The new value. 
		*/
		setData?( data?:any ): void;

		/** [Method] Sets the value of formulas  
		* @param formulas Object The new value. 
		*/
		setFormulas?( formulas?:any ): void;

		/** [Method] Sets the value of links  
		* @param links Object The new value. 
		*/
		setLinks?( links?:any ): void;

		/** [Method] Sets the value of parent  
		* @param parent Ext.app.ViewModel The new value. 
		*/
		setParent?( parent?:Ext.app.IViewModel ): void;

		/** [Method] Sets the value of schema  
		* @param schema String/Ext.data.schema.Schema The new value. 
		*/
		setSchema?( schema?:any ): void;

		/** [Method] Sets the value of session  
		* @param session Ext.data.Session The new value. 
		*/
		setSession?( session?:Ext.data.ISession ): void;

		/** [Method] Sets the value of stores  
		* @param stores Object The new value. 
		*/
		setStores?( stores?:any ): void;

		/** [Method] Sets the value of view  
		* @param view Ext.container.Container The new value. 
		*/
		setView?( view?:Ext.container.IContainer ): void;

	}

}

declare module Ext {
	export interface IArray {
	}
	export class Array {
		/** [Method] This method returns the index that a given item would be inserted into the given sorted array  
		* @param array Object[] The array to search. 
		* @param item Object The item that you want to insert into the array. 
		* @param begin Number The first index in the array to consider. 
		* @param end Number The index that marks the end of the range to consider. The item at this index is not considered. 
		* @param compareFn Function The comparison function that matches the sort order of the array. The default compareFn compares items using less-than and greater-than operators. 
		* @returns Number The index for the given item in the given array based on the current sorters. 
		*/
		static binarySearch( array?:any[], item?:any, begin?:number, end?:number, compareFn?:any ): number;

		/** [Method] Filter through an array and remove empty item as defined in Ext isEmpty  
		* @param array Array 
		* @returns Array results 
		*/
		static clean( array?:any[] ): any[];

		/** [Method] Clone a flat array without referencing the previous one  
		* @param array Array The array. 
		* @returns Array The clone array. 
		*/
		static clone( array?:any[] ): any[];

		/** [Method] Checks whether or not the given array contains the specified item  
		* @param array Array The array to check. 
		* @param item Object The item to find. 
		* @returns Boolean true if the array contains the item, false otherwise. 
		*/
		static contains( array?:any[], item?:any ): boolean;

		/** [Method] Perform a set difference A B by subtracting all items in array B from array A  
		* @param arrayA Array 
		* @param arrayB Array 
		* @returns Array difference 
		*/
		static difference( arrayA?:any[], arrayB?:any[] ): any[];

		/** [Method] Iterates an array or an iterable value and invoke the given callback function for each item  
		* @param iterable Array/NodeList/Object The value to be iterated. If this argument is not iterable, the callback function is called once. 
		* @param fn Function The callback function. If it returns false, the iteration stops and this method returns the current index. 
		* @param scope Object The scope (this reference) in which the specified function is executed. 
		* @param reverse Boolean Reverse the iteration order (loop from the end to the beginning). 
		* @returns Boolean See description for the fn parameter. 
		*/
		static each( iterable?:any, fn?:any, scope?:any, reverse?:boolean ): boolean;

		/** [Method] Shallow compares the contents of 2 arrays using strict equality  
		* @param array1 Array 
		* @param array2 Array 
		* @returns Boolean true if the arrays are equal. 
		*/
		static equals( array1?:any[], array2?:any[] ): boolean;

		/** [Method] Removes items from an array  
		* @param array Array The Array on which to replace. 
		* @param index Number The index in the array at which to operate. 
		* @param removeCount Number The number of items to remove at index. 
		* @returns Array The array passed. 
		*/
		static erase( array?:any[], index?:number, removeCount?:number ): any[];

		/** [Method] Executes the specified function for each array element until the function returns a falsy value  
		* @param array Array 
		* @param fn Function Callback function for each item. 
		* @param scope Object Callback function scope. 
		* @returns Boolean treu if no false value is returned by the callback function. 
		*/
		static every( array?:any[], fn?:any, scope?:any ): boolean;

		/** [Method] Creates a new array with all of the elements of this array for which the provided filtering function returns a truthy  
		* @param array Array 
		* @param fn Function Callback function for each item. 
		* @param scope Object Callback function scope. 
		* @returns Array results 
		*/
		static filter( array?:any[], fn?:any, scope?:any ): any[];

		/** [Method] Returns the first item in the array which elicits a truthy return value from the passed selection function  
		* @param array Array The array to search 
		* @param fn Function The selection function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the array 
		* @returns Object The first item in the array which returned true from the selection function, or null if none was found. 
		*/
		static findBy( array?:any[], fn?:any, scope?:any ): any;

		/** [Method] Recursively flattens into 1 d Array  
		* @param array Array The array to flatten 
		* @returns Array The 1-d array. 
		*/
		static flatten( array?:any[] ): any[];

		/** [Method] Iterates an array and invoke the given callback function for each item  
		* @param array Array The array to iterate. 
		* @param fn Function The callback function. 
		* @param scope Object The execution scope (this) in which the specified function is executed. 
		*/
		static forEach( array?:any[], fn?:any, scope?:any ): void;

		/** [Method] Converts a value to an array if it s not already an array returns An empty array if given value is undefined or n  
		* @param value Object The value to convert to an array if it's not already is an array. 
		* @param newReference Boolean true to clone the given array and return a new reference if necessary. 
		* @returns Array array 
		*/
		static from( value?:any, newReference?:boolean ): any[];

		/** [Method] Push an item into the array only if the array doesn t contain it yet  
		* @param array Array The array. 
		* @param item Object The item to include. 
		*/
		static include( array?:any[], item?:any ): void;

		/** [Method] Get the index of the provided item in the given array a supplement for the missing arrayPrototype indexOf in Interne  
		* @param array Array The array to check. 
		* @param item Object The item to find. 
		* @param from Number The index at which to begin the search. 
		* @returns Number The index of item in the array (or -1 if it is not found). 
		*/
		static indexOf( array?:any[], item?:any, from?:number ): number;

		/** [Method] Inserts items in to an array  
		* @param array Array The Array in which to insert. 
		* @param index Number The index in the array at which to operate. 
		* @param items Array The array of items to insert at index. 
		* @returns Array The array passed. 
		*/
		static insert( array?:any[], index?:number, items?:any[] ): any[];

		/** [Method] Merge multiple arrays into one with unique items that exist in all of the arrays  
		* @param array1 Array 
		* @param array2 Array 
		* @param etc Array 
		* @returns Array intersect 
		*/
		static intersect( array1?:any[], array2?:any[], etc?:any[] ): any[];

		/** [Method] Creates a new array with the results of calling a provided function on every element in this array  
		* @param array Array 
		* @param fn Function Callback function for each item. 
		* @param scope Object Callback function scope 
		* @returns Array results 
		*/
		static map( array?:any[], fn?:any, scope?:any ): any[];

		/** [Method] Returns the maximum value in the Array  
		* @param array Array/NodeList The Array from which to select the maximum value. 
		* @param comparisonFn Function a function to perform the comparison which determines maximization. If omitted the ">" operator will be used. Note: gt = 1; eq = 0; lt = -1 
		* @returns Object maxValue The maximum value. 
		*/
		static max( array?:any, comparisonFn?:any ): any;

		/** [Method] Calculates the mean of all items in the array  
		* @param array Array The Array to calculate the mean value of. 
		* @returns Number The mean. 
		*/
		static mean( array?:any[] ): number;

		/** [Method] Merge multiple arrays into one with unique items  
		* @param array1 Array 
		* @param array2 Array 
		* @param etc Array 
		* @returns Array merged 
		*/
		static merge( array1?:any[], array2?:any[], etc?:any[] ): any[];

		/** [Method] Returns the minimum value in the Array  
		* @param array Array/NodeList The Array from which to select the minimum value. 
		* @param comparisonFn Function a function to perform the comparison which determines minimization. If omitted the "&lt;" operator will be used. Note: gt = 1; eq = 0; lt = -1 
		* @returns Object minValue The minimum value. 
		*/
		static min( array?:any, comparisonFn?:any ): any;

		/** [Method] A function used to sort an array by numeric value  
		* @param a Object 
		* @param b Object 
		*/
		static numericSortFn( a?:any, b?:any ): void;

		/** [Method] Plucks the value of a property from each item in the Array  
		* @param array Array/NodeList The Array of items to pluck the value from. 
		* @param propertyName String The property name to pluck from each element. 
		* @returns Array The value from each item in the Array. 
		*/
		static pluck( array?:any, propertyName?:string ): any[];

		/** [Method] Pushes new items onto the end of an Array  
		* @param target Array The Array onto which to push new items 
		* @param elements Object... The elements to add to the array. Each parameter may be an Array, in which case all the elements of that Array will be pushed into the end of the destination Array. 
		* @returns Array An array containing all the new items push onto the end. 
		*/
		static push( target:any[], ...elements:any[] ): any[];

		/** [Method] Removes the specified item from the array if it exists  
		* @param array Array The array. 
		* @param item Object The item to remove. 
		* @returns Array The passed array. 
		*/
		static remove( array?:any[], item?:any ): any[];

		/** [Method] Removes item s at the specified index  
		* @param array Array The array. 
		* @param index Number The index of the item to be removed. 
		* @param count Number The number of items to be removed. 
		* @returns Array The passed array. 
		*/
		static removeAt( array?:any[], index?:number, count?:number ): any[];

		/** [Method] Replaces items in an array  
		* @param array Array The Array on which to replace. 
		* @param index Number The index in the array at which to operate. 
		* @param removeCount Number The number of items to remove at index (can be 0). 
		* @param insert Array An array of items to insert at index. 
		* @returns Array The array passed. 
		*/
		static replace( array?:any[], index?:number, removeCount?:number, insert?:any[] ): any[];

		/** [Method] Returns a shallow copy of a part of an array  
		* @param array Array The array (or arguments object). 
		* @param begin Number The index at which to begin. Negative values are offsets from the end of the array. 
		* @param end Number The index at which to end. The copied items do not include end. Negative values are offsets from the end of the array. If end is omitted, all items up to the end of the array are copied. 
		* @returns Array The copied piece of the array. 
		*/
		static slice( array?:any[], begin?:number, end?:number ): any[];

		/** [Method] Executes the specified function for each array element until the function returns a truthy value  
		* @param array Array 
		* @param fn Function Callback function for each item. 
		* @param scope Object Callback function scope. 
		* @returns Boolean true if the callback function returns a truthy value. 
		*/
		static some( array?:any[], fn?:any, scope?:any ): boolean;

		/** [Method] Sorts the elements of an Array in a stable manner equivalently keyed values do not move relative to each other 
		* @param array Array The array to sort. 
		* @param sortFn Function The comparison function. 
		* @returns Array The sorted array. 
		*/
		static sort( array?:any[], sortFn?:any ): any[];

		/** [Method] Replaces items in an array  
		* @param array Array The Array on which to replace. 
		* @param index Number The index in the array at which to operate. 
		* @param removeCount Number The number of items to remove at index (can be 0). 
		* @param elements Object... The elements to add to the array. If you don't specify any elements, splice simply removes elements from the array. 
		* @returns Array An array containing the removed items. 
		*/
		static splice( array:any[], index:number, removeCount:number, ...elements:any[] ): any[];

		/** [Method] Calculates the sum of all items in the given array  
		* @param array Array The Array to calculate the sum value of. 
		* @returns Number The sum. 
		*/
		static sum( array?:any[] ): number;

		/** [Method] Converts any iterable numeric indices and a length property into a true array  
		* @param iterable Object the iterable object to be turned into a true Array. 
		* @param start Number a zero-based index that specifies the start of extraction. 
		* @param end Number a 1-based index that specifies the end of extraction. 
		* @returns Array 
		*/
		static toArray( iterable?:any, start?:number, end?:number ): any[];

		/** [Method] Creates a map object keyed by the elements of the given array  
		* @param array Array The Array to create the map from. 
		* @param getKey String/Function Name of the object property to use as a key or a function to extract the key. 
		* @param scope Object Value of this inside callback specified for getKey. 
		* @returns Object The resulting map. 
		*/
		static toMap( array?:any[], getKey?:any, scope?:any ): any;

		/** [Method] Creates a map object keyed by a property of elements of the given array  
		* @param array Array The Array to create the map from. 
		* @param getKey String/Function Name of the object property to use as a key or a function to extract the key. 
		* @param scope Object Value of this inside callback. This parameter is only passed when getKey is a function. If getKey is not a function, the 3rd argument is arrayify. 
		* @param arrayify Number Pass 1 to create arrays for all map entries or 2 to create arrays for map entries that have 2 or more items with the same key. This only applies when getKey is specified. By default the map will hold the last entry with a given key. 
		* @returns Object The resulting map. 
		*/
		static toValueMap( array?:any[], getKey?:any, scope?:any, arrayify?:number ): any;

		/** [Method] Merge multiple arrays into one with unique items  
		* @param array1 Array 
		* @param array2 Array 
		* @param etc Array 
		* @returns Array merged 
		*/
		static union( array1?:any[], array2?:any[], etc?:any[] ): any[];

		/** [Method] Returns a new array with unique items  
		* @param array Array 
		* @returns Array results 
		*/
		static unique( array?:any[] ): any[];

	}

}

declare module Ext {
	export interface IAssert {
		/** [Method] Checks that the first argument is falsey and throws an Error if it is not  
		* @param b Object 
		* @param msg Object 
		*/
		falsey?( b?:any, msg?:any ): void;

		/** [Method] Checks that the first argument is falsey and throws an Error if it is not  
		* @param object Object 
		* @param property Object 
		*/
		falseyProp?( object?:any, property?:any ): void;

		/** [Method] Checks that the first argument is truthy and throws an Error if it is not  
		* @param b Object 
		* @param msg Object 
		*/
		truthy?( b?:any, msg?:any ): void;

		/** [Method] Checks that the first argument is truthy and throws an Error if it is not  
		* @param object Object 
		* @param property Object 
		*/
		truthyProp?( object?:any, property?:any ): void;

	}

}

declare module Ext {
	export interface IBase extends Ext.IClass {
		/** [Property] (Boolean) */
		isConfiguring?: boolean;

		/** [Property] (Boolean) */
		isFirstInstance?: boolean;

		/** [Property] (Boolean) */
		isInstance?: boolean;

		/** [Property] (Ext.Class) */
		self?: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		callOverridden?( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		callParent?( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		callSuper?( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		getConfig?( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		getInitialConfig?( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		initConfig?( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		setConfig?( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		statics?(): Ext.IClass;

	}
	export class Base {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext {
	export interface IBrowser extends Ext.env.IBrowser {
	}
	export class Browser {
		/** [Property] (String) */
		static engineName: string;

		/** [Property] (Ext.Version) */
		static engineVersion: Ext.IVersion;

		/** [Property] (Boolean) */
		static isSecure: boolean;

		/** [Property] (Boolean) */
		static isStrict: boolean;

		/** [Property] (String) */
		static name: string;

		/** [Property] (String) */
		static userAgent: string;

		/** [Property] (Ext.Version) */
		static version: Ext.IVersion;

		/** [Method] A hybrid property can be either accessed as a method call for example  if Ext browser is IE 
		* @param name String The OS name to check. 
		* @returns Boolean 
		*/
		static is( name?:string ): boolean;

	}

}

declare module Ext.button {
	export interface IButton extends Ext.IComponent, Ext.mixin.IQueryable {
		/** [Config Option] (Boolean) */
		allowDepress?: boolean;
		/** [Config Option] (String) */
		arrowAlign?: string;
		/** [Config Option] (String) */
		arrowCls?: string;
		/** [Config Option] (Boolean) */
		arrowVisible?: boolean;
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		clickEvent?: string;
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		destroyMenu?: boolean;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Boolean) */
		enableToggle?: boolean;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (Boolean) */
		handleMouseEvents?: boolean;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		href?: string;
		/** [Config Option] (String) */
		hrefTarget?: string;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconAlign?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (Ext.menu.Menu/String/Object) */
		menu?: any;
		/** [Config Option] (String) */
		menuAlign?: string;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (String) */
		overCls?: string;
		/** [Config Option] (String) */
		overflowText?: string;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (Boolean) */
		pressed?: boolean;
		/** [Config Option] (Boolean) */
		preventDefault?: boolean;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/Object) */
		repeat?: any;
		/** [Config Option] ("small"/"medium"/"large") */
		scale?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		showEmptyMenu?: boolean;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		textAlign?: string;
		/** [Config Option] (String) */
		toggleGroup?: string;
		/** [Config Option] (Function/String) */
		toggleHandler?: any;
		/** [Config Option] (String/Object) */
		tooltip?: any;
		/** [Config Option] (String) */
		tooltipType?: string;
		/** [Config Option] (String/Number) */
		value?: any;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Ext.Template) */
		template?: Ext.ITemplate;

		/** [Method] Retrieves the first direct child of this container which matches the passed selector or component  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching child Ext.Component (or null if no match was found). 
		*/
		child?( selector?:any ): any;

		/** [Method] Disable the component  
		* @param silent Object 
		*/
		disable?( silent?:any ): void;

		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found). 
		*/
		down?( selector?:any ): any;

		/** [Method] Enable the component 
		* @param silent Object 
		*/
		enable?( silent?:any ): void;

		/** [Method] Returns the value of arrowVisible  
		* @returns Boolean 
		*/
		getArrowVisible?(): boolean;

		/** [Method] Returns the value of iconAlign  
		* @returns String 
		*/
		getIconAlign?(): string;

		/** [Method] Get the menu for this button  
		* @returns Ext.menu.Menu The menu. null if no menu is configured. 
		*/
		getMenu?(): Ext.menu.IMenu;

		/** [Method] This method returns an object which provides substitution parameters for the XTemplate used to create this Button s D  
		* @returns Object Substitution data for a Template. The default implementation which provides data for the default template returns an Object containing the following properties: 
		*/
		getTemplateArgs?(): any;

		/** [Method] Returns the value of text  
		* @returns String 
		*/
		getText?(): string;

		/** [Method] Returns the value of textAlign  
		* @returns String 
		*/
		getTextAlign?(): string;

		/** [Method] Returns true if the button has a menu and it is visible 
		* @returns Boolean 
		*/
		hasVisibleMenu?(): boolean;

		/** [Method] Hides this button s menu if it has one  
		* @returns Ext.button.Button this 
		*/
		hideMenu?(): Ext.button.IButton;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] Returns true if the passed event s x y coordinates are within the trigger region 
		* @param e Ext.event.Event 
		*/
		isWithinTrigger?( e?:Ext.event.IEvent ): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned. 
		* @returns Ext.Component[] Components which matched the selector 
		*/
		query?( selector?:string ): Ext.IComponent[];

		/** [Method] Retrieves all descendant components which match the passed function  
		* @param fn Function The matcher function. It will be called with a single argument, the component being tested. 
		* @param scope Object The scope in which to run the function. If not specified, it will default to the active component. 
		* @returns Ext.Component[] Components matched by the passed function 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.IComponent[];

		/** [Method] Finds a component at any level under this container matching the id itemId  
		* @param id String The id to find 
		* @returns Ext.Component The matching id, null if not found 
		*/
		queryById?( id?:string ): Ext.IComponent;

		/** [Method] Sets the value of arrowVisible  
		* @param arrowVisible Boolean The new value. 
		*/
		setArrowVisible?( arrowVisible?:boolean ): void;

		/** [Method] Sets this button s glyph 
		* @param glyph Number/String the numeric charCode or string charCode/font-family. This parameter expects a format consistent with that of glyph 
		* @returns Ext.button.Button this 
		*/
		setGlyph?( glyph?:any ): Ext.button.IButton;

		/** [Method] Assigns this Button s click handler 
		* @param handler Function The function to call when the button is clicked 
		* @param scope Object The scope (this reference) in which the handler function is executed. Defaults to this Button. 
		* @returns Ext.button.Button this 
		*/
		setHandler?( handler?:any, scope?:any ): Ext.button.IButton;

		/** [Method] Sets the href of the embedded anchor element to the passed URL  
		* @param href String The URL to set in the anchor element. 
		*/
		setHref?( href?:string ): void;

		/** [Method] Sets the background image inline style of the button  
		* @param icon String The path to an image to display in the button 
		* @returns Ext.button.Button this 
		*/
		setIcon?( icon?:string ): Ext.button.IButton;

		/** [Method] Sets the value of iconAlign  
		* @param iconAlign String The new value. 
		*/
		setIconAlign?( iconAlign?:string ): void;

		/** [Method] Sets the CSS class that provides a background image to use as the button s icon  
		* @param cls String The CSS class providing the icon image 
		* @returns Ext.button.Button this 
		*/
		setIconCls?( cls?:string ): Ext.button.IButton;

		/** [Method] Sets a new menu for this button  
		* @param menu Ext.menu.Menu/String/Object/null Accepts a menu component, a menu id or a menu config. 
		* @param destroyMenu Boolean By default, will destroy the previous set menu and remove it from the menu manager. Pass false to prevent the destroy. 
		*/
		setMenu?( menu?:any, destroyMenu?:boolean ): void;

		/** [Method] Sets the href of the link dynamically according to the params passed and any baseParams configured  
		* @param params Object Parameters to use in the href URL. 
		*/
		setParams?( params?:any ): void;

		/** [Method] Sets the pressed state of this button  
		* @param pressed Boolean Pass false to clear the pressed state. 
		* @returns Ext.button.Button this 
		*/
		setPressed?( pressed?:boolean ): Ext.button.IButton;

		/** [Method] Method to change the scale of the button  
		* @param scale String The scale to change to. 
		*/
		setScale?( scale?:string ): void;

		/** [Method] Sets the value of text  
		* @param text String The new value. 
		*/
		setText?( text?:string ): void;

		/** [Method] Sets the value of textAlign  
		* @param textAlign String The new value. 
		*/
		setTextAlign?( textAlign?:string ): void;

		/** [Method] Sets the tooltip for this Button  
		* @param tooltip String/Object This may be:  String : A string to be used as innerHTML (html tags are accepted) to show in a tooltip Object : A configuration object for Ext.tip.QuickTipManager.register.  
		* @returns Ext.button.Button this 
		*/
		setTooltip?( tooltip?:any ): Ext.button.IButton;

		/** [Method] Sets the UI for the component  
		* @param ui Object 
		*/
		setUI?( ui?:any ): void;

		/** [Method] Shows this button s menu if it has one  
		* @param clickEvent Object 
		*/
		showMenu?( clickEvent?:any ): void;

		/** [Method] If a state it passed it becomes the pressed state otherwise the current state is toggled  
		* @param state Boolean Force a particular state 
		* @param suppressEvent Boolean True to stop events being fired when calling this method. 
		* @returns Ext.button.Button this 
		*/
		toggle?( state?:boolean, suppressEvent?:boolean ): Ext.button.IButton;

		/** [Method] Traverses the tree rooted at this node in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPostOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at this node in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPreOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

	}

}

declare module Ext {
	export interface IButton extends Ext.IComponent, Ext.mixin.IQueryable {
		/** [Config Option] (Boolean) */
		allowDepress?: boolean;
		/** [Config Option] (String) */
		arrowAlign?: string;
		/** [Config Option] (String) */
		arrowCls?: string;
		/** [Config Option] (Boolean) */
		arrowVisible?: boolean;
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		clickEvent?: string;
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		destroyMenu?: boolean;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Boolean) */
		enableToggle?: boolean;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (Boolean) */
		handleMouseEvents?: boolean;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		href?: string;
		/** [Config Option] (String) */
		hrefTarget?: string;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconAlign?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (Ext.menu.Menu/String/Object) */
		menu?: any;
		/** [Config Option] (String) */
		menuAlign?: string;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (String) */
		overCls?: string;
		/** [Config Option] (String) */
		overflowText?: string;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (Boolean) */
		pressed?: boolean;
		/** [Config Option] (Boolean) */
		preventDefault?: boolean;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/Object) */
		repeat?: any;
		/** [Config Option] ("small"/"medium"/"large") */
		scale?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		showEmptyMenu?: boolean;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		textAlign?: string;
		/** [Config Option] (String) */
		toggleGroup?: string;
		/** [Config Option] (Function/String) */
		toggleHandler?: any;
		/** [Config Option] (String/Object) */
		tooltip?: any;
		/** [Config Option] (String) */
		tooltipType?: string;
		/** [Config Option] (String/Number) */
		value?: any;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Ext.Template) */
		template?: Ext.ITemplate;

		/** [Method] Retrieves the first direct child of this container which matches the passed selector or component  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching child Ext.Component (or null if no match was found). 
		*/
		child?( selector?:any ): any;

		/** [Method] Disable the component  
		* @param silent Object 
		*/
		disable?( silent?:any ): void;

		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found). 
		*/
		down?( selector?:any ): any;

		/** [Method] Enable the component 
		* @param silent Object 
		*/
		enable?( silent?:any ): void;

		/** [Method] Returns the value of arrowVisible  
		* @returns Boolean 
		*/
		getArrowVisible?(): boolean;

		/** [Method] Returns the value of iconAlign  
		* @returns String 
		*/
		getIconAlign?(): string;

		/** [Method] Get the menu for this button  
		* @returns Ext.menu.Menu The menu. null if no menu is configured. 
		*/
		getMenu?(): Ext.menu.IMenu;

		/** [Method] This method returns an object which provides substitution parameters for the XTemplate used to create this Button s D  
		* @returns Object Substitution data for a Template. The default implementation which provides data for the default template returns an Object containing the following properties: 
		*/
		getTemplateArgs?(): any;

		/** [Method] Returns the value of text  
		* @returns String 
		*/
		getText?(): string;

		/** [Method] Returns the value of textAlign  
		* @returns String 
		*/
		getTextAlign?(): string;

		/** [Method] Returns true if the button has a menu and it is visible 
		* @returns Boolean 
		*/
		hasVisibleMenu?(): boolean;

		/** [Method] Hides this button s menu if it has one  
		* @returns Ext.button.Button this 
		*/
		hideMenu?(): Ext.button.IButton;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] Returns true if the passed event s x y coordinates are within the trigger region 
		* @param e Ext.event.Event 
		*/
		isWithinTrigger?( e?:Ext.event.IEvent ): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned. 
		* @returns Ext.Component[] Components which matched the selector 
		*/
		query?( selector?:string ): Ext.IComponent[];

		/** [Method] Retrieves all descendant components which match the passed function  
		* @param fn Function The matcher function. It will be called with a single argument, the component being tested. 
		* @param scope Object The scope in which to run the function. If not specified, it will default to the active component. 
		* @returns Ext.Component[] Components matched by the passed function 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.IComponent[];

		/** [Method] Finds a component at any level under this container matching the id itemId  
		* @param id String The id to find 
		* @returns Ext.Component The matching id, null if not found 
		*/
		queryById?( id?:string ): Ext.IComponent;

		/** [Method] Sets the value of arrowVisible  
		* @param arrowVisible Boolean The new value. 
		*/
		setArrowVisible?( arrowVisible?:boolean ): void;

		/** [Method] Sets this button s glyph 
		* @param glyph Number/String the numeric charCode or string charCode/font-family. This parameter expects a format consistent with that of glyph 
		* @returns Ext.button.Button this 
		*/
		setGlyph?( glyph?:any ): Ext.button.IButton;

		/** [Method] Assigns this Button s click handler 
		* @param handler Function The function to call when the button is clicked 
		* @param scope Object The scope (this reference) in which the handler function is executed. Defaults to this Button. 
		* @returns Ext.button.Button this 
		*/
		setHandler?( handler?:any, scope?:any ): Ext.button.IButton;

		/** [Method] Sets the href of the embedded anchor element to the passed URL  
		* @param href String The URL to set in the anchor element. 
		*/
		setHref?( href?:string ): void;

		/** [Method] Sets the background image inline style of the button  
		* @param icon String The path to an image to display in the button 
		* @returns Ext.button.Button this 
		*/
		setIcon?( icon?:string ): Ext.button.IButton;

		/** [Method] Sets the value of iconAlign  
		* @param iconAlign String The new value. 
		*/
		setIconAlign?( iconAlign?:string ): void;

		/** [Method] Sets the CSS class that provides a background image to use as the button s icon  
		* @param cls String The CSS class providing the icon image 
		* @returns Ext.button.Button this 
		*/
		setIconCls?( cls?:string ): Ext.button.IButton;

		/** [Method] Sets a new menu for this button  
		* @param menu Ext.menu.Menu/String/Object/null Accepts a menu component, a menu id or a menu config. 
		* @param destroyMenu Boolean By default, will destroy the previous set menu and remove it from the menu manager. Pass false to prevent the destroy. 
		*/
		setMenu?( menu?:any, destroyMenu?:boolean ): void;

		/** [Method] Sets the href of the link dynamically according to the params passed and any baseParams configured  
		* @param params Object Parameters to use in the href URL. 
		*/
		setParams?( params?:any ): void;

		/** [Method] Sets the pressed state of this button  
		* @param pressed Boolean Pass false to clear the pressed state. 
		* @returns Ext.button.Button this 
		*/
		setPressed?( pressed?:boolean ): Ext.button.IButton;

		/** [Method] Method to change the scale of the button  
		* @param scale String The scale to change to. 
		*/
		setScale?( scale?:string ): void;

		/** [Method] Sets the value of text  
		* @param text String The new value. 
		*/
		setText?( text?:string ): void;

		/** [Method] Sets the value of textAlign  
		* @param textAlign String The new value. 
		*/
		setTextAlign?( textAlign?:string ): void;

		/** [Method] Sets the tooltip for this Button  
		* @param tooltip String/Object This may be:  String : A string to be used as innerHTML (html tags are accepted) to show in a tooltip Object : A configuration object for Ext.tip.QuickTipManager.register.  
		* @returns Ext.button.Button this 
		*/
		setTooltip?( tooltip?:any ): Ext.button.IButton;

		/** [Method] Sets the UI for the component  
		* @param ui Object 
		*/
		setUI?( ui?:any ): void;

		/** [Method] Shows this button s menu if it has one  
		* @param clickEvent Object 
		*/
		showMenu?( clickEvent?:any ): void;

		/** [Method] If a state it passed it becomes the pressed state otherwise the current state is toggled  
		* @param state Boolean Force a particular state 
		* @param suppressEvent Boolean True to stop events being fired when calling this method. 
		* @returns Ext.button.Button this 
		*/
		toggle?( state?:boolean, suppressEvent?:boolean ): Ext.button.IButton;

		/** [Method] Traverses the tree rooted at this node in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPostOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at this node in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPreOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

	}

}

declare module Ext.button {
	export interface ICycle extends Ext.button.ISplit {
		/** [Config Option] (Function/String) */
		changeHandler?: any;
		/** [Config Option] (Number/String) */
		forceGlyph?: any;
		/** [Config Option] (String) */
		forceIcon?: string;
		/** [Config Option] (Object[]) */
		items?: any[];
		/** [Config Option] (String) */
		prependText?: string;
		/** [Config Option] (Boolean) */
		showText?: boolean;
		/** [Property] (Ext.menu.Menu) */
		menu?: Ext.menu.IMenu;

		/** [Method] Gets the currently active menu item  
		* @returns Ext.menu.CheckItem The active item 
		*/
		getActiveItem?(): Ext.menu.ICheckItem;

		/** [Method] Sets the button s active menu item  
		* @param item Ext.menu.CheckItem The item to activate 
		* @param suppressEvent Boolean True to prevent the change event and changeHandler from firing. 
		*/
		setActiveItem?( item?:Ext.menu.ICheckItem, suppressEvent?:boolean ): void;

		/** [Method] This is normally called internally on button click but can be called externally to advance the button s active item */
		toggleSelected?(): void;

	}

}

declare module Ext {
	export interface ICycleButton extends Ext.button.ISplit {
		/** [Config Option] (Function/String) */
		changeHandler?: any;
		/** [Config Option] (Number/String) */
		forceGlyph?: any;
		/** [Config Option] (String) */
		forceIcon?: string;
		/** [Config Option] (Object[]) */
		items?: any[];
		/** [Config Option] (String) */
		prependText?: string;
		/** [Config Option] (Boolean) */
		showText?: boolean;
		/** [Property] (Ext.menu.Menu) */
		menu?: Ext.menu.IMenu;

		/** [Method] Gets the currently active menu item  
		* @returns Ext.menu.CheckItem The active item 
		*/
		getActiveItem?(): Ext.menu.ICheckItem;

		/** [Method] Sets the button s active menu item  
		* @param item Ext.menu.CheckItem The item to activate 
		* @param suppressEvent Boolean True to prevent the change event and changeHandler from firing. 
		*/
		setActiveItem?( item?:Ext.menu.ICheckItem, suppressEvent?:boolean ): void;

		/** [Method] This is normally called internally on button click but can be called externally to advance the button s active item */
		toggleSelected?(): void;

	}

}

declare module Ext.button {
	export interface IManager extends Ext.IBase {
	}
	export class Manager {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Gets the pressed button in the passed group or null 
		* @param groupName String 
		* @returns Ext.button.Button 
		*/
		static getPressed( groupName?:string ): Ext.button.IButton;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext {
	export interface IButtonToggleManager extends Ext.IBase {
	}
	export class ButtonToggleManager {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Gets the pressed button in the passed group or null 
		* @param groupName String 
		* @returns Ext.button.Button 
		*/
		static getPressed( groupName?:string ): Ext.button.IButton;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.button {
	export interface ISegmented extends Ext.container.IContainer {
		/** [Config Option] (Boolean) */
		allowDepress?: boolean;
		/** [Config Option] (Boolean) */
		allowMultiple?: boolean;
		/** [Config Option] (Boolean) */
		allowToggle?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		defaultUI?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (String/Number/String[]/Number[]) */
		value?: any;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Boolean) */
		maskOnDisable?: boolean;

		/** [Method] Occurs before componentLayout is run  */
		beforeLayout?(): void;

		/** [Method] Returns the value of allowDepress  
		* @returns Boolean 
		*/
		getAllowDepress?(): boolean;

		/** [Method] Returns the value of allowMultiple  
		* @returns Boolean 
		*/
		getAllowMultiple?(): boolean;

		/** [Method] Returns the value of allowToggle  
		* @returns Boolean 
		*/
		getAllowToggle?(): boolean;

		/** [Method] Returns the value of defaultUI  
		* @returns String 
		*/
		getDefaultUI?(): string;

		/** [Method] Returns the value of vertical  
		* @returns Boolean 
		*/
		getVertical?(): boolean;

		/** [Method] This method is invoked after a new Component has been added  
		* @param item Object 
		*/
		onAdd?( item?:any ): void;

		/** [Method] This method is invoked after a new Component has been removed  
		* @param item Object 
		*/
		onRemove?( item?:any ): void;

		/** [Method] Sets the value of allowDepress  
		* @param allowDepress Boolean The new value. 
		*/
		setAllowDepress?( allowDepress?:boolean ): void;

		/** [Method] Sets the value of allowMultiple  
		* @param allowMultiple Boolean The new value. 
		*/
		setAllowMultiple?( allowMultiple?:boolean ): void;

		/** [Method] Sets the value of allowToggle  
		* @param allowToggle Boolean The new value. 
		*/
		setAllowToggle?( allowToggle?:boolean ): void;

		/** [Method] Sets the value of defaultUI  
		* @param defaultUI String The new value. 
		*/
		setDefaultUI?( defaultUI?:string ): void;

		/** [Method] Sets the value of vertical  
		* @param vertical Boolean The new value. 
		*/
		setVertical?( vertical?:boolean ): void;

	}

}

declare module Ext.button {
	export interface ISplit extends Ext.button.IButton {
		/** [Config Option] (Function/String) */
		arrowHandler?: any;
		/** [Config Option] (String) */
		arrowTooltip?: string;
		/** [Method] Sets this button s arrow click handler  
		* @param handler Function The function to call when the arrow is clicked. 
		* @param scope Object Scope for the function passed above. 
		*/
		setArrowHandler?( handler?:any, scope?:any ): void;

	}

}

declare module Ext {
	export interface ISplitButton extends Ext.button.IButton {
		/** [Config Option] (Function/String) */
		arrowHandler?: any;
		/** [Config Option] (String) */
		arrowTooltip?: string;
		/** [Method] Sets this button s arrow click handler  
		* @param handler Function The function to call when the arrow is clicked. 
		* @param scope Object Scope for the function passed above. 
		*/
		setArrowHandler?( handler?:any, scope?:any ): void;

	}

}

declare module Ext.chart {
	export interface IAbstractChart extends Ext.draw.IContainer {
		/** [Config Option] (Boolean/Object) */
		animation?: any;
		/** [Config Option] (Ext.chart.axis.Axis/Array/Object) */
		axes?: any;
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Array) */
		colors?: any[];
		/** [Config Option] (Object) */
		highlightItem?: any;
		/** [Config Option] (Object|Number|String) */
		insetPadding?: any;
		/** [Config Option] (Array) */
		interactions?: any[];
		/** [Config Option] (Ext.chart.Legend/Object) */
		legend?: any;
		/** [Config Option] (Ext.chart.series.Series/Array) */
		series?: any;
		/** [Config Option] (Ext.data.Store/String/Object) */
		store?: any;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (String) */
		theme?: string;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (String) */
		version?: string;

		/** [Method] Adds a Series to this chart  
		* @param newSeries Object/Object[]/Ext.chart.series.Series/Ext.chart.series.Series[] A config object describing the Series to add, or an instantiated Series object. Or an array of these. 
		*/
		addSeries?( newSeries?:any ): void;

		/** [Method] Defined in override Ext chart overrides AbstractChart  
		* @param width Object 
		* @param height Object 
		* @param oldWidth Object 
		* @param oldHeight Object 
		*/
		afterComponentLayout?( width?:any, height?:any, oldWidth?:any, oldHeight?:any ): void;

		/** [Method] Changes the data store bound to this chart and refreshes it  
		* @param store Ext.data.Store The store to bind to this chart. 
		*/
		bindStore?( store?:Ext.data.IStore ): void;

		/** [Method] Cancel a scheduled layout  */
		cancelLayout?(): void;

		/** [Method] Returns the value of axes  
		* @returns Ext.chart.axis.Axis/Array/Object 
		*/
		getAxes?(): any;

		/** [Method] Returns an axis instance based on the type of data passed  
		* @param axis String/Number/Ext.chart.axis.Axis You may request an axis by passing an id, the number of the array key returned by getAxes, or an axis instance. 
		* @returns Ext.chart.axis.Axis The axis requested 
		*/
		getAxis?( axis?:any ): Ext.chart.axis.IAxis;

		/** [Method] Returns the value of background  
		* @returns Object 
		*/
		getBackground?(): any;

		/** [Method] Returns the value of highlightItem  
		* @returns Object 
		*/
		getHighlightItem?(): any;

		/** [Method] Returns the value of insetPadding  
		* @returns Object|Number|String 
		*/
		getInsetPadding?(): any;

		/** [Method] Returns the value of interactions  
		* @returns Array 
		*/
		getInteractions?(): any[];

		/** [Method] Given an x y point relative to the chart find and return the first series item that matches that point  
		* @param x Number 
		* @param y Number 
		* @returns Object An object with series and item properties, or false if no item found. 
		*/
		getItemForPoint?( x?:number, y?:number ): any;

		/** [Method] Given an x y point relative to the chart find and return all series items that match that point  
		* @param x Number 
		* @param y Number 
		* @returns Array An array of objects with series and item properties. 
		*/
		getItemsForPoint?( x?:number, y?:number ): any[];

		/** [Method] Returns the value of legend  
		* @returns Ext.chart.Legend/Object 
		*/
		getLegend?(): any;

		/** [Method] Return the legend store that contains all the legend information  
		* @returns Ext.data.Store 
		*/
		getLegendStore?(): Ext.data.IStore;

		/** [Method] Returns the value of series  
		* @returns Ext.chart.series.Series/Array 
		*/
		getSeries?(): any;

		/** [Method] Returns the value of store  
		* @returns Ext.data.Store/String/Object 
		*/
		getStore?(): any;

		/** [Method] Returns the value of style  
		* @returns Object 
		*/
		getStyle?(): any;

		/** [Method] Get a surface by the given id or create one if it doesn t exist  
		* @param name Object 
		* @param type Object 
		* @returns Ext.draw.Surface 
		*/
		getSurface?( name?:any, type?:any ): Ext.draw.ISurface;

		/** [Method] Returns the value of theme  
		* @returns String 
		*/
		getTheme?(): string;

		/** [Method] This method is called to initialize the items collection  */
		initItems?(): void;

		/** [Method] Redraw the chart  */
		redraw?(): void;

		/** [Method] Remove a Series from this chart  
		* @param series Ext.chart.series.Series/String The Series or the id of the Series to remove. May be an array. 
		*/
		removeSeries?( series?:any ): void;

		/** [Method] Resume the layout initialized by thickness change */
		resumeThicknessChanged?(): void;

		/** [Method] Schedule a layout at next frame  */
		scheduleLayout?(): void;

		/** [Method] Sets the value of animation  
		* @param animation Boolean/Object The new value. 
		*/
		setAnimation?( animation?:any ): void;

		/** [Method] Sets the value of axes  
		* @param axes Ext.chart.axis.Axis/Array/Object The new value. 
		*/
		setAxes?( axes?:any ): void;

		/** [Method] Sets the value of background  
		* @param background Object The new value. 
		*/
		setBackground?( background?:any ): void;

		/** [Method] Sets the value of colors  
		* @param colors Array The new value. 
		*/
		setColors?( colors?:any[] ): void;

		/** [Method] Sets the value of highlightItem  
		* @param highlightItem Object The new value. 
		*/
		setHighlightItem?( highlightItem?:any ): void;

		/** [Method] Sets the value of insetPadding  
		* @param insetPadding Object|Number|String The new value. 
		*/
		setInsetPadding?( insetPadding?:any ): void;

		/** [Method] Sets the value of interactions  
		* @param interactions Array The new value. 
		*/
		setInteractions?( interactions?:any[] ): void;

		/** [Method] Sets the value of legend  
		* @param legend Ext.chart.Legend/Object The new value. 
		*/
		setLegend?( legend?:any ): void;

		/** [Method] Sets the value of series  
		* @param series Ext.chart.series.Series/Array The new value. 
		*/
		setSeries?( series?:any ): void;

		/** [Method] Sets the value of store  
		* @param store Ext.data.Store/String/Object The new value. 
		*/
		setStore?( store?:any ): void;

		/** [Method] Sets the value of style  
		* @param style Object The new value. 
		* @returns Ext.Component 
		*/
		setStyle?( style?:any ): Ext.IComponent;

		/** [Method] Sets the value of theme  
		* @param theme String The new value. 
		*/
		setTheme?( theme?:string ): void;

		/** [Method] Suspend the layout initialized by thickness change */
		suspendThicknessChanged?(): void;

	}

}

declare module Ext.chart.axis {
	export interface IAxis extends Ext.IBase, Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		adjustByMajorUnit?: boolean;
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Ext.chart.AbstractChart) */
		chart?: Ext.chart.IAbstractChart;
		/** [Config Option] (Array) */
		fields?: any[];
		/** [Config Option] (Number|Object) */
		floating?: any;
		/** [Config Option] (Object) */
		grid?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Object) */
		label?: any;
		/** [Config Option] (Boolean) */
		labelInSpan?: boolean;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Array|Object) */
		limits?: any;
		/** [Config Option] (Ext.chart.axis.Axis|String|Number) */
		linkedTo?: any;
		/** [Config Option] (Number) */
		majorTickSteps?: number;
		/** [Config Option] (Number) */
		margin?: number;
		/** [Config Option] (Number) */
		maxZoom?: number;
		/** [Config Option] (Number) */
		maximum?: number;
		/** [Config Option] (Number) */
		minZoom?: number;
		/** [Config Option] (Number) */
		minimum?: number;
		/** [Config Option] (Number) */
		minorTickSteps?: number;
		/** [Config Option] (Boolean) */
		needHighPrecision?: boolean;
		/** [Config Option] (String) */
		position?: string;
		/** [Config Option] (Boolean) */
		reconcileRange?: boolean;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (String|Object) */
		title?: any;
		/** [Config Option] (Number) */
		titleMargin?: number;
		/** [Config Option] (Array) */
		visibleRange?: any[];
		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the value of adjustByMajorUnit  
		* @returns Boolean 
		*/
		getAdjustByMajorUnit?(): boolean;

		/** [Method] Returns the value of background  
		* @returns Object 
		*/
		getBackground?(): any;

		/** [Method] Returns the value of chart  
		* @returns Ext.chart.AbstractChart 
		*/
		getChart?(): Ext.chart.IAbstractChart;

		/** [Method] Mapping data value into coordinate  
		* @param value * 
		* @param field String 
		* @param idx Number 
		* @param items Ext.util.MixedCollection 
		* @returns Number 
		*/
		getCoordFor?( value?:any, field?:string, idx?:number, items?:Ext.util.IMixedCollection ): number;

		/** [Method] Returns the value of fields  
		* @returns Array 
		*/
		getFields?(): any[];

		/** [Method] Returns the value of floating  
		* @returns Number|Object 
		*/
		getFloating?(): any;

		/** [Method] Returns the value of grid  
		* @returns Object 
		*/
		getGrid?(): any;

		/** [Method] Returns the value of hidden  
		* @returns Boolean 
		*/
		getHidden?(): boolean;

		/** [Method] Returns the value of increment  
		* @returns Number 
		*/
		getIncrement?(): number;

		/** [Method] Returns the value of label  
		* @returns Object 
		*/
		getLabel?(): any;

		/** [Method] Returns the value of labelInSpan  
		* @returns Boolean 
		*/
		getLabelInSpan?(): boolean;

		/** [Method] Returns the value of layout  
		* @returns Object|Ext.chart.axis.layout.Layout 
		*/
		getLayout?(): any;

		/** [Method] Returns the value of limits  
		* @returns Array|Object 
		*/
		getLimits?(): any;

		/** [Method] Returns the value of linkedTo  
		* @returns Ext.chart.axis.Axis|String|Number 
		*/
		getLinkedTo?(): any;

		/** [Method] Returns the value of majorTickSteps  
		* @returns Number 
		*/
		getMajorTickSteps?(): number;

		/** [Method] Returns the value of margin  
		* @returns Number 
		*/
		getMargin?(): number;

		/** [Method] Returns the value of maxZoom  
		* @returns Number 
		*/
		getMaxZoom?(): number;

		/** [Method] Returns the value of maximum  
		* @returns Number 
		*/
		getMaximum?(): number;

		/** [Method] Returns the value of minZoom  
		* @returns Number 
		*/
		getMinZoom?(): number;

		/** [Method] Returns the value of minimum  
		* @returns Number 
		*/
		getMinimum?(): number;

		/** [Method] Returns the value of minorTickSteps  
		* @returns Number 
		*/
		getMinorTickSteps?(): number;

		/** [Method] Returns the value of needHighPrecision  
		* @returns Boolean 
		*/
		getNeedHighPrecision?(): boolean;

		/** [Method] Returns the value of position  
		* @returns String 
		*/
		getPosition?(): string;

		/** [Method] Get the range derived from all the bound series  
		* @returns Array 
		*/
		getRange?(): any[];

		/** [Method] Returns the value of reconcileRange  
		* @returns Boolean 
		*/
		getReconcileRange?(): boolean;

		/** [Method] Returns the value of renderer  
		* @returns Function 
		*/
		getRenderer?(): any;

		/** [Method] Returns the value of segmenter  
		* @returns Object|Ext.chart.axis.segmenter.Segmenter 
		*/
		getSegmenter?(): any;

		/** [Method] Returns the value of style  
		* @returns Object 
		*/
		getStyle?(): any;

		/** [Method] Returns the value of title  
		* @returns String|Object 
		*/
		getTitle?(): any;

		/** [Method] Returns the value of titleMargin  
		* @returns Number 
		*/
		getTitleMargin?(): number;

		/** [Method] Returns the value of visibleRange  
		* @returns Array 
		*/
		getVisibleRange?(): any[];

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Invoked when data has changed  */
		processData?(): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Invokes renderFrame on this axis s surface s  */
		renderFrame?(): void;

		/** [Method] Override the Observable s method to redirect listener scope resolution to the chart  
		* @param defaultScope Object 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of adjustByMajorUnit  
		* @param adjustByMajorUnit Boolean The new value. 
		*/
		setAdjustByMajorUnit?( adjustByMajorUnit?:boolean ): void;

		/** [Method] Sets the value of background  
		* @param background Object The new value. 
		*/
		setBackground?( background?:any ): void;

		/** [Method] Sets the value of chart  
		* @param chart Ext.chart.AbstractChart The new value. 
		*/
		setChart?( chart?:Ext.chart.IAbstractChart ): void;

		/** [Method] Sets the value of fields  
		* @param fields Array The new value. 
		*/
		setFields?( fields?:any[] ): void;

		/** [Method] Sets the value of floating  
		* @param floating Number|Object The new value. 
		*/
		setFloating?( floating?:any ): void;

		/** [Method] Sets the value of grid  
		* @param grid Object The new value. 
		*/
		setGrid?( grid?:any ): void;

		/** [Method] Sets the value of hidden  
		* @param hidden Boolean The new value. 
		*/
		setHidden?( hidden?:boolean ): void;

		/** [Method] Sets the value of increment  
		* @param increment Number The new value. 
		*/
		setIncrement?( increment?:number ): void;

		/** [Method] Sets the value of label  
		* @param label Object The new value. 
		*/
		setLabel?( label?:any ): void;

		/** [Method] Sets the value of labelInSpan  
		* @param labelInSpan Boolean The new value. 
		*/
		setLabelInSpan?( labelInSpan?:boolean ): void;

		/** [Method] Sets the value of layout  
		* @param layout Object|Ext.chart.axis.layout.Layout The new value. 
		*/
		setLayout?( layout?:any ): void;

		/** [Method] Sets the value of limits  
		* @param limits Array|Object The new value. 
		*/
		setLimits?( limits?:any ): void;

		/** [Method] Sets the value of linkedTo  
		* @param linkedTo Ext.chart.axis.Axis|String|Number The new value. 
		*/
		setLinkedTo?( linkedTo?:any ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of majorTickSteps  
		* @param majorTickSteps Number The new value. 
		*/
		setMajorTickSteps?( majorTickSteps?:number ): void;

		/** [Method] Sets the value of margin  
		* @param margin Number The new value. 
		*/
		setMargin?( margin?:number ): void;

		/** [Method] Sets the value of maxZoom  
		* @param maxZoom Number The new value. 
		*/
		setMaxZoom?( maxZoom?:number ): void;

		/** [Method] Sets the value of maximum  
		* @param maximum Number The new value. 
		*/
		setMaximum?( maximum?:number ): void;

		/** [Method] Sets the value of minZoom  
		* @param minZoom Number The new value. 
		*/
		setMinZoom?( minZoom?:number ): void;

		/** [Method] Sets the value of minimum  
		* @param minimum Number The new value. 
		*/
		setMinimum?( minimum?:number ): void;

		/** [Method] Sets the value of minorTickSteps  
		* @param minorTickSteps Number The new value. 
		*/
		setMinorTickSteps?( minorTickSteps?:number ): void;

		/** [Method] Sets the value of needHighPrecision  
		* @param needHighPrecision Boolean The new value. 
		*/
		setNeedHighPrecision?( needHighPrecision?:boolean ): void;

		/** [Method] Sets the value of position  
		* @param position String The new value. 
		*/
		setPosition?( position?:string ): void;

		/** [Method] Sets the value of reconcileRange  
		* @param reconcileRange Boolean The new value. 
		*/
		setReconcileRange?( reconcileRange?:boolean ): void;

		/** [Method] Sets the value of renderer  
		* @param renderer Function The new value. 
		* @returns String The label to display. 
		*/
		setRenderer?( renderer?:any ): string;

		/** [Method] Sets the value of segmenter  
		* @param segmenter Object|Ext.chart.axis.segmenter.Segmenter The new value. 
		*/
		setSegmenter?( segmenter?:any ): void;

		/** [Method] Sets the value of style  
		* @param style Object The new value. 
		*/
		setStyle?( style?:any ): void;

		/** [Method] Sets the value of title  
		* @param title String|Object The new value. 
		*/
		setTitle?( title?:any ): void;

		/** [Method] Sets the value of titleMargin  
		* @param titleMargin Number The new value. 
		*/
		setTitleMargin?( titleMargin?:number ): void;

		/** [Method] Sets the value of visibleRange  
		* @param visibleRange Array The new value. 
		*/
		setVisibleRange?( visibleRange?:any[] ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.chart.axis {
	export interface IAxis3D extends Ext.chart.axis.IAxis {
		/** [Config Option] (String) */
		position?: string;
	}

}

declare module Ext.chart.axis {
	export interface ICategory extends Ext.chart.axis.IAxis {
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Method] Returns the value of layout  
		* @returns String 
		*/
		getLayout?(): string;

		/** [Method] Returns the value of segmenter  
		* @returns String 
		*/
		getSegmenter?(): string;

		/** [Method] Sets the value of layout  
		* @param layout String The new value. 
		*/
		setLayout?( layout?:string ): void;

		/** [Method] Sets the value of segmenter  
		* @param segmenter String The new value. 
		*/
		setSegmenter?( segmenter?:string ): void;

	}

}

declare module Ext.chart.axis {
	export interface ICategory3D extends Ext.chart.axis.IAxis3D {
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Method] Returns the value of layout  
		* @returns String 
		*/
		getLayout?(): string;

		/** [Method] Returns the value of segmenter  
		* @returns String 
		*/
		getSegmenter?(): string;

		/** [Method] Sets the value of layout  
		* @param layout String The new value. 
		*/
		setLayout?( layout?:string ): void;

		/** [Method] Sets the value of segmenter  
		* @param segmenter String The new value. 
		*/
		setSegmenter?( segmenter?:string ): void;

	}

}

declare module Ext.chart.axis.layout {
	export interface ICombineDuplicate extends Ext.chart.axis.layout.IDiscrete {
	}

}

declare module Ext.chart.axis.layout {
	export interface IContinuous extends Ext.chart.axis.layout.ILayout {
		/** [Method] Returns the value of adjustMaximumByMajorUnit  
		* @returns Boolean 
		*/
		getAdjustMaximumByMajorUnit?(): boolean;

		/** [Method] Returns the value of adjustMinimumByMajorUnit  
		* @returns Boolean 
		*/
		getAdjustMinimumByMajorUnit?(): boolean;

		/** [Method] Sets the value of adjustMaximumByMajorUnit  
		* @param adjustMaximumByMajorUnit Boolean The new value. 
		*/
		setAdjustMaximumByMajorUnit?( adjustMaximumByMajorUnit?:boolean ): void;

		/** [Method] Sets the value of adjustMinimumByMajorUnit  
		* @param adjustMinimumByMajorUnit Boolean The new value. 
		*/
		setAdjustMinimumByMajorUnit?( adjustMinimumByMajorUnit?:boolean ): void;

		/** [Method] Snaps the data bound to the axis to meaningful tick marks  
		* @param context Object 
		* @param min Number 
		* @param max Number 
		* @param estStepSize Number 
		*/
		snapEnds?( context?:any, min?:number, max?:number, estStepSize?:number ): void;

	}

}

declare module Ext.chart.axis.layout {
	export interface IDiscrete extends Ext.chart.axis.layout.ILayout {
		/** [Method] Calculates the position of tick marks for the axis  
		* @param context Object 
		* @returns * 
		*/
		calculateLayout?( context?:any ): any;

		/** [Method] Calculates the position of major ticks for the axis  
		* @param context Object 
		*/
		calculateMajorTicks?( context?:any ): void;

		/** [Method] Processes the data of the series bound to the axis  */
		processData?(): void;

		/** [Method] Snaps the data bound to the axis to meaningful tick marks  
		* @param context Object 
		* @param min Number 
		* @param max Number 
		* @param estStepSize Number 
		*/
		snapEnds?( context?:any, min?:number, max?:number, estStepSize?:number ): void;

		/** [Method] Trims the layout of the axis by the defined minimum and maximum  
		* @param context Object 
		* @param out Object 
		* @param trimMin Number 
		* @param trimMax Number 
		*/
		trimByRange?( context?:any, out?:any, trimMin?:number, trimMax?:number ): void;

	}

}

declare module Ext.chart.axis.layout {
	export interface ILayout extends Ext.IBase, Ext.mixin.IObservable {
		/** [Config Option] (Ext.chart.axis.Axis) */
		axis?: Ext.chart.axis.IAxis;
		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Calculates the position of tick marks for the axis  
		* @param context Object 
		* @returns * 
		*/
		calculateLayout?( context?:any ): any;

		/** [Method] Calculates the position of major ticks for the axis  
		* @param context Object 
		*/
		calculateMajorTicks?( context?:any ): void;

		/** [Method] Calculates the position of sub ticks for the axis  
		* @param context Object 
		*/
		calculateMinorTicks?( context?:any ): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the value of axis  
		* @returns Ext.chart.axis.Axis 
		*/
		getAxis?(): Ext.chart.axis.IAxis;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Processes the data of the series bound to the axis  
		* @param series Ext.chart.series.Series The bound series. 
		*/
		processData?( series?:Ext.chart.series.ISeries ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of axis  
		* @param axis Ext.chart.axis.Axis The new value. 
		*/
		setAxis?( axis?:Ext.chart.axis.IAxis ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Snaps the data bound to the axis to meaningful tick marks  
		* @param context Object 
		* @param min Number 
		* @param max Number 
		* @param estStepSize Number 
		*/
		snapEnds?( context?:any, min?:number, max?:number, estStepSize?:number ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Trims the layout of the axis by the defined minimum and maximum  
		* @param context Object 
		* @param out Object 
		* @param trimMin Number 
		* @param trimMax Number 
		*/
		trimByRange?( context?:any, out?:any, trimMin?:number, trimMax?:number ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.chart.axis {
	export interface INumeric extends Ext.chart.axis.IAxis {
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Method] Returns the value of aggregator  
		* @returns String 
		*/
		getAggregator?(): string;

		/** [Method] Returns the value of layout  
		* @returns String 
		*/
		getLayout?(): string;

		/** [Method] Returns the value of segmenter  
		* @returns String 
		*/
		getSegmenter?(): string;

		/** [Method] Sets the value of aggregator  
		* @param aggregator String The new value. 
		*/
		setAggregator?( aggregator?:string ): void;

		/** [Method] Sets the value of layout  
		* @param layout String The new value. 
		*/
		setLayout?( layout?:string ): void;

		/** [Method] Sets the value of segmenter  
		* @param segmenter String The new value. 
		*/
		setSegmenter?( segmenter?:string ): void;

	}

}

declare module Ext.chart.axis {
	export interface INumeric3D extends Ext.chart.axis.IAxis3D {
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Method] Returns the value of aggregator  
		* @returns String 
		*/
		getAggregator?(): string;

		/** [Method] Returns the value of layout  
		* @returns String 
		*/
		getLayout?(): string;

		/** [Method] Returns the value of segmenter  
		* @returns String 
		*/
		getSegmenter?(): string;

		/** [Method] Sets the value of aggregator  
		* @param aggregator String The new value. 
		*/
		setAggregator?( aggregator?:string ): void;

		/** [Method] Sets the value of layout  
		* @param layout String The new value. 
		*/
		setLayout?( layout?:string ): void;

		/** [Method] Sets the value of segmenter  
		* @param segmenter String The new value. 
		*/
		setSegmenter?( segmenter?:string ): void;

	}

}

declare module Ext.chart.axis.segmenter {
	export interface INames extends Ext.chart.axis.segmenter.ISegmenter {
		/** [Method] Add step units to the value  
		* @param value Object 
		* @param step Object 
		* @param unit Object 
		*/
		add?( value?:any, step?:any, unit?:any ): void;

		/** [Method] Align value with step of units  
		* @param value Object 
		* @param step Object 
		* @param unit Object 
		* @returns * Aligned value. 
		*/
		align?( value?:any, step?:any, unit?:any ): any;

		/** [Method] Returns the difference between the min and max value based on the given unit scale  
		* @param min Object 
		* @param max Object 
		* @param unit Object 
		* @returns Number The number of units between min and max. It is the minimum n that min + n * unit >= max. 
		*/
		diff?( min?:any, max?:any, unit?:any ): number;

		/** [Method] Given a start point and estimated step size of a range determine the preferred step size  
		* @param min Object 
		* @param estStepSize Object 
		* @param minIdx Object 
		* @param data Object 
		* @returns Object Return the step size by an object of step x unit. 
		*/
		preferredStep?( min?:any, estStepSize?:any, minIdx?:any, data?:any ): any;

		/** [Method] This method formats the value  
		* @param value Object 
		* @param context Object 
		* @returns String 
		*/
		renderer?( value?:any, context?:any ): string;

	}

}

declare module Ext.chart.axis.segmenter {
	export interface INumeric extends Ext.chart.axis.segmenter.ISegmenter {
		/** [Method] Add step units to the value  
		* @param value Object 
		* @param step Object 
		* @param unit Object 
		*/
		add?( value?:any, step?:any, unit?:any ): void;

		/** [Method] Align value with step of units  
		* @param value Object 
		* @param step Object 
		* @param unit Object 
		* @returns * Aligned value. 
		*/
		align?( value?:any, step?:any, unit?:any ): any;

		/** [Method] Returns the difference between the min and max value based on the given unit scale  
		* @param min Object 
		* @param max Object 
		* @param unit Object 
		* @returns Number The number of units between min and max. It is the minimum n that min + n * unit >= max. 
		*/
		diff?( min?:any, max?:any, unit?:any ): number;

		/** [Method] Wraps the provided estimated step size of a range without altering it into a step size object  
		* @param min * The start point of range. 
		* @param estStepSize * The estimated step size. 
		* @returns Object Return the step size by an object of step x unit. 
		*/
		exactStep?( min?:any, estStepSize?:any ): any;

		/** [Method] Given a start point and estimated step size of a range determine the preferred step size  
		* @param min Object 
		* @param estStepSize Object 
		* @returns Object Return the step size by an object of step x unit. 
		*/
		preferredStep?( min?:any, estStepSize?:any ): any;

		/** [Method] This method formats the value  
		* @param value Object 
		* @param context Object 
		* @returns String 
		*/
		renderer?( value?:any, context?:any ): string;

	}

}

declare module Ext.chart.axis.segmenter {
	export interface ISegmenter extends Ext.IBase {
		/** [Config Option] (Ext.chart.axis.Axis) */
		axis?: Ext.chart.axis.IAxis;
		/** [Method] Add step units to the value  
		* @param value * The value to be added. 
		* @param step Number The step of units. Negative value are allowed. 
		* @param unit * The unit. 
		*/
		add?( value?:any, step?:number, unit?:any ): void;

		/** [Method] Align value with step of units  
		* @param value * The value to be aligned. 
		* @param step Number The step of units. 
		* @param unit * The unit. 
		* @returns * Aligned value. 
		*/
		align?( value?:any, step?:number, unit?:any ): any;

		/** [Method] Returns the difference between the min and max value based on the given unit scale  
		* @param min * The smaller value. 
		* @param max * The larger value. 
		* @param unit * The unit scale. Unit can be any type. 
		* @returns Number The number of units between min and max. It is the minimum n that min + n * unit >= max. 
		*/
		diff?( min?:any, max?:any, unit?:any ): number;

		/** [Method] Convert from any data into the target type  
		* @param value * The value to convert from 
		* @returns * The converted value. 
		*/
		from?( value?:any ): any;

		/** [Method] Returns the value of axis  
		* @returns Ext.chart.axis.Axis 
		*/
		getAxis?(): Ext.chart.axis.IAxis;

		/** [Method] Given a start point and estimated step size of a range determine the preferred step size  
		* @param start * The start point of range. 
		* @param estStepSize * The estimated step size. 
		* @returns Object Return the step size by an object of step x unit. 
		*/
		preferredStep?( start?:any, estStepSize?:any ): any;

		/** [Method] This method formats the value  
		* @param value * The value to format. 
		* @param context Object Axis layout context. 
		* @returns String 
		*/
		renderer?( value?:any, context?:any ): string;

		/** [Method] Sets the value of axis  
		* @param axis Ext.chart.axis.Axis The new value. 
		*/
		setAxis?( axis?:Ext.chart.axis.IAxis ): void;

	}

}

declare module Ext.chart.axis.segmenter {
	export interface ITime extends Ext.chart.axis.segmenter.ISegmenter {
		/** [Config Option] (Object) */
		step?: any;
		/** [Method] Add step units to the value  
		* @param value Object 
		* @param step Object 
		* @param unit Object 
		*/
		add?( value?:any, step?:any, unit?:any ): void;

		/** [Method] Align value with step of units  
		* @param date Object 
		* @param step Object 
		* @param unit Object 
		* @returns * Aligned value. 
		*/
		align?( date?:any, step?:any, unit?:any ): any;

		/** [Method] Returns the difference between the min and max value based on the given unit scale  
		* @param min Object 
		* @param max Object 
		* @param unit Object 
		* @returns Number The number of units between min and max. It is the minimum n that min + n * unit >= max. 
		*/
		diff?( min?:any, max?:any, unit?:any ): number;

		/** [Method] Convert from any data into the target type  
		* @param value Object 
		* @returns * The converted value. 
		*/
		from?( value?:any ): any;

		/** [Method] Returns the value of step  
		* @returns Object 
		*/
		getStep?(): any;

		/** [Method] Given a start point and estimated step size of a range determine the preferred step size  
		* @param min Object 
		* @param estStepSize Object 
		* @returns Object Return the step size by an object of step x unit. 
		*/
		preferredStep?( min?:any, estStepSize?:any ): any;

		/** [Method] This method formats the value  
		* @param value Object 
		* @param context Object 
		* @returns String 
		*/
		renderer?( value?:any, context?:any ): string;

		/** [Method] Sets the value of step  
		* @param step Object The new value. 
		*/
		setStep?( step?:any ): void;

	}

}

declare module Ext.chart.axis.sprite {
	export interface IAxis extends Ext.draw.sprite.ISprite, Ext.chart.IMarkerHolder {
		/** [Config Option] (Ext.chart.axis.Axis) */
		axis?: Ext.chart.axis.IAxis;
		/** [Config Option] (Boolean) */
		axisLine?: boolean;
		/** [Config Option] (Number) */
		baseRotation?: number;
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		dataMax?: number;
		/** [Config Option] (Number) */
		dataMin?: number;
		/** [Config Option] (Boolean) */
		enlargeEstStepSizeByText?: boolean;
		/** [Config Option] (Boolean) */
		grid?: boolean;
		/** [Config Option] (Object) */
		label?: any;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Number) */
		length?: number;
		/** [Config Option] (Number) */
		majorTickSize?: number;
		/** [Config Option] (Boolean) */
		majorTicks?: boolean;
		/** [Config Option] (Number) */
		max?: number;
		/** [Config Option] (Number) */
		min?: number;
		/** [Config Option] (Number) */
		minStepSize?: number;
		/** [Config Option] (Number) */
		minorTickSize?: number;
		/** [Config Option] (Boolean) */
		minorTricks?: boolean;
		/** [Config Option] (String) */
		position?: string;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Number) */
		textPadding?: number;
		/** [Config Option] (Number) */
		visibleMax?: number;
		/** [Config Option] (Number) */
		visibleMin?: number;
		/** [Method]  
		* @param name String 
		* @param marker Ext.chart.Markers 
		*/
		bindMarker?( name?:string, marker?:Ext.chart.IMarkers ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of axis  
		* @returns Ext.chart.axis.Axis 
		*/
		getAxis?(): Ext.chart.axis.IAxis;

		/** [Method] Returns the bounding box for the given Sprite as calculated with the Canvas engine  */
		getBBox?(): void;

		/** [Method] Returns the value of label  
		* @returns Object 
		*/
		getLabel?(): any;

		/** [Method] Returns the value of layout  
		* @returns Object|Ext.chart.axis.layout.Layout 
		*/
		getLayout?(): any;

		/** [Method] Returns the value of renderer  
		* @returns Function 
		*/
		getRenderer?(): any;

		/** [Method] Returns the value of segmenter  
		* @returns Object|Ext.chart.axis.segmenter.Segmenter 
		*/
		getSegmenter?(): any;

		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @param clipRect Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any, clipRect?:any ): any;

		/** [Method] Sets the value of axis  
		* @param axis Ext.chart.axis.Axis The new value. 
		*/
		setAxis?( axis?:Ext.chart.axis.IAxis ): void;

		/** [Method] Sets the value of label  
		* @param label Object The new value. 
		*/
		setLabel?( label?:any ): void;

		/** [Method] Sets the value of layout  
		* @param layout Object|Ext.chart.axis.layout.Layout The new value. 
		*/
		setLayout?( layout?:any ): void;

		/** [Method] Sets the value of renderer  
		* @param renderer Function The new value. 
		*/
		setRenderer?( renderer?:any ): void;

		/** [Method] Sets the value of segmenter  
		* @param segmenter Object|Ext.chart.axis.segmenter.Segmenter The new value. 
		*/
		setSegmenter?( segmenter?:any ): void;

	}

}

declare module Ext.chart.axis.sprite {
	export interface IAxis3D extends Ext.chart.axis.sprite.IAxis {
		/** [Method] Returns the value of fx  
		* @returns Object 
		*/
		getFx?(): any;

		/** [Method] Sets the value of fx  
		* @param fx Object The new value. 
		*/
		setFx?( fx?:any ): void;

	}

}

declare module Ext.chart.axis {
	export interface ITime extends Ext.chart.axis.INumeric {
		/** [Config Option] (Boolean) */
		calculateByLabelSize?: boolean;
		/** [Config Option] (String/Boolean) */
		dateFormat?: any;
		/** [Config Option] (Date) */
		fromDate?: any;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Array) */
		step?: any[];
		/** [Config Option] (Date) */
		toDate?: any;
		/** [Method] Returns the value of aggregator  
		* @returns String 
		*/
		getAggregator?(): string;

		/** [Method] Returns the value of calculateByLabelSize  
		* @returns Boolean 
		*/
		getCalculateByLabelSize?(): boolean;

		/** [Method] Mapping data value into coordinate  
		* @param value Object 
		* @returns Number 
		*/
		getCoordFor?( value?:any ): number;

		/** [Method] Returns the value of dateFormat  
		* @returns String/Boolean 
		*/
		getDateFormat?(): any;

		/** [Method] Returns the value of fromDate  
		* @returns Date 
		*/
		getFromDate?(): any;

		/** [Method] Returns the value of layout  
		* @returns String 
		*/
		getLayout?(): string;

		/** [Method] Returns the value of segmenter  
		* @returns String 
		*/
		getSegmenter?(): string;

		/** [Method] Returns the value of step  
		* @returns Array 
		*/
		getStep?(): any[];

		/** [Method] Returns the value of toDate  
		* @returns Date 
		*/
		getToDate?(): any;

		/** [Method] Sets the value of aggregator  
		* @param aggregator String The new value. 
		*/
		setAggregator?( aggregator?:string ): void;

		/** [Method] Sets the value of calculateByLabelSize  
		* @param calculateByLabelSize Boolean The new value. 
		*/
		setCalculateByLabelSize?( calculateByLabelSize?:boolean ): void;

		/** [Method] Sets the value of dateFormat  
		* @param dateFormat String/Boolean The new value. 
		*/
		setDateFormat?( dateFormat?:any ): void;

		/** [Method] Sets the value of fromDate  
		* @param fromDate Date The new value. 
		*/
		setFromDate?( fromDate?:any ): void;

		/** [Method] Sets the value of layout  
		* @param layout String The new value. 
		*/
		setLayout?( layout?:string ): void;

		/** [Method] Sets the value of segmenter  
		* @param segmenter String The new value. 
		*/
		setSegmenter?( segmenter?:string ): void;

		/** [Method] Sets the value of step  
		* @param step Array The new value. 
		*/
		setStep?( step?:any[] ): void;

		/** [Method] Sets the value of toDate  
		* @param toDate Date The new value. 
		*/
		setToDate?( toDate?:any ): void;

	}

}

declare module Ext.chart.axis {
	export interface ITime3D extends Ext.chart.axis.INumeric3D {
		/** [Config Option] (Boolean) */
		calculateByLabelSize?: boolean;
		/** [Config Option] (String/Boolean) */
		dateFormat?: any;
		/** [Config Option] (Date) */
		fromDate?: any;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Array) */
		step?: any[];
		/** [Config Option] (Date) */
		toDate?: any;
		/** [Method] Returns the value of aggregator  
		* @returns String 
		*/
		getAggregator?(): string;

		/** [Method] Returns the value of calculateByLabelSize  
		* @returns Boolean 
		*/
		getCalculateByLabelSize?(): boolean;

		/** [Method] Mapping data value into coordinate  
		* @param value Object 
		* @returns Number 
		*/
		getCoordFor?( value?:any ): number;

		/** [Method] Returns the value of dateFormat  
		* @returns String/Boolean 
		*/
		getDateFormat?(): any;

		/** [Method] Returns the value of fromDate  
		* @returns Date 
		*/
		getFromDate?(): any;

		/** [Method] Returns the value of layout  
		* @returns String 
		*/
		getLayout?(): string;

		/** [Method] Returns the value of segmenter  
		* @returns String 
		*/
		getSegmenter?(): string;

		/** [Method] Returns the value of step  
		* @returns Array 
		*/
		getStep?(): any[];

		/** [Method] Returns the value of toDate  
		* @returns Date 
		*/
		getToDate?(): any;

		/** [Method] Sets the value of aggregator  
		* @param aggregator String The new value. 
		*/
		setAggregator?( aggregator?:string ): void;

		/** [Method] Sets the value of calculateByLabelSize  
		* @param calculateByLabelSize Boolean The new value. 
		*/
		setCalculateByLabelSize?( calculateByLabelSize?:boolean ): void;

		/** [Method] Sets the value of dateFormat  
		* @param dateFormat String/Boolean The new value. 
		*/
		setDateFormat?( dateFormat?:any ): void;

		/** [Method] Sets the value of fromDate  
		* @param fromDate Date The new value. 
		*/
		setFromDate?( fromDate?:any ): void;

		/** [Method] Sets the value of layout  
		* @param layout String The new value. 
		*/
		setLayout?( layout?:string ): void;

		/** [Method] Sets the value of segmenter  
		* @param segmenter String The new value. 
		*/
		setSegmenter?( segmenter?:string ): void;

		/** [Method] Sets the value of step  
		* @param step Array The new value. 
		*/
		setStep?( step?:any[] ): void;

		/** [Method] Sets the value of toDate  
		* @param toDate Date The new value. 
		*/
		setToDate?( toDate?:any ): void;

	}

}

declare module Ext.chart {
	export interface ICartesianChart extends Ext.chart.IAbstractChart {
		/** [Config Option] (Boolean) */
		flipXY?: boolean;
		/** [Config Option] (Object) */
		innerPadding?: any;
		/** [Method] Returns the value of flipXY  
		* @returns Boolean 
		*/
		getFlipXY?(): boolean;

		/** [Method] Returns the value of innerPadding  
		* @returns Object 
		*/
		getInnerPadding?(): any;

		/** [Method] Returns the value of innerRect  
		* @returns Array 
		*/
		getInnerRect?(): any[];

		/** [Method] Place watermark after resize  
		* @param width Object 
		* @param height Object 
		*/
		onPlaceWatermark?( width?:any, height?:any ): void;

		/** [Method] Layout the axes and series  */
		performLayout?(): void;

		/** [Method] Redraw the chart  */
		redraw?(): void;

		/** [Method] Render all the surfaces in the container  */
		renderFrame?(): void;

		/** [Method] Sets the value of flipXY  
		* @param flipXY Boolean The new value. 
		*/
		setFlipXY?( flipXY?:boolean ): void;

		/** [Method] Sets the value of innerPadding  
		* @param innerPadding Object The new value. 
		*/
		setInnerPadding?( innerPadding?:any ): void;

		/** [Method] Sets the value of innerRect  
		* @param innerRect Array The new value. 
		*/
		setInnerRect?( innerRect?:any[] ): void;

	}

}

declare module Ext.chart {
	export interface IChart extends Ext.chart.IAbstractChart {
		/** [Config Option] (Boolean) */
		flipXY?: boolean;
		/** [Config Option] (Object) */
		innerPadding?: any;
		/** [Method] Returns the value of flipXY  
		* @returns Boolean 
		*/
		getFlipXY?(): boolean;

		/** [Method] Returns the value of innerPadding  
		* @returns Object 
		*/
		getInnerPadding?(): any;

		/** [Method] Returns the value of innerRect  
		* @returns Array 
		*/
		getInnerRect?(): any[];

		/** [Method] Place watermark after resize  
		* @param width Object 
		* @param height Object 
		*/
		onPlaceWatermark?( width?:any, height?:any ): void;

		/** [Method] Layout the axes and series  */
		performLayout?(): void;

		/** [Method] Redraw the chart  */
		redraw?(): void;

		/** [Method] Render all the surfaces in the container  */
		renderFrame?(): void;

		/** [Method] Sets the value of flipXY  
		* @param flipXY Boolean The new value. 
		*/
		setFlipXY?( flipXY?:boolean ): void;

		/** [Method] Sets the value of innerPadding  
		* @param innerPadding Object The new value. 
		*/
		setInnerPadding?( innerPadding?:any ): void;

		/** [Method] Sets the value of innerRect  
		* @param innerRect Array The new value. 
		*/
		setInnerRect?( innerRect?:any[] ): void;

	}

}

declare module Ext.chart.grid {
	export interface ICircularGrid extends Ext.draw.sprite.ICircle {
	}

}

declare module Ext.chart.grid {
	export interface IHorizontalGrid extends Ext.draw.sprite.ISprite {
		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @param clipRect Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any, clipRect?:any ): any;

	}

}

declare module Ext.chart.grid {
	export interface IHorizontalGrid3D extends Ext.chart.grid.IHorizontalGrid {
		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @param clipRect Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any, clipRect?:any ): any;

	}

}

declare module Ext.chart.grid {
	export interface IRadialGrid extends Ext.draw.sprite.IPath {
		/** [Method] Render method  
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?(): any;

		/** [Method] Update the path  
		* @param path Object 
		* @param attr Object 
		*/
		updatePath?( path?:any, attr?:any ): void;

	}

}

declare module Ext.chart.grid {
	export interface IVerticalGrid extends Ext.draw.sprite.ISprite {
		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @param clipRect Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any, clipRect?:any ): any;

	}

}

declare module Ext.chart.grid {
	export interface IVerticalGrid3D extends Ext.chart.grid.IVerticalGrid {
		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @param clipRect Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any, clipRect?:any ): any;

	}

}

declare module Ext.chart.interactions {
	export interface IAbstract extends Ext.IBase, Ext.mixin.IObservable {
		/** [Config Option] (Ext.chart.AbstractChart) */
		chart?: Ext.chart.IAbstractChart;
		/** [Config Option] (Boolean) */
		enabled?: boolean;
		/** [Property] (Number) */
		throttleGap?: number;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the value of chart  
		* @returns Ext.chart.AbstractChart 
		*/
		getChart?(): Ext.chart.IAbstractChart;

		/** [Method] Returns the value of enabled  
		* @returns Boolean 
		*/
		getEnabled?(): boolean;

		/** [Method] Find and return a single series item corresponding to the given event or null if no matching item is found  
		* @param e Event 
		* @returns Object the item object or null if none found. 
		*/
		getItemForEvent?( e?:Event ): any;

		/** [Method] Find and return all series items corresponding to the given event  
		* @param e Event 
		* @returns Array array of matching item objects 
		*/
		getItemsForEvent?( e?:Event ): any[];

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] A method to be implemented by subclasses where all event attachment should occur  */
		initialize?(): void;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Placeholder method  */
		onGesture?(): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of chart  
		* @param chart Ext.chart.AbstractChart The new value. 
		*/
		setChart?( chart?:Ext.chart.IAbstractChart ): void;

		/** [Method] Sets the value of enabled  
		* @param enabled Boolean The new value. 
		*/
		setEnabled?( enabled?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.chart.interactions {
	export interface ICrosshair extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (Object) */
		axes?: any;
		/** [Config Option] (String) */
		gesture?: string;
		/** [Config Option] (Object) */
		lines?: any;
		/** [Method] Returns the value of axes  
		* @returns Object 
		*/
		getAxes?(): any;

		/** [Method] Returns the value of gesture  
		* @returns String 
		*/
		getGesture?(): string;

		/** [Method] Returns the value of lines  
		* @returns Object 
		*/
		getLines?(): any;

		/** [Method] Placeholder method  
		* @param e Object 
		*/
		onGesture?( e?:any ): void;

		/** [Method] Sets the value of axes  
		* @param axes Object The new value. 
		*/
		setAxes?( axes?:any ): void;

		/** [Method] Sets the value of gesture  
		* @param gesture String The new value. 
		*/
		setGesture?( gesture?:string ): void;

		/** [Method] Sets the value of lines  
		* @param lines Object The new value. 
		*/
		setLines?( lines?:any ): void;

	}

}

declare module Ext.chart.interactions {
	export interface ICrossZoom extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (Object/Array) */
		axes?: any;
		/** [Config Option] (Object) */
		gestures?: any;
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of axes  
		* @returns Object/Array 
		*/
		getAxes?(): any;

		/** [Method] Returns the value of gestures  
		* @returns Object 
		*/
		getGestures?(): any;

		/** [Method] Returns the value of undoButton  
		* @returns Object 
		*/
		getUndoButton?(): any;

		/** [Method] Placeholder method  
		* @param e Object 
		*/
		onGesture?( e?:any ): void;

		/** [Method] Sets the value of axes  
		* @param axes Object/Array The new value. 
		*/
		setAxes?( axes?:any ): void;

		/** [Method] Sets the value of gestures  
		* @param gestures Object The new value. 
		*/
		setGestures?( gestures?:any ): void;

		/** [Method] Sets the value of undoButton  
		* @param undoButton Object The new value. 
		*/
		setUndoButton?( undoButton?:any ): void;

	}

}

declare module Ext.chart.interactions {
	export interface IItemHighlight extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (Object) */
		gestures?: any;
		/** [Method] Returns the value of gestures  
		* @returns Object 
		*/
		getGestures?(): any;

		/** [Method] Sets the value of gestures  
		* @param gestures Object The new value. 
		*/
		setGestures?( gestures?:any ): void;

	}

}

declare module Ext.chart.interactions {
	export interface IItemInfo extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (Object) */
		extjsGestures?: any;
		/** [Method] Returns the value of extjsGestures  
		* @returns Object 
		*/
		getExtjsGestures?(): any;

		/** [Method] Sets the value of extjsGestures  
		* @param extjsGestures Object The new value. 
		*/
		setExtjsGestures?( extjsGestures?:any ): void;

	}

}

declare module Ext.chart.interactions {
	export interface IPanZoom extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (Object/Array) */
		axes?: any;
		/** [Config Option] (Object) */
		overflowArrowOptions?: any;
		/** [Config Option] (Boolean) */
		showOverflowArrows?: boolean;
		/** [Config Option] (Boolean) */
		zoomOnPanGesture?: boolean;
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of axes  
		* @returns Object/Array 
		*/
		getAxes?(): any;

		/** [Method] Returns the value of hideLabelInGesture  
		* @returns Boolean 
		*/
		getHideLabelInGesture?(): boolean;

		/** [Method] Returns the value of maxZoom  
		* @returns Object 
		*/
		getMaxZoom?(): any;

		/** [Method] Returns the value of minZoom  
		* @returns Object 
		*/
		getMinZoom?(): any;

		/** [Method] Returns the value of modeToggleButton  
		* @returns Object 
		*/
		getModeToggleButton?(): any;

		/** [Method] Returns the value of showOverflowArrows  
		* @returns Boolean 
		*/
		getShowOverflowArrows?(): boolean;

		/** [Method] Returns the value of zoomOnPanGesture  
		* @returns Boolean 
		*/
		getZoomOnPanGesture?(): boolean;

		/** [Method] Sets the value of axes  
		* @param axes Object/Array The new value. 
		*/
		setAxes?( axes?:any ): void;

		/** [Method] Sets the value of hideLabelInGesture  
		* @param hideLabelInGesture Boolean The new value. 
		*/
		setHideLabelInGesture?( hideLabelInGesture?:boolean ): void;

		/** [Method] Sets the value of maxZoom  
		* @param maxZoom Object The new value. 
		*/
		setMaxZoom?( maxZoom?:any ): void;

		/** [Method] Sets the value of minZoom  
		* @param minZoom Object The new value. 
		*/
		setMinZoom?( minZoom?:any ): void;

		/** [Method] Sets the value of modeToggleButton  
		* @param modeToggleButton Object The new value. 
		*/
		setModeToggleButton?( modeToggleButton?:any ): void;

		/** [Method] Sets the value of showOverflowArrows  
		* @param showOverflowArrows Boolean The new value. 
		*/
		setShowOverflowArrows?( showOverflowArrows?:boolean ): void;

		/** [Method] Sets the value of zoomOnPanGesture  
		* @param zoomOnPanGesture Boolean The new value. 
		*/
		setZoomOnPanGesture?( zoomOnPanGesture?:boolean ): void;

	}

}

declare module Ext.chart.interactions {
	export interface IRotate extends Ext.chart.interactions.IAbstract {
		/** [Config Option] (Object) */
		gestures?: any;
		/** [Method] Returns the value of gestures  
		* @returns Object 
		*/
		getGestures?(): any;

		/** [Method] Placeholder method  
		* @param e Object 
		*/
		onGesture?( e?:any ): void;

		/** [Method] Rotates a polar chart about its center point to the specified angle  
		* @param angle Number The angle to rotate to. 
		* @param relative Boolean Whether the rotation is relative to the current angle or not. 
		* @param animate Boolean Whether to animate the rotation or not. 
		*/
		rotateTo?( angle?:number, relative?:boolean, animate?:boolean ): void;

		/** [Method] Sets the value of gestures  
		* @param gestures Object The new value. 
		*/
		setGestures?( gestures?:any ): void;

	}

}

declare module Ext.chart.interactions {
	export interface IRotatePie3D extends Ext.chart.interactions.IRotate {
	}

}

declare module Ext.chart.label {
	export interface ICallout extends Ext.draw.modifier.IModifier {
		/** [Method] Invoked when changes need to be popped up to the top  
		* @param attr Object 
		* @param changes Object 
		*/
		popUp?( attr?:any, changes?:any ): void;

		/** [Method] Validate attribute set before use  
		* @param attr Object 
		*/
		prepareAttributes?( attr?:any ): void;

		/** [Method] Invoked when changes need to be pushed down to the sprite  
		* @param attr Object 
		* @param changes Object 
		* @returns Mixed 
		*/
		pushDown?( attr?:any, changes?:any ): any;

	}

}

declare module Ext.chart.label {
	export interface ILabel extends Ext.draw.sprite.IText {
		/** [Config Option] (Boolean|Object) */
		calloutLine?: any;
		/** [Config Option] (Object) */
		fx?: any;
		/** [Method] Returns the value of calloutLine  
		* @returns Boolean|Object 
		*/
		getCalloutLine?(): any;

		/** [Method] Returns the value of field  
		* @returns Object 
		*/
		getField?(): any;

		/** [Method] Returns the value of fx  
		* @returns Object 
		*/
		getFx?(): any;

		/** [Method]  
		* @param surface Object 
		* @param ctx Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any ): any;

		/** [Method] Sets the value of calloutLine  
		* @param calloutLine Boolean|Object The new value. 
		*/
		setCalloutLine?( calloutLine?:any ): void;

		/** [Method] Sets the value of field  
		* @param field Object The new value. 
		*/
		setField?( field?:any ): void;

		/** [Method] Sets the value of fx  
		* @param fx Object The new value. 
		*/
		setFx?( fx?:any ): void;

	}

}

declare module Ext.chart {
	export interface ILegend extends Ext.chart.ILegendBase {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		disableSelection?: boolean;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Array) */
		rect?: any[];
		/** [Config Option] (Boolean) */
		toggleable?: boolean;
		/** [Method] Returns the value of baseCls  
		* @returns String 
		*/
		getBaseCls?(): string;

		/** [Method] Returns the value of disableSelection  
		* @returns Boolean 
		*/
		getDisableSelection?(): boolean;

		/** [Method] Returns the value of padding  
		* @returns Number 
		*/
		getPadding?(): number;

		/** [Method] Returns the value of rect  
		* @returns Array 
		*/
		getRect?(): any[];

		/** [Method] Returns the value of toggleable  
		* @returns Boolean 
		*/
		getToggleable?(): boolean;

		/** [Method] Sets the value of baseCls  
		* @param baseCls String The new value. 
		*/
		setBaseCls?( baseCls?:string ): void;

		/** [Method] Sets the value of disableSelection  
		* @param disableSelection Boolean The new value. 
		*/
		setDisableSelection?( disableSelection?:boolean ): void;

		/** [Method] Sets the value of padding  
		* @param padding Number The new value. 
		*/
		setPadding?( padding?:number ): void;

		/** [Method] Sets the value of rect  
		* @param rect Array The new value. 
		*/
		setRect?( rect?:any[] ): void;

		/** [Method] Sets the value of toggleable  
		* @param toggleable Boolean The new value. 
		*/
		setToggleable?( toggleable?:boolean ): void;

	}

}

declare module Ext.chart {
	export interface ILegendBase extends Ext.view.IView {
		/** [Config Option] (String) */
		itemSelector?: string;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		tpl?: any;
		/** [Method] Returns the value of docked  
		* @returns String 
		*/
		getDocked?(): string;

		/** [Method] Returns the value of itemSelector  
		* @returns String 
		*/
		getItemSelector?(): string;

		/** [Method] Returns the value of nodeContainerSelector  
		* @returns String 
		*/
		getNodeContainerSelector?(): string;

		/** [Method] Returns the value of tpl  
		* @returns Array 
		*/
		getTpl?(): any[];

		/** [Method] Sets the dock position of this component in its parent panel  
		* @param docked Object 
		* @returns Ext.Component this 
		*/
		setDocked?( docked?:any ): Ext.IComponent;

		/** [Method] Sets the value of itemSelector  
		* @param itemSelector String The new value. 
		*/
		setItemSelector?( itemSelector?:string ): void;

		/** [Method] Sets the value of nodeContainerSelector  
		* @param nodeContainerSelector String The new value. 
		*/
		setNodeContainerSelector?( nodeContainerSelector?:string ): void;

		/** [Method] Sets the value of store  
		* @param store Object 
		*/
		setStore?( store?:any ): void;

		/** [Method] Sets the value of tpl  
		* @param tpl Array The new value. 
		*/
		setTpl?( tpl?:any[] ): void;

	}

}

declare module Ext.chart {
	export interface IMarkerHolder extends Ext.IMixin {
		/** [Method]  
		* @param name String 
		* @param marker Ext.chart.Markers 
		*/
		bindMarker?( name?:string, marker?:Ext.chart.IMarkers ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.chart {
	export interface IMarkers extends Ext.draw.sprite.IInstancing {
		/** [Method] Clears the markers in the category  
		* @param category String 
		*/
		clear?( category?:string ): void;

		/** [Method] Not supported  
		* @returns null 
		*/
		getBBox?(): any;

		/** [Method]  
		* @param category String 
		* @param index Mixed 
		* @param isWithoutTransform Boolean 
		*/
		getMarkerBBoxFor?( category?:string, index?:any, isWithoutTransform?:boolean ): void;

		/** [Method] Puts a marker in the category with additional attributes  
		* @param category String 
		* @param attr Object 
		* @param index String|Number 
		* @param bypassNormalization Boolean 
		* @param keepRevision Boolean 
		*/
		putMarkerFor?( category?:string, attr?:any, index?:any, bypassNormalization?:boolean, keepRevision?:boolean ): void;

		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @param clipRect Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any, clipRect?:any ): any;

	}

}

declare module Ext.chart.plugin {
	export interface IItemEvents extends Ext.plugin.IAbstract {
		/** [Config Option] (Boolean) */
		moveEvents?: boolean;
		/** [Method] The init method is invoked after initComponent method has been run for the client Component  
		* @param chart Object 
		*/
		init?( chart?:any ): void;

	}

}

declare module Ext.chart {
	export interface IPolarChart extends Ext.chart.IAbstractChart {
		/** [Config Option] (Number) */
		innerPadding?: number;
		/** [Config Option] (Number) */
		radius?: number;
		/** [Method] Returns the value of center  
		* @returns Array 
		*/
		getCenter?(): any[];

		/** [Method] Returns the value of innerPadding  
		* @returns Number 
		*/
		getInnerPadding?(): number;

		/** [Method] Returns the value of radius  
		* @returns Number 
		*/
		getRadius?(): number;

		/** [Method] Redraw the chart  */
		redraw?(): void;

		/** [Method] Render all the surfaces in the container  */
		renderFrame?(): void;

		/** [Method] Sets the value of center  
		* @param center Array The new value. 
		*/
		setCenter?( center?:any[] ): void;

		/** [Method] Sets the value of innerPadding  
		* @param innerPadding Number The new value. 
		*/
		setInnerPadding?( innerPadding?:number ): void;

		/** [Method] Sets the value of radius  
		* @param radius Number The new value. 
		*/
		setRadius?( radius?:number ): void;

	}

}

declare module Ext.chart.series {
	export interface IArea extends Ext.chart.series.IStackedCartesian {
		/** [Config Option] (Boolean) */
		splitStacks?: boolean;
		/** [Property] (String) */
		seriesType?: string;

		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of splitStacks  
		* @returns Boolean 
		*/
		getSplitStacks?(): boolean;

		/** [Method] Sets the value of splitStacks  
		* @param splitStacks Boolean The new value. 
		*/
		setSplitStacks?( splitStacks?:boolean ): void;

	}

}

declare module Ext.chart.series {
	export interface IBar extends Ext.chart.series.IStackedCartesian {
		/** [Property] (String) */
		seriesType?: string;

		/** [Property] (String) */
		type?: string;

		/** [Method] For a given x y point relative to the main rect find a corresponding item from this series if any  
		* @param x Object 
		* @param y Object 
		* @returns Object An object describing the item, or null if there is no matching item. The exact contents of this object will vary by series type, but should always contain at least the following: 
		*/
		getItemForPoint?( x?:any, y?:any ): any;

	}

}

declare module Ext.chart.series {
	export interface IBar3D extends Ext.chart.series.IBar {
		/** [Config Option] (Object) */
		highlightCfg?: any;
		/** [Property] (String) */
		seriesType?: string;

		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of highlightCfg  
		* @returns Object 
		*/
		getHighlightCfg?(): any;

		/** [Method] For a given x y point relative to the main rect find a corresponding item from this series if any  
		* @param x Object 
		* @param y Object 
		* @returns Object An object describing the item, or null if there is no matching item. The exact contents of this object will vary by series type, but should always contain at least the following: 
		*/
		getItemForPoint?( x?:any, y?:any ): any;

		/** [Method] Returns the value of itemInstancing  
		* @returns Object 
		*/
		getItemInstancing?(): any;

		/** [Method] Returns sprites the are used to draw this series  */
		getSprites?(): void;

		/** [Method] Sets the value of highlightCfg  
		* @param highlightCfg Object The new value. 
		*/
		setHighlightCfg?( highlightCfg?:any ): void;

		/** [Method] Sets the value of itemInstancing  
		* @param itemInstancing Object The new value. 
		*/
		setItemInstancing?( itemInstancing?:any ): void;

	}

}

declare module Ext.chart.series {
	export interface ICandleStick extends Ext.chart.series.ICartesian {
		/** [Config Option] (String) */
		closeField?: string;
		/** [Config Option] (String) */
		highField?: string;
		/** [Config Option] (String) */
		lowField?: string;
		/** [Config Option] (String) */
		openField?: string;
		/** [Property] (String) */
		seriesType?: string;

		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of closeField  
		* @returns String 
		*/
		getCloseField?(): string;

		/** [Method] Returns the value of highField  
		* @returns String 
		*/
		getHighField?(): string;

		/** [Method] Returns the value of lowField  
		* @returns String 
		*/
		getLowField?(): string;

		/** [Method] Returns the value of openField  
		* @returns String 
		*/
		getOpenField?(): string;

		/** [Method] Sets the value of closeField  
		* @param closeField String The new value. 
		*/
		setCloseField?( closeField?:string ): void;

		/** [Method] Sets the value of highField  
		* @param highField String The new value. 
		*/
		setHighField?( highField?:string ): void;

		/** [Method] Sets the value of lowField  
		* @param lowField String The new value. 
		*/
		setLowField?( lowField?:string ): void;

		/** [Method] Sets the value of openField  
		* @param openField String The new value. 
		*/
		setOpenField?( openField?:string ): void;

	}

}

declare module Ext.chart.series {
	export interface ICartesian extends Ext.chart.series.ISeries {
		/** [Config Option] (Ext.chart.axis.Axis|Number|String) */
		xAxis?: any;
		/** [Config Option] (String) */
		xField?: string;
		/** [Config Option] (Ext.chart.axis.Axis|Number|String) */
		yAxis?: any;
		/** [Config Option] (String|String[]) */
		yField?: any;
		/** [Method] For a given x y point relative to the main rect find a corresponding item from this series if any  
		* @param x Object 
		* @param y Object 
		* @returns Object An object describing the item, or null if there is no matching item. The exact contents of this object will vary by series type, but should always contain at least the following: 
		*/
		getItemForPoint?( x?:any, y?:any ): any;

		/** [Method] Returns sprites the are used to draw this series  */
		getSprites?(): void;

		/** [Method] Returns the value of xAxis  
		* @returns Ext.chart.axis.Axis|Number|String 
		*/
		getXAxis?(): any;

		/** [Method] Returns the value of xField  
		* @returns String 
		*/
		getXField?(): string;

		/** [Method] Returns the value of yAxis  
		* @returns Ext.chart.axis.Axis|Number|String 
		*/
		getYAxis?(): any;

		/** [Method] Returns the value of yField  
		* @returns String|String[] 
		*/
		getYField?(): any;

		/** [Method] Provide legend information to target array  
		* @param target Object 
		*/
		provideLegendInfo?( target?:any ): void;

		/** [Method] Sets the value of xAxis  
		* @param xAxis Ext.chart.axis.Axis|Number|String The new value. 
		*/
		setXAxis?( xAxis?:any ): void;

		/** [Method] Sets the value of xField  
		* @param xField String The new value. 
		*/
		setXField?( xField?:string ): void;

		/** [Method] Sets the value of yAxis  
		* @param yAxis Ext.chart.axis.Axis|Number|String The new value. 
		*/
		setYAxis?( yAxis?:any ): void;

		/** [Method] Sets the value of yField  
		* @param yField String|String[] The new value. 
		*/
		setYField?( yField?:any ): void;

	}

}

declare module Ext.chart.series {
	export interface IGauge extends Ext.chart.series.ISeries {
		/** [Config Option] (String) */
		angleField?: string;
		/** [Config Option] (Array) */
		colors?: any[];
		/** [Config Option] (Number) */
		donut?: number;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Number) */
		maximum?: number;
		/** [Config Option] (Number) */
		minimum?: number;
		/** [Config Option] (Boolean) */
		needle?: boolean;
		/** [Config Option] (Number) */
		needleLength?: number;
		/** [Config Option] (Number) */
		needleLengthRatio?: number;
		/** [Config Option] (Number) */
		needleWidth?: number;
		/** [Config Option] (Array) */
		sectors?: any[];
		/** [Config Option] (Boolean) */
		showInLegend?: boolean;
		/** [Config Option] (Number) */
		totalAngle?: number;
		/** [Config Option] (Number) */
		value?: number;
		/** [Config Option] (Boolean) */
		wholeDisk?: boolean;
		/** [Property] (String) */
		seriesType?: string;

		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of angleField  
		* @returns String 
		*/
		getAngleField?(): string;

		/** [Method] Returns the value of center  
		* @returns Array 
		*/
		getCenter?(): any[];

		/** [Method] Returns the value of colors  
		* @returns Array 
		*/
		getColors?(): any[];

		/** [Method] Returns the value of donut  
		* @returns Number 
		*/
		getDonut?(): number;

		/** [Method] Returns the value of field  
		* @returns String 
		*/
		getField?(): string;

		/** [Method] Returns the value of maximum  
		* @returns Number 
		*/
		getMaximum?(): number;

		/** [Method] Returns the value of minimum  
		* @returns Number 
		*/
		getMinimum?(): number;

		/** [Method] Returns the value of needle  
		* @returns Boolean 
		*/
		getNeedle?(): boolean;

		/** [Method] Returns the value of needleLength  
		* @returns Number 
		*/
		getNeedleLength?(): number;

		/** [Method] Returns the value of needleLengthRatio  
		* @returns Number 
		*/
		getNeedleLengthRatio?(): number;

		/** [Method] Returns the value of needleWidth  
		* @returns Number 
		*/
		getNeedleWidth?(): number;

		/** [Method] Returns the value of radius  
		* @returns Number 
		*/
		getRadius?(): number;

		/** [Method] Returns the value of rect  
		* @returns Array 
		*/
		getRect?(): any[];

		/** [Method] Returns the value of rotation  
		* @returns Number 
		*/
		getRotation?(): number;

		/** [Method] Returns the value of sectors  
		* @returns Array 
		*/
		getSectors?(): any[];

		/** [Method] Returns the value of showInLegend  
		* @returns Boolean 
		*/
		getShowInLegend?(): boolean;

		/** [Method] Returns sprites the are used to draw this series  */
		getSprites?(): void;

		/** [Method] Returns the value of totalAngle  
		* @returns Number 
		*/
		getTotalAngle?(): number;

		/** [Method] Returns the value of value  
		* @returns Number 
		*/
		getValue?(): number;

		/** [Method] Returns the value of wholeDisk  
		* @returns Boolean 
		*/
		getWholeDisk?(): boolean;

		/** [Method] Sets the value of angleField  
		* @param angleField String The new value. 
		*/
		setAngleField?( angleField?:string ): void;

		/** [Method] Sets the value of center  
		* @param center Array The new value. 
		*/
		setCenter?( center?:any[] ): void;

		/** [Method] Sets the value of colors  
		* @param colors Array The new value. 
		*/
		setColors?( colors?:any[] ): void;

		/** [Method] Sets the value of donut  
		* @param donut Number The new value. 
		*/
		setDonut?( donut?:number ): void;

		/** [Method] Sets the value of field  
		* @param field String The new value. 
		*/
		setField?( field?:string ): void;

		/** [Method] Sets the value of maximum  
		* @param maximum Number The new value. 
		*/
		setMaximum?( maximum?:number ): void;

		/** [Method] Sets the value of minimum  
		* @param minimum Number The new value. 
		*/
		setMinimum?( minimum?:number ): void;

		/** [Method] Sets the value of needle  
		* @param needle Boolean The new value. 
		*/
		setNeedle?( needle?:boolean ): void;

		/** [Method] Sets the value of needleLength  
		* @param needleLength Number The new value. 
		*/
		setNeedleLength?( needleLength?:number ): void;

		/** [Method] Sets the value of needleLengthRatio  
		* @param needleLengthRatio Number The new value. 
		*/
		setNeedleLengthRatio?( needleLengthRatio?:number ): void;

		/** [Method] Sets the value of needleWidth  
		* @param needleWidth Number The new value. 
		*/
		setNeedleWidth?( needleWidth?:number ): void;

		/** [Method] Sets the value of radius  
		* @param radius Number The new value. 
		*/
		setRadius?( radius?:number ): void;

		/** [Method] Sets the value of rect  
		* @param rect Array The new value. 
		*/
		setRect?( rect?:any[] ): void;

		/** [Method] Sets the value of rotation  
		* @param rotation Number The new value. 
		*/
		setRotation?( rotation?:number ): void;

		/** [Method] Sets the value of sectors  
		* @param sectors Array The new value. 
		*/
		setSectors?( sectors?:any[] ): void;

		/** [Method] Sets the value of showInLegend  
		* @param showInLegend Boolean The new value. 
		*/
		setShowInLegend?( showInLegend?:boolean ): void;

		/** [Method] Sets the value of totalAngle  
		* @param totalAngle Number The new value. 
		*/
		setTotalAngle?( totalAngle?:number ): void;

		/** [Method] Sets the value of value  
		* @param value Number The new value. 
		*/
		setValue?( value?:number ): void;

		/** [Method] Sets the value of wholeDisk  
		* @param wholeDisk Boolean The new value. 
		*/
		setWholeDisk?( wholeDisk?:boolean ): void;

	}

}

declare module Ext.chart.series {
	export interface ILine extends Ext.chart.series.ICartesian {
		/** [Config Option] (Boolean) */
		fill?: boolean;
		/** [Config Option] (Number) */
		selectionTolerance?: number;
		/** [Config Option] (Boolean/Number) */
		smooth?: any;
		/** [Config Option] (Boolean) */
		step?: boolean;
		/** [Config Option] (Object) */
		style?: any;
		/** [Property] (String) */
		seriesType?: string;

		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of aggregator  
		* @returns Object 
		*/
		getAggregator?(): any;

		/** [Method] Returns the value of fill  
		* @returns Boolean 
		*/
		getFill?(): boolean;

		/** [Method] Returns the value of selectionTolerance  
		* @returns Number 
		*/
		getSelectionTolerance?(): number;

		/** [Method] Returns the value of smooth  
		* @returns Boolean/Number 
		*/
		getSmooth?(): any;

		/** [Method] Returns the value of step  
		* @returns Boolean 
		*/
		getStep?(): boolean;

		/** [Method] Sets the value of aggregator  
		* @param aggregator Object The new value. 
		*/
		setAggregator?( aggregator?:any ): void;

		/** [Method] Sets the value of fill  
		* @param fill Boolean The new value. 
		*/
		setFill?( fill?:boolean ): void;

		/** [Method] Sets the value of selectionTolerance  
		* @param selectionTolerance Number The new value. 
		*/
		setSelectionTolerance?( selectionTolerance?:number ): void;

		/** [Method] Sets the value of smooth  
		* @param smooth Boolean/Number The new value. 
		*/
		setSmooth?( smooth?:any ): void;

		/** [Method] Sets the value of step  
		* @param step Boolean The new value. 
		*/
		setStep?( step?:boolean ): void;

	}

}

declare module Ext.chart.series {
	export interface IPie extends Ext.chart.series.IPolar {
		/** [Config Option] (Number) */
		Allows?: number;
		/** [Config Option] (Boolean) */
		clockwise?: boolean;
		/** [Config Option] (Number) */
		donut?: number;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Array) */
		hidden?: any[];
		/** [Config Option] (Object) */
		highlightCfg?: any;
		/** [Config Option] (String) */
		labelField?: string;
		/** [Config Option] (String) */
		lengthField?: string;
		/** [Config Option] (Number) */
		rotation?: number;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (Number) */
		totalAngle?: number;
		/** [Property] (String) */
		seriesType?: string;

		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of clockwise  
		* @returns Boolean 
		*/
		getClockwise?(): boolean;

		/** [Method] Returns the value of donut  
		* @returns Number 
		*/
		getDonut?(): number;

		/** [Method] Returns the value of hidden  
		* @returns Array 
		*/
		getHidden?(): any[];

		/** [Method] Returns the value of highlightCfg  
		* @returns Object 
		*/
		getHighlightCfg?(): any;

		/** [Method] Returns the pie slice for a given angle 
		* @param angle Number The angle to search for the slice 
		* @returns Object An object containing the reocord, sprite, scope etc. 
		*/
		getItemForAngle?( angle?:number ): any;

		/** [Method] For a given x y point relative to the main rect find a corresponding item from this series if any  
		* @param x Object 
		* @param y Object 
		* @returns Object An object describing the item, or null if there is no matching item. The exact contents of this object will vary by series type, but should always contain at least the following: 
		*/
		getItemForPoint?( x?:any, y?:any ): any;

		/** [Method] Returns the value of labelField  
		* @returns String 
		*/
		getLabelField?(): string;

		/** [Method] Returns the value of lengthField  
		* @returns String 
		*/
		getLengthField?(): string;

		/** [Method] Returns the value of rotation  
		* @returns Number 
		*/
		getRotation?(): number;

		/** [Method] Returns sprites the are used to draw this series  */
		getSprites?(): void;

		/** [Method] Returns the value of style  
		* @returns Object 
		*/
		getStyle?(): any;

		/** [Method] Returns the value of totalAngle  
		* @returns Number 
		*/
		getTotalAngle?(): number;

		/** [Method] Provide legend information to target array  
		* @param target Object 
		*/
		provideLegendInfo?( target?:any ): void;

		/** [Method] Sets the value of clockwise  
		* @param clockwise Boolean The new value. 
		*/
		setClockwise?( clockwise?:boolean ): void;

		/** [Method] Sets the value of donut  
		* @param donut Number The new value. 
		*/
		setDonut?( donut?:number ): void;

		/** [Method] Sets the value of hidden  
		* @param hidden Array The new value. 
		*/
		setHidden?( hidden?:any[] ): void;

		/** [Method] Sets the value of highlightCfg  
		* @param highlightCfg Object The new value. 
		*/
		setHighlightCfg?( highlightCfg?:any ): void;

		/** [Method] Sets the value of labelField  
		* @param labelField String The new value. 
		*/
		setLabelField?( labelField?:string ): void;

		/** [Method] Sets the value of lengthField  
		* @param lengthField String The new value. 
		*/
		setLengthField?( lengthField?:string ): void;

		/** [Method] Sets the value of rotation  
		* @param rotation Number The new value. 
		*/
		setRotation?( rotation?:number ): void;

		/** [Method] Sets the value of style  
		* @param style Object The new value. 
		*/
		setStyle?( style?:any ): void;

		/** [Method] Sets the value of totalAngle  
		* @param totalAngle Number The new value. 
		*/
		setTotalAngle?( totalAngle?:number ): void;

	}

}

declare module Ext.chart.series {
	export interface IPie3D extends Ext.chart.series.IPolar {
		/** [Config Option] (Boolean/Number) */
		donut?: any;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Number) */
		rotation?: number;
		/** [Property] (String) */
		seriesType?: string;

		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of distortion  
		* @returns Number 
		*/
		getDistortion?(): number;

		/** [Method] Returns the value of donut  
		* @returns Boolean/Number 
		*/
		getDonut?(): any;

		/** [Method] Returns the value of rect  
		* @returns Array 
		*/
		getRect?(): any[];

		/** [Method] Returns the value of rotation  
		* @returns Number 
		*/
		getRotation?(): number;

		/** [Method] Returns sprites the are used to draw this series  */
		getSprites?(): void;

		/** [Method] Returns the value of thickness  
		* @returns Number 
		*/
		getThickness?(): number;

		/** [Method] Sets the value of distortion  
		* @param distortion Number The new value. 
		*/
		setDistortion?( distortion?:number ): void;

		/** [Method] Sets the value of donut  
		* @param donut Boolean/Number The new value. 
		*/
		setDonut?( donut?:any ): void;

		/** [Method] Sets the value of rect  
		* @param rect Array The new value. 
		*/
		setRect?( rect?:any[] ): void;

		/** [Method] Sets the value of rotation  
		* @param rotation Number The new value. 
		*/
		setRotation?( rotation?:number ): void;

		/** [Method] Sets the value of thickness  
		* @param thickness Number The new value. 
		*/
		setThickness?( thickness?:number ): void;

	}

}

declare module Ext.chart.series {
	export interface IPolar extends Ext.chart.series.ISeries {
		/** [Config Option] (String) */
		angleField?: string;
		/** [Config Option] (Array) */
		center?: any[];
		/** [Config Option] (String) */
		lengthField?: string;
		/** [Config Option] (Number) */
		offsetX?: number;
		/** [Config Option] (Number) */
		offsetY?: number;
		/** [Config Option] (Number) */
		radius?: number;
		/** [Config Option] (Number) */
		rotation?: number;
		/** [Config Option] (Boolean) */
		showInLegend?: boolean;
		/** [Config Option] (String) */
		xField?: string;
		/** [Config Option] (String) */
		yField?: string;
		/** [Method] Returns the value of center  
		* @returns Array 
		*/
		getCenter?(): any[];

		/** [Method] Returns the value of offsetX  
		* @returns Number 
		*/
		getOffsetX?(): number;

		/** [Method] Returns the value of offsetY  
		* @returns Number 
		*/
		getOffsetY?(): number;

		/** [Method] Returns the value of radius  
		* @returns Number 
		*/
		getRadius?(): number;

		/** [Method] Returns the value of rotation  
		* @returns Number 
		*/
		getRotation?(): number;

		/** [Method] Returns the value of showInLegend  
		* @returns Boolean 
		*/
		getShowInLegend?(): boolean;

		/** [Method] Returns the value of xAxis  
		* @returns Object 
		*/
		getXAxis?(): any;

		/** [Method] Returns the value of xField  
		* @returns String 
		*/
		getXField?(): string;

		/** [Method] Returns the value of yAxis  
		* @returns Object 
		*/
		getYAxis?(): any;

		/** [Method] Returns the value of yField  
		* @returns String 
		*/
		getYField?(): string;

		/** [Method] Sets the value of center  
		* @param center Array The new value. 
		*/
		setCenter?( center?:any[] ): void;

		/** [Method] Sets the value of offsetX  
		* @param offsetX Number The new value. 
		*/
		setOffsetX?( offsetX?:number ): void;

		/** [Method] Sets the value of offsetY  
		* @param offsetY Number The new value. 
		*/
		setOffsetY?( offsetY?:number ): void;

		/** [Method] Sets the value of radius  
		* @param radius Number The new value. 
		*/
		setRadius?( radius?:number ): void;

		/** [Method] Sets the value of rotation  
		* @param rotation Number The new value. 
		*/
		setRotation?( rotation?:number ): void;

		/** [Method] Sets the value of showInLegend  
		* @param showInLegend Boolean The new value. 
		*/
		setShowInLegend?( showInLegend?:boolean ): void;

		/** [Method] Sets the value of xAxis  
		* @param xAxis Object The new value. 
		*/
		setXAxis?( xAxis?:any ): void;

		/** [Method] Sets the value of xField  
		* @param xField String The new value. 
		*/
		setXField?( xField?:string ): void;

		/** [Method] Sets the value of yAxis  
		* @param yAxis Object The new value. 
		*/
		setYAxis?( yAxis?:any ): void;

		/** [Method] Sets the value of yField  
		* @param yField String The new value. 
		*/
		setYField?( yField?:string ): void;

	}

}

declare module Ext.chart.series {
	export interface IRadar extends Ext.chart.series.IPolar {
		/** [Config Option] (Object) */
		style?: any;
		/** [Property] (String) */
		seriesType?: string;

		/** [Property] (String) */
		type?: string;

		/** [Method] For a given x y point relative to the main rect find a corresponding item from this series if any  
		* @param x Object 
		* @param y Object 
		* @returns Object An object describing the item, or null if there is no matching item. The exact contents of this object will vary by series type, but should always contain at least the following: 
		*/
		getItemForPoint?( x?:any, y?:any ): any;

		/** [Method] Returns sprites the are used to draw this series  */
		getSprites?(): void;

		/** [Method] Provide legend information to target array  
		* @param target Object 
		*/
		provideLegendInfo?( target?:any ): void;

	}

}

declare module Ext.chart.series {
	export interface IScatter extends Ext.chart.series.ICartesian {
		/** [Config Option] (Object) */
		itemInstancing?: any;
		/** [Property] (String) */
		seriesType?: string;

		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of itemInstancing  
		* @returns Object 
		*/
		getItemInstancing?(): any;

		/** [Method] Provide legend information to target array  
		* @param target Object 
		*/
		provideLegendInfo?( target?:any ): void;

		/** [Method] Sets the value of itemInstancing  
		* @param itemInstancing Object The new value. 
		*/
		setItemInstancing?( itemInstancing?:any ): void;

	}

}

declare module Ext.chart.series {
	export interface ISeries extends Ext.IBase, Ext.mixin.IObservable, Ext.mixin.IBindable {
		/** [Config Option] (Object) */
		animation?: any;
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Array) */
		colors?: any[];
		/** [Config Option] (Boolean|Array) */
		hidden?: any;
		/** [Config Option] (Boolean/Object) */
		highlight?: any;
		/** [Config Option] (Object) */
		highlightCfg?: any;
		/** [Config Option] (Object) */
		highlightItem?: any;
		/** [Config Option] (Object) */
		itemInstancing?: any;
		/** [Config Option] (Object) */
		label?: any;
		/** [Config Option] (String|String[]) */
		labelField?: any;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Object|Boolean) */
		marker?: any;
		/** [Config Option] (Object) */
		markerSubStyle?: any;
		/** [Config Option] (Object) */
		overlaySurface?: any;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Boolean) */
		showInLegend?: boolean;
		/** [Config Option] (Boolean) */
		showMarkers?: boolean;
		/** [Config Option] (Object) */
		store?: any;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (Object) */
		subStyle?: any;
		/** [Config Option] (Object) */
		surface?: any;
		/** [Config Option] (String|String[]) */
		title?: any;
		/** [Config Option] (Object) */
		tooltip?: any;
		/** [Config Option] (Boolean|Number) */
		useDarkerStrokeColor?: any;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (String) */
		seriesType?: string;

		/** [Property] (String) */
		type?: string;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the value of animation  
		* @returns Object 
		*/
		getAnimation?(): any;

		/** [Method] Returns the value of background  
		* @returns Object 
		*/
		getBackground?(): any;

		/** [Method] Returns the value of bind  
		* @returns Object 
		*/
		getBind?(): any;

		/** [Method] Returns the value of colors  
		* @returns Array 
		*/
		getColors?(): any[];

		/** [Method] Returns the value of controller  
		* @returns String/Object/Ext.app.ViewController 
		*/
		getController?(): any;

		/** [Method] Returns the value of defaultListenerScope  
		* @returns Boolean 
		*/
		getDefaultListenerScope?(): boolean;

		/** [Method] Returns the value of hidden  
		* @returns Boolean|Array 
		*/
		getHidden?(): any;

		/** [Method] Returns the value of highlight  
		* @returns Boolean/Object 
		*/
		getHighlight?(): any;

		/** [Method] Returns the value of highlightCfg  
		* @returns Object 
		*/
		getHighlightCfg?(): any;

		/** [Method] Returns the value of highlightItem  
		* @returns Object 
		*/
		getHighlightItem?(): any;

		/** [Method] For a given x y point relative to the main rect find a corresponding item from this series if any  
		* @param x Number 
		* @param y Number 
		* @param target Object optional target to receive the result 
		* @returns Object An object describing the item, or null if there is no matching item. The exact contents of this object will vary by series type, but should always contain at least the following: 
		*/
		getItemForPoint?( x?:number, y?:number, target?:any ): any;

		/** [Method] Returns the value of itemInstancing  
		* @returns Object 
		*/
		getItemInstancing?(): any;

		/** [Method] Returns the value of label  
		* @returns Object 
		*/
		getLabel?(): any;

		/** [Method] Returns the value of labelField  
		* @returns String|String[] 
		*/
		getLabelField?(): any;

		/** [Method] Returns the value of labelOverflowPadding  
		* @returns Number 
		*/
		getLabelOverflowPadding?(): number;

		/** [Method] Returns the value of marker  
		* @returns Object|Boolean 
		*/
		getMarker?(): any;

		/** [Method] Returns the value of markerSubStyle  
		* @returns Object 
		*/
		getMarkerSubStyle?(): any;

		/** [Method] Returns the value of overlaySurface  
		* @returns Object 
		*/
		getOverlaySurface?(): any;

		/** [Method] Returns the value of publishes  
		* @returns String/String[]/Object 
		*/
		getPublishes?(): any;

		/** [Method] Returns the value of reference  
		* @returns String 
		*/
		getReference?(): string;

		/** [Method] Returns the value of renderer  
		* @returns Function 
		*/
		getRenderer?(): any;

		/** [Method] Returns the value of session  
		* @returns Boolean/Object/Ext.data.Session 
		*/
		getSession?(): any;

		/** [Method] Returns the value of showInLegend  
		* @returns Boolean 
		*/
		getShowInLegend?(): boolean;

		/** [Method] Returns the value of showMarkers  
		* @returns Boolean 
		*/
		getShowMarkers?(): boolean;

		/** [Method] Returns sprites the are used to draw this series  */
		getSprites?(): void;

		/** [Method] Returns the value of style  
		* @returns Object 
		*/
		getStyle?(): any;

		/** [Method] Returns the value of subStyle  
		* @returns Object 
		*/
		getSubStyle?(): any;

		/** [Method] Returns the value of surface  
		* @returns Object 
		*/
		getSurface?(): any;

		/** [Method] Returns the value of title  
		* @returns String|String[] 
		*/
		getTitle?(): any;

		/** [Method] Returns the value of tooltip  
		* @returns Object 
		*/
		getTooltip?(): any;

		/** [Method] Returns the value of twoWayBindable  
		* @returns String/String[]/Object 
		*/
		getTwoWayBindable?(): any;

		/** [Method] Returns the value of useDarkerStrokeColor  
		* @returns Boolean|Number 
		*/
		getUseDarkerStrokeColor?(): any;

		/** [Method] Returns the value of viewModel  
		* @returns String/Object/Ext.app.ViewModel 
		*/
		getViewModel?(): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Called by getInherited to initialize the inheritedState the first time it is requested  
		* @param inheritedState Object 
		*/
		initInheritedState?( inheritedState?:any ): void;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Gets the controller that controls this view  
		* @param skipThis Boolean true to not consider the controller directly attached to this view (if it exists). 
		* @returns Ext.app.ViewController The controller. null if no controller is found. 
		*/
		lookupController?( skipThis?:boolean ): Ext.app.IViewController;

		/** [Method] Returns the Ext data Session for this instance  
		* @param skipThis Boolean Pass true to ignore a session configured on this instance and only consider an inherited session. 
		* @returns Ext.data.Session 
		*/
		lookupSession?( skipThis?:boolean ): Ext.data.ISession;

		/** [Method] Returns the Ext app ViewModel for this instance  
		* @param skipThis Object 
		* @returns Ext.app.ViewModel 
		*/
		lookupViewModel?( skipThis?:any ): Ext.app.IViewModel;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Provide legend information to target array  
		* @param target Array The information consists: 
		*/
		provideLegendInfo?( target?:any[] ): void;

		/** [Method] Publish this components state to the ViewModel  
		* @param property String The name of the property to update. 
		* @param value Object The value of property. Only needed if property is given. 
		*/
		publishState?( property?:string, value?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Override the Observable s method to redirect listener scope resolution to the chart  
		* @param defaultScope Object 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of animation  
		* @param animation Object The new value. 
		*/
		setAnimation?( animation?:any ): void;

		/** [Method] Sets the value of background  
		* @param background Object The new value. 
		*/
		setBackground?( background?:any ): void;

		/** [Method] Sets the value of bind  
		* @param bind Object The new value. 
		*/
		setBind?( bind?:any ): void;

		/** [Method] Sets the value of colors  
		* @param colors Array The new value. 
		*/
		setColors?( colors?:any[] ): void;

		/** [Method] Sets the value of controller  
		* @param controller String/Object/Ext.app.ViewController The new value. 
		*/
		setController?( controller?:any ): void;

		/** [Method] Sets the value of defaultListenerScope  
		* @param defaultListenerScope Boolean The new value. 
		*/
		setDefaultListenerScope?( defaultListenerScope?:boolean ): void;

		/** [Method] Sets the value of hidden  
		* @param hidden Boolean|Array The new value. 
		*/
		setHidden?( hidden?:any ): void;

		/** [Method]  
		* @param index Number 
		* @param value Boolean 
		*/
		setHiddenByIndex?( index?:number, value?:boolean ): void;

		/** [Method] Sets the value of highlight  
		* @param highlight Boolean/Object The new value. 
		*/
		setHighlight?( highlight?:any ): void;

		/** [Method] Sets the value of highlightCfg  
		* @param highlightCfg Object The new value. 
		*/
		setHighlightCfg?( highlightCfg?:any ): void;

		/** [Method] Sets the value of highlightItem  
		* @param highlightItem Object The new value. 
		*/
		setHighlightItem?( highlightItem?:any ): void;

		/** [Method] Sets the value of itemInstancing  
		* @param itemInstancing Object The new value. 
		*/
		setItemInstancing?( itemInstancing?:any ): void;

		/** [Method] Sets the value of label  
		* @param label Object The new value. 
		* @returns Object|String The attributes that have been changed or added, or the text for the label. Example to enclose every other label in parentheses: renderer: function (text) { if (index % 2 == 0) { return '(' + text + ')' } } Default value: null. 
		*/
		setLabel?( label?:any ): any;

		/** [Method] Sets the value of labelField  
		* @param labelField String|String[] The new value. 
		*/
		setLabelField?( labelField?:any ): void;

		/** [Method] Sets the value of labelOverflowPadding  
		* @param labelOverflowPadding Number The new value. 
		*/
		setLabelOverflowPadding?( labelOverflowPadding?:number ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of marker  
		* @param marker Object|Boolean The new value. 
		*/
		setMarker?( marker?:any ): void;

		/** [Method] Sets the value of markerSubStyle  
		* @param markerSubStyle Object The new value. 
		*/
		setMarkerSubStyle?( markerSubStyle?:any ): void;

		/** [Method] Sets the value of overlaySurface  
		* @param overlaySurface Object The new value. 
		*/
		setOverlaySurface?( overlaySurface?:any ): void;

		/** [Method] Sets the value of publishes  
		* @param publishes String/String[]/Object The new value. 
		*/
		setPublishes?( publishes?:any ): void;

		/** [Method] Sets the value of reference  
		* @param reference String The new value. 
		*/
		setReference?( reference?:string ): void;

		/** [Method] Sets the value of renderer  
		* @param renderer Function The new value. 
		* @returns Object The attributes that have been changed or added. Note: it is usually possible to add or modify the attributes directly into the config parameter and not return anything, but returning an object with only those attributes that have been changed may allow for optimizations in the rendering of some series. Example to draw every other marker in red: renderer: function (sprite, config, rendererData, index) { if (config.type === 'marker') { return { strokeStyle: (index % 2 === 0 ? 'red' : 'black') }; } }  
		*/
		setRenderer?( renderer?:any ): any;

		/** [Method] Sets the value of session  
		* @param session Boolean/Object/Ext.data.Session The new value. 
		*/
		setSession?( session?:any ): void;

		/** [Method] Sets the value of showInLegend  
		* @param showInLegend Boolean The new value. 
		*/
		setShowInLegend?( showInLegend?:boolean ): void;

		/** [Method] Sets the value of showMarkers  
		* @param showMarkers Boolean The new value. 
		*/
		setShowMarkers?( showMarkers?:boolean ): void;

		/** [Method] Sets the value of store  
		* @param store Object The new value. 
		*/
		setStore?( store?:any ): void;

		/** [Method] Sets the value of style  
		* @param style Object The new value. 
		*/
		setStyle?( style?:any ): void;

		/** [Method] Sets the value of subStyle  
		* @param subStyle Object The new value. 
		*/
		setSubStyle?( subStyle?:any ): void;

		/** [Method] Sets the value of surface  
		* @param surface Object The new value. 
		*/
		setSurface?( surface?:any ): void;

		/** [Method] Sets the value of title  
		* @param title String|String[] The new value. 
		*/
		setTitle?( title?:any ): void;

		/** [Method] Sets the value of tooltip  
		* @param tooltip Object The new value. 
		*/
		setTooltip?( tooltip?:any ): void;

		/** [Method] Sets the value of twoWayBindable  
		* @param twoWayBindable String/String[]/Object The new value. 
		*/
		setTwoWayBindable?( twoWayBindable?:any ): void;

		/** [Method] Sets the value of useDarkerStrokeColor  
		* @param useDarkerStrokeColor Boolean|Number The new value. 
		*/
		setUseDarkerStrokeColor?( useDarkerStrokeColor?:any ): void;

		/** [Method] Sets the value of viewModel  
		* @param viewModel String/Object/Ext.app.ViewModel The new value. 
		*/
		setViewModel?( viewModel?:any ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.chart.series.sprite {
	export interface IAggregative extends Ext.chart.series.sprite.ICartesian {
		/** [Config Option] (Object) */
		dataClose?: any;
		/** [Config Option] (Object) */
		dataHigh?: any;
		/** [Config Option] (Object) */
		dataLow?: any;
		/** [Config Option] (Object) */
		dataOpen?: any;
		/** [Method] Returns the value of aggregator  
		* @returns Object 
		*/
		getAggregator?(): any;

		/** [Method] Render the given visible clip range  
		* @param surface Object 
		* @param ctx Object 
		* @param clip Object 
		* @param rect Object 
		*/
		renderClipped?( surface?:any, ctx?:any, clip?:any, rect?:any ): void;

		/** [Method] Sets the value of aggregator  
		* @param aggregator Object The new value. 
		*/
		setAggregator?( aggregator?:any ): void;

	}

}

declare module Ext.chart.series.sprite {
	export interface IArea extends Ext.chart.series.sprite.IStackedCartesian {
		/** [Config Option] (Boolean) */
		step?: boolean;
		/** [Method] Render the given visible clip range  
		* @param surface Object 
		* @param ctx Object 
		* @param clip Object 
		*/
		renderClipped?( surface?:any, ctx?:any, clip?:any ): void;

	}

}

declare module Ext.chart.series.sprite {
	export interface IBar extends Ext.chart.series.sprite.IStackedCartesian {
		/** [Config Option] (Number) */
		inGroupGapWidth?: number;
		/** [Config Option] (Number) */
		maxBarWidth?: number;
		/** [Config Option] (Number) */
		minBarWidth?: number;
		/** [Config Option] (Number) */
		minGapWidth?: number;
		/** [Config Option] (Number) */
		radius?: number;
		/** [Method] Get the nearest item index from point x y 
		* @param x Object 
		* @param y Object 
		* @returns Number The index 
		*/
		getIndexNearPoint?( x?:any, y?:any ): number;

		/** [Method] Render the given visible clip range  
		* @param surface Ext.draw.Surface 
		* @param ctx Ext.draw.engine.Canvas/Ext.draw.engine.SvgContext 
		* @param clip Array 
		* @param rect Array 
		*/
		renderClipped?( surface?:Ext.draw.ISurface, ctx?:any, clip?:any[], rect?:any[] ): void;

	}

}

declare module Ext.chart.series.sprite {
	export interface IBar3D extends Ext.chart.series.sprite.IBar {
		/** [Config Option] (Number) */
		brightnessFactor?: number;
		/** [Config Option] (Number) */
		saturationFactor?: number;
		/** [Method] Returns the value of series  
		* @returns Object 
		*/
		getSeries?(): any;

		/** [Method] Returns the value of showStroke  
		* @returns Boolean 
		*/
		getShowStroke?(): boolean;

		/** [Method] Sets the value of series  
		* @param series Object The new value. 
		*/
		setSeries?( series?:any ): void;

		/** [Method] Sets the value of showStroke  
		* @param showStroke Boolean The new value. 
		*/
		setShowStroke?( showStroke?:boolean ): void;

	}

}

declare module Ext.chart.series.sprite {
	export interface IBox extends Ext.draw.sprite.ISprite {
		/** [Config Option] (Number) */
		brightnessFactor?: number;
		/** [Config Option] (Number) */
		depth?: number;
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (String) */
		orientation?: string;
		/** [Config Option] (Number) */
		saturationFactor?: number;
		/** [Config Option] (Boolean) */
		showStroke?: boolean;
		/** [Config Option] (Number) */
		width?: number;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any ): any;

		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain Object 
		*/
		updatePlainBBox?( plain?:any ): void;

	}

}

declare module Ext.chart.series.sprite {
	export interface ICandleStick extends Ext.chart.series.sprite.IAggregative {
		/** [Config Option] (Number) */
		barWidth?: number;
		/** [Config Option] (String) */
		ohlcType?: string;
		/** [Config Option] (Number) */
		padding?: number;
	}

}

declare module Ext.chart.series.sprite {
	export interface ICartesian extends Ext.draw.sprite.ISprite, Ext.chart.IMarkerHolder {
		/** [Config Option] (Number) */
		dataMaxX?: number;
		/** [Config Option] (Number) */
		dataMaxY?: number;
		/** [Config Option] (Number) */
		dataMinX?: number;
		/** [Config Option] (Number) */
		dataMinY?: number;
		/** [Config Option] (Object) */
		dataX?: any;
		/** [Config Option] (Object) */
		dataY?: any;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Boolean) */
		flipXY?: boolean;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Object) */
		labels?: any;
		/** [Config Option] (Array) */
		rangeX?: any[];
		/** [Config Option] (Array) */
		rangeY?: any[];
		/** [Config Option] (Number) */
		selectionTolerance?: number;
		/** [Method] Does a binary search of the data on the x axis using the given key  
		* @param key String 
		* @returns * 
		*/
		binarySearch?( key?:string ): any;

		/** [Method]  
		* @param name String 
		* @param marker Ext.chart.Markers 
		*/
		bindMarker?( name?:string, marker?:Ext.chart.IMarkers ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of field  
		* @returns String 
		*/
		getField?(): string;

		/** [Method] Get the nearest item index from point x y 
		* @param x Number 
		* @param y Number 
		* @returns Number The index 
		*/
		getIndexNearPoint?( x?:number, y?:number ): number;

		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @param rect Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any, rect?:any ): any;

		/** [Method] Render the given visible clip range  
		* @param surface Ext.draw.Surface 
		* @param ctx Ext.draw.engine.Canvas/Ext.draw.engine.SvgContext 
		* @param clip Array 
		* @param rect Array 
		*/
		renderClipped?( surface?:Ext.draw.ISurface, ctx?:any, clip?:any[], rect?:any[] ): void;

		/** [Method] Sets the value of field  
		* @param field String The new value. 
		*/
		setField?( field?:string ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain Object 
		*/
		updatePlainBBox?( plain?:any ): void;

	}

}

declare module Ext.chart.series.sprite {
	export interface ILine extends Ext.chart.series.sprite.IAggregative {
		/** [Config Option] (Boolean) */
		fillArea?: boolean;
		/** [Config Option] (Boolean) */
		preciseStroke?: boolean;
		/** [Config Option] (Boolean) */
		smooth?: boolean;
		/** [Config Option] (Boolean) */
		step?: boolean;
		/** [Config Option] (Number) */
		yCap?: number;
		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain Object 
		*/
		updatePlainBBox?( plain?:any ): void;

	}

}

declare module Ext.chart.series.sprite {
	export interface IPie3DPart extends Ext.draw.sprite.IPath, Ext.chart.IMarkerHolder {
		/** [Config Option] (Object) */
		baseColor?: any;
		/** [Config Option] (Number) */
		baseRotation?: number;
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		distortion?: number;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		endRho?: number;
		/** [Config Option] (Number) */
		margin?: number;
		/** [Config Option] (String) */
		part?: string;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Config Option] (Number) */
		startRho?: number;
		/** [Config Option] (Number) */
		thickness?: number;
		/** [Method]  
		* @param name String 
		* @param marker Ext.chart.Markers 
		*/
		bindMarker?( name?:string, marker?:Ext.chart.IMarkers ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Update the path  
		* @param path Object 
		*/
		updatePath?( path?:any ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain Object 
		*/
		updatePlainBBox?( plain?:any ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite  
		* @param transform Object 
		*/
		updateTransformedBBox?( transform?:any ): void;

	}

}

declare module Ext.chart.series.sprite {
	export interface IPieSlice extends Ext.draw.sprite.ISector, Ext.chart.IMarkerHolder {
		/** [Config Option] (Boolean) */
		doCallout?: boolean;
		/** [Config Option] (String) */
		label?: string;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Method]  
		* @param name String 
		* @param marker Ext.chart.Markers 
		*/
		bindMarker?( name?:string, marker?:Ext.chart.IMarkers ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of rendererIndex  
		* @returns Number 
		*/
		getRendererIndex?(): number;

		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @param clip Object 
		* @param rect Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any, clip?:any, rect?:any ): any;

		/** [Method] Sets the value of rendererIndex  
		* @param rendererIndex Number The new value. 
		*/
		setRendererIndex?( rendererIndex?:number ): void;

	}

}

declare module Ext.chart.series.sprite {
	export interface IPolar extends Ext.draw.sprite.ISprite, Ext.chart.IMarkerHolder {
		/** [Config Option] (Number) */
		baseRotation?: number;
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		dataMaxX?: number;
		/** [Config Option] (Number) */
		dataMaxY?: number;
		/** [Config Option] (Number) */
		dataMinX?: number;
		/** [Config Option] (Number) */
		dataMinY?: number;
		/** [Config Option] (Object) */
		dataX?: any;
		/** [Config Option] (Object) */
		dataY?: any;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		endRho?: number;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Object) */
		labels?: any;
		/** [Config Option] (Array) */
		rangeX?: any[];
		/** [Config Option] (Array) */
		rangeY?: any[];
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Config Option] (Number) */
		startRho?: number;
		/** [Method]  
		* @param name String 
		* @param marker Ext.chart.Markers 
		*/
		bindMarker?( name?:string, marker?:Ext.chart.IMarkers ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of field  
		* @returns Object 
		*/
		getField?(): any;

		/** [Method] Sets the value of field  
		* @param field Object The new value. 
		*/
		setField?( field?:any ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain Object 
		*/
		updatePlainBBox?( plain?:any ): void;

	}

}

declare module Ext.chart.series.sprite {
	export interface IRadar extends Ext.chart.series.sprite.IPolar {
		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any ): any;

	}

}

declare module Ext.chart.series.sprite {
	export interface IScatter extends Ext.chart.series.sprite.ICartesian {
		/** [Method] Render the given visible clip range  
		* @param surface Object 
		* @param ctx Object 
		* @param clip Object 
		* @param clipRect Object 
		*/
		renderClipped?( surface?:any, ctx?:any, clip?:any, clipRect?:any ): void;

	}

}

declare module Ext.chart.series.sprite {
	export interface IStackedCartesian extends Ext.chart.series.sprite.ICartesian {
		/** [Method] Get the nearest item index from point x y 
		* @param x Number 
		* @param y Number 
		* @returns Number The index 
		*/
		getIndexNearPoint?( x?:number, y?:number ): number;

	}

}

declare module Ext.chart.series {
	export interface IStackedCartesian extends Ext.chart.series.ICartesian {
		/** [Config Option] (Boolean) */
		fullStack?: boolean;
		/** [Config Option] (Boolean) */
		fullStackTotal?: boolean;
		/** [Config Option] (Array) */
		hidden?: any[];
		/** [Config Option] (Boolean) */
		splitStacks?: boolean;
		/** [Config Option] (Boolean) */
		stacked?: boolean;
		/** [Method] Returns the value of fullStack  
		* @returns Boolean 
		*/
		getFullStack?(): boolean;

		/** [Method] Returns the value of fullStackTotal  
		* @returns Boolean 
		*/
		getFullStackTotal?(): boolean;

		/** [Method] Returns the value of hidden  
		* @returns Array 
		*/
		getHidden?(): any[];

		/** [Method] For a given x y point relative to the main rect find a corresponding item from this series if any  
		* @param x Object 
		* @param y Object 
		* @returns Object An object describing the item, or null if there is no matching item. The exact contents of this object will vary by series type, but should always contain at least the following: 
		*/
		getItemForPoint?( x?:any, y?:any ): any;

		/** [Method] Returns the value of splitStacks  
		* @returns Boolean 
		*/
		getSplitStacks?(): boolean;

		/** [Method] Returns sprites the are used to draw this series  */
		getSprites?(): void;

		/** [Method] Returns the value of stacked  
		* @returns Boolean 
		*/
		getStacked?(): boolean;

		/** [Method] Provide legend information to target array  
		* @param target Object 
		*/
		provideLegendInfo?( target?:any ): void;

		/** [Method] Sets the value of fullStack  
		* @param fullStack Boolean The new value. 
		*/
		setFullStack?( fullStack?:boolean ): void;

		/** [Method] Sets the value of fullStackTotal  
		* @param fullStackTotal Boolean The new value. 
		*/
		setFullStackTotal?( fullStackTotal?:boolean ): void;

		/** [Method] Sets the value of hidden  
		* @param hidden Array The new value. 
		*/
		setHidden?( hidden?:any[] ): void;

		/** [Method] Sets the value of splitStacks  
		* @param splitStacks Boolean The new value. 
		*/
		setSplitStacks?( splitStacks?:boolean ): void;

		/** [Method] Sets the value of stacked  
		* @param stacked Boolean The new value. 
		*/
		setStacked?( stacked?:boolean ): void;

	}

}

declare module Ext.chart {
	export interface ISpaceFillingChart extends Ext.chart.IAbstractChart {
		/** [Method] Redraw the chart  */
		redraw?(): void;

	}

}

declare module Ext.chart.theme {
	export interface IBase extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Config Option] (Object) */
		axis?: any;
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (String/Ext.draw.Color) */
		baseColor?: any;
		/** [Config Option] (Object) */
		chart?: any;
		/** [Config Option] (Array) */
		colors?: any[];
		/** [Config Option] (Object) */
		gradients?: any;
		/** [Config Option] (Object) */
		series?: any;
		/** [Config Option] (Object) */
		sprites?: any;
		/** [Config Option] (Boolean) */
		useGradients?: boolean;
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Method] Returns the value of axis  
		* @returns Object 
		*/
		getAxis?(): any;

		/** [Method] Returns the value of background  
		* @returns Object 
		*/
		getBackground?(): any;

		/** [Method] Returns the value of baseColor  
		* @returns String/Ext.draw.Color 
		*/
		getBaseColor?(): any;

		/** [Method] Returns the value of chart  
		* @returns Object 
		*/
		getChart?(): any;

		/** [Method] Returns the value of colors  
		* @returns Array 
		*/
		getColors?(): any[];

		/** [Method] Returns the value of gradients  
		* @returns Object 
		*/
		getGradients?(): any;

		/** [Method] Returns the value of markerThemes  
		* @returns Object 
		*/
		getMarkerThemes?(): any;

		/** [Method] Returns the value of series  
		* @returns Object 
		*/
		getSeries?(): any;

		/** [Method] Returns the value of sprites  
		* @returns Object 
		*/
		getSprites?(): any;

		/** [Method] Returns the value of useGradients  
		* @returns Boolean 
		*/
		getUseGradients?(): boolean;

		/** [Method] Sets the value of axis  
		* @param axis Object The new value. 
		*/
		setAxis?( axis?:any ): void;

		/** [Method] Sets the value of background  
		* @param background Object The new value. 
		*/
		setBackground?( background?:any ): void;

		/** [Method] Sets the value of baseColor  
		* @param baseColor String/Ext.draw.Color The new value. 
		*/
		setBaseColor?( baseColor?:any ): void;

		/** [Method] Sets the value of chart  
		* @param chart Object The new value. 
		*/
		setChart?( chart?:any ): void;

		/** [Method] Sets the value of colors  
		* @param colors Array The new value. 
		*/
		setColors?( colors?:any[] ): void;

		/** [Method] Sets the value of gradients  
		* @param gradients Object The new value. 
		*/
		setGradients?( gradients?:any ): void;

		/** [Method] Sets the value of markerThemes  
		* @param markerThemes Object The new value. 
		*/
		setMarkerThemes?( markerThemes?:any ): void;

		/** [Method] Sets the value of series  
		* @param series Object The new value. 
		*/
		setSeries?( series?:any ): void;

		/** [Method] Sets the value of sprites  
		* @param sprites Object The new value. 
		*/
		setSprites?( sprites?:any ): void;

		/** [Method] Sets the value of useGradients  
		* @param useGradients Boolean The new value. 
		*/
		setUseGradients?( useGradients?:boolean ): void;

	}

}

declare module Ext.chart.theme {
	export interface IDefault extends Ext.chart.theme.IBase {
	}
	export class Default {
		/** [Property] (Object) */
		static factoryConfig: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns the value of axis  
		* @returns Object 
		*/
		static getAxis(): any;

		/** [Method] Returns the value of background  
		* @returns Object 
		*/
		static getBackground(): any;

		/** [Method] Returns the value of baseColor  
		* @returns String/Ext.draw.Color 
		*/
		static getBaseColor(): any;

		/** [Method] Returns the value of chart  
		* @returns Object 
		*/
		static getChart(): any;

		/** [Method] Returns the value of colors  
		* @returns Array 
		*/
		static getColors(): any[];

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the value of gradients  
		* @returns Object 
		*/
		static getGradients(): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Returns the value of markerThemes  
		* @returns Object 
		*/
		static getMarkerThemes(): any;

		/** [Method] Returns the value of series  
		* @returns Object 
		*/
		static getSeries(): any;

		/** [Method] Returns the value of sprites  
		* @returns Object 
		*/
		static getSprites(): any;

		/** [Method] Returns the value of useGradients  
		* @returns Boolean 
		*/
		static getUseGradients(): boolean;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets the value of axis  
		* @param axis Object The new value. 
		*/
		static setAxis( axis?:any ): void;

		/** [Method] Sets the value of background  
		* @param background Object The new value. 
		*/
		static setBackground( background?:any ): void;

		/** [Method] Sets the value of baseColor  
		* @param baseColor String/Ext.draw.Color The new value. 
		*/
		static setBaseColor( baseColor?:any ): void;

		/** [Method] Sets the value of chart  
		* @param chart Object The new value. 
		*/
		static setChart( chart?:any ): void;

		/** [Method] Sets the value of colors  
		* @param colors Array The new value. 
		*/
		static setColors( colors?:any[] ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Sets the value of gradients  
		* @param gradients Object The new value. 
		*/
		static setGradients( gradients?:any ): void;

		/** [Method] Sets the value of markerThemes  
		* @param markerThemes Object The new value. 
		*/
		static setMarkerThemes( markerThemes?:any ): void;

		/** [Method] Sets the value of series  
		* @param series Object The new value. 
		*/
		static setSeries( series?:any ): void;

		/** [Method] Sets the value of sprites  
		* @param sprites Object The new value. 
		*/
		static setSprites( sprites?:any ): void;

		/** [Method] Sets the value of useGradients  
		* @param useGradients Boolean The new value. 
		*/
		static setUseGradients( useGradients?:boolean ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.chart {
	export interface ITipSurface extends Ext.draw.IContainer {
		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

	}

}

declare module Ext {
	export interface IClass {
		/** [Config Option] (String/String[]) */
		alias?: any;
		/** [Config Option] (String/String[]) */
		alternateClassName?: any;
		/** [Config Option] (Object) */
		cachedConfig?: any;
		/** [Config Option] (Object) */
		config?: any;
		/** [Config Option] (String) */
		extend?: string;
		/** [Config Option] (Object) */
		inheritableStatics?: any;
		/** [Config Option] (String[]/Object) */
		mixins?: any;
		/** [Config Option] (String) */
		override?: string;
		/** [Config Option] (Object) */
		platformConfig?: any;
		/** [Config Option] (Object) */
		privates?: any;
		/** [Config Option] (String[]) */
		requires?: string[];
		/** [Config Option] (Boolean) */
		singleton?: boolean;
		/** [Config Option] (Object) */
		statics?: any;
		/** [Config Option] (String[]) */
		uses?: string[];
		/** [Config Option] (Ext.enums.Widget) */
		xtype?: Ext.enums.IWidget;
	}

}

declare module Ext {
	export interface IClassManager {
	}
	export class ClassManager {
		/** [Config Option] (Object) */
		static debugHooks: any;
		/** [Config Option] (Object) */
		static deprecated: any;
		/** [Method] Adds a batch of class name to alias mappings  
		* @param aliases Object The set of mappings of the form. className : [values...] 
		*/
		static addNameAliasMappings( aliases?:any ): void;

		/** [Method]  
		* @param alternates Object The set of mappings of the form className : [values...] 
		*/
		static addNameAlternateMappings( alternates?:any ): void;

		/** [Method] Retrieve a class by its name  
		* @param name String 
		* @returns Ext.Class class 
		*/
		static get( name?:string ): Ext.IClass;

		/** [Method] Get a reference to the class by its alias  
		* @param alias String 
		* @returns Ext.Class class 
		*/
		static getByAlias( alias?:string ): Ext.IClass;

		/** [Method] Get the class of the provided object returns null if it s not an instance of any class created with Ext define  
		* @param object Object 
		* @returns Ext.Class class 
		*/
		static getClass( object?:any ): Ext.IClass;

		/** [Method] Returns the displayName property or className or object  
		* @param object Object 
		* @returns String 
		*/
		static getDisplayName( object?:any ): string;

		/** [Method] Get the name of the class by its reference or its instance  
		* @param object Ext.Class/Object 
		* @returns String className 
		*/
		static getName( object?:any ): string;

		/** [Method] Instantiate a class by either full name alias or alternate name 
		* @param name String 
		* @param args Mixed Additional arguments after the name will be passed to the class' constructor. 
		* @returns Object instance 
		*/
		static instantiate( name?:string, args?:any ): any;

		/** [Method] Instantiate a class by its alias  
		* @param alias String 
		* @param args Object... Additional arguments after the alias will be passed to the class constructor. 
		* @returns Object instance 
		*/
		static instantiateByAlias( alias:string, ...args:any[] ): any;

		/** [Method] Checks if a class has already been created  
		* @param className String 
		* @returns Boolean exist 
		*/
		static isCreated( className?:string ): boolean;

		/** [Method] Sets a name reference to a class  
		* @param name String 
		* @param value Object 
		* @returns Ext.ClassManager this 
		*/
		static set( name?:string, value?:any ): Ext.IClassManager;

		/** [Method] Creates a namespace and assign the value to the created object  
		* @param name String 
		* @param value Object 
		*/
		static setNamespace( name?:string, value?:any ): void;

	}

}

declare module Ext {
	export interface IComponent extends Ext.IBase, Ext.mixin.IInheritable, Ext.util.IFloating, Ext.util.IPositionable, Ext.util.IObservable, Ext.mixin.IBindable, Ext.util.IAnimate, Ext.util.IElementContainer, Ext.util.IRenderable, Ext.state.IStateful, Ext.util.IFocusable {
		/** [Config Option] (String) */
		alignTarget?: string;
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (Boolean/String/HTMLElement/Ext.dom.Element) */
		autoRender?: any;
		/** [Config Option] (Boolean) */
		autoScroll?: boolean;
		/** [Config Option] (Boolean) */
		autoShow?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String/Boolean) */
		border?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number) */
		columnWidth?: number;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Ext.util.Region/Ext.dom.Element) */
		constrainTo?: any;
		/** [Config Option] (Object/String) */
		constraintInsets?: any;
		/** [Config Option] (String) */
		contentEl?: string;
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (String) */
		defaultAlign?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] ('top'/'bottom'/'left'/'right') */
		dock?: any;
		/** [Config Option] (Boolean/Object) */
		draggable?: any;
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (Boolean) */
		floating?: boolean;
		/** [Config Option] (Boolean) */
		formBind?: boolean;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Number|String) */
		height?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (String/Object) */
		html?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String) */
		itemId?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (Boolean) */
		liveDrag?: boolean;
		/** [Config Option] (Ext.ComponentLoader/Object) */
		loader?: any;
		/** [Config Option] (Number/String) */
		margin?: any;
		/** [Config Option] (String) */
		maskElement?: string;
		/** [Config Option] (Number) */
		maxHeight?: number;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		modelValidation?: boolean;
		/** [Config Option] (String) */
		overCls?: string;
		/** [Config Option] (String) */
		overflowX?: string;
		/** [Config Option] (String) */
		overflowY?: string;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Ext.plugin.Abstract[]/Ext.plugin.Abstract/Object[]/Object/Ext.enums.Plugin[]/Ext.enums.Plugin) */
		plugins?: any;
		/** [Config Option] ("north"/"south"/"east"/"west"/"center") */
		region?: any;
		/** [Config Option] (Object) */
		renderData?: any;
		/** [Config Option] (Object) */
		renderSelectors?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		renderTo?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (String) */
		resizeHandles?: string;
		/** [Config Option] (Boolean) */
		rtl?: boolean;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (String/Object) */
		style?: any;
		/** [Config Option] (Boolean) */
		toFrontOnShow?: boolean;
		/** [Config Option] (Ext.XTemplate/Ext.Template/String/String[]) */
		tpl?: any;
		/** [Config Option] (String) */
		tplWriteMode?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Number) */
		weight?: number;
		/** [Config Option] (Number|String) */
		width?: any;
		/** [Config Option] (Ext.enums.Widget) */
		xtype?: Ext.enums.IWidget;
		/** [Property] (Boolean) */
		_isLayoutRoot?: boolean;

		/** [Property] (String) */
		contentPaddingProperty?: string;

		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Ext.Container) */
		floatParent?: Ext.IContainer;

		/** [Property] (Object) */
		frameSize?: any;

		/** [Property] (Object) */
		initialConfig?: any;

		/** [Property] (Boolean) */
		isComponent?: boolean;

		/** [Property] (Boolean) */
		maskOnDisable?: boolean;

		/** [Property] (Ext.Container) */
		ownerCt?: Ext.IContainer;

		/** [Property] (Boolean) */
		rendered?: boolean;

		/** [Method] Adds a CSS class to the top level element representing this component  
		* @param cls String/String[] The CSS class name to add. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		addClass?( cls?:any ): Ext.IComponent;

		/** [Method] Adds a CSS class to the top level element representing this component  
		* @param cls String/String[] The CSS class name to add. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		addCls?( cls?:any ): Ext.IComponent;

		/** [Method] Adds a cls to the uiCls array which will also call addUIClsToElement and adds to all elements of this component  
		* @param classes String/String[] A string or an array of strings to add to the uiCls. 
		* @param skip Boolean true to skip adding it to the class and do it later (via the return). 
		*/
		addClsWithUI?( classes?:any, skip?:boolean ): void;

		/** [Method] Save a property to the given state object if it is not its default or configured value  
		* @param state Object The state object. 
		* @param propName String The name of the property on this object to save. 
		* @param value String The value of the state property (defaults to this[propName]). 
		* @returns Object The state object or a new object if state was null and the property was saved. 
		*/
		addPropertyToState?( state?:any, propName?:string, value?:string ): any;

		/** [Method] Add events that will trigger the state to be saved  
		* @param events String/String[] The event name or an array of event names. 
		*/
		addStateEvents?( events?:any ): void;

		/** [Method] Method which adds a specified UI  uiCls to the components element  
		* @param uiCls String The UI class to add to the element. 
		*/
		addUIClsToElement?( uiCls?:string ): void;

		/** [Method] Called by the layout system after the Component has been laid out  
		* @param width Number The width that was set 
		* @param height Number The height that was set 
		* @param oldWidth Number/undefined The old width, or undefined if this was the initial layout. 
		* @param oldHeight Number/undefined The old height, or undefined if this was the initial layout. 
		*/
		afterComponentLayout?( width?:number, height?:number, oldWidth?:any, oldHeight?:any ): void;

		/** [Method] Invoked after the Component has been hidden  
		* @param callback Function 
		* @param scope Object 
		*/
		afterHide?( callback?:any, scope?:any ): void;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Template method called after a Component has been positioned  
		* @param x Number 
		* @param y Number 
		*/
		afterSetPosition?( x?:number, y?:number ): void;

		/** [Method] Invoked after the Component is shown after onShow is called 
		* @param animateTarget String/Ext.dom.Element 
		* @param callback Function 
		* @param scope Object 
		*/
		afterShow?( animateTarget?:any, callback?:any, scope?:any ): void;

		/** [Method] Aligns the element with another element relative to the specified anchor points  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] Element animation config object 
		* @returns Ext.util.Positionable this 
		*/
		alignTo?( element?:any, position?:string, offsets?:number[] ): Ext.util.IPositionable;

		/** [Method] Anchors an element to another element and realigns it when the window is resized  
		* @param anchorToEl Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param alignment String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @param monitorScroll Boolean/Number True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay in milliseconds. 
		* @param callback Function The function to call after the animation finishes 
		* @returns Ext.util.Positionable this 
		*/
		anchorTo?( anchorToEl?:any, alignment?:string, offsets?:number[], animate?:any, monitorScroll?:any, callback?:any ): Ext.util.IPositionable;

		/** [Method] Performs custom animation on this object  
		* @param animObj Object 
		* @returns Object this 
		*/
		animate?( animObj?:any ): any;

		/** [Method] Applies the state to the object  
		* @param state Object The state 
		*/
		applyState?( state?:any ): void;

		/** [Method] Template method to do any pre blur processing  
		* @param e Ext.event.Event The event object 
		*/
		beforeBlur?( e?:Ext.event.IEvent ): void;

		/** [Method] Occurs before componentLayout is run  
		* @param adjWidth Number The box-adjusted width that was set. 
		* @param adjHeight Number The box-adjusted height that was set. 
		*/
		beforeComponentLayout?( adjWidth?:number, adjHeight?:number ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Template method to do any pre focus processing  
		* @param e Ext.event.Event The event object 
		*/
		beforeFocus?( e?:Ext.event.IEvent ): void;

		/** [Method] Occurs before componentLayout is run  */
		beforeLayout?(): void;

		/** [Method] Invoked before the Component is shown  */
		beforeShow?(): void;

		/** [Method] Bubbles up the component container hierarchy calling the specified function with each component  
		* @param fn Function The function to call 
		* @param scope Object The scope of the function. Defaults to current node. 
		* @param args Array The args to call the function with. Defaults to passing the current component. 
		* @returns Ext.Component this 
		*/
		bubble?( fn?:any, scope?:any, args?:any[] ): Ext.IComponent;

		/** [Method] Cancel any deferred focus on this component */
		cancelFocus?(): void;

		/** [Method] Center this Component in its container  
		* @returns Ext.Component this 
		*/
		center?(): Ext.IComponent;

		/** [Method] Clone the current component using the original config values passed into this instance by default  
		* @param overrides Object A new config containing any properties to override in the cloned version. An id property can be passed on this object, otherwise one will be generated to avoid duplicates. 
		* @returns Ext.Component clone The cloned copy of this component 
		*/
		cloneConfig?( overrides?:any ): Ext.IComponent;

		/** [Method] Disable the component  
		* @param silent Boolean Passing true will suppress the disable event from being fired. 
		*/
		disable?( silent?:boolean ): void;

		/** [Method] This method needs to be called whenever you change something on this component that requires the Component s layout t  
		* @returns Ext.Component this 
		*/
		doComponentLayout?(): Ext.IComponent;

		/** [Method] Moves this floating Component into a constrain region  
		* @param constrainTo String/HTMLElement/Ext.dom.Element/Ext.util.Region The Element or Region into which this Component is to be constrained. Defaults to the element into which this floating Component was rendered. 
		*/
		doConstrain?( constrainTo?:any ): void;

		/** [Method] Enable the component 
		* @param silent Boolean Passing true will suppress the enable event from being fired. 
		*/
		enable?( silent?:boolean ): void;

		/** [Method] Ensures that this component is attached to document body  
		* @param runLayout Boolean True to run the component's layout. 
		*/
		ensureAttachedToBody?( runLayout?:boolean ): void;

		/** [Method] Find a container above this component at any level by a custom function  
		* @param fn Function The custom function to call with the arguments (container, this component). 
		* @returns Ext.container.Container The first Container for which the custom function returns true 
		*/
		findParentBy?( fn?:any ): Ext.container.IContainer;

		/** [Method] Find a container above this component at any level by xtype or class See also the up method  
		* @param xtype String/Ext.Class The xtype string for a component, or the class of the component directly 
		* @returns Ext.container.Container The first Container which matches the given xtype or class 
		*/
		findParentByType?( xtype?:any ): Ext.container.IContainer;

		/** [Method] Retrieves plugin from this component s collection by its ptype  
		* @param ptype String The Plugin's ptype as specified by the class's alias configuration. 
		* @returns Ext.plugin.Abstract plugin instance. 
		*/
		findPlugin?( ptype?:string ): Ext.plugin.IAbstract;

		/** [Method] Try to focus this component  
		* @param selectText Mixed If applicable, true to also select all the text in this component, or an array consisting of start and end (defaults to start) position of selection. 
		* @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds). 
		* @param callback Function Only needed if the delay parameter is used. A function to call upon focus. 
		* @param scope Function Only needed if the delay parameter is used. The scope (this reference) in which to execute the callback. 
		* @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option. If this component is disabled, a closely related component will be focused and that will be returned. 
		*/
		focus?( selectText?:any, delay?:any, callback?:any, scope?:any ): Ext.IComponent;

		/** [Method] Updates this component s layout  
		* @param options Object An object with layout options. 
		*/
		forceComponentLayout?( options?:any ): void;

		/** [Method] Returns the current animation if this object has any effects actively running or queued else returns false  
		* @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false 
		*/
		getActiveAnimation?(): any;

		/** [Method] Gets the x y coordinates to align this element with another element  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @returns Number[] [x, y] 
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:number[] ): number[];

		/** [Method] Returns the value of alwaysOnTop  
		* @returns Boolean/Number 
		*/
		getAlwaysOnTop?(): any;

		/** [Method] Gets the x y coordinates specified by the anchor position on the element  
		* @param anchor String The specified anchor position. See alignTo for details on supported anchor positions. 
		* @param local Boolean True to get the local (element top/left-relative) anchor position instead of page coordinates 
		* @param size Object An object containing the size to use for calculating anchor position {width: (target width), height: (target height)} (defaults to the element's current size) 
		* @returns Number[] [x, y] An array containing the element's x and y coordinates 
		*/
		getAnchorXY?( anchor?:string, local?:boolean, size?:any ): number[];

		/** [Method] Returns the value of bind  
		* @returns Object 
		*/
		getBind?(): any;

		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param contentBox Boolean If true a box for the content of the element is returned. 
		* @param local Boolean If true the element's left and top relative to its offsetParent are returned instead of page x/y. 
		* @returns Object An object in the format 
		*/
		getBox?( contentBox?:boolean, local?:boolean ): any;

		/** [Method] Implements an upward event bubbling policy  */
		getBubbleTarget?(): void;

		/** [Method] Returns the value of childEls  
		* @returns Object/String[]/Object[] 
		*/
		getChildEls?(): any;

		/** [Method] Returns the content region of this element for purposes of constraining floating children  */
		getConstrainRegion?(): void;

		/** [Method] Returns the X Y vector by which this Positionable s element must be translated to make a best attempt to constrain  
		* @param constrainTo Ext.util.Positionable/HTMLElement/String/Ext.util.Region The Positionable, HTMLElement, element id, or Region into which the element is to be constrained. 
		* @param proposedPosition Number[] A proposed [X, Y] position to test for validity and to produce a vector for instead of using the element's current position 
		* @param proposedSize Number[] A proposed [width, height] size to constrain instead of using the element's current size 
		* @returns Number[]/Boolean If the element needs to be translated, an [X, Y] vector by which this element must be translated. Otherwise, false. 
		*/
		getConstrainVector?( constrainTo?:any, proposedPosition?:number[], proposedSize?:number[] ): any;

		/** [Method] Returns the value of controller  
		* @returns String/Object/Ext.app.ViewController 
		*/
		getController?(): any;

		/** [Method] Returns the value of data  
		* @returns Object 
		*/
		getData?(): any;

		/** [Method] Returns the value of defaultListenerScope  
		* @returns Boolean 
		*/
		getDefaultListenerScope?(): boolean;

		/** [Method] Retrieves the top level element representing this component  
		* @returns Ext.dom.Element 
		*/
		getEl?(): Ext.dom.IElement;

		/** [Method] Returns the focus styling holder element associated with this Focusable  
		* @returns Ext.Element The focus styling element. 
		*/
		getFocusClsEl?(): Ext.IElement;

		/** [Method] Returns the focus holder element associated with this Focusable  
		* @returns Ext.Element 
		*/
		getFocusEl?(): Ext.IElement;

		/** [Method] Gets the current height of the component s underlying element  
		* @returns Number 
		*/
		getHeight?(): number;

		/** [Method] Retrieves the id of this component  
		* @returns String 
		*/
		getId?(): string;

		/** [Method] This method returns an object containing the inherited properties for this instance  
		* @param inner Boolean Pass true to return inheritedStateInner instead of the normal inheritedState object. This is only needed internally and should not be passed by user code. 
		* @returns Object The inheritedState object containing inherited properties. 
		*/
		getInherited?( inner?:boolean ): any;

		/** [Method] This method returns the value of a config property that may be inherited from some ancestor  
		* @param property String The name of the config property to return. 
		* @param skipThis Boolean Pass true if the property should be ignored if found on this instance. In other words, true means the property must be inherited and not explicitly set on this instance. 
		* @returns Mixed The value of the requested property. 
		*/
		getInheritedConfig?( property?:string, skipThis?:boolean ): any;

		/** [Method] This function takes the position argument passed to onRender and returns a DOM element that you can use in the insert  
		* @param position String/Number/Ext.dom.Element/HTMLElement Index, element id or element you want to put this component before. 
		* @returns HTMLElement DOM element that you can use in the insertBefore 
		*/
		getInsertPosition?( position?:any ): HTMLElement;

		/** [Method] Returns the value of itemId assigned to this component or when that is not set returns the value of id  
		* @returns String 
		*/
		getItemId?(): string;

		/** [Method] Gets the Ext ComponentLoader for this Component  
		* @returns Ext.ComponentLoader The loader instance, null if it doesn't exist. 
		*/
		getLoader?(): Ext.IComponentLoader;

		/** [Method] Overridden in Ext rtl Component  
		* @returns Number The local x coordinate 
		*/
		getLocalX?(): number;

		/** [Method] Overridden in Ext rtl Component  
		* @returns Number[] The local XY position of the element 
		*/
		getLocalXY?(): number[];

		/** [Method] Returns the y coordinate of this element reletive to its offsetParent  
		* @returns Number The local y coordinate 
		*/
		getLocalY?(): number;

		/** [Method] Returns the element which is masked by the mask method or into which the LoadMask is rendered into  */
		getMaskTarget?(): void;

		/** [Method] Returns the value of maxHeight  
		* @returns Number 
		*/
		getMaxHeight?(): number;

		/** [Method] Returns the value of maxWidth  
		* @returns Number 
		*/
		getMaxWidth?(): number;

		/** [Method] Returns the value of minHeight  
		* @returns Number 
		*/
		getMinHeight?(): number;

		/** [Method] Returns the value of minWidth  
		* @returns Number 
		*/
		getMinWidth?(): number;

		/** [Method] Returns the offsets of this element from the passed element  
		* @param offsetsTo Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or element id to get get the offsets from. 
		* @returns Number[] The XY page offsets (e.g. [100, -200]) 
		*/
		getOffsetsTo?( offsetsTo?:any ): number[];

		/** [Method] Retrieves a plugin from this component s collection by its pluginId  
		* @param pluginId String 
		* @returns Ext.plugin.Abstract plugin instance. 
		*/
		getPlugin?( pluginId?:string ): Ext.plugin.IAbstract;

		/** [Method] Gets the current XY position of the component s underlying element  
		* @param local Boolean If true the element's left and top are returned instead of page XY. 
		* @returns Number[] The XY position of the element (e.g., [100, 200]) 
		*/
		getPosition?( local?:boolean ): number[];

		/** [Method] Returns the value of publishes  
		* @returns String/String[]/Object 
		*/
		getPublishes?(): any;

		/** [Method] Used by ComponentQuery and the up method to find the owning Component in the linkage hierarchy  */
		getRefOwner?(): void;

		/** [Method] Returns the value of reference  
		* @returns String 
		*/
		getReference?(): string;

		/** [Method] Returns a region object that defines the area of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" properties. 
		*/
		getRegion?(): Ext.util.IRegion;

		/** [Method] Returns the x scroll position for this component  
		* @returns Number 
		*/
		getScrollX?(): number;

		/** [Method] Returns the y scroll position for this component  
		* @returns Number 
		*/
		getScrollY?(): number;

		/** [Method] Returns the value of scrollable  
		* @returns Boolean/String/Object 
		*/
		getScrollable?(): any;

		/** [Method] Returns the value of session  
		* @returns Boolean/Object/Ext.data.Session 
		*/
		getSession?(): any;

		/** [Method] Gets the current size of the component s underlying element  
		* @param contentSize Boolean true to get the width/size minus borders and padding 
		* @returns Object An object containing the element's size: 
		*/
		getSize?( contentSize?:boolean ): any;

		/** [Method] Returns an object that describes how this component s width and height are managed  
		* @param ownerCtSizeModel Object 
		* @returns Object The size model for this component. 
		*/
		getSizeModel?( ownerCtSizeModel?:any ): any;

		/** [Method] The supplied default state gathering method for the Component class  
		* @returns Object 
		*/
		getState?(): any;

		/** [Method] Return the actual tabIndex for this Focusable  
		* @returns Number tabIndex attribute value 
		*/
		getTabIndex?(): number;

		/** [Method] Returns the value of twoWayBindable  
		* @returns String/String[]/Object 
		*/
		getTwoWayBindable?(): any;

		/** [Method] Returns the value of viewModel  
		* @returns String/Object/Ext.app.ViewModel 
		*/
		getViewModel?(): any;

		/** [Method] Returns the content region of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" member data. 
		*/
		getViewRegion?(): Ext.util.IRegion;

		/** [Method] Gets the current width of the component s underlying element  
		* @returns Number 
		*/
		getWidth?(): number;

		/** [Method] Gets the current X position of the DOM element based on page coordinates  
		* @returns Number The X position of the element 
		*/
		getX?(): number;

		/** [Method] Gets the xtype for this component as registered with Ext ComponentManager  
		* @returns String The xtype 
		*/
		getXType?(): string;

		/** [Method] Returns this Component s xtype hierarchy as a slash delimited string  
		* @returns String The xtype hierarchy string 
		*/
		getXTypes?(): string;

		/** [Method] Gets the current position of the DOM element based on page coordinates  
		* @returns Number[] The XY position of the element 
		*/
		getXY?(): number[];

		/** [Method] Gets the current Y position of the DOM element based on page coordinates  
		* @returns Number The Y position of the element 
		*/
		getY?(): number;

		/** [Method] Returns the current animation if this object has any effects actively running or queued else returns false  
		* @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false 
		*/
		hasActiveFx?(): any;

		/** [Method] Checks if the specified CSS class exists on this element s DOM node  
		* @param className String The CSS class to check for. 
		* @returns Boolean true if the class exists, else false. 
		*/
		hasCls?( className?:string ): boolean;

		/** [Method] Checks if there is currently a specified uiCls  
		* @param cls String The cls to check. 
		*/
		hasUICls?( cls?:string ): void;

		/** [Method] Hides this Component setting it to invisible using the configured hideMode  
		* @param animateTarget String/Ext.dom.Element/Ext.Component only valid for floating Components such as Windows or ToolTips, or regular Components which have been configured with floating: true.. The target to which the Component should animate while hiding. 
		* @param callback Function A callback function to call after the Component is hidden. 
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to this Component. 
		* @returns Ext.Component this 
		*/
		hide?( animateTarget?:any, callback?:any, scope?:any ): Ext.IComponent;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Initialize any events on this component */
		initEvents?(): void;

		/** [Method] Template method to do any Focusable related initialization that does not involve event listeners creation  */
		initFocusable?(): void;

		/** [Method] Template method to do any event listener initialization for a Focusable  */
		initFocusableEvents?(): void;

		/** [Method] Called by getInherited to initialize the inheritedState the first time it is requested  
		* @param inheritedState Object 
		*/
		initInheritedState?( inheritedState?:any ): void;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] Tests whether this Component matches a ComponentQuery selector string  
		* @param selector String The selector string to test against. 
		* @returns Boolean true if this Component matches the selector. 
		*/
		is?( selector?:string ): boolean;

		/** [Method] Determines whether this Component is an ancestor of the passed Component  
		* @param possibleDescendant Ext.Component The Component to test for presence within this Component's subtree. 
		*/
		isAncestor?( possibleDescendant?:Ext.IComponent ): void;

		/** [Method] Determines whether this component is the descendant of a passed component  
		* @param ancestor Ext.Component A Component which may contain this Component. 
		* @returns Boolean true if the component is the descendant of the passed component, otherwise false. 
		*/
		isDescendantOf?( ancestor?:Ext.IComponent ): boolean;

		/** [Method] Method to determine whether this Component is currently disabled  
		* @returns Boolean the disabled state of this Component. 
		*/
		isDisabled?(): boolean;

		/** [Method] Method to determine whether this Component is draggable  
		* @returns Boolean the draggable state of this component. 
		*/
		isDraggable?(): boolean;

		/** [Method] Method to determine whether this Component is droppable  
		* @returns Boolean the droppable state of this component. 
		*/
		isDroppable?(): boolean;

		/** [Method] Method to determine whether this Component is floating  
		* @returns Boolean the floating state of this component. 
		*/
		isFloating?(): boolean;

		/** [Method] Determine if this Focusable can receive focus at this time  
		* @param deep Boolean Optionally determine if the container itself is focusable, or if container's focus is delegated to a child component and that child is focusable. 
		* @returns Boolean True if component is focusable, false if not. 
		*/
		isFocusable?( deep?:boolean ): boolean;

		/** [Method] Method to determine whether this Component is currently set to hidden  
		* @returns Boolean the hidden state of this Component. 
		*/
		isHidden?(): boolean;

		/** [Method] Determines whether this Component is the root of a layout  */
		isLayoutRoot?(): void;

		/** [Method] Returns true if layout is suspended for this component  
		* @returns Boolean true layout of this component is suspended. 
		*/
		isLayoutSuspended?(): boolean;

		/** [Method] Returns masked state for this Component  
		* @param deep Boolean True to look up this Component's parent masked state. 
		* @returns Boolean True if masked, false otherwise. 
		*/
		isMasked?( deep?:boolean ): boolean;

		/** [Method] Returns true if this component is visible  
		* @param deep Boolean Pass true to interrogate the visibility status of all parent Containers to determine whether this Component is truly visible to the user. Generally, to determine whether a Component is hidden, the no argument form is needed. For example when creating dynamically laid out UIs in a hidden Container before showing them. 
		* @returns Boolean true if this component is visible, false otherwise. 
		*/
		isVisible?( deep?:boolean ): boolean;

		/** [Method] Tests whether or not this Component is of a specific xtype  
		* @param xtype String The xtype to check for this Component 
		* @param shallow Boolean true to check whether this Component is directly of the specified xtype, false to check whether this Component is descended from the xtype. 
		* @returns Boolean true if this component descends from the specified xtype, false otherwise. 
		*/
		isXType?( xtype?:string, shallow?:boolean ): boolean;

		/** [Method] Gets the controller that controls this view  
		* @param skipThis Boolean true to not consider the controller directly attached to this view (if it exists). 
		* @returns Ext.app.ViewController The controller. null if no controller is found. 
		*/
		lookupController?( skipThis?:boolean ): Ext.app.IViewController;

		/** [Method] Returns the Ext data Session for this instance  
		* @param skipThis Boolean Pass true to ignore a session configured on this instance and only consider an inherited session. 
		* @returns Ext.data.Session 
		*/
		lookupSession?( skipThis?:boolean ): Ext.data.ISession;

		/** [Method] Returns the Ext app ViewModel for this instance  
		* @param skipThis Boolean Pass true to ignore a viewModel configured on this instance and only consider an inherited view model. 
		* @returns Ext.app.ViewModel 
		*/
		lookupViewModel?( skipThis?:boolean ): Ext.app.IViewModel;

		/** [Method] Masks this component with a semi opaque layer and makes the contents unavailable to clicks  
		* @param msg String A message to show in the center of the mask layer. 
		* @param msgCls String A CSS class name to use on the message element in the center of the layer. 
		*/
		mask?( msg?:string, msgCls?:string ): void;

		/** [Method] Move the element relative to its current position  
		* @param direction String Possible values are:  "l" (or "left") "r" (or "right") "t" (or "top", or "up") "b" (or "bottom", or "down")  
		* @param distance Number How far to move the element in pixels 
		*/
		move?( direction?:string, distance?:number ): void;

		/** [Method] Returns the next node in the Component tree in tree traversal order  
		* @param selector String A ComponentQuery selector to filter the following nodes. 
		* @returns Ext.Component The next node (or the next node which matches the selector). Returns null if there is no matching node. 
		*/
		nextNode?( selector?:string ): Ext.IComponent;

		/** [Method] Returns the next sibling of this Component  
		* @param selector String A ComponentQuery selector to filter the following items. 
		* @returns Ext.Component The next sibling (or the next sibling which matches the selector). Returns null if there is no matching sibling. 
		*/
		nextSibling?( selector?:string ): Ext.IComponent;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  
		* @param container Ext.container.Container Container which holds the component. 
		* @param pos Number Position at which the component was added. 
		* @param instanced Boolean false if this component was instanced by the parent container. true if the instance already existed when it was passed to the container. 
		*/
		onAdded?( container?:Ext.container.IContainer, pos?:number, instanced?:boolean ): void;

		/** [Method] Invoked when this component has first achieved size  
		* @param width Number The width of this component 
		* @param height Number The height of this component 
		*/
		onBoxReady?( width?:number, height?:number ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Allows addition of behavior to the disable operation  */
		onDisable?(): void;

		/** [Method] Allows addition of behavior to the enable operation  */
		onEnable?(): void;

		/** [Method] Called when focus enters this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		onFocusEnter?( e?:Ext.event.IEvent ): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		onFocusLeave?( e?:Ext.event.IEvent ): void;

		/** [Method] Allows addition of behavior to the hide operation  
		* @param animateTarget String/Ext.dom.Element/Ext.Component 
		* @param callback Function 
		* @param scope Object 
		*/
		onHide?( animateTarget?:any, callback?:any, scope?:any ): void;

		/** [Method] Called after the component is moved this method is empty by default but can be implemented by any subclass that need  
		* @param x Number The new x position. 
		* @param y Number The new y position. 
		*/
		onPosition?( x?:number, y?:number ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param destroying Boolean Will be passed as true if the Container performing the remove operation will delete this Component upon remove. 
		*/
		onRemoved?( destroying?:boolean ): void;

		/** [Method] Template method called when this Component s DOM structure is created  
		* @param parentNode Ext.dom.Element The parent Element in which this Component's encapsulating element is contained. 
		* @param containerIdx Number The index within the parent Container's child collection of this Component. 
		*/
		onRender?( parentNode?:Ext.dom.IElement, containerIdx?:number ): void;

		/** [Method] Called when the component is resized  
		* @param width Object 
		* @param height Object 
		* @param oldWidth Object 
		* @param oldHeight Object 
		*/
		onResize?( width?:any, height?:any, oldWidth?:any, oldHeight?:any ): void;

		/** [Method] Invoked when a scroll operation is completed via this component s scroller  
		* @param x Number The current x position 
		* @param y Number The current y position 
		*/
		onScrollEnd?( x?:number, y?:number ): void;

		/** [Method] Invoked when this component is scrolled via its scroller  
		* @param x Number The current x position 
		* @param y Number The current y position 
		*/
		onScrollMove?( x?:number, y?:number ): void;

		/** [Method] Invoked when a scroll is initiated on this component via its scroller  
		* @param x Number The current x position 
		* @param y Number The current y position 
		*/
		onScrollStart?( x?:number, y?:number ): void;

		/** [Method] Allows addition of behavior to the show operation  
		* @param animateTarget String/Ext.dom.Element 
		* @param callback Function 
		* @param scope Object 
		*/
		onShow?( animateTarget?:any, callback?:any, scope?:any ): void;

		/** [Method] Invoked after the afterShow method is complete  
		* @param callback Function 
		* @param scope Object 
		*/
		onShowComplete?( callback?:any, scope?:any ): void;

		/** [Method] Template method to do any post blur processing  
		* @param e Ext.event.Event The event object 
		*/
		postBlur?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method to do any post focus processing  
		* @param e Ext.event.Event The event object 
		*/
		postFocus?( e?:Ext.event.IEvent ): void;

		/** [Method] Returns the previous node in the Component tree in tree traversal order  
		* @param selector String A ComponentQuery selector to filter the preceding nodes. 
		* @returns Ext.Component The previous node (or the previous node which matches the selector). Returns null if there is no matching node. 
		*/
		previousNode?( selector?:string ): Ext.IComponent;

		/** [Method] Returns the previous sibling of this Component  
		* @param selector String A ComponentQuery selector to filter the preceding items. 
		* @returns Ext.Component The previous sibling (or the previous sibling which matches the selector). Returns null if there is no matching sibling. 
		*/
		previousSibling?( selector?:string ): Ext.IComponent;

		/** [Method] Publish this components state to the ViewModel  
		* @param property String The name of the property to update. 
		* @param value Object The value of property. Only needed if property is given. 
		*/
		publishState?( property?:string, value?:any ): void;

		/** [Method] Called by Component doAutoRender Register a Container configured floating true with this Component s ZIndexManager  
		* @param cmp Object 
		*/
		registerFloatingItem?( cmp?:any ): void;

		/** [Method] Remove any anchor to this element  
		* @returns Ext.util.Positionable this 
		*/
		removeAnchor?(): Ext.util.IPositionable;

		/** [Method] Removes a CSS class from the top level element representing this component  
		* @param cls String/String[] The CSS class name to remove. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		removeClass?( cls?:any ): Ext.IComponent;

		/** [Method] Removes a CSS class from the top level element representing this component  
		* @param cls String/String[] The CSS class name to remove. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		removeCls?( cls?:any ): Ext.IComponent;

		/** [Method] Removes a cls to the uiCls array which will also call removeUIClsFromElement and removes it from all elements of thi  
		* @param cls String/String[] A string or an array of strings to remove to the uiCls. 
		*/
		removeClsWithUI?( cls?:any ): void;

		/** [Method] Method which removes a specified UI  uiCls from the components element  
		* @param uiCls String The UI class to remove from the element. 
		*/
		removeUIClsFromElement?( uiCls?:string ): void;

		/** [Method] Renders the Component into the passed HTML element  
		* @param container Ext.dom.Element/HTMLElement/String The element this Component should be rendered into. If it is being created from existing markup, this should be omitted. 
		* @param position String/Number The element ID or DOM node index within the container before which this component will be inserted (defaults to appending to the end of the container) 
		*/
		render?( container?:any, position?:any ): void;

		/** [Method] Returns the default listener scope for a satellite of this component  
		* @param satellite Ext.mixin.Observable 
		* @param defaultScope Object 
		* @returns Object The listener scope 
		*/
		resolveSatelliteListenerScope?( satellite?:Ext.mixin.IObservable, defaultScope?:any ): any;

		/** [Method] Conditionally saves a single property from this object to the given state object  
		* @param propName String The name of the property to save. 
		* @param state Object The state object in to which to save the property. 
		* @param stateName String The name to use for the property in state. 
		* @returns Boolean True if the property was saved, false if not. 
		*/
		savePropToState?( propName?:string, state?:any, stateName?:string ): boolean;

		/** [Method] Gathers additional named properties of the instance and adds their current values to the passed state object  
		* @param propNames String/String[] The name (or array of names) of the property to save. 
		* @param state Object The state object in to which to save the property values. 
		* @returns Object state 
		*/
		savePropsToState?( propNames?:any, state?:any ): any;

		/** [Method] Saves the state of the object to the persistence store  */
		saveState?(): void;

		/** [Method] Scrolls this Component by the passed delta values optionally animating  
		* @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties. 
		* @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object. 
		* @param animate Boolean/Object Animate flag/config object if the delta values were passed separately. 
		*/
		scrollBy?( deltaX?:any, deltaY?:any, animate?:any ): void;

		/** [Method] Scrolls this component to the specified x and y coordinates  
		* @param x Number 
		* @param y Number 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		*/
		scrollTo?( x?:number, y?:number, animate?:any ): void;

		/** [Method] Ensures that all effects queued after sequenceFx is called on this object are run in sequence  
		* @returns Object this 
		*/
		sequenceFx?(): any;

		/** [Method] Sets the value of alwaysOnTop  
		* @param alwaysOnTop Boolean/Number The new value. 
		*/
		setAlwaysOnTop?( alwaysOnTop?:any ): void;

		/** [Method] Sets the overflow on the content element of the component  
		* @param scroll Boolean True to allow the Component to auto scroll. 
		* @returns Ext.Component this 
		*/
		setAutoScroll?( scroll?:boolean ): Ext.IComponent;

		/** [Method] Sets the value of bind  
		* @param bind Object The new value. 
		*/
		setBind?( bind?:any ): void;

		/** [Method]  
		* @param border String/Number The border, see border. If a falsey value is passed the border will be removed. 
		*/
		setBorder?( border?:any ): void;

		/** [Method] Sets the element s box  
		* @param box Object The box to fill {x, y, width, height} 
		* @returns Ext.util.Positionable this 
		*/
		setBox?( box?:any ): Ext.util.IPositionable;

		/** [Method] Sets the value of childEls  
		* @param childEls Object/String[]/Object[] The new value. 
		*/
		setChildEls?( childEls?:any ): void;

		/** [Method] Sets the value of controller  
		* @param controller String/Object/Ext.app.ViewController The new value. 
		*/
		setController?( controller?:any ): void;

		/** [Method] Sets the value of data  
		* @param data Object The new value. 
		*/
		setData?( data?:any ): void;

		/** [Method] Sets the value of defaultListenerScope  
		* @param defaultListenerScope Boolean The new value. 
		*/
		setDefaultListenerScope?( defaultListenerScope?:boolean ): void;

		/** [Method] Enable or disable the component  
		* @param disabled Boolean true to disable. 
		*/
		setDisabled?( disabled?:boolean ): void;

		/** [Method] Sets the dock position of this component in its parent panel  
		* @param dock Object The dock position. 
		* @returns Ext.Component this 
		*/
		setDock?( dock?:any ): Ext.IComponent;

		/** [Method] Sets the dock position of this component in its parent panel  
		* @param dock Object The dock position. 
		* @returns Ext.Component this 
		*/
		setDocked?( dock?:any ): Ext.IComponent;

		/** [Method] Sets the height of the component  
		* @param height Number The new height to set. This may be one of:  A Number specifying the new height in pixels. A String used to set the CSS height style. undefined to leave the height unchanged. null to clear the height.  
		* @returns Ext.Component this 
		*/
		setHeight?( height?:number ): Ext.IComponent;

		/** [Method] Sets the hidden state of this component  
		* @param hidden Boolean 
		* @returns Ext.Component 
		*/
		setHidden?( hidden?:boolean ): Ext.IComponent;

		/** [Method] This method allows you to show or hide a LoadMask on top of this component  
		* @param load Boolean/Object/String True to show the default LoadMask, a config object that will be passed to the LoadMask constructor, or a message String to show. False to hide the current LoadMask. 
		* @returns Ext.LoadMask The LoadMask instance that has just been shown. 
		*/
		setLoading?( load?:any ): Ext.ILoadMask;

		/** [Method] Overridden in Ext rtl Component  
		* @param x Object 
		* @returns Ext.util.Positionable this 
		*/
		setLocalX?( x?:any ): Ext.util.IPositionable;

		/** [Method] Overridden in Ext rtl Component  
		* @param x Object 
		* @param y Object 
		* @returns Ext.util.Positionable this 
		*/
		setLocalXY?( x?:any, y?:any ): Ext.util.IPositionable;

		/** [Method] Sets the local y coordinate of this element using CSS style  
		* @param y Object 
		* @returns Ext.util.Positionable this 
		*/
		setLocalY?( y?:any ): Ext.util.IPositionable;

		/** [Method] Sets the margin on the target element  
		* @param margin Number/String The margin to set. See the margin config. 
		*/
		setMargin?( margin?:any ): void;

		/** [Method] Sets the value of maxHeight  
		* @param maxHeight Number The new value. 
		*/
		setMaxHeight?( maxHeight?:number ): void;

		/** [Method] Sets the value of maxWidth  
		* @param maxWidth Number The new value. 
		*/
		setMaxWidth?( maxWidth?:number ): void;

		/** [Method] Sets the value of minHeight  
		* @param minHeight Number The new value. 
		*/
		setMinHeight?( minHeight?:number ): void;

		/** [Method] Sets the value of minWidth  
		* @param minWidth Number The new value. 
		*/
		setMinWidth?( minWidth?:number ): void;

		/** [Method] Sets the overflow x y on the content element of the component  
		* @param overflowX String The overflow-x value. 
		* @param overflowY String The overflow-y value. 
		* @returns Ext.Component this 
		*/
		setOverflowXY?( overflowX?:string, overflowY?:string ): Ext.IComponent;

		/** [Method] Sets the page XY position of the component  
		* @param x Number/Number[] The new x position or an array of [x,y]. 
		* @param y Number The new y position. 
		* @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration. 
		* @returns Ext.Component this 
		*/
		setPagePosition?( x?:any, y?:number, animate?:any ): Ext.IComponent;

		/** [Method] Sets the left and top of the component  
		* @param x Number/Number[]/Object The new left, an array of [x,y], or animation config object containing x and y properties. 
		* @param y Number The new top. 
		* @param animate Boolean/Object If true, the Component is animated into its new position. You may also pass an animation configuration. 
		* @returns Ext.Component this 
		*/
		setPosition?( x?:any, y?:number, animate?:any ): Ext.IComponent;

		/** [Method] Sets the value of publishes  
		* @param publishes String/String[]/Object The new value. 
		*/
		setPublishes?( publishes?:any ): void;

		/** [Method] Sets the value of reference  
		* @param reference String The new value. 
		*/
		setReference?( reference?:string ): void;

		/** [Method] This method changes the region config property for this border region  
		* @param region String The new region value ("north", "south", "east" or "west"). 
		* @returns String The previous value of the region property. 
		*/
		setRegion?( region?:string ): string;

		/** [Method] Sets the x scroll position for this component  
		* @param x Number 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		*/
		setScrollX?( x?:number, animate?:any ): void;

		/** [Method] Sets the y scroll position for this component  
		* @param y Number 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		*/
		setScrollY?( y?:number, animate?:any ): void;

		/** [Method] Sets the value of scrollable  
		* @param scrollable Boolean/String/Object The new value. 
		*/
		setScrollable?( scrollable?:any ): void;

		/** [Method] Sets the value of session  
		* @param session Boolean/Object/Ext.data.Session The new value. 
		*/
		setSession?( session?:any ): void;

		/** [Method] Sets the width and height of this Component  
		* @param width Number/String/Object The new width to set. This may be one of:  A Number specifying the new width in pixels. A String used to set the CSS width style. A size object in the format {width: widthValue, height: heightValue}. undefined to leave the width unchanged.  
		* @param height Number/String The new height to set (not required if a size object is passed as the first arg). This may be one of:  A Number specifying the new height in pixels. A String used to set the CSS height style. Animation may not be used. undefined to leave the height unchanged.  
		* @returns Ext.Component this 
		*/
		setSize?( width?:any, height?:any ): Ext.IComponent;

		/** [Method] Sets the style for this Component s primary element  
		* @param property String/Object The style property to be set, or an object of multiple styles. 
		* @param value String The value to apply to the given property, or null if an object was passed. 
		* @returns Ext.Component this 
		*/
		setStyle?( property?:any, value?:string ): Ext.IComponent;

		/** [Method] Set the tabIndex property for this Focusable  
		* @param newTabIndex Number new tabIndex to set 
		*/
		setTabIndex?( newTabIndex?:number ): void;

		/** [Method] Sets the value of twoWayBindable  
		* @param twoWayBindable String/String[]/Object The new value. 
		*/
		setTwoWayBindable?( twoWayBindable?:any ): void;

		/** [Method] Sets the UI for the component  
		* @param ui String The new UI for the component. 
		*/
		setUI?( ui?:string ): void;

		/** [Method] Sets the value of viewModel  
		* @param viewModel String/Object/Ext.app.ViewModel The new value. 
		*/
		setViewModel?( viewModel?:any ): void;

		/** [Method] Convenience function to hide or show this component by Boolean  
		* @param visible Boolean true to show, false to hide. 
		* @returns Ext.Component this 
		*/
		setVisible?( visible?:boolean ): Ext.IComponent;

		/** [Method] Sets the weight config property for this component  
		* @param weight Number The new weight value. 
		* @returns Number The previous value of the weight property. 
		*/
		setWeight?( weight?:number ): number;

		/** [Method] Sets the width of the component  
		* @param width Number The new width to set. This may be one of:  A Number specifying the new width in pixels. A String used to set the CSS width style. undefined to leave the width unchanged. null to clear the width.  
		* @returns Ext.Component this 
		*/
		setWidth?( width?:number ): Ext.IComponent;

		/** [Method] Sets the X position of the DOM element based on page coordinates  
		* @param x Object 
		* @param animate Object 
		* @returns Ext.util.Positionable this 
		*/
		setX?( x?:any, animate?:any ): Ext.util.IPositionable;

		/** [Method] Sets the position of the DOM element in page coordinates  
		* @param xy Object 
		* @param animate Object 
		* @returns Ext.util.Positionable this 
		*/
		setXY?( xy?:any, animate?:any ): Ext.util.IPositionable;

		/** [Method] Sets the Y position of the DOM element based on page coordinates  
		* @param y Object 
		* @param animate Object 
		* @returns Ext.util.Positionable this 
		*/
		setY?( y?:any, animate?:any ): Ext.util.IPositionable;

		/** [Method] Shows this Component rendering it first if autoRender or floating are true  
		* @param animateTarget String/Ext.dom.Element only valid for floating Components such as Windows or ToolTips, or regular Components which have been configured with floating: true. The target from which the Component should animate from while opening. 
		* @param callback Function A callback function to call after the Component is displayed. Only necessary if animation was specified. 
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to this Component. 
		* @returns Ext.Component this 
		*/
		show?( animateTarget?:any, callback?:any, scope?:any ): Ext.IComponent;

		/** [Method] Displays component at specific xy position  
		* @param x Number/Number[] The new x position or array of [x,y]. 
		* @param y Number The new y position 
		* @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration. 
		* @returns Ext.Component this 
		*/
		showAt?( x?:any, y?:number, animate?:any ): Ext.IComponent;

		/** [Method] Shows this component by the specified Component or Element  
		* @param component Ext.Component/Ext.dom.Element The Ext.Component or Ext.dom.Element to show the component by. 
		* @param position String Alignment position as used by Ext.util.Positionable.getAlignToXY. Defaults to defaultAlign. See alignTo for possible values. 
		* @param offsets Number[] Alignment offsets as used by Ext.util.Positionable.getAlignToXY. See alignTo for possible values. 
		* @returns Ext.Component this 
		*/
		showBy?( component?:any, position?:string, offsets?:number[] ): Ext.IComponent;

		/** [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that 
		* @returns Ext.dom.Element The Element 
		*/
		stopAnimation?(): Ext.dom.IElement;

		/** [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that 
		* @returns Ext.dom.Element The Element 
		*/
		stopFx?(): Ext.dom.IElement;

		/** [Method] Ensures that all effects queued after syncFx is called on this object are run concurrently  
		* @returns Object this 
		*/
		syncFx?(): any;

		/** [Method] Sends this Component to the back of lower z index than any other visible windows 
		* @returns Ext.Component this 
		*/
		toBack?(): Ext.IComponent;

		/** [Method] Brings this floating Component to the front of any other visible floating Components managed by the same ZIndexManag  
		* @param preventFocus Boolean Specify true to prevent the Component from being focused. 
		* @returns Ext.Component this 
		*/
		toFront?( preventFocus?:boolean ): Ext.IComponent;

		/** [Method] Translates the passed page coordinates into left top css values for the element 
		* @param x Number/Array The page x or an array containing [x, y] 
		* @param y Number The page y, required if x is not an array 
		* @returns Object An object with left and top properties. e.g. {left: (value), top: (value)} 
		*/
		translatePoints?( x?:any, y?:number ): any;

		/** [Method] Removes the mask applied by mask */
		unmask?(): void;

		/** [Method] Navigates up the ownership hierarchy searching for an ancestor Container which matches any passed selector or component  
		* @param selector String/Ext.Component The selector component or actual component to test. If not passed the immediate owner/activator is returned. 
		* @param limit String/Number/Ext.Component This may be a selector upon which to stop the upward scan, or a limit of the number of steps, or Component reference to stop on. 
		* @returns Ext.container.Container The matching ancestor Container (or undefined if no match was found). 
		*/
		up?( selector?:any, limit?:any ): Ext.container.IContainer;

		/** [Method] Update the content area of a component  
		* @param htmlOrData String/Object If this component has been configured with a template via the tpl config then it will use this argument as data to populate the template. If this component was not configured with a template, the components content area will be updated via Ext.Element update. 
		* @param loadScripts Boolean Only legitimate when using the html configuration. 
		* @param callback Function Only legitimate when using the html configuration. Callback to execute when scripts have finished loading. 
		*/
		update?( htmlOrData?:any, loadScripts?:boolean, callback?:any ): void;

		/** [Method] Sets the current box measurements of the component s underlying element  
		* @param box Object An object in the format {x, y, width, height} 
		* @returns Ext.Component this 
		*/
		updateBox?( box?:any ): Ext.IComponent;

		/** [Method] Updates this component s layout  
		* @param options Object An object with layout options. 
		*/
		updateLayout?( options?:any ): void;

	}
	export class Component {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Cancels layout of a component  
		* @param comp Ext.Component 
		*/
		static cancelLayout( comp?:Ext.IComponent ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Performs all pending layouts that were scheduled while suspendLayouts was in effect  */
		static flushLayouts(): void;

		/** [Method] Find a Component that the given Element belongs to  
		* @param el Ext.dom.Element/HTMLElement The element from which to start to find an owning Component. 
		* @param topmost Ext.dom.Element/HTMLElement The element at which to stop upward searching for an owning Component. Defaults to the document's HTML element. 
		* @returns Ext.Component/null Component, or null 
		*/
		static fromElement( el?:any, topmost?:any ): any;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

		/** [Method] Resumes layout activity in the whole framework  
		* @param flush Boolean true to perform all the pending layouts. This can also be achieved by calling flushLayouts directly. 
		*/
		static resumeLayouts( flush?:boolean ): void;

		/** [Method] Stops layouts from happening in the whole framework  */
		static suspendLayouts(): void;

		/** [Method] Updates layout of a component  
		* @param comp Ext.Component The component to update. 
		* @param defer Boolean true to just queue the layout if this component. 
		*/
		static updateLayout( comp?:Ext.IComponent, defer?:boolean ): void;

	}

}

declare module Ext {
	export interface IAbstractComponent extends Ext.IBase, Ext.mixin.IInheritable, Ext.util.IFloating, Ext.util.IPositionable, Ext.util.IObservable, Ext.mixin.IBindable, Ext.util.IAnimate, Ext.util.IElementContainer, Ext.util.IRenderable, Ext.state.IStateful, Ext.util.IFocusable {
		/** [Config Option] (String) */
		alignTarget?: string;
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (Boolean/String/HTMLElement/Ext.dom.Element) */
		autoRender?: any;
		/** [Config Option] (Boolean) */
		autoScroll?: boolean;
		/** [Config Option] (Boolean) */
		autoShow?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String/Boolean) */
		border?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number) */
		columnWidth?: number;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Ext.util.Region/Ext.dom.Element) */
		constrainTo?: any;
		/** [Config Option] (Object/String) */
		constraintInsets?: any;
		/** [Config Option] (String) */
		contentEl?: string;
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (String) */
		defaultAlign?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] ('top'/'bottom'/'left'/'right') */
		dock?: any;
		/** [Config Option] (Boolean/Object) */
		draggable?: any;
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (Boolean) */
		floating?: boolean;
		/** [Config Option] (Boolean) */
		formBind?: boolean;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Number|String) */
		height?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (String/Object) */
		html?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String) */
		itemId?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (Boolean) */
		liveDrag?: boolean;
		/** [Config Option] (Ext.ComponentLoader/Object) */
		loader?: any;
		/** [Config Option] (Number/String) */
		margin?: any;
		/** [Config Option] (String) */
		maskElement?: string;
		/** [Config Option] (Number) */
		maxHeight?: number;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		modelValidation?: boolean;
		/** [Config Option] (String) */
		overCls?: string;
		/** [Config Option] (String) */
		overflowX?: string;
		/** [Config Option] (String) */
		overflowY?: string;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Ext.plugin.Abstract[]/Ext.plugin.Abstract/Object[]/Object/Ext.enums.Plugin[]/Ext.enums.Plugin) */
		plugins?: any;
		/** [Config Option] ("north"/"south"/"east"/"west"/"center") */
		region?: any;
		/** [Config Option] (Object) */
		renderData?: any;
		/** [Config Option] (Object) */
		renderSelectors?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		renderTo?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (String) */
		resizeHandles?: string;
		/** [Config Option] (Boolean) */
		rtl?: boolean;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (String/Object) */
		style?: any;
		/** [Config Option] (Boolean) */
		toFrontOnShow?: boolean;
		/** [Config Option] (Ext.XTemplate/Ext.Template/String/String[]) */
		tpl?: any;
		/** [Config Option] (String) */
		tplWriteMode?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Number) */
		weight?: number;
		/** [Config Option] (Number|String) */
		width?: any;
		/** [Config Option] (Ext.enums.Widget) */
		xtype?: Ext.enums.IWidget;
		/** [Property] (Boolean) */
		_isLayoutRoot?: boolean;

		/** [Property] (String) */
		contentPaddingProperty?: string;

		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Ext.Container) */
		floatParent?: Ext.IContainer;

		/** [Property] (Object) */
		frameSize?: any;

		/** [Property] (Object) */
		initialConfig?: any;

		/** [Property] (Boolean) */
		isComponent?: boolean;

		/** [Property] (Boolean) */
		maskOnDisable?: boolean;

		/** [Property] (Ext.Container) */
		ownerCt?: Ext.IContainer;

		/** [Property] (Boolean) */
		rendered?: boolean;

		/** [Method] Adds a CSS class to the top level element representing this component  
		* @param cls String/String[] The CSS class name to add. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		addClass?( cls?:any ): Ext.IComponent;

		/** [Method] Adds a CSS class to the top level element representing this component  
		* @param cls String/String[] The CSS class name to add. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		addCls?( cls?:any ): Ext.IComponent;

		/** [Method] Adds a cls to the uiCls array which will also call addUIClsToElement and adds to all elements of this component  
		* @param classes String/String[] A string or an array of strings to add to the uiCls. 
		* @param skip Boolean true to skip adding it to the class and do it later (via the return). 
		*/
		addClsWithUI?( classes?:any, skip?:boolean ): void;

		/** [Method] Save a property to the given state object if it is not its default or configured value  
		* @param state Object The state object. 
		* @param propName String The name of the property on this object to save. 
		* @param value String The value of the state property (defaults to this[propName]). 
		* @returns Object The state object or a new object if state was null and the property was saved. 
		*/
		addPropertyToState?( state?:any, propName?:string, value?:string ): any;

		/** [Method] Add events that will trigger the state to be saved  
		* @param events String/String[] The event name or an array of event names. 
		*/
		addStateEvents?( events?:any ): void;

		/** [Method] Method which adds a specified UI  uiCls to the components element  
		* @param uiCls String The UI class to add to the element. 
		*/
		addUIClsToElement?( uiCls?:string ): void;

		/** [Method] Called by the layout system after the Component has been laid out  
		* @param width Number The width that was set 
		* @param height Number The height that was set 
		* @param oldWidth Number/undefined The old width, or undefined if this was the initial layout. 
		* @param oldHeight Number/undefined The old height, or undefined if this was the initial layout. 
		*/
		afterComponentLayout?( width?:number, height?:number, oldWidth?:any, oldHeight?:any ): void;

		/** [Method] Invoked after the Component has been hidden  
		* @param callback Function 
		* @param scope Object 
		*/
		afterHide?( callback?:any, scope?:any ): void;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Template method called after a Component has been positioned  
		* @param x Number 
		* @param y Number 
		*/
		afterSetPosition?( x?:number, y?:number ): void;

		/** [Method] Invoked after the Component is shown after onShow is called 
		* @param animateTarget String/Ext.dom.Element 
		* @param callback Function 
		* @param scope Object 
		*/
		afterShow?( animateTarget?:any, callback?:any, scope?:any ): void;

		/** [Method] Aligns the element with another element relative to the specified anchor points  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] Element animation config object 
		* @returns Ext.util.Positionable this 
		*/
		alignTo?( element?:any, position?:string, offsets?:number[] ): Ext.util.IPositionable;

		/** [Method] Anchors an element to another element and realigns it when the window is resized  
		* @param anchorToEl Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param alignment String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @param monitorScroll Boolean/Number True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay in milliseconds. 
		* @param callback Function The function to call after the animation finishes 
		* @returns Ext.util.Positionable this 
		*/
		anchorTo?( anchorToEl?:any, alignment?:string, offsets?:number[], animate?:any, monitorScroll?:any, callback?:any ): Ext.util.IPositionable;

		/** [Method] Performs custom animation on this object  
		* @param animObj Object 
		* @returns Object this 
		*/
		animate?( animObj?:any ): any;

		/** [Method] Applies the state to the object  
		* @param state Object The state 
		*/
		applyState?( state?:any ): void;

		/** [Method] Template method to do any pre blur processing  
		* @param e Ext.event.Event The event object 
		*/
		beforeBlur?( e?:Ext.event.IEvent ): void;

		/** [Method] Occurs before componentLayout is run  
		* @param adjWidth Number The box-adjusted width that was set. 
		* @param adjHeight Number The box-adjusted height that was set. 
		*/
		beforeComponentLayout?( adjWidth?:number, adjHeight?:number ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Template method to do any pre focus processing  
		* @param e Ext.event.Event The event object 
		*/
		beforeFocus?( e?:Ext.event.IEvent ): void;

		/** [Method] Occurs before componentLayout is run  */
		beforeLayout?(): void;

		/** [Method] Invoked before the Component is shown  */
		beforeShow?(): void;

		/** [Method] Bubbles up the component container hierarchy calling the specified function with each component  
		* @param fn Function The function to call 
		* @param scope Object The scope of the function. Defaults to current node. 
		* @param args Array The args to call the function with. Defaults to passing the current component. 
		* @returns Ext.Component this 
		*/
		bubble?( fn?:any, scope?:any, args?:any[] ): Ext.IComponent;

		/** [Method] Cancel any deferred focus on this component */
		cancelFocus?(): void;

		/** [Method] Center this Component in its container  
		* @returns Ext.Component this 
		*/
		center?(): Ext.IComponent;

		/** [Method] Clone the current component using the original config values passed into this instance by default  
		* @param overrides Object A new config containing any properties to override in the cloned version. An id property can be passed on this object, otherwise one will be generated to avoid duplicates. 
		* @returns Ext.Component clone The cloned copy of this component 
		*/
		cloneConfig?( overrides?:any ): Ext.IComponent;

		/** [Method] Disable the component  
		* @param silent Boolean Passing true will suppress the disable event from being fired. 
		*/
		disable?( silent?:boolean ): void;

		/** [Method] This method needs to be called whenever you change something on this component that requires the Component s layout t  
		* @returns Ext.Component this 
		*/
		doComponentLayout?(): Ext.IComponent;

		/** [Method] Moves this floating Component into a constrain region  
		* @param constrainTo String/HTMLElement/Ext.dom.Element/Ext.util.Region The Element or Region into which this Component is to be constrained. Defaults to the element into which this floating Component was rendered. 
		*/
		doConstrain?( constrainTo?:any ): void;

		/** [Method] Enable the component 
		* @param silent Boolean Passing true will suppress the enable event from being fired. 
		*/
		enable?( silent?:boolean ): void;

		/** [Method] Ensures that this component is attached to document body  
		* @param runLayout Boolean True to run the component's layout. 
		*/
		ensureAttachedToBody?( runLayout?:boolean ): void;

		/** [Method] Find a container above this component at any level by a custom function  
		* @param fn Function The custom function to call with the arguments (container, this component). 
		* @returns Ext.container.Container The first Container for which the custom function returns true 
		*/
		findParentBy?( fn?:any ): Ext.container.IContainer;

		/** [Method] Find a container above this component at any level by xtype or class See also the up method  
		* @param xtype String/Ext.Class The xtype string for a component, or the class of the component directly 
		* @returns Ext.container.Container The first Container which matches the given xtype or class 
		*/
		findParentByType?( xtype?:any ): Ext.container.IContainer;

		/** [Method] Retrieves plugin from this component s collection by its ptype  
		* @param ptype String The Plugin's ptype as specified by the class's alias configuration. 
		* @returns Ext.plugin.Abstract plugin instance. 
		*/
		findPlugin?( ptype?:string ): Ext.plugin.IAbstract;

		/** [Method] Try to focus this component  
		* @param selectText Mixed If applicable, true to also select all the text in this component, or an array consisting of start and end (defaults to start) position of selection. 
		* @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds). 
		* @param callback Function Only needed if the delay parameter is used. A function to call upon focus. 
		* @param scope Function Only needed if the delay parameter is used. The scope (this reference) in which to execute the callback. 
		* @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option. If this component is disabled, a closely related component will be focused and that will be returned. 
		*/
		focus?( selectText?:any, delay?:any, callback?:any, scope?:any ): Ext.IComponent;

		/** [Method] Updates this component s layout  
		* @param options Object An object with layout options. 
		*/
		forceComponentLayout?( options?:any ): void;

		/** [Method] Returns the current animation if this object has any effects actively running or queued else returns false  
		* @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false 
		*/
		getActiveAnimation?(): any;

		/** [Method] Gets the x y coordinates to align this element with another element  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @returns Number[] [x, y] 
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:number[] ): number[];

		/** [Method] Returns the value of alwaysOnTop  
		* @returns Boolean/Number 
		*/
		getAlwaysOnTop?(): any;

		/** [Method] Gets the x y coordinates specified by the anchor position on the element  
		* @param anchor String The specified anchor position. See alignTo for details on supported anchor positions. 
		* @param local Boolean True to get the local (element top/left-relative) anchor position instead of page coordinates 
		* @param size Object An object containing the size to use for calculating anchor position {width: (target width), height: (target height)} (defaults to the element's current size) 
		* @returns Number[] [x, y] An array containing the element's x and y coordinates 
		*/
		getAnchorXY?( anchor?:string, local?:boolean, size?:any ): number[];

		/** [Method] Returns the value of bind  
		* @returns Object 
		*/
		getBind?(): any;

		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param contentBox Boolean If true a box for the content of the element is returned. 
		* @param local Boolean If true the element's left and top relative to its offsetParent are returned instead of page x/y. 
		* @returns Object An object in the format 
		*/
		getBox?( contentBox?:boolean, local?:boolean ): any;

		/** [Method] Implements an upward event bubbling policy  */
		getBubbleTarget?(): void;

		/** [Method] Returns the value of childEls  
		* @returns Object/String[]/Object[] 
		*/
		getChildEls?(): any;

		/** [Method] Returns the content region of this element for purposes of constraining floating children  */
		getConstrainRegion?(): void;

		/** [Method] Returns the X Y vector by which this Positionable s element must be translated to make a best attempt to constrain  
		* @param constrainTo Ext.util.Positionable/HTMLElement/String/Ext.util.Region The Positionable, HTMLElement, element id, or Region into which the element is to be constrained. 
		* @param proposedPosition Number[] A proposed [X, Y] position to test for validity and to produce a vector for instead of using the element's current position 
		* @param proposedSize Number[] A proposed [width, height] size to constrain instead of using the element's current size 
		* @returns Number[]/Boolean If the element needs to be translated, an [X, Y] vector by which this element must be translated. Otherwise, false. 
		*/
		getConstrainVector?( constrainTo?:any, proposedPosition?:number[], proposedSize?:number[] ): any;

		/** [Method] Returns the value of controller  
		* @returns String/Object/Ext.app.ViewController 
		*/
		getController?(): any;

		/** [Method] Returns the value of data  
		* @returns Object 
		*/
		getData?(): any;

		/** [Method] Returns the value of defaultListenerScope  
		* @returns Boolean 
		*/
		getDefaultListenerScope?(): boolean;

		/** [Method] Retrieves the top level element representing this component  
		* @returns Ext.dom.Element 
		*/
		getEl?(): Ext.dom.IElement;

		/** [Method] Returns the focus styling holder element associated with this Focusable  
		* @returns Ext.Element The focus styling element. 
		*/
		getFocusClsEl?(): Ext.IElement;

		/** [Method] Returns the focus holder element associated with this Focusable  
		* @returns Ext.Element 
		*/
		getFocusEl?(): Ext.IElement;

		/** [Method] Gets the current height of the component s underlying element  
		* @returns Number 
		*/
		getHeight?(): number;

		/** [Method] Retrieves the id of this component  
		* @returns String 
		*/
		getId?(): string;

		/** [Method] This method returns an object containing the inherited properties for this instance  
		* @param inner Boolean Pass true to return inheritedStateInner instead of the normal inheritedState object. This is only needed internally and should not be passed by user code. 
		* @returns Object The inheritedState object containing inherited properties. 
		*/
		getInherited?( inner?:boolean ): any;

		/** [Method] This method returns the value of a config property that may be inherited from some ancestor  
		* @param property String The name of the config property to return. 
		* @param skipThis Boolean Pass true if the property should be ignored if found on this instance. In other words, true means the property must be inherited and not explicitly set on this instance. 
		* @returns Mixed The value of the requested property. 
		*/
		getInheritedConfig?( property?:string, skipThis?:boolean ): any;

		/** [Method] This function takes the position argument passed to onRender and returns a DOM element that you can use in the insert  
		* @param position String/Number/Ext.dom.Element/HTMLElement Index, element id or element you want to put this component before. 
		* @returns HTMLElement DOM element that you can use in the insertBefore 
		*/
		getInsertPosition?( position?:any ): HTMLElement;

		/** [Method] Returns the value of itemId assigned to this component or when that is not set returns the value of id  
		* @returns String 
		*/
		getItemId?(): string;

		/** [Method] Gets the Ext ComponentLoader for this Component  
		* @returns Ext.ComponentLoader The loader instance, null if it doesn't exist. 
		*/
		getLoader?(): Ext.IComponentLoader;

		/** [Method] Overridden in Ext rtl Component  
		* @returns Number The local x coordinate 
		*/
		getLocalX?(): number;

		/** [Method] Overridden in Ext rtl Component  
		* @returns Number[] The local XY position of the element 
		*/
		getLocalXY?(): number[];

		/** [Method] Returns the y coordinate of this element reletive to its offsetParent  
		* @returns Number The local y coordinate 
		*/
		getLocalY?(): number;

		/** [Method] Returns the element which is masked by the mask method or into which the LoadMask is rendered into  */
		getMaskTarget?(): void;

		/** [Method] Returns the value of maxHeight  
		* @returns Number 
		*/
		getMaxHeight?(): number;

		/** [Method] Returns the value of maxWidth  
		* @returns Number 
		*/
		getMaxWidth?(): number;

		/** [Method] Returns the value of minHeight  
		* @returns Number 
		*/
		getMinHeight?(): number;

		/** [Method] Returns the value of minWidth  
		* @returns Number 
		*/
		getMinWidth?(): number;

		/** [Method] Returns the offsets of this element from the passed element  
		* @param offsetsTo Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or element id to get get the offsets from. 
		* @returns Number[] The XY page offsets (e.g. [100, -200]) 
		*/
		getOffsetsTo?( offsetsTo?:any ): number[];

		/** [Method] Retrieves a plugin from this component s collection by its pluginId  
		* @param pluginId String 
		* @returns Ext.plugin.Abstract plugin instance. 
		*/
		getPlugin?( pluginId?:string ): Ext.plugin.IAbstract;

		/** [Method] Gets the current XY position of the component s underlying element  
		* @param local Boolean If true the element's left and top are returned instead of page XY. 
		* @returns Number[] The XY position of the element (e.g., [100, 200]) 
		*/
		getPosition?( local?:boolean ): number[];

		/** [Method] Returns the value of publishes  
		* @returns String/String[]/Object 
		*/
		getPublishes?(): any;

		/** [Method] Used by ComponentQuery and the up method to find the owning Component in the linkage hierarchy  */
		getRefOwner?(): void;

		/** [Method] Returns the value of reference  
		* @returns String 
		*/
		getReference?(): string;

		/** [Method] Returns a region object that defines the area of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" properties. 
		*/
		getRegion?(): Ext.util.IRegion;

		/** [Method] Returns the x scroll position for this component  
		* @returns Number 
		*/
		getScrollX?(): number;

		/** [Method] Returns the y scroll position for this component  
		* @returns Number 
		*/
		getScrollY?(): number;

		/** [Method] Returns the value of scrollable  
		* @returns Boolean/String/Object 
		*/
		getScrollable?(): any;

		/** [Method] Returns the value of session  
		* @returns Boolean/Object/Ext.data.Session 
		*/
		getSession?(): any;

		/** [Method] Gets the current size of the component s underlying element  
		* @param contentSize Boolean true to get the width/size minus borders and padding 
		* @returns Object An object containing the element's size: 
		*/
		getSize?( contentSize?:boolean ): any;

		/** [Method] Returns an object that describes how this component s width and height are managed  
		* @param ownerCtSizeModel Object 
		* @returns Object The size model for this component. 
		*/
		getSizeModel?( ownerCtSizeModel?:any ): any;

		/** [Method] The supplied default state gathering method for the Component class  
		* @returns Object 
		*/
		getState?(): any;

		/** [Method] Return the actual tabIndex for this Focusable  
		* @returns Number tabIndex attribute value 
		*/
		getTabIndex?(): number;

		/** [Method] Returns the value of twoWayBindable  
		* @returns String/String[]/Object 
		*/
		getTwoWayBindable?(): any;

		/** [Method] Returns the value of viewModel  
		* @returns String/Object/Ext.app.ViewModel 
		*/
		getViewModel?(): any;

		/** [Method] Returns the content region of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" member data. 
		*/
		getViewRegion?(): Ext.util.IRegion;

		/** [Method] Gets the current width of the component s underlying element  
		* @returns Number 
		*/
		getWidth?(): number;

		/** [Method] Gets the current X position of the DOM element based on page coordinates  
		* @returns Number The X position of the element 
		*/
		getX?(): number;

		/** [Method] Gets the xtype for this component as registered with Ext ComponentManager  
		* @returns String The xtype 
		*/
		getXType?(): string;

		/** [Method] Returns this Component s xtype hierarchy as a slash delimited string  
		* @returns String The xtype hierarchy string 
		*/
		getXTypes?(): string;

		/** [Method] Gets the current position of the DOM element based on page coordinates  
		* @returns Number[] The XY position of the element 
		*/
		getXY?(): number[];

		/** [Method] Gets the current Y position of the DOM element based on page coordinates  
		* @returns Number The Y position of the element 
		*/
		getY?(): number;

		/** [Method] Returns the current animation if this object has any effects actively running or queued else returns false  
		* @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false 
		*/
		hasActiveFx?(): any;

		/** [Method] Checks if the specified CSS class exists on this element s DOM node  
		* @param className String The CSS class to check for. 
		* @returns Boolean true if the class exists, else false. 
		*/
		hasCls?( className?:string ): boolean;

		/** [Method] Checks if there is currently a specified uiCls  
		* @param cls String The cls to check. 
		*/
		hasUICls?( cls?:string ): void;

		/** [Method] Hides this Component setting it to invisible using the configured hideMode  
		* @param animateTarget String/Ext.dom.Element/Ext.Component only valid for floating Components such as Windows or ToolTips, or regular Components which have been configured with floating: true.. The target to which the Component should animate while hiding. 
		* @param callback Function A callback function to call after the Component is hidden. 
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to this Component. 
		* @returns Ext.Component this 
		*/
		hide?( animateTarget?:any, callback?:any, scope?:any ): Ext.IComponent;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Initialize any events on this component */
		initEvents?(): void;

		/** [Method] Template method to do any Focusable related initialization that does not involve event listeners creation  */
		initFocusable?(): void;

		/** [Method] Template method to do any event listener initialization for a Focusable  */
		initFocusableEvents?(): void;

		/** [Method] Called by getInherited to initialize the inheritedState the first time it is requested  
		* @param inheritedState Object 
		*/
		initInheritedState?( inheritedState?:any ): void;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] Tests whether this Component matches a ComponentQuery selector string  
		* @param selector String The selector string to test against. 
		* @returns Boolean true if this Component matches the selector. 
		*/
		is?( selector?:string ): boolean;

		/** [Method] Determines whether this Component is an ancestor of the passed Component  
		* @param possibleDescendant Ext.Component The Component to test for presence within this Component's subtree. 
		*/
		isAncestor?( possibleDescendant?:Ext.IComponent ): void;

		/** [Method] Determines whether this component is the descendant of a passed component  
		* @param ancestor Ext.Component A Component which may contain this Component. 
		* @returns Boolean true if the component is the descendant of the passed component, otherwise false. 
		*/
		isDescendantOf?( ancestor?:Ext.IComponent ): boolean;

		/** [Method] Method to determine whether this Component is currently disabled  
		* @returns Boolean the disabled state of this Component. 
		*/
		isDisabled?(): boolean;

		/** [Method] Method to determine whether this Component is draggable  
		* @returns Boolean the draggable state of this component. 
		*/
		isDraggable?(): boolean;

		/** [Method] Method to determine whether this Component is droppable  
		* @returns Boolean the droppable state of this component. 
		*/
		isDroppable?(): boolean;

		/** [Method] Method to determine whether this Component is floating  
		* @returns Boolean the floating state of this component. 
		*/
		isFloating?(): boolean;

		/** [Method] Determine if this Focusable can receive focus at this time  
		* @param deep Boolean Optionally determine if the container itself is focusable, or if container's focus is delegated to a child component and that child is focusable. 
		* @returns Boolean True if component is focusable, false if not. 
		*/
		isFocusable?( deep?:boolean ): boolean;

		/** [Method] Method to determine whether this Component is currently set to hidden  
		* @returns Boolean the hidden state of this Component. 
		*/
		isHidden?(): boolean;

		/** [Method] Determines whether this Component is the root of a layout  */
		isLayoutRoot?(): void;

		/** [Method] Returns true if layout is suspended for this component  
		* @returns Boolean true layout of this component is suspended. 
		*/
		isLayoutSuspended?(): boolean;

		/** [Method] Returns masked state for this Component  
		* @param deep Boolean True to look up this Component's parent masked state. 
		* @returns Boolean True if masked, false otherwise. 
		*/
		isMasked?( deep?:boolean ): boolean;

		/** [Method] Returns true if this component is visible  
		* @param deep Boolean Pass true to interrogate the visibility status of all parent Containers to determine whether this Component is truly visible to the user. Generally, to determine whether a Component is hidden, the no argument form is needed. For example when creating dynamically laid out UIs in a hidden Container before showing them. 
		* @returns Boolean true if this component is visible, false otherwise. 
		*/
		isVisible?( deep?:boolean ): boolean;

		/** [Method] Tests whether or not this Component is of a specific xtype  
		* @param xtype String The xtype to check for this Component 
		* @param shallow Boolean true to check whether this Component is directly of the specified xtype, false to check whether this Component is descended from the xtype. 
		* @returns Boolean true if this component descends from the specified xtype, false otherwise. 
		*/
		isXType?( xtype?:string, shallow?:boolean ): boolean;

		/** [Method] Gets the controller that controls this view  
		* @param skipThis Boolean true to not consider the controller directly attached to this view (if it exists). 
		* @returns Ext.app.ViewController The controller. null if no controller is found. 
		*/
		lookupController?( skipThis?:boolean ): Ext.app.IViewController;

		/** [Method] Returns the Ext data Session for this instance  
		* @param skipThis Boolean Pass true to ignore a session configured on this instance and only consider an inherited session. 
		* @returns Ext.data.Session 
		*/
		lookupSession?( skipThis?:boolean ): Ext.data.ISession;

		/** [Method] Returns the Ext app ViewModel for this instance  
		* @param skipThis Boolean Pass true to ignore a viewModel configured on this instance and only consider an inherited view model. 
		* @returns Ext.app.ViewModel 
		*/
		lookupViewModel?( skipThis?:boolean ): Ext.app.IViewModel;

		/** [Method] Masks this component with a semi opaque layer and makes the contents unavailable to clicks  
		* @param msg String A message to show in the center of the mask layer. 
		* @param msgCls String A CSS class name to use on the message element in the center of the layer. 
		*/
		mask?( msg?:string, msgCls?:string ): void;

		/** [Method] Move the element relative to its current position  
		* @param direction String Possible values are:  "l" (or "left") "r" (or "right") "t" (or "top", or "up") "b" (or "bottom", or "down")  
		* @param distance Number How far to move the element in pixels 
		*/
		move?( direction?:string, distance?:number ): void;

		/** [Method] Returns the next node in the Component tree in tree traversal order  
		* @param selector String A ComponentQuery selector to filter the following nodes. 
		* @returns Ext.Component The next node (or the next node which matches the selector). Returns null if there is no matching node. 
		*/
		nextNode?( selector?:string ): Ext.IComponent;

		/** [Method] Returns the next sibling of this Component  
		* @param selector String A ComponentQuery selector to filter the following items. 
		* @returns Ext.Component The next sibling (or the next sibling which matches the selector). Returns null if there is no matching sibling. 
		*/
		nextSibling?( selector?:string ): Ext.IComponent;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  
		* @param container Ext.container.Container Container which holds the component. 
		* @param pos Number Position at which the component was added. 
		* @param instanced Boolean false if this component was instanced by the parent container. true if the instance already existed when it was passed to the container. 
		*/
		onAdded?( container?:Ext.container.IContainer, pos?:number, instanced?:boolean ): void;

		/** [Method] Invoked when this component has first achieved size  
		* @param width Number The width of this component 
		* @param height Number The height of this component 
		*/
		onBoxReady?( width?:number, height?:number ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Allows addition of behavior to the disable operation  */
		onDisable?(): void;

		/** [Method] Allows addition of behavior to the enable operation  */
		onEnable?(): void;

		/** [Method] Called when focus enters this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		onFocusEnter?( e?:Ext.event.IEvent ): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		onFocusLeave?( e?:Ext.event.IEvent ): void;

		/** [Method] Allows addition of behavior to the hide operation  
		* @param animateTarget String/Ext.dom.Element/Ext.Component 
		* @param callback Function 
		* @param scope Object 
		*/
		onHide?( animateTarget?:any, callback?:any, scope?:any ): void;

		/** [Method] Called after the component is moved this method is empty by default but can be implemented by any subclass that need  
		* @param x Number The new x position. 
		* @param y Number The new y position. 
		*/
		onPosition?( x?:number, y?:number ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param destroying Boolean Will be passed as true if the Container performing the remove operation will delete this Component upon remove. 
		*/
		onRemoved?( destroying?:boolean ): void;

		/** [Method] Template method called when this Component s DOM structure is created  
		* @param parentNode Ext.dom.Element The parent Element in which this Component's encapsulating element is contained. 
		* @param containerIdx Number The index within the parent Container's child collection of this Component. 
		*/
		onRender?( parentNode?:Ext.dom.IElement, containerIdx?:number ): void;

		/** [Method] Called when the component is resized  
		* @param width Object 
		* @param height Object 
		* @param oldWidth Object 
		* @param oldHeight Object 
		*/
		onResize?( width?:any, height?:any, oldWidth?:any, oldHeight?:any ): void;

		/** [Method] Invoked when a scroll operation is completed via this component s scroller  
		* @param x Number The current x position 
		* @param y Number The current y position 
		*/
		onScrollEnd?( x?:number, y?:number ): void;

		/** [Method] Invoked when this component is scrolled via its scroller  
		* @param x Number The current x position 
		* @param y Number The current y position 
		*/
		onScrollMove?( x?:number, y?:number ): void;

		/** [Method] Invoked when a scroll is initiated on this component via its scroller  
		* @param x Number The current x position 
		* @param y Number The current y position 
		*/
		onScrollStart?( x?:number, y?:number ): void;

		/** [Method] Allows addition of behavior to the show operation  
		* @param animateTarget String/Ext.dom.Element 
		* @param callback Function 
		* @param scope Object 
		*/
		onShow?( animateTarget?:any, callback?:any, scope?:any ): void;

		/** [Method] Invoked after the afterShow method is complete  
		* @param callback Function 
		* @param scope Object 
		*/
		onShowComplete?( callback?:any, scope?:any ): void;

		/** [Method] Template method to do any post blur processing  
		* @param e Ext.event.Event The event object 
		*/
		postBlur?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method to do any post focus processing  
		* @param e Ext.event.Event The event object 
		*/
		postFocus?( e?:Ext.event.IEvent ): void;

		/** [Method] Returns the previous node in the Component tree in tree traversal order  
		* @param selector String A ComponentQuery selector to filter the preceding nodes. 
		* @returns Ext.Component The previous node (or the previous node which matches the selector). Returns null if there is no matching node. 
		*/
		previousNode?( selector?:string ): Ext.IComponent;

		/** [Method] Returns the previous sibling of this Component  
		* @param selector String A ComponentQuery selector to filter the preceding items. 
		* @returns Ext.Component The previous sibling (or the previous sibling which matches the selector). Returns null if there is no matching sibling. 
		*/
		previousSibling?( selector?:string ): Ext.IComponent;

		/** [Method] Publish this components state to the ViewModel  
		* @param property String The name of the property to update. 
		* @param value Object The value of property. Only needed if property is given. 
		*/
		publishState?( property?:string, value?:any ): void;

		/** [Method] Called by Component doAutoRender Register a Container configured floating true with this Component s ZIndexManager  
		* @param cmp Object 
		*/
		registerFloatingItem?( cmp?:any ): void;

		/** [Method] Remove any anchor to this element  
		* @returns Ext.util.Positionable this 
		*/
		removeAnchor?(): Ext.util.IPositionable;

		/** [Method] Removes a CSS class from the top level element representing this component  
		* @param cls String/String[] The CSS class name to remove. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		removeClass?( cls?:any ): Ext.IComponent;

		/** [Method] Removes a CSS class from the top level element representing this component  
		* @param cls String/String[] The CSS class name to remove. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		removeCls?( cls?:any ): Ext.IComponent;

		/** [Method] Removes a cls to the uiCls array which will also call removeUIClsFromElement and removes it from all elements of thi  
		* @param cls String/String[] A string or an array of strings to remove to the uiCls. 
		*/
		removeClsWithUI?( cls?:any ): void;

		/** [Method] Method which removes a specified UI  uiCls from the components element  
		* @param uiCls String The UI class to remove from the element. 
		*/
		removeUIClsFromElement?( uiCls?:string ): void;

		/** [Method] Renders the Component into the passed HTML element  
		* @param container Ext.dom.Element/HTMLElement/String The element this Component should be rendered into. If it is being created from existing markup, this should be omitted. 
		* @param position String/Number The element ID or DOM node index within the container before which this component will be inserted (defaults to appending to the end of the container) 
		*/
		render?( container?:any, position?:any ): void;

		/** [Method] Returns the default listener scope for a satellite of this component  
		* @param satellite Ext.mixin.Observable 
		* @param defaultScope Object 
		* @returns Object The listener scope 
		*/
		resolveSatelliteListenerScope?( satellite?:Ext.mixin.IObservable, defaultScope?:any ): any;

		/** [Method] Conditionally saves a single property from this object to the given state object  
		* @param propName String The name of the property to save. 
		* @param state Object The state object in to which to save the property. 
		* @param stateName String The name to use for the property in state. 
		* @returns Boolean True if the property was saved, false if not. 
		*/
		savePropToState?( propName?:string, state?:any, stateName?:string ): boolean;

		/** [Method] Gathers additional named properties of the instance and adds their current values to the passed state object  
		* @param propNames String/String[] The name (or array of names) of the property to save. 
		* @param state Object The state object in to which to save the property values. 
		* @returns Object state 
		*/
		savePropsToState?( propNames?:any, state?:any ): any;

		/** [Method] Saves the state of the object to the persistence store  */
		saveState?(): void;

		/** [Method] Scrolls this Component by the passed delta values optionally animating  
		* @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties. 
		* @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object. 
		* @param animate Boolean/Object Animate flag/config object if the delta values were passed separately. 
		*/
		scrollBy?( deltaX?:any, deltaY?:any, animate?:any ): void;

		/** [Method] Scrolls this component to the specified x and y coordinates  
		* @param x Number 
		* @param y Number 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		*/
		scrollTo?( x?:number, y?:number, animate?:any ): void;

		/** [Method] Ensures that all effects queued after sequenceFx is called on this object are run in sequence  
		* @returns Object this 
		*/
		sequenceFx?(): any;

		/** [Method] Sets the value of alwaysOnTop  
		* @param alwaysOnTop Boolean/Number The new value. 
		*/
		setAlwaysOnTop?( alwaysOnTop?:any ): void;

		/** [Method] Sets the overflow on the content element of the component  
		* @param scroll Boolean True to allow the Component to auto scroll. 
		* @returns Ext.Component this 
		*/
		setAutoScroll?( scroll?:boolean ): Ext.IComponent;

		/** [Method] Sets the value of bind  
		* @param bind Object The new value. 
		*/
		setBind?( bind?:any ): void;

		/** [Method]  
		* @param border String/Number The border, see border. If a falsey value is passed the border will be removed. 
		*/
		setBorder?( border?:any ): void;

		/** [Method] Sets the element s box  
		* @param box Object The box to fill {x, y, width, height} 
		* @returns Ext.util.Positionable this 
		*/
		setBox?( box?:any ): Ext.util.IPositionable;

		/** [Method] Sets the value of childEls  
		* @param childEls Object/String[]/Object[] The new value. 
		*/
		setChildEls?( childEls?:any ): void;

		/** [Method] Sets the value of controller  
		* @param controller String/Object/Ext.app.ViewController The new value. 
		*/
		setController?( controller?:any ): void;

		/** [Method] Sets the value of data  
		* @param data Object The new value. 
		*/
		setData?( data?:any ): void;

		/** [Method] Sets the value of defaultListenerScope  
		* @param defaultListenerScope Boolean The new value. 
		*/
		setDefaultListenerScope?( defaultListenerScope?:boolean ): void;

		/** [Method] Enable or disable the component  
		* @param disabled Boolean true to disable. 
		*/
		setDisabled?( disabled?:boolean ): void;

		/** [Method] Sets the dock position of this component in its parent panel  
		* @param dock Object The dock position. 
		* @returns Ext.Component this 
		*/
		setDock?( dock?:any ): Ext.IComponent;

		/** [Method] Sets the dock position of this component in its parent panel  
		* @param dock Object The dock position. 
		* @returns Ext.Component this 
		*/
		setDocked?( dock?:any ): Ext.IComponent;

		/** [Method] Sets the height of the component  
		* @param height Number The new height to set. This may be one of:  A Number specifying the new height in pixels. A String used to set the CSS height style. undefined to leave the height unchanged. null to clear the height.  
		* @returns Ext.Component this 
		*/
		setHeight?( height?:number ): Ext.IComponent;

		/** [Method] Sets the hidden state of this component  
		* @param hidden Boolean 
		* @returns Ext.Component 
		*/
		setHidden?( hidden?:boolean ): Ext.IComponent;

		/** [Method] This method allows you to show or hide a LoadMask on top of this component  
		* @param load Boolean/Object/String True to show the default LoadMask, a config object that will be passed to the LoadMask constructor, or a message String to show. False to hide the current LoadMask. 
		* @returns Ext.LoadMask The LoadMask instance that has just been shown. 
		*/
		setLoading?( load?:any ): Ext.ILoadMask;

		/** [Method] Overridden in Ext rtl Component  
		* @param x Object 
		* @returns Ext.util.Positionable this 
		*/
		setLocalX?( x?:any ): Ext.util.IPositionable;

		/** [Method] Overridden in Ext rtl Component  
		* @param x Object 
		* @param y Object 
		* @returns Ext.util.Positionable this 
		*/
		setLocalXY?( x?:any, y?:any ): Ext.util.IPositionable;

		/** [Method] Sets the local y coordinate of this element using CSS style  
		* @param y Object 
		* @returns Ext.util.Positionable this 
		*/
		setLocalY?( y?:any ): Ext.util.IPositionable;

		/** [Method] Sets the margin on the target element  
		* @param margin Number/String The margin to set. See the margin config. 
		*/
		setMargin?( margin?:any ): void;

		/** [Method] Sets the value of maxHeight  
		* @param maxHeight Number The new value. 
		*/
		setMaxHeight?( maxHeight?:number ): void;

		/** [Method] Sets the value of maxWidth  
		* @param maxWidth Number The new value. 
		*/
		setMaxWidth?( maxWidth?:number ): void;

		/** [Method] Sets the value of minHeight  
		* @param minHeight Number The new value. 
		*/
		setMinHeight?( minHeight?:number ): void;

		/** [Method] Sets the value of minWidth  
		* @param minWidth Number The new value. 
		*/
		setMinWidth?( minWidth?:number ): void;

		/** [Method] Sets the overflow x y on the content element of the component  
		* @param overflowX String The overflow-x value. 
		* @param overflowY String The overflow-y value. 
		* @returns Ext.Component this 
		*/
		setOverflowXY?( overflowX?:string, overflowY?:string ): Ext.IComponent;

		/** [Method] Sets the page XY position of the component  
		* @param x Number/Number[] The new x position or an array of [x,y]. 
		* @param y Number The new y position. 
		* @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration. 
		* @returns Ext.Component this 
		*/
		setPagePosition?( x?:any, y?:number, animate?:any ): Ext.IComponent;

		/** [Method] Sets the left and top of the component  
		* @param x Number/Number[]/Object The new left, an array of [x,y], or animation config object containing x and y properties. 
		* @param y Number The new top. 
		* @param animate Boolean/Object If true, the Component is animated into its new position. You may also pass an animation configuration. 
		* @returns Ext.Component this 
		*/
		setPosition?( x?:any, y?:number, animate?:any ): Ext.IComponent;

		/** [Method] Sets the value of publishes  
		* @param publishes String/String[]/Object The new value. 
		*/
		setPublishes?( publishes?:any ): void;

		/** [Method] Sets the value of reference  
		* @param reference String The new value. 
		*/
		setReference?( reference?:string ): void;

		/** [Method] This method changes the region config property for this border region  
		* @param region String The new region value ("north", "south", "east" or "west"). 
		* @returns String The previous value of the region property. 
		*/
		setRegion?( region?:string ): string;

		/** [Method] Sets the x scroll position for this component  
		* @param x Number 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		*/
		setScrollX?( x?:number, animate?:any ): void;

		/** [Method] Sets the y scroll position for this component  
		* @param y Number 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		*/
		setScrollY?( y?:number, animate?:any ): void;

		/** [Method] Sets the value of scrollable  
		* @param scrollable Boolean/String/Object The new value. 
		*/
		setScrollable?( scrollable?:any ): void;

		/** [Method] Sets the value of session  
		* @param session Boolean/Object/Ext.data.Session The new value. 
		*/
		setSession?( session?:any ): void;

		/** [Method] Sets the width and height of this Component  
		* @param width Number/String/Object The new width to set. This may be one of:  A Number specifying the new width in pixels. A String used to set the CSS width style. A size object in the format {width: widthValue, height: heightValue}. undefined to leave the width unchanged.  
		* @param height Number/String The new height to set (not required if a size object is passed as the first arg). This may be one of:  A Number specifying the new height in pixels. A String used to set the CSS height style. Animation may not be used. undefined to leave the height unchanged.  
		* @returns Ext.Component this 
		*/
		setSize?( width?:any, height?:any ): Ext.IComponent;

		/** [Method] Sets the style for this Component s primary element  
		* @param property String/Object The style property to be set, or an object of multiple styles. 
		* @param value String The value to apply to the given property, or null if an object was passed. 
		* @returns Ext.Component this 
		*/
		setStyle?( property?:any, value?:string ): Ext.IComponent;

		/** [Method] Set the tabIndex property for this Focusable  
		* @param newTabIndex Number new tabIndex to set 
		*/
		setTabIndex?( newTabIndex?:number ): void;

		/** [Method] Sets the value of twoWayBindable  
		* @param twoWayBindable String/String[]/Object The new value. 
		*/
		setTwoWayBindable?( twoWayBindable?:any ): void;

		/** [Method] Sets the UI for the component  
		* @param ui String The new UI for the component. 
		*/
		setUI?( ui?:string ): void;

		/** [Method] Sets the value of viewModel  
		* @param viewModel String/Object/Ext.app.ViewModel The new value. 
		*/
		setViewModel?( viewModel?:any ): void;

		/** [Method] Convenience function to hide or show this component by Boolean  
		* @param visible Boolean true to show, false to hide. 
		* @returns Ext.Component this 
		*/
		setVisible?( visible?:boolean ): Ext.IComponent;

		/** [Method] Sets the weight config property for this component  
		* @param weight Number The new weight value. 
		* @returns Number The previous value of the weight property. 
		*/
		setWeight?( weight?:number ): number;

		/** [Method] Sets the width of the component  
		* @param width Number The new width to set. This may be one of:  A Number specifying the new width in pixels. A String used to set the CSS width style. undefined to leave the width unchanged. null to clear the width.  
		* @returns Ext.Component this 
		*/
		setWidth?( width?:number ): Ext.IComponent;

		/** [Method] Sets the X position of the DOM element based on page coordinates  
		* @param x Object 
		* @param animate Object 
		* @returns Ext.util.Positionable this 
		*/
		setX?( x?:any, animate?:any ): Ext.util.IPositionable;

		/** [Method] Sets the position of the DOM element in page coordinates  
		* @param xy Object 
		* @param animate Object 
		* @returns Ext.util.Positionable this 
		*/
		setXY?( xy?:any, animate?:any ): Ext.util.IPositionable;

		/** [Method] Sets the Y position of the DOM element based on page coordinates  
		* @param y Object 
		* @param animate Object 
		* @returns Ext.util.Positionable this 
		*/
		setY?( y?:any, animate?:any ): Ext.util.IPositionable;

		/** [Method] Shows this Component rendering it first if autoRender or floating are true  
		* @param animateTarget String/Ext.dom.Element only valid for floating Components such as Windows or ToolTips, or regular Components which have been configured with floating: true. The target from which the Component should animate from while opening. 
		* @param callback Function A callback function to call after the Component is displayed. Only necessary if animation was specified. 
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to this Component. 
		* @returns Ext.Component this 
		*/
		show?( animateTarget?:any, callback?:any, scope?:any ): Ext.IComponent;

		/** [Method] Displays component at specific xy position  
		* @param x Number/Number[] The new x position or array of [x,y]. 
		* @param y Number The new y position 
		* @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration. 
		* @returns Ext.Component this 
		*/
		showAt?( x?:any, y?:number, animate?:any ): Ext.IComponent;

		/** [Method] Shows this component by the specified Component or Element  
		* @param component Ext.Component/Ext.dom.Element The Ext.Component or Ext.dom.Element to show the component by. 
		* @param position String Alignment position as used by Ext.util.Positionable.getAlignToXY. Defaults to defaultAlign. See alignTo for possible values. 
		* @param offsets Number[] Alignment offsets as used by Ext.util.Positionable.getAlignToXY. See alignTo for possible values. 
		* @returns Ext.Component this 
		*/
		showBy?( component?:any, position?:string, offsets?:number[] ): Ext.IComponent;

		/** [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that 
		* @returns Ext.dom.Element The Element 
		*/
		stopAnimation?(): Ext.dom.IElement;

		/** [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that 
		* @returns Ext.dom.Element The Element 
		*/
		stopFx?(): Ext.dom.IElement;

		/** [Method] Ensures that all effects queued after syncFx is called on this object are run concurrently  
		* @returns Object this 
		*/
		syncFx?(): any;

		/** [Method] Sends this Component to the back of lower z index than any other visible windows 
		* @returns Ext.Component this 
		*/
		toBack?(): Ext.IComponent;

		/** [Method] Brings this floating Component to the front of any other visible floating Components managed by the same ZIndexManag  
		* @param preventFocus Boolean Specify true to prevent the Component from being focused. 
		* @returns Ext.Component this 
		*/
		toFront?( preventFocus?:boolean ): Ext.IComponent;

		/** [Method] Translates the passed page coordinates into left top css values for the element 
		* @param x Number/Array The page x or an array containing [x, y] 
		* @param y Number The page y, required if x is not an array 
		* @returns Object An object with left and top properties. e.g. {left: (value), top: (value)} 
		*/
		translatePoints?( x?:any, y?:number ): any;

		/** [Method] Removes the mask applied by mask */
		unmask?(): void;

		/** [Method] Navigates up the ownership hierarchy searching for an ancestor Container which matches any passed selector or component  
		* @param selector String/Ext.Component The selector component or actual component to test. If not passed the immediate owner/activator is returned. 
		* @param limit String/Number/Ext.Component This may be a selector upon which to stop the upward scan, or a limit of the number of steps, or Component reference to stop on. 
		* @returns Ext.container.Container The matching ancestor Container (or undefined if no match was found). 
		*/
		up?( selector?:any, limit?:any ): Ext.container.IContainer;

		/** [Method] Update the content area of a component  
		* @param htmlOrData String/Object If this component has been configured with a template via the tpl config then it will use this argument as data to populate the template. If this component was not configured with a template, the components content area will be updated via Ext.Element update. 
		* @param loadScripts Boolean Only legitimate when using the html configuration. 
		* @param callback Function Only legitimate when using the html configuration. Callback to execute when scripts have finished loading. 
		*/
		update?( htmlOrData?:any, loadScripts?:boolean, callback?:any ): void;

		/** [Method] Sets the current box measurements of the component s underlying element  
		* @param box Object An object in the format {x, y, width, height} 
		* @returns Ext.Component this 
		*/
		updateBox?( box?:any ): Ext.IComponent;

		/** [Method] Updates this component s layout  
		* @param options Object An object with layout options. 
		*/
		updateLayout?( options?:any ): void;

	}
	export class AbstractComponent {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Cancels layout of a component  
		* @param comp Ext.Component 
		*/
		static cancelLayout( comp?:Ext.IComponent ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Performs all pending layouts that were scheduled while suspendLayouts was in effect  */
		static flushLayouts(): void;

		/** [Method] Find a Component that the given Element belongs to  
		* @param el Ext.dom.Element/HTMLElement The element from which to start to find an owning Component. 
		* @param topmost Ext.dom.Element/HTMLElement The element at which to stop upward searching for an owning Component. Defaults to the document's HTML element. 
		* @returns Ext.Component/null Component, or null 
		*/
		static fromElement( el?:any, topmost?:any ): any;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

		/** [Method] Resumes layout activity in the whole framework  
		* @param flush Boolean true to perform all the pending layouts. This can also be achieved by calling flushLayouts directly. 
		*/
		static resumeLayouts( flush?:boolean ): void;

		/** [Method] Stops layouts from happening in the whole framework  */
		static suspendLayouts(): void;

		/** [Method] Updates layout of a component  
		* @param comp Ext.Component The component to update. 
		* @param defer Boolean true to just queue the layout if this component. 
		*/
		static updateLayout( comp?:Ext.IComponent, defer?:boolean ): void;

	}

}

declare module Ext {
	export interface IComponentLoader extends Ext.IElementLoader {
		/** [Config Option] (Boolean/Object) */
		loadMask?: any;
		/** [Config Option] (Boolean/Object) */
		loadOnRender?: any;
		/** [Config Option] (String/Function) */
		renderer?: any;
		/** [Config Option] (Boolean) */
		scripts?: boolean;
		/** [Config Option] (Ext.Component/String) */
		target?: any;
		/** [Method] Set a Ext Component as the target of this loader  
		* @param target String/Ext.Component The component to be the target of this loader. If a string is passed it will be looked up via its id. 
		*/
		setTarget?( target?:any ): void;

	}

}

declare module Ext {
	export interface IComponentManager extends Ext.IBase {
	}
	export class ComponentManager {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Creates a new Component from the specified config object using the config object s xtype to determine the class to in  
		* @param config Object A configuration object for the Component you wish to create. 
		* @param defaultType String The xtype to use if the config object does not contain a xtype. (Optional if the config contains a xtype). 
		* @returns Ext.Component The newly instantiated Component. 
		*/
		static create( config?:any, defaultType?:string ): Ext.IComponent;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Executes the specified function once for each item in the collection  
		* @param fn Function The function to execute. 
		* @param scope Object The scope to execute in. Defaults to this. 
		*/
		static each( fn?:any, scope?:any ): void;

		/** [Method] Returns an item by id  
		* @param id String The id of the item 
		* @returns Object The item, undefined if not found. 
		*/
		static get( id?:string ): any;

		/** [Method] Returns an array of all components 
		* @returns Array 
		*/
		static getAll(): any[];

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Gets the number of items in the collection  
		* @returns Number The number of items in the collection. 
		*/
		static getCount(): number;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Checks if an item is registered  
		* @param component String The mnemonic string by which the class may be looked up. 
		* @returns Boolean Whether the type is registered. 
		*/
		static isRegistered( component?:string ): boolean;

		/** [Method] Registers a function that will be called a single time when an item with the specified id is added to the manager  
		* @param id String The item id 
		* @param fn Function The callback function. Called with a single parameter, the item. 
		* @param scope Object The scope ('this' reference) in which the callback is executed. Defaults to the item. 
		*/
		static onAvailable( id?:string, fn?:any, scope?:any ): void;

		/** [Method] Registers a new item constructor keyed by a type key  
		* @param type String The mnemonic string by which the class may be looked up. 
		* @param cls Function The new instance class. 
		*/
		static registerType( type?:string, cls?:any ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext {
	export interface IComponentMgr extends Ext.IBase {
	}
	export class ComponentMgr {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Creates a new Component from the specified config object using the config object s xtype to determine the class to in  
		* @param config Object A configuration object for the Component you wish to create. 
		* @param defaultType String The xtype to use if the config object does not contain a xtype. (Optional if the config contains a xtype). 
		* @returns Ext.Component The newly instantiated Component. 
		*/
		static create( config?:any, defaultType?:string ): Ext.IComponent;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Executes the specified function once for each item in the collection  
		* @param fn Function The function to execute. 
		* @param scope Object The scope to execute in. Defaults to this. 
		*/
		static each( fn?:any, scope?:any ): void;

		/** [Method] Returns an item by id  
		* @param id String The id of the item 
		* @returns Object The item, undefined if not found. 
		*/
		static get( id?:string ): any;

		/** [Method] Returns an array of all components 
		* @returns Array 
		*/
		static getAll(): any[];

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Gets the number of items in the collection  
		* @returns Number The number of items in the collection. 
		*/
		static getCount(): number;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Checks if an item is registered  
		* @param component String The mnemonic string by which the class may be looked up. 
		* @returns Boolean Whether the type is registered. 
		*/
		static isRegistered( component?:string ): boolean;

		/** [Method] Registers a function that will be called a single time when an item with the specified id is added to the manager  
		* @param id String The item id 
		* @param fn Function The callback function. Called with a single parameter, the item. 
		* @param scope Object The scope ('this' reference) in which the callback is executed. Defaults to the item. 
		*/
		static onAvailable( id?:string, fn?:any, scope?:any ): void;

		/** [Method] Registers a new item constructor keyed by a type key  
		* @param type String The mnemonic string by which the class may be looked up. 
		* @param cls Function The new instance class. 
		*/
		static registerType( type?:string, cls?:any ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext {
	export interface IComponentQuery extends Ext.IBase {
	}
	export class ComponentQuery {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Tests whether the passed Component matches the selector string  
		* @param component Ext.Component The Component to test 
		* @param selector String The selector string to test against. 
		* @returns Boolean True if the Component matches the selector. 
		*/
		static is( component?:Ext.IComponent, selector?:string ): boolean;

		/** [Method] Returns an array of matched Components from within the passed root object  
		* @param selector String The selector string to filter returned Components 
		* @param root Ext.container.Container The Container within which to perform the query. If omitted, all Components within the document are included in the search. This parameter may also be an array of Components to filter according to the selector. 
		* @returns Ext.Component[] The matched Components. 
		*/
		static query( selector?:string, root?:Ext.container.IContainer ): Ext.IComponent[];

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Traverses the tree rooted at the passed root in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param root String The root queryable object to start from. 
		* @param fn Function The function to call. Return false to abort the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		static visitPostOrder( selector?:any, root?:string, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at the passed root in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param root String The root queryable object to start from. 
		* @param fn Function The function to call. Return false to abort the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		static visitPreOrder( selector?:any, root?:string, fn?:any, scope?:any, extraArgs?:any[] ): void;

	}

}

declare module Ext {
	export interface IConfig {
		/** [Config Option] (Function) */
		merge?: any;
		/** [Method] Returns the name of the property that stores this config on the given instance or class prototype  
		* @param target Object 
		* @returns String 
		*/
		getInternalName?( target?:any ): string;

	}

}

declare module Ext {
	export interface IConfigurator {
	}

}

declare module Ext.container {
	export interface IButtonGroup extends Ext.panel.IPanel {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number) */
		columns?: number;
		/** [Config Option] (String) */
		defaultButtonUI?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		titleAlign?: string;
		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] private 
		* @param component Object 
		*/
		onBeforeAdd?( component?:any ): void;

	}

}

declare module Ext {
	export interface IButtonGroup extends Ext.panel.IPanel {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number) */
		columns?: number;
		/** [Config Option] (String) */
		defaultButtonUI?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		titleAlign?: string;
		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] private 
		* @param component Object 
		*/
		onBeforeAdd?( component?:any ): void;

	}

}

declare module Ext.container {
	export interface IContainer extends Ext.IComponent, Ext.mixin.IQueryable {
		/** [Config Option] (String/Number) */
		activeItem?: any;
		/** [Config Option] (Number/Object) */
		anchorSize?: any;
		/** [Config Option] (Boolean) */
		autoDestroy?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String[]) */
		bubbleEvents?: string[];
		/** [Config Option] (String) */
		defaultFocus?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Object/Function) */
		defaults?: any;
		/** [Config Option] (Boolean) */
		detachOnRemove?: boolean;
		/** [Config Option] (Object/Object[]) */
		items?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Boolean) */
		referenceHolder?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean) */
		suspendLayout?: boolean;
		/** [Property] (Ext.util.MixedCollection) */
		floatingItems?: Ext.util.IMixedCollection;

		/** [Method] Adds Component s to this Container  
		* @param component Ext.Component[]|Object[]/Ext.Component.../Object... Either one or more Components to add or an Array of Components to add. See items for additional information. 
		* @returns Ext.Component[]/Ext.Component The Components that were added. 
		*/
		add?( component?:any ): any;

		/** [Method] Called by the layout system after the Component has been laid out  */
		afterComponentLayout?(): void;

		/** [Method] Invoked after the Container has laid out and rendered if necessary its child Components  
		* @param layout Ext.layout.container.Container 
		*/
		afterLayout?( layout?:Ext.layout.container.IContainer ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Cascades down the component container heirarchy from this component passed in the first call  calling the specified  
		* @param fn Function The function to call 
		* @param scope Object The scope of the function (defaults to current component) 
		* @param args Array The args to call the function with. The current component always passed as the last argument. 
		* @returns Ext.Container this 
		*/
		cascade?( fn?:any, scope?:any, args?:any[] ): Ext.IContainer;

		/** [Method] Retrieves the first direct child of this container which matches the passed selector or component  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching child Ext.Component (or null if no match was found). 
		*/
		child?( selector?:any ): any;

		/** [Method] Determines whether the passed Component is either an immediate child of this Container or whether it is a descendant  
		* @param comp Ext.Component The Component to test. 
		* @param deep Boolean Pass true to test for the Component being a descendant at any level. 
		* @returns Boolean true if the passed Component is contained at the specified level. 
		*/
		contains?( comp?:Ext.IComponent, deep?:boolean ): boolean;

		/** [Method] Disables all child input fields and buttons  
		* @param silent Object 
		* @param fromParent Object 
		*/
		disable?( silent?:any, fromParent?:any ): void;

		/** [Method] Manually force this container s layout to be recalculated  
		* @returns Ext.container.Container this 
		*/
		doLayout?(): Ext.container.IContainer;

		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found). 
		*/
		down?( selector?:any ): any;

		/** [Method] Enables all child input fields and buttons  
		* @param silent Object 
		* @param fromParent Object 
		*/
		enable?( silent?:any, fromParent?:any ): void;

		/** [Method] Return the immediate child Component in which the passed element is located  
		* @param el Ext.dom.Element/HTMLElement/String The element to test (or ID of element). 
		* @param deep Boolean If true, returns the deepest descendant Component which contains the passed element. 
		* @returns Ext.Component The child item which contains the passed element. 
		*/
		getChildByElement?( el?:any, deep?:boolean ): Ext.IComponent;

		/** [Method] Examines this container s items property and gets a direct child component of this container  
		* @param comp String/Number This parameter may be any of the following:  a String : representing the itemId or id of the child component. a Number : representing the position of the child component within the items property For additional information see Ext.util.MixedCollection.get. 
		* @returns Ext.Component The component (if found). 
		*/
		getComponent?( comp?:any ): Ext.IComponent;

		/** [Method] Finds the configured default focus item  */
		getDefaultFocus?(): void;

		/** [Method] Returns the focus holder element associated with this Container  
		* @returns Ext.dom.Element the focus holding element. 
		*/
		getFocusEl?(): Ext.dom.IElement;

		/** [Method] Returns the layout instance currently associated with this Container  
		* @returns Ext.layout.container.Container The layout 
		*/
		getLayout?(): Ext.layout.container.IContainer;

		/** [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th  
		* @param deep Object 
		*/
		getRefItems?( deep?:any ): void;

		/** [Method] Returns an object holding the descendants of this view keyed by their reference  
		* @returns Object An object with each child reference. This will be null if this container has no descendants with a reference specified. 
		*/
		getReferences?(): any;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Called by getInherited to initialize the inheritedState the first time it is requested  
		* @param inheritedState Object 
		* @param inheritedStateInner Object 
		*/
		initInheritedState?( inheritedState?:any, inheritedStateInner?:any ): void;

		/** [Method] This method is called to initialize the items collection  */
		initItems?(): void;

		/** [Method] Inserts a Component into this Container at a specified index  
		* @param index Number The index at which the Component will be inserted into the Container's items collection 
		* @param component Ext.Component/Object/Ext.Component[]/Object[] The child Component or config object to insert. Ext uses lazy rendering, and will only render the inserted Component should it become necessary. A Component config object may be passed in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the inserted Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted. You can pass an array of Component instances and config objects. For a list of all available xtypes, see Ext.enums.Widget. 
		* @returns Ext.Component component The Component (or config object) that was inserted with the Container's default config values applied. 
		*/
		insert?( index?:number, component?:any ): Ext.IComponent;

		/** [Method] Gets a reference to a child specified using the reference configuration  
		* @param key String The name of the reference. 
		* @returns Ext.Component The referenced component or null if it is not found. 
		*/
		lookupReference?( key?:string ): Ext.IComponent;

		/** [Method] Moves a Component within the Container  
		* @param fromIdx Number/Ext.Component The index/component to move. 
		* @param toIdx Number The new index for the Component. 
		* @returns Ext.Component component The Component that was moved. 
		*/
		move?( fromIdx?:any, toIdx?:number ): Ext.IComponent;

		/** [Method] Moves the given item into this container following after  
		* @param item Ext.Component The item to move. May be a component configuration object. 
		* @param after Ext.Component The reference component. May be null. 
		* @returns Ext.Component The moved item. 
		*/
		moveAfter?( item?:Ext.IComponent, after?:Ext.IComponent ): Ext.IComponent;

		/** [Method] Moves the given item into this container in front of before  
		* @param item Object/Ext.Component The item to move. May be a component configuration object. 
		* @param before Ext.Component The reference component. May be null. 
		* @returns Ext.Component The moved item. 
		*/
		moveBefore?( item?:any, before?:Ext.IComponent ): Ext.IComponent;

		/** [Method] A method to find a child component after the passed child parameter  
		* @param child Ext.Component The child to use as a starting point to find the next child. 
		* @param selector String A Ext.ComponentQuery selector to find the next child. This will return the next child matching this selector. This parameter is optional. 
		* @returns Ext.Component The next child found, null if no child found. 
		*/
		nextChild?( child?:Ext.IComponent, selector?:string ): Ext.IComponent;

		/** [Method] This method is invoked after a new Component has been added  
		* @param component Ext.Component 
		* @param position Number 
		*/
		onAdd?( component?:Ext.IComponent, position?:number ): void;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  
		* @param container Object 
		* @param pos Object 
		* @param instanced Object 
		*/
		onAdded?( container?:any, pos?:any, instanced?:any ): void;

		/** [Method] This method is invoked before adding a new child Component  
		* @param item Ext.Component 
		*/
		onBeforeAdd?( item?:Ext.IComponent ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Called after the component is moved this method is empty by default but can be implemented by any subclass that need  */
		onPosition?(): void;

		/** [Method] This method is invoked after a new Component has been removed  
		* @param component Ext.Component 
		* @param autoDestroy Boolean 
		*/
		onRemove?( component?:Ext.IComponent, autoDestroy?:boolean ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param destroying Boolean Will be passed as true if the Container performing the remove operation will delete this Component upon remove. 
		*/
		onRemoved?( destroying?:boolean ): void;

		/** [Method] Called when the component is resized  */
		onResize?(): void;

		/** [Method] A method to find a child component before the passed child parameter  
		* @param child Ext.Component The child to use as a starting point to find the previous child. 
		* @param selector String A Ext.ComponentQuery selector to find the previous child. This will return the first child matching this selector. This parameter is optional. 
		* @returns Ext.Component The previous child found, null if no child found. 
		*/
		prevChild?( child?:Ext.IComponent, selector?:string ): Ext.IComponent;

		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned. 
		* @returns Ext.Component[] Components which matched the selector 
		*/
		query?( selector?:string ): Ext.IComponent[];

		/** [Method] Retrieves all descendant components which match the passed function  
		* @param fn Function The matcher function. It will be called with a single argument, the component being tested. 
		* @param scope Object The scope in which to run the function. If not specified, it will default to the active component. 
		* @returns Ext.Component[] Components matched by the passed function 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.IComponent[];

		/** [Method] Finds a component at any level under this container matching the id itemId  
		* @param id String The id to find 
		* @returns Ext.Component The matching id, null if not found 
		*/
		queryById?( id?:string ): Ext.IComponent;

		/** [Method] Removes a component from this container  
		* @param component Ext.Component/String The component reference or id to remove. 
		* @param autoDestroy Boolean True to automatically invoke the removed Component's Ext.Component.destroy function. Defaults to the value of this Container's autoDestroy config. 
		* @returns Ext.Component component The Component that was removed. 
		*/
		remove?( component?:any, autoDestroy?:boolean ): Ext.IComponent;

		/** [Method] Removes all components from this container  
		* @param autoDestroy Boolean True to automatically invoke the removed Component's Ext.Component.destroy function. Defaults to the value of this Container's autoDestroy config. 
		* @returns Ext.Component[] Array of the removed components 
		*/
		removeAll?( autoDestroy?:boolean ): Ext.IComponent[];

		/** [Method] Sets a component as the active layout item  
		* @param item Ext.Component/Number/String The component, component id, itemId, or index of component. 
		* @returns Ext.Component the activated component or false when nothing activated. False is returned also when trying to activate an already active item. 
		*/
		setActiveItem?( item?:any ): Ext.IComponent;

		/** [Method] Reconfigures the initially configured layout  
		* @param configuration Object object for the layout 
		*/
		setLayout?( configuration?:any ): void;

		/** [Method] Traverses the tree rooted at this node in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPostOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at this node in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPreOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

	}

}

declare module Ext {
	export interface IContainer extends Ext.IComponent, Ext.mixin.IQueryable {
		/** [Config Option] (String/Number) */
		activeItem?: any;
		/** [Config Option] (Number/Object) */
		anchorSize?: any;
		/** [Config Option] (Boolean) */
		autoDestroy?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String[]) */
		bubbleEvents?: string[];
		/** [Config Option] (String) */
		defaultFocus?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Object/Function) */
		defaults?: any;
		/** [Config Option] (Boolean) */
		detachOnRemove?: boolean;
		/** [Config Option] (Object/Object[]) */
		items?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Boolean) */
		referenceHolder?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean) */
		suspendLayout?: boolean;
		/** [Property] (Ext.util.MixedCollection) */
		floatingItems?: Ext.util.IMixedCollection;

		/** [Method] Adds Component s to this Container  
		* @param component Ext.Component[]|Object[]/Ext.Component.../Object... Either one or more Components to add or an Array of Components to add. See items for additional information. 
		* @returns Ext.Component[]/Ext.Component The Components that were added. 
		*/
		add?( component?:any ): any;

		/** [Method] Called by the layout system after the Component has been laid out  */
		afterComponentLayout?(): void;

		/** [Method] Invoked after the Container has laid out and rendered if necessary its child Components  
		* @param layout Ext.layout.container.Container 
		*/
		afterLayout?( layout?:Ext.layout.container.IContainer ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Cascades down the component container heirarchy from this component passed in the first call  calling the specified  
		* @param fn Function The function to call 
		* @param scope Object The scope of the function (defaults to current component) 
		* @param args Array The args to call the function with. The current component always passed as the last argument. 
		* @returns Ext.Container this 
		*/
		cascade?( fn?:any, scope?:any, args?:any[] ): Ext.IContainer;

		/** [Method] Retrieves the first direct child of this container which matches the passed selector or component  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching child Ext.Component (or null if no match was found). 
		*/
		child?( selector?:any ): any;

		/** [Method] Determines whether the passed Component is either an immediate child of this Container or whether it is a descendant  
		* @param comp Ext.Component The Component to test. 
		* @param deep Boolean Pass true to test for the Component being a descendant at any level. 
		* @returns Boolean true if the passed Component is contained at the specified level. 
		*/
		contains?( comp?:Ext.IComponent, deep?:boolean ): boolean;

		/** [Method] Disables all child input fields and buttons  
		* @param silent Object 
		* @param fromParent Object 
		*/
		disable?( silent?:any, fromParent?:any ): void;

		/** [Method] Manually force this container s layout to be recalculated  
		* @returns Ext.container.Container this 
		*/
		doLayout?(): Ext.container.IContainer;

		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found). 
		*/
		down?( selector?:any ): any;

		/** [Method] Enables all child input fields and buttons  
		* @param silent Object 
		* @param fromParent Object 
		*/
		enable?( silent?:any, fromParent?:any ): void;

		/** [Method] Return the immediate child Component in which the passed element is located  
		* @param el Ext.dom.Element/HTMLElement/String The element to test (or ID of element). 
		* @param deep Boolean If true, returns the deepest descendant Component which contains the passed element. 
		* @returns Ext.Component The child item which contains the passed element. 
		*/
		getChildByElement?( el?:any, deep?:boolean ): Ext.IComponent;

		/** [Method] Examines this container s items property and gets a direct child component of this container  
		* @param comp String/Number This parameter may be any of the following:  a String : representing the itemId or id of the child component. a Number : representing the position of the child component within the items property For additional information see Ext.util.MixedCollection.get. 
		* @returns Ext.Component The component (if found). 
		*/
		getComponent?( comp?:any ): Ext.IComponent;

		/** [Method] Finds the configured default focus item  */
		getDefaultFocus?(): void;

		/** [Method] Returns the focus holder element associated with this Container  
		* @returns Ext.dom.Element the focus holding element. 
		*/
		getFocusEl?(): Ext.dom.IElement;

		/** [Method] Returns the layout instance currently associated with this Container  
		* @returns Ext.layout.container.Container The layout 
		*/
		getLayout?(): Ext.layout.container.IContainer;

		/** [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th  
		* @param deep Object 
		*/
		getRefItems?( deep?:any ): void;

		/** [Method] Returns an object holding the descendants of this view keyed by their reference  
		* @returns Object An object with each child reference. This will be null if this container has no descendants with a reference specified. 
		*/
		getReferences?(): any;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Called by getInherited to initialize the inheritedState the first time it is requested  
		* @param inheritedState Object 
		* @param inheritedStateInner Object 
		*/
		initInheritedState?( inheritedState?:any, inheritedStateInner?:any ): void;

		/** [Method] This method is called to initialize the items collection  */
		initItems?(): void;

		/** [Method] Inserts a Component into this Container at a specified index  
		* @param index Number The index at which the Component will be inserted into the Container's items collection 
		* @param component Ext.Component/Object/Ext.Component[]/Object[] The child Component or config object to insert. Ext uses lazy rendering, and will only render the inserted Component should it become necessary. A Component config object may be passed in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the inserted Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted. You can pass an array of Component instances and config objects. For a list of all available xtypes, see Ext.enums.Widget. 
		* @returns Ext.Component component The Component (or config object) that was inserted with the Container's default config values applied. 
		*/
		insert?( index?:number, component?:any ): Ext.IComponent;

		/** [Method] Gets a reference to a child specified using the reference configuration  
		* @param key String The name of the reference. 
		* @returns Ext.Component The referenced component or null if it is not found. 
		*/
		lookupReference?( key?:string ): Ext.IComponent;

		/** [Method] Moves a Component within the Container  
		* @param fromIdx Number/Ext.Component The index/component to move. 
		* @param toIdx Number The new index for the Component. 
		* @returns Ext.Component component The Component that was moved. 
		*/
		move?( fromIdx?:any, toIdx?:number ): Ext.IComponent;

		/** [Method] Moves the given item into this container following after  
		* @param item Ext.Component The item to move. May be a component configuration object. 
		* @param after Ext.Component The reference component. May be null. 
		* @returns Ext.Component The moved item. 
		*/
		moveAfter?( item?:Ext.IComponent, after?:Ext.IComponent ): Ext.IComponent;

		/** [Method] Moves the given item into this container in front of before  
		* @param item Object/Ext.Component The item to move. May be a component configuration object. 
		* @param before Ext.Component The reference component. May be null. 
		* @returns Ext.Component The moved item. 
		*/
		moveBefore?( item?:any, before?:Ext.IComponent ): Ext.IComponent;

		/** [Method] A method to find a child component after the passed child parameter  
		* @param child Ext.Component The child to use as a starting point to find the next child. 
		* @param selector String A Ext.ComponentQuery selector to find the next child. This will return the next child matching this selector. This parameter is optional. 
		* @returns Ext.Component The next child found, null if no child found. 
		*/
		nextChild?( child?:Ext.IComponent, selector?:string ): Ext.IComponent;

		/** [Method] This method is invoked after a new Component has been added  
		* @param component Ext.Component 
		* @param position Number 
		*/
		onAdd?( component?:Ext.IComponent, position?:number ): void;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  
		* @param container Object 
		* @param pos Object 
		* @param instanced Object 
		*/
		onAdded?( container?:any, pos?:any, instanced?:any ): void;

		/** [Method] This method is invoked before adding a new child Component  
		* @param item Ext.Component 
		*/
		onBeforeAdd?( item?:Ext.IComponent ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Called after the component is moved this method is empty by default but can be implemented by any subclass that need  */
		onPosition?(): void;

		/** [Method] This method is invoked after a new Component has been removed  
		* @param component Ext.Component 
		* @param autoDestroy Boolean 
		*/
		onRemove?( component?:Ext.IComponent, autoDestroy?:boolean ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param destroying Boolean Will be passed as true if the Container performing the remove operation will delete this Component upon remove. 
		*/
		onRemoved?( destroying?:boolean ): void;

		/** [Method] Called when the component is resized  */
		onResize?(): void;

		/** [Method] A method to find a child component before the passed child parameter  
		* @param child Ext.Component The child to use as a starting point to find the previous child. 
		* @param selector String A Ext.ComponentQuery selector to find the previous child. This will return the first child matching this selector. This parameter is optional. 
		* @returns Ext.Component The previous child found, null if no child found. 
		*/
		prevChild?( child?:Ext.IComponent, selector?:string ): Ext.IComponent;

		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned. 
		* @returns Ext.Component[] Components which matched the selector 
		*/
		query?( selector?:string ): Ext.IComponent[];

		/** [Method] Retrieves all descendant components which match the passed function  
		* @param fn Function The matcher function. It will be called with a single argument, the component being tested. 
		* @param scope Object The scope in which to run the function. If not specified, it will default to the active component. 
		* @returns Ext.Component[] Components matched by the passed function 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.IComponent[];

		/** [Method] Finds a component at any level under this container matching the id itemId  
		* @param id String The id to find 
		* @returns Ext.Component The matching id, null if not found 
		*/
		queryById?( id?:string ): Ext.IComponent;

		/** [Method] Removes a component from this container  
		* @param component Ext.Component/String The component reference or id to remove. 
		* @param autoDestroy Boolean True to automatically invoke the removed Component's Ext.Component.destroy function. Defaults to the value of this Container's autoDestroy config. 
		* @returns Ext.Component component The Component that was removed. 
		*/
		remove?( component?:any, autoDestroy?:boolean ): Ext.IComponent;

		/** [Method] Removes all components from this container  
		* @param autoDestroy Boolean True to automatically invoke the removed Component's Ext.Component.destroy function. Defaults to the value of this Container's autoDestroy config. 
		* @returns Ext.Component[] Array of the removed components 
		*/
		removeAll?( autoDestroy?:boolean ): Ext.IComponent[];

		/** [Method] Sets a component as the active layout item  
		* @param item Ext.Component/Number/String The component, component id, itemId, or index of component. 
		* @returns Ext.Component the activated component or false when nothing activated. False is returned also when trying to activate an already active item. 
		*/
		setActiveItem?( item?:any ): Ext.IComponent;

		/** [Method] Reconfigures the initially configured layout  
		* @param configuration Object object for the layout 
		*/
		setLayout?( configuration?:any ): void;

		/** [Method] Traverses the tree rooted at this node in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPostOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at this node in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPreOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

	}

}

declare module Ext {
	export interface IAbstractContainer extends Ext.IComponent, Ext.mixin.IQueryable {
		/** [Config Option] (String/Number) */
		activeItem?: any;
		/** [Config Option] (Number/Object) */
		anchorSize?: any;
		/** [Config Option] (Boolean) */
		autoDestroy?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String[]) */
		bubbleEvents?: string[];
		/** [Config Option] (String) */
		defaultFocus?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Object/Function) */
		defaults?: any;
		/** [Config Option] (Boolean) */
		detachOnRemove?: boolean;
		/** [Config Option] (Object/Object[]) */
		items?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Boolean) */
		referenceHolder?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean) */
		suspendLayout?: boolean;
		/** [Property] (Ext.util.MixedCollection) */
		floatingItems?: Ext.util.IMixedCollection;

		/** [Method] Adds Component s to this Container  
		* @param component Ext.Component[]|Object[]/Ext.Component.../Object... Either one or more Components to add or an Array of Components to add. See items for additional information. 
		* @returns Ext.Component[]/Ext.Component The Components that were added. 
		*/
		add?( component?:any ): any;

		/** [Method] Called by the layout system after the Component has been laid out  */
		afterComponentLayout?(): void;

		/** [Method] Invoked after the Container has laid out and rendered if necessary its child Components  
		* @param layout Ext.layout.container.Container 
		*/
		afterLayout?( layout?:Ext.layout.container.IContainer ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Cascades down the component container heirarchy from this component passed in the first call  calling the specified  
		* @param fn Function The function to call 
		* @param scope Object The scope of the function (defaults to current component) 
		* @param args Array The args to call the function with. The current component always passed as the last argument. 
		* @returns Ext.Container this 
		*/
		cascade?( fn?:any, scope?:any, args?:any[] ): Ext.IContainer;

		/** [Method] Retrieves the first direct child of this container which matches the passed selector or component  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching child Ext.Component (or null if no match was found). 
		*/
		child?( selector?:any ): any;

		/** [Method] Determines whether the passed Component is either an immediate child of this Container or whether it is a descendant  
		* @param comp Ext.Component The Component to test. 
		* @param deep Boolean Pass true to test for the Component being a descendant at any level. 
		* @returns Boolean true if the passed Component is contained at the specified level. 
		*/
		contains?( comp?:Ext.IComponent, deep?:boolean ): boolean;

		/** [Method] Disables all child input fields and buttons  
		* @param silent Object 
		* @param fromParent Object 
		*/
		disable?( silent?:any, fromParent?:any ): void;

		/** [Method] Manually force this container s layout to be recalculated  
		* @returns Ext.container.Container this 
		*/
		doLayout?(): Ext.container.IContainer;

		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found). 
		*/
		down?( selector?:any ): any;

		/** [Method] Enables all child input fields and buttons  
		* @param silent Object 
		* @param fromParent Object 
		*/
		enable?( silent?:any, fromParent?:any ): void;

		/** [Method] Return the immediate child Component in which the passed element is located  
		* @param el Ext.dom.Element/HTMLElement/String The element to test (or ID of element). 
		* @param deep Boolean If true, returns the deepest descendant Component which contains the passed element. 
		* @returns Ext.Component The child item which contains the passed element. 
		*/
		getChildByElement?( el?:any, deep?:boolean ): Ext.IComponent;

		/** [Method] Examines this container s items property and gets a direct child component of this container  
		* @param comp String/Number This parameter may be any of the following:  a String : representing the itemId or id of the child component. a Number : representing the position of the child component within the items property For additional information see Ext.util.MixedCollection.get. 
		* @returns Ext.Component The component (if found). 
		*/
		getComponent?( comp?:any ): Ext.IComponent;

		/** [Method] Finds the configured default focus item  */
		getDefaultFocus?(): void;

		/** [Method] Returns the focus holder element associated with this Container  
		* @returns Ext.dom.Element the focus holding element. 
		*/
		getFocusEl?(): Ext.dom.IElement;

		/** [Method] Returns the layout instance currently associated with this Container  
		* @returns Ext.layout.container.Container The layout 
		*/
		getLayout?(): Ext.layout.container.IContainer;

		/** [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th  
		* @param deep Object 
		*/
		getRefItems?( deep?:any ): void;

		/** [Method] Returns an object holding the descendants of this view keyed by their reference  
		* @returns Object An object with each child reference. This will be null if this container has no descendants with a reference specified. 
		*/
		getReferences?(): any;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Called by getInherited to initialize the inheritedState the first time it is requested  
		* @param inheritedState Object 
		* @param inheritedStateInner Object 
		*/
		initInheritedState?( inheritedState?:any, inheritedStateInner?:any ): void;

		/** [Method] This method is called to initialize the items collection  */
		initItems?(): void;

		/** [Method] Inserts a Component into this Container at a specified index  
		* @param index Number The index at which the Component will be inserted into the Container's items collection 
		* @param component Ext.Component/Object/Ext.Component[]/Object[] The child Component or config object to insert. Ext uses lazy rendering, and will only render the inserted Component should it become necessary. A Component config object may be passed in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the inserted Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted. You can pass an array of Component instances and config objects. For a list of all available xtypes, see Ext.enums.Widget. 
		* @returns Ext.Component component The Component (or config object) that was inserted with the Container's default config values applied. 
		*/
		insert?( index?:number, component?:any ): Ext.IComponent;

		/** [Method] Gets a reference to a child specified using the reference configuration  
		* @param key String The name of the reference. 
		* @returns Ext.Component The referenced component or null if it is not found. 
		*/
		lookupReference?( key?:string ): Ext.IComponent;

		/** [Method] Moves a Component within the Container  
		* @param fromIdx Number/Ext.Component The index/component to move. 
		* @param toIdx Number The new index for the Component. 
		* @returns Ext.Component component The Component that was moved. 
		*/
		move?( fromIdx?:any, toIdx?:number ): Ext.IComponent;

		/** [Method] Moves the given item into this container following after  
		* @param item Ext.Component The item to move. May be a component configuration object. 
		* @param after Ext.Component The reference component. May be null. 
		* @returns Ext.Component The moved item. 
		*/
		moveAfter?( item?:Ext.IComponent, after?:Ext.IComponent ): Ext.IComponent;

		/** [Method] Moves the given item into this container in front of before  
		* @param item Object/Ext.Component The item to move. May be a component configuration object. 
		* @param before Ext.Component The reference component. May be null. 
		* @returns Ext.Component The moved item. 
		*/
		moveBefore?( item?:any, before?:Ext.IComponent ): Ext.IComponent;

		/** [Method] A method to find a child component after the passed child parameter  
		* @param child Ext.Component The child to use as a starting point to find the next child. 
		* @param selector String A Ext.ComponentQuery selector to find the next child. This will return the next child matching this selector. This parameter is optional. 
		* @returns Ext.Component The next child found, null if no child found. 
		*/
		nextChild?( child?:Ext.IComponent, selector?:string ): Ext.IComponent;

		/** [Method] This method is invoked after a new Component has been added  
		* @param component Ext.Component 
		* @param position Number 
		*/
		onAdd?( component?:Ext.IComponent, position?:number ): void;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  
		* @param container Object 
		* @param pos Object 
		* @param instanced Object 
		*/
		onAdded?( container?:any, pos?:any, instanced?:any ): void;

		/** [Method] This method is invoked before adding a new child Component  
		* @param item Ext.Component 
		*/
		onBeforeAdd?( item?:Ext.IComponent ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Called after the component is moved this method is empty by default but can be implemented by any subclass that need  */
		onPosition?(): void;

		/** [Method] This method is invoked after a new Component has been removed  
		* @param component Ext.Component 
		* @param autoDestroy Boolean 
		*/
		onRemove?( component?:Ext.IComponent, autoDestroy?:boolean ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param destroying Boolean Will be passed as true if the Container performing the remove operation will delete this Component upon remove. 
		*/
		onRemoved?( destroying?:boolean ): void;

		/** [Method] Called when the component is resized  */
		onResize?(): void;

		/** [Method] A method to find a child component before the passed child parameter  
		* @param child Ext.Component The child to use as a starting point to find the previous child. 
		* @param selector String A Ext.ComponentQuery selector to find the previous child. This will return the first child matching this selector. This parameter is optional. 
		* @returns Ext.Component The previous child found, null if no child found. 
		*/
		prevChild?( child?:Ext.IComponent, selector?:string ): Ext.IComponent;

		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned. 
		* @returns Ext.Component[] Components which matched the selector 
		*/
		query?( selector?:string ): Ext.IComponent[];

		/** [Method] Retrieves all descendant components which match the passed function  
		* @param fn Function The matcher function. It will be called with a single argument, the component being tested. 
		* @param scope Object The scope in which to run the function. If not specified, it will default to the active component. 
		* @returns Ext.Component[] Components matched by the passed function 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.IComponent[];

		/** [Method] Finds a component at any level under this container matching the id itemId  
		* @param id String The id to find 
		* @returns Ext.Component The matching id, null if not found 
		*/
		queryById?( id?:string ): Ext.IComponent;

		/** [Method] Removes a component from this container  
		* @param component Ext.Component/String The component reference or id to remove. 
		* @param autoDestroy Boolean True to automatically invoke the removed Component's Ext.Component.destroy function. Defaults to the value of this Container's autoDestroy config. 
		* @returns Ext.Component component The Component that was removed. 
		*/
		remove?( component?:any, autoDestroy?:boolean ): Ext.IComponent;

		/** [Method] Removes all components from this container  
		* @param autoDestroy Boolean True to automatically invoke the removed Component's Ext.Component.destroy function. Defaults to the value of this Container's autoDestroy config. 
		* @returns Ext.Component[] Array of the removed components 
		*/
		removeAll?( autoDestroy?:boolean ): Ext.IComponent[];

		/** [Method] Sets a component as the active layout item  
		* @param item Ext.Component/Number/String The component, component id, itemId, or index of component. 
		* @returns Ext.Component the activated component or false when nothing activated. False is returned also when trying to activate an already active item. 
		*/
		setActiveItem?( item?:any ): Ext.IComponent;

		/** [Method] Reconfigures the initially configured layout  
		* @param configuration Object object for the layout 
		*/
		setLayout?( configuration?:any ): void;

		/** [Method] Traverses the tree rooted at this node in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPostOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at this node in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPreOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

	}

}

declare module Ext.container {
	export interface IDockingContainer extends Ext.IBase {
		/** [Config Option] (Object) */
		defaultDockWeights?: any;
		/** [Method] Adds docked item s to the container  
		* @param items Object/Object[] The Component or array of components to add. The components must include a 'dock' parameter on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left'). 
		* @param pos Number The index at which the Component will be added 
		* @returns Ext.Component[] The added components. 
		*/
		addDocked?( items?:any, pos?:number ): Ext.IComponent[];

		/** [Method] Finds a docked component by id itemId or position  
		* @param comp String/Number The id, itemId or position of the docked component (see getComponent for details) 
		* @returns Ext.Component The docked component (if found) 
		*/
		getDockedComponent?( comp?:any ): Ext.IComponent;

		/** [Method] Retrieves an array of all currently docked Components  
		* @param selector String A ComponentQuery selector string to filter the returned items. 
		* @param beforeBody Boolean An optional flag to limit the set of items to only those before the body (true) or after the body (false). All components are returned by default. 
		* @returns Ext.Component[] The array of docked components meeting the specified criteria. 
		*/
		getDockedItems?( selector?:string, beforeBody?:boolean ): Ext.IComponent[];

		/** [Method] Inserts docked item s to the panel at the indicated position  
		* @param pos Number The index at which the Component will be inserted 
		* @param items Object/Object[] The Component or array of components to add. The components must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left'). 
		*/
		insertDocked?( pos?:number, items?:any ): void;

		/** [Method] Invoked after a docked item is added to the Panel  
		* @param component Ext.Component 
		*/
		onDockedAdd?( component?:Ext.IComponent ): void;

		/** [Method] Invoked after a docked item is removed from the Panel  
		* @param component Ext.Component 
		*/
		onDockedRemove?( component?:Ext.IComponent ): void;

		/** [Method] Removes the docked item from the panel  
		* @param item Ext.Component The Component to remove. 
		* @param autoDestroy Boolean Destroy the component after removal. 
		*/
		removeDocked?( item?:Ext.IComponent, autoDestroy?:boolean ): void;

	}

}

declare module Ext.container {
	export interface IMonitor extends Ext.IBase {
	}

}

declare module Ext.container {
	export interface IViewport extends Ext.container.IContainer, Ext.mixin.IResponsive {
		/** [Config Option] (Number) */
		maxUserScale?: number;
		/** [Property] (Boolean) */
		isViewport?: boolean;

		/** [Method] This method removes this instance from the Responsive collection  */
		destroy?(): void;

	}

}

declare module Ext {
	export interface IViewport extends Ext.container.IContainer, Ext.mixin.IResponsive {
		/** [Config Option] (Number) */
		maxUserScale?: number;
		/** [Property] (Boolean) */
		isViewport?: boolean;

		/** [Method] This method removes this instance from the Responsive collection  */
		destroy?(): void;

	}

}

declare module Ext.dashboard {
	export interface IColumn extends Ext.container.IContainer {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Method] not user defined 
		* @param dashPanel Object 
		* @param isDestroying Object 
		*/
		onRemove?( dashPanel?:any, isDestroying?:any ): void;

	}

}

declare module Ext.dashboard {
	export interface IDashboard extends Ext.panel.IPanel {
		/** [Config Option] (String/String[]) */
		bodyCls?: any;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number[]) */
		columnWidths?: number[];
		/** [Config Option] (Object[]) */
		defaultContent?: any[];
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number) */
		maxColumns?: number;
		/** [Config Option] (Object) */
		parts?: any;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean) */
		stateful?: boolean;
		/** [Method] State and Item Persistence 
		* @param state Object 
		*/
		applyState?( state?:any ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Returns the value of parts  
		* @returns Object 
		*/
		getParts?(): any;

		/** [Method] The supplied default state gathering method for the Component class  
		* @returns Object 
		*/
		getState?(): any;

		/** [Method] Initialize any events on this component */
		initEvents?(): void;

		/** [Method] This method is called to initialize the items collection  */
		initItems?(): void;

		/** [Method] Sets the value of parts  
		* @param parts Object The new value. 
		*/
		setParts?( parts?:any ): void;

	}

}

declare module Ext.dashboard {
	export interface IDropZone extends Ext.dd.IDropTarget {
		/** [Config Option] (Boolean) */
		containerScroll?: boolean;
		/** [Config Option] (String) */
		overClass?: string;
		/** [Method] The function a Ext dd DragSource calls once to notify this drop target that the dragged item has been dropped on it  
		* @param dd Object 
		* @param e Object 
		* @param data Object 
		* @returns Boolean False if the drop was invalid. 
		*/
		notifyDrop?( dd?:any, e?:any, data?:any ): boolean;

		/** [Method] The function a Ext dd DragSource calls continuously while it is being dragged over the target  
		* @param dd Object 
		* @param e Object 
		* @param data Object 
		* @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated 
		*/
		notifyOver?( dd?:any, e?:any, data?:any ): string;

	}

}

declare module Ext.dashboard {
	export interface IPanel extends Ext.panel.IPanel {
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (Boolean) */
		animCollapse?: boolean;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (Boolean/Object) */
		draggable?: any;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (String) */
		resizeHandles?: string;
		/** [Config Option] (Boolean) */
		stateful?: boolean;
		/** [Config Option] (Boolean) */
		titleCollapse?: boolean;
		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] This method is invoked after a new Component has been added  
		* @param view Object 
		*/
		onAdd?( view?:any ): void;

	}

}

declare module Ext.dashboard {
	export interface IPart extends Ext.IBase, Ext.mixin.IFactoryable, Ext.mixin.IIdentifiable {
		/** [Config Option] (Object/Ext.util.ObjectTemplate) */
		viewTemplate?: any;
		/** [Property] (Ext.dashboard.Panel) */
		dashboard?: Ext.dashboard.IPanel;

		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Method] This method is responsible for converting a configuration object from displayForm into a view  an object that can b  
		* @param config Object The object returned from displayForm. 
		* @returns Object The view configuration object. 
		*/
		createView?( config?:any ): any;

		/** [Method] This method should display an appropriate edit form probably a modal Ext Window or Ext Msg prompt to get or edit co  
		* @param instance Ext.Component The already existing view or null if called to configure a new instance. 
		* @param currentConfig Object The configuration returned from this method for the existing view (instance) or null if called to configure a new instance. 
		* @param callback Function The function to call passing 
		* @param scope Object The scope with which to call the callback. 
		*/
		displayForm?( instance?:Ext.IComponent, currentConfig?:any, callback?:any, scope?:any ): void;

		/** [Method] Returns the value of id  
		* @returns Object 
		*/
		getId?(): any;

		/** [Method] Returns the value of viewTemplate  
		* @returns Object/Ext.util.ObjectTemplate 
		*/
		getViewTemplate?(): any;

		/** [Method] Sets the value of id  
		* @param id Object The new value. 
		*/
		setId?( id?:any ): void;

		/** [Method] Sets the value of viewTemplate  
		* @param viewTemplate Object/Ext.util.ObjectTemplate The new value. 
		*/
		setViewTemplate?( viewTemplate?:any ): void;

	}

}

declare module Ext.data {
	export interface IAbstractStore extends Ext.IBase, Ext.mixin.IObservable, Ext.mixin.IFactoryable {
		/** [Config Option] (Boolean) */
		autoDestroy?: boolean;
		/** [Config Option] (Object[]/Function[]) */
		filters?: any;
		/** [Config Option] (String) */
		groupDir?: string;
		/** [Config Option] (String) */
		groupField?: string;
		/** [Config Option] (Object/Ext.util.Grouper) */
		grouper?: any;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (Boolean) */
		remoteFilter?: boolean;
		/** [Config Option] (Boolean) */
		remoteSort?: boolean;
		/** [Config Option] (Ext.util.Sorter[]/Object[]) */
		sorters?: any;
		/** [Config Option] (Boolean) */
		statefulFilters?: boolean;
		/** [Config Option] (String) */
		storeId?: string;
		/** [Property] (Number) */
		currentPage?: number;

		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Boolean) */
		isDestroyed?: boolean;

		/** [Property] (Boolean) */
		isStore?: boolean;

		/** [Property] (Number) */
		updating?: number;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Adds a new Filter to this Store s filter set and by default applies the updated filter set to the Store s unfiltered  
		* @param filters Object[]/Ext.util.Filter[] The set of filters to add to the current filter set. 
		* @param suppressEvent Boolean If true the filter is cleared silently. 
		*/
		addFilter?( filters?:any, suppressEvent?:boolean ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] This method may be called to indicate the start of multiple changes to the store  */
		beginUpdate?(): void;

		/** [Method] Reverts to a view of the Record cache with no filtering applied  
		* @param suppressEvent Boolean If true the filter is cleared silently. For a locally filtered Store, this means that the filter collection is cleared without firing the datachanged event. For a remotely filtered Store, this means that the filter collection is cleared, but the store is not reloaded from the server. 
		*/
		clearFilter?( suppressEvent?:boolean ): void;

		/** [Method] Clear the store grouping */
		clearGrouping?(): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Checks if a record is in the current active data set  
		* @param record Ext.data.Model The record 
		* @returns Boolean true if the record is in the current active data set. 
		*/
		contains?( record?:Ext.data.IModel ): boolean;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] This method is called after modifications are complete on a store  */
		endUpdate?(): void;

		/** [Method] Filters the data in the Store by one or more fields  
		* @param filters String/Ext.util.Filter[] Either a string name of one of the fields in this Store's configured Model, or an array of filter configurations. 
		* @param value String The property value by which to filter. 
		* @returns Ext.util.Filter[] 
		*/
		filter?( filters?:any, value?:string ): Ext.util.IFilter[];

		/** [Method] Filters by a function  
		* @param fn Function The function to be called. It will be passed the following parameters: 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this Store. 
		*/
		filterBy?( fn?:any, scope?:any ): void;

		/** [Method] Finds the index of the first matching Record in this store by a specific field value  
		* @param property String The name of the Record field to test. 
		* @param value String/RegExp Either a string that the field value should begin with, or a RegExp to test against the field. 
		* @param startIndex Number The index to start searching at 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean True for case sensitive comparison 
		* @param exactMatch Boolean True to force exact match (^ and $ characters added to the regex). Ignored if anyMatch is true. 
		* @returns Number The matched index or -1 
		*/
		find?( property?:string, value?:any, startIndex?:number, anyMatch?:boolean, caseSensitive?:boolean, exactMatch?:boolean ): number;

		/** [Method] Find the index of the first matching Record in this Store by a function  
		* @param fn Function The function to be called. It will be passed the following parameters: 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this Store. 
		* @param startIndex Number The index to start searching at 
		* @returns Number The matched index or -1 
		*/
		findBy?( fn?:any, scope?:any, startIndex?:number ): number;

		/** [Method] Finds the index of the first matching Record in this store by a specific field value  
		* @param fieldName String The name of the Record field to test. 
		* @param value Object The value to match the field against. 
		* @param startIndex Number The index to start searching at 
		* @returns Number The matched index or -1 
		*/
		findExact?( fieldName?:string, value?:any, startIndex?:number ): number;

		/** [Method] Finds the first matching Record in this store by a specific field value  
		* @param fieldName String The name of the Record field to test. 
		* @param value String/RegExp Either a string that the field value should begin with, or a RegExp to test against the field. 
		* @param startIndex Number The index to start searching at 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean True for case sensitive comparison 
		* @param exactMatch Boolean True to force exact match (^ and $ characters added to the regex). Ignored if anyMatch is true. 
		* @returns Ext.data.Model The matched record or null 
		*/
		findRecord?( fieldName?:string, value?:any, startIndex?:number, anyMatch?:boolean, caseSensitive?:boolean, exactMatch?:boolean ): Ext.data.IModel;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Get the Record at the specified index  
		* @param index Number The index of the Record to find. 
		* @returns Ext.data.Model The Record at the passed index. Returns null if not found. 
		*/
		getAt?( index?:number ): Ext.data.IModel;

		/** [Method] Returns the value of autoDestroy  
		* @returns Boolean 
		*/
		getAutoDestroy?(): boolean;

		/** [Method] Get the Record with the specified id  
		* @param id Mixed The id of the Record to find. 
		* @returns Ext.data.Model The Record with the passed id. Returns null if not found. 
		*/
		getById?( id?:any ): Ext.data.IModel;

		/** [Method] Gets the number of records in store  
		* @returns Number The number of Records in the Store. 
		*/
		getCount?(): number;

		/** [Method] The current filters applied to the store  
		* @returns Ext.util.Collection The collection of filters applied to the store 
		*/
		getFilters?(): Ext.util.ICollection;

		/** [Method] Returns the value of groupDir  
		* @returns String 
		*/
		getGroupDir?(): string;

		/** [Method] Returns the value of grouper  
		* @returns Object/Ext.util.Grouper 
		*/
		getGrouper?(): any;

		/** [Method] Returns a collection of readonly sub collections of your store s records with grouping applied  
		* @returns Ext.util.Collection The grouped data 
		*/
		getGroups?(): Ext.util.ICollection;

		/** [Method] Returns the value of pageSize  
		* @returns Number 
		*/
		getPageSize?(): number;

		/** [Method] Gathers a range of Records between specified indices  
		* @param start Number The starting index. Defaults to zero. 
		* @param end Number The ending index. Defaults to the last record. The end index is included. 
		* @returns Ext.data.Model[] An array of records. 
		*/
		getRange?( start?:number, end?:number ): Ext.data.IModel[];

		/** [Method] Returns the value of remoteFilter  
		* @returns Boolean 
		*/
		getRemoteFilter?(): boolean;

		/** [Method] Returns the value of remoteSort  
		* @returns Boolean 
		*/
		getRemoteSort?(): boolean;

		/** [Method] The current sorters applied to the store  
		* @returns Ext.util.Collection The collection of sorters applied to the store 
		*/
		getSorters?(): Ext.util.ICollection;

		/** [Method] Returns the value of statefulFilters  
		* @returns Boolean 
		*/
		getStatefulFilters?(): boolean;

		/** [Method] Returns the value of storeId  
		* @returns String 
		*/
		getStoreId?(): string;

		/** [Method] Groups data inside the store  
		* @param grouper String/Object Either a string name of one of the fields in this Store's configured Model, or an object, or a grouper configuration object. 
		* @param direction String The overall direction to group the data by. Defaults to the value of groupDir. 
		*/
		group?( grouper?:any, direction?:string ): void;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Tests whether the store currently has any active filters  
		* @returns Boolean true if the store is filtered. 
		*/
		isFiltered?(): boolean;

		/** [Method] Tests whether the store currently has an active grouper  
		* @returns Boolean true if the store is grouped. 
		*/
		isGrouped?(): boolean;

		/** [Method] Returns true if the Store has been loaded  
		* @returns Boolean true if the Store has been loaded. 
		*/
		isLoaded?(): boolean;

		/** [Method] Returns true if the Store is currently performing a load operation  
		* @returns Boolean true if the Store is currently loading. 
		*/
		isLoading?(): boolean;

		/** [Method] Tests whether the store currently has any active sorters  
		* @returns Boolean true if the store is sorted. 
		*/
		isSorted?(): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an individual Filter from the current filter set using the passed Filter Filter id and by default applies th  
		* @param toRemove String/Ext.util.Filter The id of a Filter to remove from the filter set, or a Filter instance to remove. 
		* @param suppressEvent Boolean If true the filter is cleared silently. 
		*/
		removeFilter?( toRemove?:any, suppressEvent?:boolean ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of autoDestroy  
		* @param autoDestroy Boolean The new value. 
		*/
		setAutoDestroy?( autoDestroy?:boolean ): void;

		/** [Method] Sets the value of groupDir  
		* @param groupDir String The new value. 
		*/
		setGroupDir?( groupDir?:string ): void;

		/** [Method] Sets the value of groupField  
		* @param groupField String The new value. 
		*/
		setGroupField?( groupField?:string ): void;

		/** [Method] Sets the value of grouper  
		* @param grouper Object/Ext.util.Grouper The new value. 
		*/
		setGrouper?( grouper?:any ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of pageSize  
		* @param pageSize Number The new value. 
		*/
		setPageSize?( pageSize?:number ): void;

		/** [Method] Sets the value of remoteFilter  
		* @param remoteFilter Boolean The new value. 
		*/
		setRemoteFilter?( remoteFilter?:boolean ): void;

		/** [Method] Sets the value of remoteSort  
		* @param remoteSort Boolean The new value. 
		*/
		setRemoteSort?( remoteSort?:boolean ): void;

		/** [Method] Sets the value of statefulFilters  
		* @param statefulFilters Boolean The new value. 
		*/
		setStatefulFilters?( statefulFilters?:boolean ): void;

		/** [Method] Sets the value of storeId  
		* @param storeId String The new value. 
		*/
		setStoreId?( storeId?:string ): void;

		/** [Method] Sorts the data in the Store by one or more of its properties  
		* @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations. 
		* @param direction String The overall direction to sort the data by. 
		* @returns Ext.util.Sorter[] 
		*/
		sort?( sorters?:any, direction?:string ): Ext.util.ISorter[];

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.data {
	export interface IArrayStore extends Ext.data.IStore {
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
		/** [Method] Returns the value of proxy  
		* @returns Object 
		*/
		getProxy?(): any;

		/** [Method] Loads an array of data straight into the Store  
		* @param data Object 
		* @param append Object 
		*/
		loadData?( data?:any, append?:any ): void;

		/** [Method] Sets the value of proxy  
		* @param proxy Object The new value. 
		*/
		setProxy?( proxy?:any ): void;

	}

}

declare module Ext.data {
	export interface ISimpleStore extends Ext.data.IStore {
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
		/** [Method] Returns the value of proxy  
		* @returns Object 
		*/
		getProxy?(): any;

		/** [Method] Loads an array of data straight into the Store  
		* @param data Object 
		* @param append Object 
		*/
		loadData?( data?:any, append?:any ): void;

		/** [Method] Sets the value of proxy  
		* @param proxy Object The new value. 
		*/
		setProxy?( proxy?:any ): void;

	}

}

declare module Ext.data {
	export interface IBatch extends Ext.IBase, Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		pauseOnException?: boolean;
		/** [Property] (Ext.data.operation.Operation[]) */
		exceptions?: Ext.data.operation.IOperation[];

		/** [Method] Adds a new operation to this batch at the end of the operations array 
		* @param operation Ext.data.operation.Operation/Ext.data.operation.Operation[] The Operation object or an array of operations. 
		* @returns Ext.data.Batch this 
		*/
		add?( operation?:any ): Ext.data.IBatch;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Gets the currently running operation  
		* @returns Ext.data.operation.Operation The operation 
		*/
		getCurrent?(): Ext.data.operation.IOperation;

		/** [Method] Gets any operations that have returned without success in this batch  
		* @returns Ext.data.operation.Operation[] The exceptions 
		*/
		getExceptions?(): Ext.data.operation.IOperation[];

		/** [Method] Gets the operations for this batch  
		* @returns Ext.data.operation.Operation[] The operations. 
		*/
		getOperations?(): Ext.data.operation.IOperation[];

		/** [Method] Returns the value of pauseOnException  
		* @returns Boolean 
		*/
		getPauseOnException?(): boolean;

		/** [Method] Gets the total number of operations in this batch  
		* @returns Number The total 
		*/
		getTotal?(): number;

		/** [Method] Checks if this batch has any exceptions  
		* @returns Boolean true if this batch has any exceptions. 
		*/
		hasException?(): boolean;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if this batch is complete  
		* @returns Boolean true if this batch is complete. 
		*/
		isComplete?(): boolean;

		/** [Method] Checks if this batch is running  
		* @returns Boolean true if this batch is running. 
		*/
		isRunning?(): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Pauses execution of the batch but does not cancel the current operation 
		* @returns Ext.data.Batch this 
		*/
		pause?(): Ext.data.IBatch;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Kicks off execution of the batch continuing from the current operation  
		* @returns Ext.data.Batch this 
		*/
		retry?(): Ext.data.IBatch;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of pauseOnException  
		* @param pauseOnException Boolean The new value. 
		*/
		setPauseOnException?( pauseOnException?:boolean ): void;

		/** [Method] Sorts the operations based on their type and the foreign key dependencies of the entities  */
		sort?(): void;

		/** [Method] Kicks off execution of the batch continuing from the next operation if the previous operation encountered an excepti  
		* @param index Object 
		* @returns Ext.data.Batch this 
		*/
		start?( index?:any ): Ext.data.IBatch;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.data {
	export interface IBufferedStore extends Ext.data.IProxyStore {
		/** [Config Option] (Number) */
		leadingBufferZone?: number;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (Number) */
		purgePageCount?: number;
		/** [Config Option] (Boolean) */
		remoteFilter?: boolean;
		/** [Config Option] (Boolean) */
		remoteSort?: boolean;
		/** [Config Option] (Boolean) */
		sortOnLoad?: boolean;
		/** [Config Option] (Boolean) */
		trackRemoved?: boolean;
		/** [Config Option] (Number) */
		trailingBufferZone?: number;
		/** [Property] (Boolean) */
		isBufferedStore?: boolean;

		/** [Method] We are using applyData so that we can return nothing and prevent the this data property to be overridden  
		* @param data Array/Object 
		*/
		applyData?( data?:any ): void;

		/** [Method] Reverts to a view of the Record cache with no filtering applied  */
		clearFilter?(): void;

		/** [Method] Filters the data in the Store by one or more fields  
		* @returns Ext.util.Filter[] 
		*/
		filter?(): Ext.util.IFilter[];

		/** [Method] Filters by a function  
		* @param fn Object 
		* @param scope Object 
		*/
		filterBy?( fn?:any, scope?:any ): void;

		/** [Method] Get the Record at the specified index  
		* @param index Number The index of the Record to find. 
		* @returns Ext.data.Model The Record at the passed index. Returns null if not found. 
		*/
		getAt?( index?:number ): Ext.data.IModel;

		/** [Method] Get the Record with the specified id  
		* @param id Mixed The id of the Record to find. 
		* @returns Ext.data.Model The Record with the passed id. Returns null if not found. 
		*/
		getById?( id?:any ): Ext.data.IModel;

		/** [Method] Returns the value of data  
		* @returns Number 
		*/
		getData?(): number;

		/** [Method] Returns the value of grouper  
		* @returns Object/Ext.util.Grouper 
		*/
		getGrouper?(): any;

		/** [Method] Returns the value of leadingBufferZone  
		* @returns Number 
		*/
		getLeadingBufferZone?(): number;

		/** [Method] Determines the page from a record index 
		* @param index Number The record index 
		* @returns Number The page the record belongs to 
		*/
		getPageFromRecordIndex?( index?:number ): number;

		/** [Method] Returns the value of pageSize  
		* @returns Number 
		*/
		getPageSize?(): number;

		/** [Method] Returns the value of purgePageCount  
		* @returns Number 
		*/
		getPurgePageCount?(): number;

		/** [Method] Gathers a range of Records between specified indices  
		* @param start Object 
		* @param end Object 
		* @param options Object 
		* @returns Ext.data.Model[] An array of records. 
		*/
		getRange?( start?:any, end?:any, options?:any ): Ext.data.IModel[];

		/** [Method] Returns the value of remoteFilter  
		* @returns Boolean 
		*/
		getRemoteFilter?(): boolean;

		/** [Method] Returns the value of remoteSort  
		* @returns Boolean 
		*/
		getRemoteSort?(): boolean;

		/** [Method] Returns the value of sortOnLoad  
		* @returns Boolean 
		*/
		getSortOnLoad?(): boolean;

		/** [Method] Returns the value of trackRemoved  
		* @returns Boolean 
		*/
		getTrackRemoved?(): boolean;

		/** [Method] Returns the value of trailingBufferZone  
		* @returns Number 
		*/
		getTrailingBufferZone?(): number;

		/** [Method] Groups data inside the store  
		* @param grouper Object 
		* @param direction Object 
		*/
		group?( grouper?:any, direction?:any ): void;

		/** [Method] Guarantee a specific range this will load the store with a range that must be the pageSize or smaller and take car  
		* @param start Object 
		* @param end Object 
		* @param callback Object 
		* @param scope Object 
		* @param options Object 
		*/
		guaranteeRange?( start?:any, end?:any, callback?:any, scope?:any, options?:any ): void;

		/** [Method] Get the index of the record within the store  
		* @param record Ext.data.Model The Ext.data.Model object to find. 
		* @returns Number The index of the passed Record. Returns -1 if not found. 
		*/
		indexOf?( record?:Ext.data.IModel ): number;

		/** [Method] Get the index within the store of the Record with the passed id  
		* @param id String The id of the Record to find. 
		* @returns Number The index of the Record. Returns -1 if not found. 
		*/
		indexOfId?( id?:string ): number;

		/** [Method] Tests whether the store currently has an active grouper  
		* @returns Boolean true if the store is grouped. 
		*/
		isGrouped?(): boolean;

		/** [Method] Loads the Store using its configured proxy  
		* @param options Object 
		* @returns Ext.data.Store this 
		*/
		load?( options?:any ): Ext.data.IStore;

		/** [Method] Prefetches data into the store using its configured proxy  
		* @param options Object config object, passed into the Ext.data.operation.Operation object before loading. See load 
		*/
		prefetch?( options?:any ): void;

		/** [Method] Prefetches a page of data  
		* @param page Number The page to prefetch 
		* @param options Object config object, passed into the Ext.data.operation.Operation object before loading. See load 
		*/
		prefetchPage?( page?:number, options?:any ): void;

		/** [Method] Ensures that the specified range of rows is present in the cache  
		* @param start Object 
		* @param end Object 
		*/
		prefetchRange?( start?:any, end?:any ): void;

		/** [Method] Reloads the store using the last options passed to the load method  
		* @param options Object 
		*/
		reload?( options?:any ): void;

		/** [Method]  
		* @param silent Object 
		*/
		removeAll?( silent?:any ): void;

		/** [Method] Sets the value of data  
		* @param data Number The new value. 
		*/
		setData?( data?:number ): void;

		/** [Method] Sets the value of leadingBufferZone  
		* @param leadingBufferZone Number The new value. 
		*/
		setLeadingBufferZone?( leadingBufferZone?:number ): void;

		/** [Method] Sets the value of pageSize  
		* @param pageSize Number The new value. 
		*/
		setPageSize?( pageSize?:number ): void;

		/** [Method] Sets the value of purgePageCount  
		* @param purgePageCount Number The new value. 
		*/
		setPurgePageCount?( purgePageCount?:number ): void;

		/** [Method] Sets the value of remoteFilter  
		* @param remoteFilter Boolean The new value. 
		*/
		setRemoteFilter?( remoteFilter?:boolean ): void;

		/** [Method] Sets the value of remoteSort  
		* @param remoteSort Boolean The new value. 
		*/
		setRemoteSort?( remoteSort?:boolean ): void;

		/** [Method] Sets the value of sortOnLoad  
		* @param sortOnLoad Boolean The new value. 
		*/
		setSortOnLoad?( sortOnLoad?:boolean ): void;

		/** [Method] Sets the value of trackRemoved  
		* @param trackRemoved Boolean The new value. 
		*/
		setTrackRemoved?( trackRemoved?:boolean ): void;

		/** [Method] Sets the value of trailingBufferZone  
		* @param trailingBufferZone Number The new value. 
		*/
		setTrailingBufferZone?( trailingBufferZone?:number ): void;

		/** [Method] Sorts the data in the Store by one or more of its properties  
		* @param field Object 
		* @param direction Object 
		* @param mode Object 
		* @returns Ext.util.Sorter[] 
		*/
		sort?( field?:any, direction?:any, mode?:any ): Ext.util.ISorter[];

	}

}

declare module Ext.data {
	export interface IChainedStore extends Ext.data.IAbstractStore, Ext.data.ILocalStore {
		/** [Config Option] (Boolean) */
		remoteFilter?: boolean;
		/** [Config Option] (Boolean) */
		remoteSort?: boolean;
		/** [Config Option] (Ext.data.Store/String) */
		source?: any;
		/** [Method] Adds Model instance to the Store  
		* @param model Ext.data.Model[]/Ext.data.Model.../Object[]/Object... An array of Model instances or Model configuration objects, or variable number of Model instance or config arguments. 
		* @returns Ext.data.Model[] The model instances that were added 
		*/
		add?( model?:any ): Ext.data.IModel[];

		/** [Method] Runs the aggregate function for all the records in the store  
		* @param fn Function The function to execute. The function is called with a single parameter, an array of records for that group. 
		* @param scope Object The scope to execute the function in. Defaults to the store. 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the group average being the value. The grouped parameter is only honored if the store has a groupField. 
		* @param field String The field to get the value from 
		* @returns Object An object literal with the group names and their appropriate values. 
		*/
		aggregate?( fn?:any, scope?:any, grouped?:boolean, field?:string ): any;

		/** [Method] Gets the average value in the store  
		* @param field String The field in each record 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the group average being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Object The average value, if no items exist, 0. 
		*/
		average?( field?:string, grouped?:boolean ): any;

		/** [Method] Collects unique values for a particular dataIndex from this store  
		* @param dataIndex String The property to collect 
		* @param allowNull Boolean Pass true to allow null, undefined or empty string values 
		* @param bypassFilter Boolean Pass true to collect from all records, even ones which are filtered. 
		* @returns Object[] An array of the unique values 
		*/
		collect?( dataIndex?:string, allowNull?:boolean, bypassFilter?:boolean ): any[];

		/** [Method] Gets the count of items in the store  
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the count for each group being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Number the count 
		*/
		count?( grouped?:boolean ): number;

		/** [Method] Calls the specified function for each record in the store  
		* @param fn Function The function to call. The Record is passed as the first parameter. Returning false aborts and exits the iteration. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current record in the iteration. 
		*/
		each?( fn?:any, scope?:any ): void;

		/** [Method] Convenience function for getting the first model instance in the store  
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the first record being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Ext.data.Model/undefined The first model instance in the store, or undefined 
		*/
		first?( grouped?:boolean ): any;

		/** [Method] Get the Record with the specified id  
		* @param id Mixed The id of the Record to find. 
		* @returns Ext.data.Model The Record with the passed id. Returns null if not found. 
		*/
		getById?( id?:any ): Ext.data.IModel;

		/** [Method] Get the Record with the specified internalId  
		* @param internalId Mixed The id of the Record to find. 
		* @returns Ext.data.Model The Record with the passed internalId. Returns null if not found. 
		*/
		getByInternalId?( internalId?:any ): Ext.data.IModel;

		/** [Method] Returns the value of extraKeys  
		* @returns Object 
		*/
		getExtraKeys?(): any;

		/** [Method] Get the model used for this store  
		* @returns Ext.data.Model The model 
		*/
		getModel?(): Ext.data.IModel;

		/** [Method] Returns the value of remoteFilter  
		* @returns Boolean 
		*/
		getRemoteFilter?(): boolean;

		/** [Method] Returns the value of remoteSort  
		* @returns Boolean 
		*/
		getRemoteSort?(): boolean;

		/** [Method] Returns the value of source  
		* @returns Ext.data.Store/String 
		*/
		getSource?(): any;

		/** [Method] Get the index of the record within the store  
		* @param record Ext.data.Model The Ext.data.Model object to find. 
		* @returns Number The index of the passed Record. Returns -1 if not found. 
		*/
		indexOf?( record?:Ext.data.IModel ): number;

		/** [Method] Get the index within the store of the Record with the passed id  
		* @param id String The id of the Record to find. 
		* @returns Number The index of the Record. Returns -1 if not found. 
		*/
		indexOfId?( id?:string ): number;

		/** [Method] Inserts Model instances into the Store at the given index and fires the add event  
		* @param index Number The start index at which to insert the passed Records. 
		* @param records Ext.data.Model/Ext.data.Model[]/Object/Object[] An Ext.data.Model instance, the data needed to populate an instance or an array of either of these. 
		* @returns Ext.data.Model[] records The added records 
		*/
		insert?( index?:number, records?:any ): Ext.data.IModel[];

		/** [Method] Returns true if the Store has been loaded  
		* @returns Boolean true if the Store has been loaded. 
		*/
		isLoaded?(): boolean;

		/** [Method] Returns true if the Store is currently performing a load operation  
		* @returns Boolean true if the Store is currently loading. 
		*/
		isLoading?(): boolean;

		/** [Method] Convenience function for getting the last model instance in the store  
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the last record being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Ext.data.Model/undefined The last model instance in the store, or undefined 
		*/
		last?( grouped?:boolean ): any;

		/** [Method] Gets the maximum value in the store  
		* @param field String The field in each record 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the maximum in the group being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Object The maximum value, if no items exist, undefined. 
		*/
		max?( field?:string, grouped?:boolean ): any;

		/** [Method] Gets the minimum value in the store  
		* @param field String The field in each record 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the minimum in the group being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Object The minimum value, if no items exist, undefined. 
		*/
		min?( field?:string, grouped?:boolean ): any;

		/** [Method] Query all the cached records in this Store by name value pair  
		* @param property String The property to create the filter function for 
		* @param value String/RegExp The string/regex to compare the property value to 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean true to create a case-sensitive regex. 
		* @param exactMatch Boolean True to force exact match (^ and $ characters added to the regex). Ignored if anyMatch is true. 
		* @returns Ext.util.Collection The matched records 
		*/
		query?( property?:string, value?:any, anyMatch?:boolean, caseSensitive?:boolean, exactMatch?:boolean ): Ext.util.ICollection;

		/** [Method] Query all the cached records in this Store using a filtering function  
		* @param fn Function The function to be called. It will be passed the following parameters: 
		* @param scope Object The scope (this reference) in which the function is executed Defaults to this Store. 
		* @returns Ext.util.Collection The matched records 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.util.ICollection;

		/** [Method] Sets the value of extraKeys  
		* @param extraKeys Object The new value. 
		*/
		setExtraKeys?( extraKeys?:any ): void;

		/** [Method] Sets the value of remoteFilter  
		* @param remoteFilter Boolean The new value. 
		*/
		setRemoteFilter?( remoteFilter?:boolean ): void;

		/** [Method] Sets the value of remoteSort  
		* @param remoteSort Boolean The new value. 
		*/
		setRemoteSort?( remoteSort?:boolean ): void;

		/** [Method] Sets the value of source  
		* @param source Ext.data.Store/String The new value. 
		*/
		setSource?( source?:any ): void;

		/** [Method] Sums the value of field for each record in store and returns the result  
		* @param field String A field in each record 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the sum for that group being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Number The sum 
		*/
		sum?( field?:string, grouped?:boolean ): number;

	}

}

declare module Ext.data {
	export interface IConnection extends Ext.IBase, Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		async?: boolean;
		/** [Config Option] (Boolean) */
		autoAbort?: boolean;
		/** [Config Option] (Boolean) */
		binary?: boolean;
		/** [Config Option] (Boolean) */
		cors?: boolean;
		/** [Config Option] (Object) */
		defaultHeaders?: any;
		/** [Config Option] (String) */
		defaultPostHeader?: string;
		/** [Config Option] (String) */
		defaultXhrHeader?: string;
		/** [Config Option] (Boolean) */
		disableCaching?: boolean;
		/** [Config Option] (String) */
		disableCachingParam?: string;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: boolean;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
		/** [Method] Aborts an active request  
		* @param request Object Defaults to the last request 
		*/
		abort?( request?:any ): void;

		/** [Method] Aborts all active requests */
		abortAll?(): void;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the value of async  
		* @returns Boolean 
		*/
		getAsync?(): boolean;

		/** [Method] Returns the value of autoAbort  
		* @returns Boolean 
		*/
		getAutoAbort?(): boolean;

		/** [Method] Returns the value of binary  
		* @returns Boolean 
		*/
		getBinary?(): boolean;

		/** [Method] Returns the value of cors  
		* @returns Boolean 
		*/
		getCors?(): boolean;

		/** [Method] Returns the value of defaultHeaders  
		* @returns Object 
		*/
		getDefaultHeaders?(): any;

		/** [Method] Returns the value of defaultPostHeader  
		* @returns String 
		*/
		getDefaultPostHeader?(): string;

		/** [Method] Returns the value of defaultXdrContentType  
		* @returns String 
		*/
		getDefaultXdrContentType?(): string;

		/** [Method] Returns the value of defaultXhrHeader  
		* @returns String 
		*/
		getDefaultXhrHeader?(): string;

		/** [Method] Returns the value of disableCaching  
		* @returns Boolean 
		*/
		getDisableCaching?(): boolean;

		/** [Method] Returns the value of disableCachingParam  
		* @returns String 
		*/
		getDisableCachingParam?(): string;

		/** [Method] Returns the value of extraParams  
		* @returns Object 
		*/
		getExtraParams?(): any;

		/** [Method] Returns the value of isXdr  
		* @returns Boolean 
		*/
		getIsXdr?(): boolean;

		/** [Method] Returns the value of method  
		* @returns String 
		*/
		getMethod?(): string;

		/** [Method] Returns the value of password  
		* @returns String 
		*/
		getPassword?(): string;

		/** [Method] Returns the value of timeout  
		* @returns Number 
		*/
		getTimeout?(): number;

		/** [Method] Returns the value of url  
		* @returns String 
		*/
		getUrl?(): string;

		/** [Method] Returns the value of useDefaultXhrHeader  
		* @returns Boolean 
		*/
		getUseDefaultXhrHeader?(): boolean;

		/** [Method] Returns the value of username  
		* @returns String 
		*/
		getUsername?(): string;

		/** [Method] Returns the value of withCredentials  
		* @returns Boolean 
		*/
		getWithCredentials?(): boolean;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Determines whether this object has a request outstanding  
		* @param request Object Defaults to the last transaction 
		* @returns Boolean True if there is an outstanding request. 
		*/
		isLoading?( request?:any ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Checks if the response status was successful 
		* @param status Number The status code 
		* @returns Object An object containing success/status state 
		*/
		parseStatus?( status?:number ): any;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Sends an HTTP request to a remote server  
		* @param options Object An object which may contain the following properties: (The options object may also contain any other property which might be needed to perform postprocessing in a callback because it is passed to callback functions.) 
		* @returns Object The request object. This may be used to cancel the request. 
		*/
		request?( options?:any ): any;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of async  
		* @param async Boolean The new value. 
		*/
		setAsync?( async?:boolean ): void;

		/** [Method] Sets the value of autoAbort  
		* @param autoAbort Boolean The new value. 
		*/
		setAutoAbort?( autoAbort?:boolean ): void;

		/** [Method] Sets the value of binary  
		* @param binary Boolean The new value. 
		*/
		setBinary?( binary?:boolean ): void;

		/** [Method] Sets the value of cors  
		* @param cors Boolean The new value. 
		*/
		setCors?( cors?:boolean ): void;

		/** [Method] Sets the value of defaultHeaders  
		* @param defaultHeaders Object The new value. 
		*/
		setDefaultHeaders?( defaultHeaders?:any ): void;

		/** [Method] Sets the value of defaultPostHeader  
		* @param defaultPostHeader String The new value. 
		*/
		setDefaultPostHeader?( defaultPostHeader?:string ): void;

		/** [Method] Sets the value of defaultXdrContentType  
		* @param defaultXdrContentType String The new value. 
		*/
		setDefaultXdrContentType?( defaultXdrContentType?:string ): void;

		/** [Method] Sets the value of defaultXhrHeader  
		* @param defaultXhrHeader String The new value. 
		*/
		setDefaultXhrHeader?( defaultXhrHeader?:string ): void;

		/** [Method] Sets the value of disableCaching  
		* @param disableCaching Boolean The new value. 
		*/
		setDisableCaching?( disableCaching?:boolean ): void;

		/** [Method] Sets the value of disableCachingParam  
		* @param disableCachingParam String The new value. 
		*/
		setDisableCachingParam?( disableCachingParam?:string ): void;

		/** [Method] Sets the value of extraParams  
		* @param extraParams Object The new value. 
		*/
		setExtraParams?( extraParams?:any ): void;

		/** [Method] Sets the value of isXdr  
		* @param isXdr Boolean The new value. 
		*/
		setIsXdr?( isXdr?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of method  
		* @param method String The new value. 
		*/
		setMethod?( method?:string ): void;

		/** [Method] Sets various options such as the url params for the request 
		* @param options Object The initial options 
		* @param scope Object The scope to execute in 
		* @returns Object The params for the request 
		*/
		setOptions?( options?:any, scope?:any ): any;

		/** [Method] Sets the value of password  
		* @param password String The new value. 
		*/
		setPassword?( password?:string ): void;

		/** [Method] Sets the value of timeout  
		* @param timeout Number The new value. 
		*/
		setTimeout?( timeout?:number ): void;

		/** [Method] Sets the value of url  
		* @param url String The new value. 
		*/
		setUrl?( url?:string ): void;

		/** [Method] Sets the value of useDefaultXhrHeader  
		* @param useDefaultXhrHeader Boolean The new value. 
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:boolean ): void;

		/** [Method] Sets the value of username  
		* @param username String The new value. 
		*/
		setUsername?( username?:string ): void;

		/** [Method] Sets the value of withCredentials  
		* @param withCredentials Boolean The new value. 
		*/
		setWithCredentials?( withCredentials?:boolean ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Uploads a form using a hidden iframe  
		* @param form String/HTMLElement/Ext.dom.Element The form to upload 
		* @param url String The url to post to 
		* @param params String Any extra parameters to pass 
		* @param options Object The initial options 
		*/
		upload?( form?:any, url?:string, params?:string, options?:any ): void;

	}

}

declare module Ext.data {
	export interface IDirectStore extends Ext.data.IStore {
	}

}

declare module Ext.data {
	export interface IError extends Ext.IBase {
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (String) */
		message?: string;
		/** [Method] Returns the value of field  
		* @returns String 
		*/
		getField?(): string;

		/** [Method] Returns the value of message  
		* @returns String 
		*/
		getMessage?(): string;

		/** [Method] Sets the value of field  
		* @param field String The new value. 
		*/
		setField?( field?:string ): void;

		/** [Method] Sets the value of message  
		* @param message String The new value. 
		*/
		setMessage?( message?:string ): void;

	}

}

declare module Ext.data {
	export interface IErrorCollection extends Ext.util.IMixedCollection {
		/** [Method] Adds an item to the collection  
		* @param key Object 
		* @param value Object 
		* @returns Object The item added. 
		*/
		add?( key?:any, value?:any ): any;

		/** [Method] Returns all of the errors for the given field 
		* @param fieldName String The field to get errors for 
		* @returns Object[] All errors for the given field 
		*/
		getByField?( fieldName?:string ): any[];

		/** [Method] A function which will be called passing a newly added object when the object is added without a separate id  
		* @param item Object 
		* @returns Object The key for the passed item. 
		*/
		getKey?( item?:any ): any;

		/** [Method] Returns true if there are no errors in the collection 
		* @returns Boolean 
		*/
		isValid?(): boolean;

	}

}

declare module Ext.data {
	export interface IErrors extends Ext.util.IMixedCollection {
		/** [Method] Adds an item to the collection  
		* @param key Object 
		* @param value Object 
		* @returns Object The item added. 
		*/
		add?( key?:any, value?:any ): any;

		/** [Method] Returns all of the errors for the given field 
		* @param fieldName String The field to get errors for 
		* @returns Object[] All errors for the given field 
		*/
		getByField?( fieldName?:string ): any[];

		/** [Method] A function which will be called passing a newly added object when the object is added without a separate id  
		* @param item Object 
		* @returns Object The key for the passed item. 
		*/
		getKey?( item?:any ): any;

		/** [Method] Returns true if there are no errors in the collection 
		* @returns Boolean 
		*/
		isValid?(): boolean;

	}

}

declare module Ext.data.field {
	export interface IBoolean extends Ext.data.field.IField {
		/** [Property] (RegExp) */
		trueRe?: RegExp;

		/** [Method] A function which converts the value provided by the Reader into the value that will be stored in the record  
		* @param v Object 
		* @returns Mixed The converted value for storage in the record. 
		*/
		convert?( v?:any ): any;

		/** [Method] Gets a string representation of the type of this field  
		* @returns String type 
		*/
		getType?(): string;

	}

}

declare module Ext.data.field {
	export interface IDate extends Ext.data.field.IField {
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (String) */
		dateReadFormat?: string;
		/** [Config Option] (String) */
		dateWriteFormat?: string;
		/** [Config Option] (Function/String) */
		sortType?: any;
		/** [Method] Compares two values to retrieve their relative position in sort order  
		* @param lhs Object 
		* @param rhs Object 
		* @returns Number -1 if value1 is less than value2. 1 if value1 is greater than value2. 0 otherwise. 
		*/
		compare?( lhs?:any, rhs?:any ): number;

		/** [Method] A function which converts the value provided by the Reader into the value that will be stored in the record  
		* @param v Object 
		* @returns Mixed The converted value for storage in the record. 
		*/
		convert?( v?:any ): any;

		/** [Method] Gets the dateFormat for this field  
		* @returns String dateFormat 
		*/
		getDateFormat?(): string;

		/** [Method] Gets the dateReadFormat for this field  
		* @returns String dateReadFormat 
		*/
		getDateReadFormat?(): string;

		/** [Method] Gets the dateWriteFormat for this field  
		* @returns String dateWriteFormat 
		*/
		getDateWriteFormat?(): string;

		/** [Method] Gets a string representation of the type of this field  
		* @returns String type 
		*/
		getType?(): string;

		/** [Method] A function which converts the Model s value for this Field into a form which can be used by whatever Writer is being 
		* @param value Object 
		* @returns String The string that represents the Field's value. 
		*/
		serialize?( value?:any ): string;

	}

}

declare module Ext.data.field {
	export interface IField extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Config Option] (Boolean) */
		allowNull?: boolean;
		/** [Config Option] (Function) */
		calculate?: any;
		/** [Config Option] (Function) */
		convert?: any;
		/** [Config Option] (Boolean) */
		critical?: boolean;
		/** [Config Option] (Object) */
		defaultValue?: any;
		/** [Config Option] (String/String[]) */
		depends?: any;
		/** [Config Option] (String/Number/Function) */
		mapping?: any;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		persist?: boolean;
		/** [Config Option] (String/Object) */
		reference?: any;
		/** [Config Option] (Function) */
		serialize?: any;
		/** [Config Option] (Function/String) */
		sortType?: any;
		/** [Config Option] (Boolean) */
		unique?: boolean;
		/** [Config Option] (Object[]) */
		validators?: any[];
		/** [Property] (Boolean) */
		calculated?: boolean;

		/** [Property] (String) */
		defaultInvalidMessage?: string;

		/** [Property] (Ext.Class) */
		definedBy?: Ext.IClass;

		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Boolean) */
		identifier?: boolean;

		/** [Property] (Number) */
		ordinal?: number;

		/** [Property] (RegExp) */
		stripRe?: RegExp;

		/** [Method] Compares two values to retrieve their relative position in sort order taking into account any sortType  
		* @param value1 Object The first value. 
		* @param value2 Object The second value. 
		* @returns Number -1 if value1 is less than value2. 1 if value1 is greater than value2. 0 otherwise. 
		*/
		collate?( value1?:any, value2?:any ): number;

		/** [Method] Compares two values to retrieve their relative position in sort order  
		* @param value1 Object The first value. 
		* @param value2 Object The second value. 
		* @returns Number -1 if value1 is less than value2. 1 if value1 is greater than value2. 0 otherwise. 
		*/
		compare?( value1?:any, value2?:any ): number;

		/** [Method] Gets allowBlank for this field  
		* @returns Boolean allowBlank 
		*/
		getAllowBlank?(): boolean;

		/** [Method] Gets allowNull for this field  
		* @returns Boolean allowNull 
		*/
		getAllowNull?(): boolean;

		/** [Method] Gets converter for this field  
		* @returns Function convert 
		*/
		getConvert?(): any;

		/** [Method] Gets the defaultValue for this field  
		* @returns Object defaultValue 
		*/
		getDefaultValue?(): any;

		/** [Method] Gets the depends for this field  
		* @returns String[] depends 
		*/
		getDepends?(): string[];

		/** [Method] Get the mapping for this field  
		* @returns Object mapping 
		*/
		getMapping?(): any;

		/** [Method] Gets the name for this field  
		* @returns String name 
		*/
		getName?(): string;

		/** [Method] Gets the persist for this field  
		* @returns Boolean persist 
		*/
		getPersist?(): boolean;

		/** [Method] Gets the sortDir for this field  
		* @returns String sortDir 
		*/
		getSortDir?(): string;

		/** [Method] Gets the sortType for this field  
		* @returns Function sortType 
		*/
		getSortType?(): any;

		/** [Method] Gets a string representation of the type of this field  
		* @returns String type 
		*/
		getType?(): string;

		/** [Method] Checks if this field has a mapping applied  
		* @returns Boolean true if this field has a mapping. 
		*/
		hasMapping?(): boolean;

		/** [Method] Tests whether two values are equal based on this field type  
		* @param value1 Object The first value. 
		* @param value2 Object The second value. 
		* @returns Boolean true if the values are equal. 
		*/
		isEqual?( value1?:any, value2?:any ): boolean;

		/** [Method] Validates the passed value for this field  
		* @param value Object The value to validate. 
		* @param separator String This string is passed if the caller wants all validation messages concatenated with this string between each. This can be handled as a "falsy" value because concatenating with no separator is seldom desirable. 
		* @param errors Ext.data.ErrorCollection This parameter is passed if the caller wants all validation results individually added to the collection. 
		* @returns Boolean/String true if the value is valid. A string may be returned if the value is not valid, to indicate an error message. Any other non true value indicates the value is not valid. This method is not implemented by default, subclasses may override it to provide an implementation. 
		*/
		validate?( value?:any, separator?:string, errors?:Ext.data.IErrorCollection ): any;

	}

}

declare module Ext.data {
	export interface IField extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Config Option] (Boolean) */
		allowNull?: boolean;
		/** [Config Option] (Function) */
		calculate?: any;
		/** [Config Option] (Function) */
		convert?: any;
		/** [Config Option] (Boolean) */
		critical?: boolean;
		/** [Config Option] (Object) */
		defaultValue?: any;
		/** [Config Option] (String/String[]) */
		depends?: any;
		/** [Config Option] (String/Number/Function) */
		mapping?: any;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		persist?: boolean;
		/** [Config Option] (String/Object) */
		reference?: any;
		/** [Config Option] (Function) */
		serialize?: any;
		/** [Config Option] (Function/String) */
		sortType?: any;
		/** [Config Option] (Boolean) */
		unique?: boolean;
		/** [Config Option] (Object[]) */
		validators?: any[];
		/** [Property] (Boolean) */
		calculated?: boolean;

		/** [Property] (String) */
		defaultInvalidMessage?: string;

		/** [Property] (Ext.Class) */
		definedBy?: Ext.IClass;

		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Boolean) */
		identifier?: boolean;

		/** [Property] (Number) */
		ordinal?: number;

		/** [Property] (RegExp) */
		stripRe?: RegExp;

		/** [Method] Compares two values to retrieve their relative position in sort order taking into account any sortType  
		* @param value1 Object The first value. 
		* @param value2 Object The second value. 
		* @returns Number -1 if value1 is less than value2. 1 if value1 is greater than value2. 0 otherwise. 
		*/
		collate?( value1?:any, value2?:any ): number;

		/** [Method] Compares two values to retrieve their relative position in sort order  
		* @param value1 Object The first value. 
		* @param value2 Object The second value. 
		* @returns Number -1 if value1 is less than value2. 1 if value1 is greater than value2. 0 otherwise. 
		*/
		compare?( value1?:any, value2?:any ): number;

		/** [Method] Gets allowBlank for this field  
		* @returns Boolean allowBlank 
		*/
		getAllowBlank?(): boolean;

		/** [Method] Gets allowNull for this field  
		* @returns Boolean allowNull 
		*/
		getAllowNull?(): boolean;

		/** [Method] Gets converter for this field  
		* @returns Function convert 
		*/
		getConvert?(): any;

		/** [Method] Gets the defaultValue for this field  
		* @returns Object defaultValue 
		*/
		getDefaultValue?(): any;

		/** [Method] Gets the depends for this field  
		* @returns String[] depends 
		*/
		getDepends?(): string[];

		/** [Method] Get the mapping for this field  
		* @returns Object mapping 
		*/
		getMapping?(): any;

		/** [Method] Gets the name for this field  
		* @returns String name 
		*/
		getName?(): string;

		/** [Method] Gets the persist for this field  
		* @returns Boolean persist 
		*/
		getPersist?(): boolean;

		/** [Method] Gets the sortDir for this field  
		* @returns String sortDir 
		*/
		getSortDir?(): string;

		/** [Method] Gets the sortType for this field  
		* @returns Function sortType 
		*/
		getSortType?(): any;

		/** [Method] Gets a string representation of the type of this field  
		* @returns String type 
		*/
		getType?(): string;

		/** [Method] Checks if this field has a mapping applied  
		* @returns Boolean true if this field has a mapping. 
		*/
		hasMapping?(): boolean;

		/** [Method] Tests whether two values are equal based on this field type  
		* @param value1 Object The first value. 
		* @param value2 Object The second value. 
		* @returns Boolean true if the values are equal. 
		*/
		isEqual?( value1?:any, value2?:any ): boolean;

		/** [Method] Validates the passed value for this field  
		* @param value Object The value to validate. 
		* @param separator String This string is passed if the caller wants all validation messages concatenated with this string between each. This can be handled as a "falsy" value because concatenating with no separator is seldom desirable. 
		* @param errors Ext.data.ErrorCollection This parameter is passed if the caller wants all validation results individually added to the collection. 
		* @returns Boolean/String true if the value is valid. A string may be returned if the value is not valid, to indicate an error message. Any other non true value indicates the value is not valid. This method is not implemented by default, subclasses may override it to provide an implementation. 
		*/
		validate?( value?:any, separator?:string, errors?:Ext.data.IErrorCollection ): any;

	}

}

declare module Ext.data.field {
	export interface IInteger extends Ext.data.field.IField {
		/** [Method] A function which converts the value provided by the Reader into the value that will be stored in the record  
		* @param v Object 
		* @returns Mixed The converted value for storage in the record. 
		*/
		convert?( v?:any ): any;

		/** [Method] Gets a string representation of the type of this field  
		* @returns String type 
		*/
		getType?(): string;

	}

}

declare module Ext.data.field {
	export interface INumber extends Ext.data.field.IInteger {
	}

}

declare module Ext.data.field {
	export interface IString extends Ext.data.field.IField {
		/** [Config Option] (Function/String) */
		sortType?: any;
		/** [Method] A function which converts the value provided by the Reader into the value that will be stored in the record  
		* @param v Object 
		* @returns Mixed The converted value for storage in the record. 
		*/
		convert?( v?:any ): any;

		/** [Method] Gets a string representation of the type of this field  
		* @returns String type 
		*/
		getType?(): string;

	}

}

declare module Ext.data.flash {
	export interface IBinaryXhr extends Ext.IBase {
		/** [Property] (number) */
		readyState?: number;

		/** [Property] (Array) */
		responseBytes?: any[];

		/** [Property] (number) */
		status?: number;

		/** [Property] (String) */
		statusText?: string;

		/** [Method] Abort this connection  */
		abort?(): void;

		/** [Method] As in XMLHttpRequest  */
		getAllResponseHeaders?(): void;

		/** [Method] As in XMLHttpRequest  
		* @param header Object 
		*/
		getResponseHeader?( header?:any ): void;

		/** [Method] As in XMLHttpRequest  */
		onreadystatechange?(): void;

		/** [Method] As in XMLHttpRequest  
		* @param method Object 
		* @param url Object 
		* @param async Object 
		* @param user Object 
		* @param password Object 
		*/
		open?( method?:any, url?:any, async?:any, user?:any, password?:any ): void;

		/** [Method] As in XMLHttpRequest  
		* @param mimeType Object 
		*/
		overrideMimeType?( mimeType?:any ): void;

		/** [Method] Initiate the request  
		* @param body Array an array of byte values to send. 
		*/
		send?( body?:any[] ): void;

		/** [Method] As in XMLHttpRequest  
		* @param header Object 
		* @param value Object 
		*/
		setRequestHeader?( header?:any, value?:any ): void;

	}

}

declare module Ext.data.identifier {
	export interface IGenerator extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Config Option] (String) */
		id?: string;
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Boolean) */
		isGenerator?: boolean;

		/** [Method] Generates and returns the next id  
		* @returns Number/String The next id. 
		*/
		generate?(): any;

		/** [Method] Returns the value of id  
		* @returns String 
		*/
		getId?(): string;

		/** [Method] Sets the value of id  
		* @param id String The new value. 
		*/
		setId?( id?:string ): void;

	}

}

declare module Ext.data.identifier {
	export interface INegative extends Ext.data.identifier.ISequential {
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Number) */
		seed?: number;
		/** [Method] Returns the value of increment  
		* @returns Object 
		*/
		getIncrement?(): any;

		/** [Method] Returns the value of seed  
		* @returns Object 
		*/
		getSeed?(): any;

		/** [Method] Sets the value of increment  
		* @param increment Object The new value. 
		*/
		setIncrement?( increment?:any ): void;

		/** [Method] Sets the value of seed  
		* @param seed Object The new value. 
		*/
		setSeed?( seed?:any ): void;

	}

}

declare module Ext.data.identifier {
	export interface ISequential extends Ext.data.identifier.IGenerator {
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (String) */
		prefix?: string;
		/** [Config Option] (Number) */
		seed?: number;
		/** [Method] Generates and returns the next id  
		* @returns String/Number The next id. If a prefix was specified, returns a String, otherwise returns a Number. 
		*/
		generate?(): any;

		/** [Method] Returns the value of increment  
		* @returns Number 
		*/
		getIncrement?(): number;

		/** [Method] Returns the value of prefix  
		* @returns String 
		*/
		getPrefix?(): string;

		/** [Method] Returns the value of seed  
		* @returns Number 
		*/
		getSeed?(): number;

		/** [Method] Sets the value of increment  
		* @param increment Number The new value. 
		*/
		setIncrement?( increment?:number ): void;

		/** [Method] Sets the value of prefix  
		* @param prefix String The new value. 
		*/
		setPrefix?( prefix?:string ): void;

		/** [Method] Sets the value of seed  
		* @param seed Number The new value. 
		*/
		setSeed?( seed?:number ): void;

	}

}

declare module Ext.data.identifier {
	export interface IUuid extends Ext.data.identifier.IGenerator {
		/** [Config Option] (Number) */
		clockSeq?: number;
		/** [Config Option] (Object) */
		id?: any;
		/** [Config Option] (Number/Object) */
		salt?: any;
		/** [Config Option] (Number/Object) */
		timestamp?: any;
		/** [Config Option] (Number) */
		version?: number;
		/** [Method] Returns the value of id  
		* @returns Object 
		*/
		getId?(): any;

		/** [Method] Reconfigures this generator given new config properties  
		* @param config Object 
		*/
		reconfigure?( config?:any ): void;

		/** [Method] Sets the value of id  
		* @param id Object The new value. 
		*/
		setId?( id?:any ): void;

	}

}

declare module Ext.data {
	export interface IJsonP extends Ext.IBase {
	}
	export class JsonP {
		/** [Property] (String) */
		static callbackKey: string;

		/** [Property] (Boolean) */
		static disableCaching: boolean;

		/** [Property] (String) */
		static disableCachingParam: string;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (Number) */
		static timeout: number;

		/** [Method] Abort a request  
		* @param request Object/String The request to abort 
		*/
		static abort( request?:any ): void;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Makes a JSONP request  
		* @param options Object An object which may contain the following properties. Note that options will take priority over any defaults that are specified in the class.  url : String The URL to request. params : Object (Optional)An object containing a series of key value pairs that will be sent along with the request. timeout : Number (Optional) See timeout callbackKey : String (Optional) See callbackKey callbackName : String (Optional) The function name to use for this request. By default this name will be auto-generated: Ext.data.JsonP.callback1, Ext.data.JsonP.callback2, etc. Setting this option to "my_name" will force the function name to be Ext.data.JsonP.my_name. Use this if you want deterministic behavior, but be careful - the callbackName should be different in each JsonP request that you make. disableCaching : Boolean (Optional) See disableCaching disableCachingParam : String (Optional) See disableCachingParam success : Function (Optional) A function to execute if the request succeeds. failure : Function (Optional) A function to execute if the request fails. callback : Function (Optional) A function to execute when the request completes, whether it is a success or failure. scope : Object (Optional)The scope in which to execute the callbacks: The "this" object for the callback function. Defaults to the browser window.  
		* @returns Object request An object containing the request details. 
		*/
		static request( options?:any ): any;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.data {
	export interface IJsonPStore extends Ext.data.IStore {
	}

}

declare module Ext.data {
	export interface IJsonStore extends Ext.data.IStore {
	}

}

declare module Ext.data {
	export interface ILocalStore extends Ext.IMixin {
		/** [Method] Adds Model instance to the Store  
		* @param model Ext.data.Model[]/Ext.data.Model.../Object[]/Object... An array of Model instances or Model configuration objects, or variable number of Model instance or config arguments. 
		* @returns Ext.data.Model[] The model instances that were added 
		*/
		add?( model?:any ): Ext.data.IModel[];

		/** [Method] Runs the aggregate function for all the records in the store  
		* @param fn Function The function to execute. The function is called with a single parameter, an array of records for that group. 
		* @param scope Object The scope to execute the function in. Defaults to the store. 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the group average being the value. The grouped parameter is only honored if the store has a groupField. 
		* @param field String The field to get the value from 
		* @returns Object An object literal with the group names and their appropriate values. 
		*/
		aggregate?( fn?:any, scope?:any, grouped?:boolean, field?:string ): any;

		/** [Method] Gets the average value in the store  
		* @param field String The field in each record 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the group average being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Object The average value, if no items exist, 0. 
		*/
		average?( field?:string, grouped?:boolean ): any;

		/** [Method] Collects unique values for a particular dataIndex from this store  
		* @param dataIndex String The property to collect 
		* @param allowNull Boolean Pass true to allow null, undefined or empty string values 
		* @param bypassFilter Boolean Pass true to collect from all records, even ones which are filtered. 
		* @returns Object[] An array of the unique values 
		*/
		collect?( dataIndex?:string, allowNull?:boolean, bypassFilter?:boolean ): any[];

		/** [Method] Gets the count of items in the store  
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the count for each group being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Number the count 
		*/
		count?( grouped?:boolean ): number;

		/** [Method] Calls the specified function for each record in the store  
		* @param fn Function The function to call. The Record is passed as the first parameter. Returning false aborts and exits the iteration. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current record in the iteration. 
		*/
		each?( fn?:any, scope?:any ): void;

		/** [Method] Convenience function for getting the first model instance in the store  
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the first record being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Ext.data.Model/undefined The first model instance in the store, or undefined 
		*/
		first?( grouped?:boolean ): any;

		/** [Method] Get the Record with the specified id  
		* @param id Mixed The id of the Record to find. 
		* @returns Ext.data.Model The Record with the passed id. Returns null if not found. 
		*/
		getById?( id?:any ): Ext.data.IModel;

		/** [Method] Returns the value of extraKeys  
		* @returns Object 
		*/
		getExtraKeys?(): any;

		/** [Method] Get the index of the record within the store  
		* @param record Ext.data.Model The Ext.data.Model object to find. 
		* @returns Number The index of the passed Record. Returns -1 if not found. 
		*/
		indexOf?( record?:Ext.data.IModel ): number;

		/** [Method] Get the index within the store of the Record with the passed id  
		* @param id String The id of the Record to find. 
		* @returns Number The index of the Record. Returns -1 if not found. 
		*/
		indexOfId?( id?:string ): number;

		/** [Method] Inserts Model instances into the Store at the given index and fires the add event  
		* @param index Number The start index at which to insert the passed Records. 
		* @param records Ext.data.Model/Ext.data.Model[]/Object/Object[] An Ext.data.Model instance, the data needed to populate an instance or an array of either of these. 
		* @returns Ext.data.Model[] records The added records 
		*/
		insert?( index?:number, records?:any ): Ext.data.IModel[];

		/** [Method] Convenience function for getting the last model instance in the store  
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the last record being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Ext.data.Model/undefined The last model instance in the store, or undefined 
		*/
		last?( grouped?:boolean ): any;

		/** [Method] Gets the maximum value in the store  
		* @param field String The field in each record 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the maximum in the group being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Object The maximum value, if no items exist, undefined. 
		*/
		max?( field?:string, grouped?:boolean ): any;

		/** [Method] Gets the minimum value in the store  
		* @param field String The field in each record 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the minimum in the group being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Object The minimum value, if no items exist, undefined. 
		*/
		min?( field?:string, grouped?:boolean ): any;

		/** [Method] Query all the cached records in this Store by name value pair  
		* @param property String The property to create the filter function for 
		* @param value String/RegExp The string/regex to compare the property value to 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean true to create a case-sensitive regex. 
		* @param exactMatch Boolean True to force exact match (^ and $ characters added to the regex). Ignored if anyMatch is true. 
		* @returns Ext.util.Collection The matched records 
		*/
		query?( property?:string, value?:any, anyMatch?:boolean, caseSensitive?:boolean, exactMatch?:boolean ): Ext.util.ICollection;

		/** [Method] Query all the cached records in this Store using a filtering function  
		* @param fn Function The function to be called. It will be passed the following parameters: 
		* @param scope Object The scope (this reference) in which the function is executed Defaults to this Store. 
		* @returns Ext.util.Collection The matched records 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.util.ICollection;

		/** [Method] Sets the value of extraKeys  
		* @param extraKeys Object The new value. 
		*/
		setExtraKeys?( extraKeys?:any ): void;

		/** [Method] Sums the value of field for each record in store and returns the result  
		* @param field String A field in each record 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the sum for that group being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Number The sum 
		*/
		sum?( field?:string, grouped?:boolean ): number;

	}

}

declare module Ext.data.matrix {
	export interface IMatrix extends Ext.IBase {
		/** [Property] (Ext.data.schema.ManyToMany) */
		association?: Ext.data.schema.IManyToMany;

		/** [Property] (Ext.data.Session) */
		session?: Ext.data.ISession;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.data.matrix {
	export interface ISide extends Ext.IBase {
		/** [Property] (Number) */
		index?: number;

		/** [Property] (Ext.data.matrix.Side) */
		inverse?: Ext.data.matrix.ISide;

		/** [Property] (Ext.data.matrix.Matrix) */
		matrix?: Ext.data.matrix.IMatrix;

		/** [Property] (Ext.data.schema.Role) */
		role?: Ext.data.schema.IRole;

		/** [Property] (Object) */
		slices?: any;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.data.matrix {
	export interface ISlice extends Ext.IBase {
		/** [Property] (String/Number) */
		id?: any;

		/** [Property] (Object) */
		members?: any;

		/** [Property] (Ext.data.matrix.Side) */
		side?: Ext.data.matrix.ISide;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.data {
	export interface IModel extends Ext.IBase {
		/** [Config Option] (Object[]) */
		associations?: any[];
		/** [Config Option] (String/Object/String[]/Object[]) */
		belongsTo?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (Boolean) */
		convertOnSet?: boolean;
		/** [Config Option] (Object[]/String[]) */
		fields?: any;
		/** [Config Option] (String/Object/String[]/Object[]) */
		hasMany?: any;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (String/Object) */
		identifier?: any;
		/** [Config Option] (Object) */
		manyToMany?: any;
		/** [Config Option] (String/Object/Ext.data.proxy.Proxy) */
		proxy?: any;
		/** [Config Option] (String/Object) */
		schema?: any;
		/** [Config Option] (String) */
		validationSeparator?: string;
		/** [Config Option] (Object[]) */
		validators?: any[];
		/** [Config Option] (String) */
		versionProperty?: string;
		/** [Property] (Boolean) */
		dirty?: boolean;

		/** [Property] (Boolean) */
		dropped?: boolean;

		/** [Property] (Boolean) */
		editing?: boolean;

		/** [Property] (String) */
		entityName?: string;

		/** [Property] (Boolean) */
		erased?: boolean;

		/** [Property] (Number) */
		generation?: number;

		/** [Property] (Boolean) */
		isEntity?: boolean;

		/** [Property] (Boolean) */
		isModel?: boolean;

		/** [Property] (Object) */
		modified?: any;

		/** [Property] (Boolean) */
		phantom?: boolean;

		/** [Property] (Ext.data.Session) */
		session?: Ext.data.ISession;

		/** [Property] (Ext.data.Store) */
		store?: Ext.data.IStore;

		/** [Method] Aborts a pending load operation  */
		abort?(): void;

		/** [Method] Begins an edit  */
		beginEdit?(): void;

		/** [Method] Cancels all changes made in the current edit operation  */
		cancelEdit?(): void;

		/** [Method] Creates a clone of this record  
		* @param session Ext.data.Session The session to which the new record belongs. 
		* @returns Ext.data.Model The cloned record. 
		*/
		clone?( session?:Ext.data.ISession ): Ext.data.IModel;

		/** [Method] Usually called by the Ext data Store which owns the model instance  
		* @param silent Boolean Pass true to skip notification of the owning store of the change. 
		* @param modifiedFieldNames String[] Array of field names changed during sync with server if known. Omit or pass null if unknown. An empty array means that it is known that no fields were modified by the server's response. Defaults to false. 
		*/
		commit?( silent?:boolean, modifiedFieldNames?:string[] ): void;

		/** [Method] Creates a clean copy of this record  
		* @param newId String A new id, defaults to the id of the instance being copied. See idProperty. 
		* @param session Ext.data.Session The session to which the new record belongs. 
		* @returns Ext.data.Model 
		*/
		copy?( newId?:string, session?:Ext.data.ISession ): Ext.data.IModel;

		/** [Method] Marks this record as dropped and waiting to be deleted on the server  
		* @param cascade Boolean Pass false to disable the cascade to drop child records. 
		*/
		drop?( cascade?:boolean ): void;

		/** [Method] Ends an edit  
		* @param silent Boolean True to not notify any stores of the change. 
		* @param modifiedFieldNames String[] Array of field names changed during edit. 
		*/
		endEdit?( silent?:boolean, modifiedFieldNames?:string[] ): void;

		/** [Method]  
		* @param options Object Options to pass to the proxy. 
		* @returns Ext.data.operation.Destroy The destroy operation 
		*/
		erase?( options?:any ): Ext.data.operation.IDestroy;

		/** [Method] Returns the value of the given field  
		* @param fieldName String The name of the field. 
		* @returns Object The value of the specified field. 
		*/
		get?( fieldName?:string ): any;

		/** [Method] Gets all of the data from this Models loaded associations  
		* @param result Object The object on to which the associations will be added. If no object is passed one is created. This object is then returned. 
		* @param options Boolean/Object An object containing options describing the data desired. 
		* @returns Object The nested data set for the Model's loaded associations. 
		*/
		getAssociatedData?( result?:any, options?:any ): any;

		/** [Method] Gets an object of only the fields that have been modified since this record was created or committed  
		* @returns Object 
		*/
		getChanges?(): any;

		/** [Method] Returns the array of fields that are declared as critical must always send 
		* @returns Ext.data.field.Field[] 
		*/
		getCriticalFields?(): Ext.data.field.IField[];

		/** [Method] Gets all values for each field in this model and returns an object containing the current data  
		* @param options Boolean/Object An object containing options describing the data desired. If true is passed it is treated as an object with associated set to true. 
		* @returns Object An object containing all the values in this model. 
		*/
		getData?( options?:any ): any;

		/** [Method] Get the fields array for this model  
		* @returns Ext.data.field.Field[] The fields array 
		*/
		getFields?(): Ext.data.field.IField[];

		/** [Method] Returns the unique ID allocated to this model instance as defined by idProperty  
		* @returns Number/String The id 
		*/
		getId?(): any;

		/** [Method] Get the idProperty for this model  
		* @returns String The idProperty 
		*/
		getIdProperty?(): string;

		/** [Method] Returns the original value of a modified field  
		* @param fieldName String The name of the field for which to return the original value. 
		* @returns Object modified 
		*/
		getModified?( fieldName?:string ): any;

		/** [Method] Return a unique observable ID  */
		getObservableId?(): void;

		/** [Method] This method returns the value of a field given its name prior to its most recent change  
		* @param fieldName String The field's name. 
		* @returns Object The value of the given field prior to its current value. undefined if there is no previous value; 
		*/
		getPrevious?( fieldName?:string ): any;

		/** [Method] Returns the configured Proxy for this Model  
		* @returns Ext.data.proxy.Proxy The proxy 
		*/
		getProxy?(): Ext.data.proxy.IProxy;

		/** [Method] Returns the array of fields that are declared as non persist or transient 
		* @returns Ext.data.field.Field[] 
		*/
		getTransientFields?(): Ext.data.field.IField[];

		/** [Method] Returns the Ext data Validation record holding the results of this record s validators  
		* @param refresh Boolean Pass false to not call the refresh method on the validation instance prior to returning it. Pass true to force a refresh of the validation instance. By default the returned record is only refreshed if changes have been made to this record. 
		* @returns Ext.data.Validation The Validation record for this record. 
		*/
		getValidation?( refresh?:boolean ): Ext.data.IValidation;

		/** [Method] Checks whether this model is loading data from the proxy  
		* @returns Boolean true if in a loading state. 
		*/
		isLoading?(): boolean;

		/** [Method] Returns true if the passed field name has been modified since the load or last commit  
		* @param fieldName String The field's name. 
		* @returns Boolean 
		*/
		isModified?( fieldName?:string ): boolean;

		/** [Method] Checks if the model is valid  
		* @returns Boolean True if the model is valid. 
		*/
		isValid?(): boolean;

		/** [Method] Tells this model instance that an observer is looking at it  
		* @param item Ext.data.Store The store to which this model has been added. 
		*/
		join?( item?:Ext.data.IStore ): void;

		/** [Method]  
		* @param options Object Options to pass to the proxy. 
		* @returns Ext.data.operation.Read The read operation. 
		*/
		load?( options?:any ): Ext.data.operation.IRead;

		/** [Method] This method is called by the Ext data reader Reader after loading a model from the server  */
		onLoad?(): void;

		/** [Method] Usually called by the Ext data Store to which this model instance has been joined  
		* @param silent Boolean true to skip notification of the owning store of the change. 
		*/
		reject?( silent?:boolean ): void;

		/** [Method]  
		* @param options Object Options to pass to the proxy. 
		* @returns Ext.data.operation.Create/Ext.data.operation.Update/Ext.data.operation.Destroy The operation instance for saving this model. The type of operation returned depends on the model state at the time of the action.  phantom model - Ext.data.operation.Create modified model - Ext.data.operation.Update dropped model - Ext.data.operation.Destroy  
		*/
		save?( options?:any ): any;

		/** [Method] Sets the given field to the given value  
		* @param fieldName String/Object The field to set, or an object containing key/value pairs. 
		* @param newValue Object The value for the field (if fieldName is a string). 
		* @param options Object Options for governing this update. 
		* @returns String[] The array of modified field names or null if nothing was modified. 
		*/
		set?( fieldName?:any, newValue?:any, options?:any ): string[];

		/** [Method] Sets the model instance s id field to the given id  
		* @param id Number/String The new id 
		*/
		setId?( id?:any ): void;

		/** [Method] Set the session for this record  
		* @param session Ext.data.Session The session 
		*/
		setSession?( session?:Ext.data.ISession ): void;

		/** [Method] Returns a url suitable string for this model instance  
		* @returns String The url string for this model instance. 
		*/
		toUrl?(): string;

		/** [Method] Tells this model instance that it has been removed from the store  
		* @param store Ext.data.Store The store from which this model has been removed. 
		*/
		unjoin?( store?:Ext.data.IStore ): void;

		/** [Method] Validates the current data against all of its configured validators  
		* @returns Ext.data.ErrorCollection The errors collection. 
		*/
		validate?(): Ext.data.IErrorCollection;

	}
	export class Model {
		/** [Method] This method adds the given set of fields to this model class  
		* @param newFields String[]/Object[] The new fields to add. Based on the name of a field this may replace a previous field definition. 
		*/
		static addFields( newFields?:any ): void;

		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Returns the configured Proxy for this Model  
		* @returns Ext.data.proxy.Proxy The proxy 
		*/
		static getProxy(): Ext.data.proxy.IProxy;

		/** [Method] Asynchronously loads a model instance by id  
		* @param id Number/String The ID of the model to load. NOTE: The model returned must have an ID matching the param in the load request. 
		* @param options Object The options param is an Ext.data.operation.Read config object containing success, failure and callback functions, plus optional scope. 
		* @param session Ext.data.Session The session for this record. 
		* @returns Ext.data.Model The newly created model. Note that the model will (probably) still be loading once it is returned from this method. To do any post-processing on the data, the appropriate place to do see is in the callback. 
		*/
		static load( id?:any, options?:any, session?:Ext.data.ISession ): Ext.data.IModel;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

		/** [Method] Removes the given set of fields from this model  
		* @param removeFields Boolean/String[] The names of fields to remove or true to remove all existing fields. Removes are processed first followed by adds so if a field name appears in newFields as well that field will effectively be added (however, in that case there is no need to include the field in this array). 
		*/
		static removeFields( removeFields?:any ): void;

		/** [Method] This method replaces the specified set of fields with a given set of new fields  
		* @param newFields String[]/Object[] The new fields to add. Based on the name of a field this may replace a previous field definition. 
		* @param removeFields Boolean/String[] The names of fields to remove or true to remove all existing fields. Removes are processed first followed by adds so if a field name appears in newFields as well that field will effectively be added (however, in that case there is no need to include the field in this array). 
		*/
		static replaceFields( newFields?:any, removeFields?:any ): void;

		/** [Method] Sets the Proxy to use for this model  
		* @param proxy String/Object/Ext.data.proxy.Proxy The proxy 
		* @returns Ext.data.proxy.Proxy 
		*/
		static setProxy( proxy?:any ): Ext.data.proxy.IProxy;

	}

}

declare module Ext.data {
	export interface IRecord extends Ext.IBase {
		/** [Config Option] (Object[]) */
		associations?: any[];
		/** [Config Option] (String/Object/String[]/Object[]) */
		belongsTo?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (Boolean) */
		convertOnSet?: boolean;
		/** [Config Option] (Object[]/String[]) */
		fields?: any;
		/** [Config Option] (String/Object/String[]/Object[]) */
		hasMany?: any;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (String/Object) */
		identifier?: any;
		/** [Config Option] (Object) */
		manyToMany?: any;
		/** [Config Option] (String/Object/Ext.data.proxy.Proxy) */
		proxy?: any;
		/** [Config Option] (String/Object) */
		schema?: any;
		/** [Config Option] (String) */
		validationSeparator?: string;
		/** [Config Option] (Object[]) */
		validators?: any[];
		/** [Config Option] (String) */
		versionProperty?: string;
		/** [Property] (Boolean) */
		dirty?: boolean;

		/** [Property] (Boolean) */
		dropped?: boolean;

		/** [Property] (Boolean) */
		editing?: boolean;

		/** [Property] (String) */
		entityName?: string;

		/** [Property] (Boolean) */
		erased?: boolean;

		/** [Property] (Number) */
		generation?: number;

		/** [Property] (Boolean) */
		isEntity?: boolean;

		/** [Property] (Boolean) */
		isModel?: boolean;

		/** [Property] (Object) */
		modified?: any;

		/** [Property] (Boolean) */
		phantom?: boolean;

		/** [Property] (Ext.data.Session) */
		session?: Ext.data.ISession;

		/** [Property] (Ext.data.Store) */
		store?: Ext.data.IStore;

		/** [Method] Aborts a pending load operation  */
		abort?(): void;

		/** [Method] Begins an edit  */
		beginEdit?(): void;

		/** [Method] Cancels all changes made in the current edit operation  */
		cancelEdit?(): void;

		/** [Method] Creates a clone of this record  
		* @param session Ext.data.Session The session to which the new record belongs. 
		* @returns Ext.data.Model The cloned record. 
		*/
		clone?( session?:Ext.data.ISession ): Ext.data.IModel;

		/** [Method] Usually called by the Ext data Store which owns the model instance  
		* @param silent Boolean Pass true to skip notification of the owning store of the change. 
		* @param modifiedFieldNames String[] Array of field names changed during sync with server if known. Omit or pass null if unknown. An empty array means that it is known that no fields were modified by the server's response. Defaults to false. 
		*/
		commit?( silent?:boolean, modifiedFieldNames?:string[] ): void;

		/** [Method] Creates a clean copy of this record  
		* @param newId String A new id, defaults to the id of the instance being copied. See idProperty. 
		* @param session Ext.data.Session The session to which the new record belongs. 
		* @returns Ext.data.Model 
		*/
		copy?( newId?:string, session?:Ext.data.ISession ): Ext.data.IModel;

		/** [Method] Marks this record as dropped and waiting to be deleted on the server  
		* @param cascade Boolean Pass false to disable the cascade to drop child records. 
		*/
		drop?( cascade?:boolean ): void;

		/** [Method] Ends an edit  
		* @param silent Boolean True to not notify any stores of the change. 
		* @param modifiedFieldNames String[] Array of field names changed during edit. 
		*/
		endEdit?( silent?:boolean, modifiedFieldNames?:string[] ): void;

		/** [Method]  
		* @param options Object Options to pass to the proxy. 
		* @returns Ext.data.operation.Destroy The destroy operation 
		*/
		erase?( options?:any ): Ext.data.operation.IDestroy;

		/** [Method] Returns the value of the given field  
		* @param fieldName String The name of the field. 
		* @returns Object The value of the specified field. 
		*/
		get?( fieldName?:string ): any;

		/** [Method] Gets all of the data from this Models loaded associations  
		* @param result Object The object on to which the associations will be added. If no object is passed one is created. This object is then returned. 
		* @param options Boolean/Object An object containing options describing the data desired. 
		* @returns Object The nested data set for the Model's loaded associations. 
		*/
		getAssociatedData?( result?:any, options?:any ): any;

		/** [Method] Gets an object of only the fields that have been modified since this record was created or committed  
		* @returns Object 
		*/
		getChanges?(): any;

		/** [Method] Returns the array of fields that are declared as critical must always send 
		* @returns Ext.data.field.Field[] 
		*/
		getCriticalFields?(): Ext.data.field.IField[];

		/** [Method] Gets all values for each field in this model and returns an object containing the current data  
		* @param options Boolean/Object An object containing options describing the data desired. If true is passed it is treated as an object with associated set to true. 
		* @returns Object An object containing all the values in this model. 
		*/
		getData?( options?:any ): any;

		/** [Method] Get the fields array for this model  
		* @returns Ext.data.field.Field[] The fields array 
		*/
		getFields?(): Ext.data.field.IField[];

		/** [Method] Returns the unique ID allocated to this model instance as defined by idProperty  
		* @returns Number/String The id 
		*/
		getId?(): any;

		/** [Method] Get the idProperty for this model  
		* @returns String The idProperty 
		*/
		getIdProperty?(): string;

		/** [Method] Returns the original value of a modified field  
		* @param fieldName String The name of the field for which to return the original value. 
		* @returns Object modified 
		*/
		getModified?( fieldName?:string ): any;

		/** [Method] Return a unique observable ID  */
		getObservableId?(): void;

		/** [Method] This method returns the value of a field given its name prior to its most recent change  
		* @param fieldName String The field's name. 
		* @returns Object The value of the given field prior to its current value. undefined if there is no previous value; 
		*/
		getPrevious?( fieldName?:string ): any;

		/** [Method] Returns the configured Proxy for this Model  
		* @returns Ext.data.proxy.Proxy The proxy 
		*/
		getProxy?(): Ext.data.proxy.IProxy;

		/** [Method] Returns the array of fields that are declared as non persist or transient 
		* @returns Ext.data.field.Field[] 
		*/
		getTransientFields?(): Ext.data.field.IField[];

		/** [Method] Returns the Ext data Validation record holding the results of this record s validators  
		* @param refresh Boolean Pass false to not call the refresh method on the validation instance prior to returning it. Pass true to force a refresh of the validation instance. By default the returned record is only refreshed if changes have been made to this record. 
		* @returns Ext.data.Validation The Validation record for this record. 
		*/
		getValidation?( refresh?:boolean ): Ext.data.IValidation;

		/** [Method] Checks whether this model is loading data from the proxy  
		* @returns Boolean true if in a loading state. 
		*/
		isLoading?(): boolean;

		/** [Method] Returns true if the passed field name has been modified since the load or last commit  
		* @param fieldName String The field's name. 
		* @returns Boolean 
		*/
		isModified?( fieldName?:string ): boolean;

		/** [Method] Checks if the model is valid  
		* @returns Boolean True if the model is valid. 
		*/
		isValid?(): boolean;

		/** [Method] Tells this model instance that an observer is looking at it  
		* @param item Ext.data.Store The store to which this model has been added. 
		*/
		join?( item?:Ext.data.IStore ): void;

		/** [Method]  
		* @param options Object Options to pass to the proxy. 
		* @returns Ext.data.operation.Read The read operation. 
		*/
		load?( options?:any ): Ext.data.operation.IRead;

		/** [Method] This method is called by the Ext data reader Reader after loading a model from the server  */
		onLoad?(): void;

		/** [Method] Usually called by the Ext data Store to which this model instance has been joined  
		* @param silent Boolean true to skip notification of the owning store of the change. 
		*/
		reject?( silent?:boolean ): void;

		/** [Method]  
		* @param options Object Options to pass to the proxy. 
		* @returns Ext.data.operation.Create/Ext.data.operation.Update/Ext.data.operation.Destroy The operation instance for saving this model. The type of operation returned depends on the model state at the time of the action.  phantom model - Ext.data.operation.Create modified model - Ext.data.operation.Update dropped model - Ext.data.operation.Destroy  
		*/
		save?( options?:any ): any;

		/** [Method] Sets the given field to the given value  
		* @param fieldName String/Object The field to set, or an object containing key/value pairs. 
		* @param newValue Object The value for the field (if fieldName is a string). 
		* @param options Object Options for governing this update. 
		* @returns String[] The array of modified field names or null if nothing was modified. 
		*/
		set?( fieldName?:any, newValue?:any, options?:any ): string[];

		/** [Method] Sets the model instance s id field to the given id  
		* @param id Number/String The new id 
		*/
		setId?( id?:any ): void;

		/** [Method] Set the session for this record  
		* @param session Ext.data.Session The session 
		*/
		setSession?( session?:Ext.data.ISession ): void;

		/** [Method] Returns a url suitable string for this model instance  
		* @returns String The url string for this model instance. 
		*/
		toUrl?(): string;

		/** [Method] Tells this model instance that it has been removed from the store  
		* @param store Ext.data.Store The store from which this model has been removed. 
		*/
		unjoin?( store?:Ext.data.IStore ): void;

		/** [Method] Validates the current data against all of its configured validators  
		* @returns Ext.data.ErrorCollection The errors collection. 
		*/
		validate?(): Ext.data.IErrorCollection;

	}
	export class Record {
		/** [Method] This method adds the given set of fields to this model class  
		* @param newFields String[]/Object[] The new fields to add. Based on the name of a field this may replace a previous field definition. 
		*/
		static addFields( newFields?:any ): void;

		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Returns the configured Proxy for this Model  
		* @returns Ext.data.proxy.Proxy The proxy 
		*/
		static getProxy(): Ext.data.proxy.IProxy;

		/** [Method] Asynchronously loads a model instance by id  
		* @param id Number/String The ID of the model to load. NOTE: The model returned must have an ID matching the param in the load request. 
		* @param options Object The options param is an Ext.data.operation.Read config object containing success, failure and callback functions, plus optional scope. 
		* @param session Ext.data.Session The session for this record. 
		* @returns Ext.data.Model The newly created model. Note that the model will (probably) still be loading once it is returned from this method. To do any post-processing on the data, the appropriate place to do see is in the callback. 
		*/
		static load( id?:any, options?:any, session?:Ext.data.ISession ): Ext.data.IModel;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

		/** [Method] Removes the given set of fields from this model  
		* @param removeFields Boolean/String[] The names of fields to remove or true to remove all existing fields. Removes are processed first followed by adds so if a field name appears in newFields as well that field will effectively be added (however, in that case there is no need to include the field in this array). 
		*/
		static removeFields( removeFields?:any ): void;

		/** [Method] This method replaces the specified set of fields with a given set of new fields  
		* @param newFields String[]/Object[] The new fields to add. Based on the name of a field this may replace a previous field definition. 
		* @param removeFields Boolean/String[] The names of fields to remove or true to remove all existing fields. Removes are processed first followed by adds so if a field name appears in newFields as well that field will effectively be added (however, in that case there is no need to include the field in this array). 
		*/
		static replaceFields( newFields?:any, removeFields?:any ): void;

		/** [Method] Sets the Proxy to use for this model  
		* @param proxy String/Object/Ext.data.proxy.Proxy The proxy 
		* @returns Ext.data.proxy.Proxy 
		*/
		static setProxy( proxy?:any ): Ext.data.proxy.IProxy;

	}

}

declare module Ext.data {
	export interface IModelManager extends Ext.IBase {
	}
	export class ModelManager {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Returns the Ext data Model class for a given model name 
		* @param id String/Object The classname of the model or the model class itself. 
		* @returns Ext.data.Model a model class. 
		*/
		static getModel( id?:any ): Ext.data.IModel;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext {
	export interface IModelMgr extends Ext.IBase {
	}
	export class ModelMgr {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Returns the Ext data Model class for a given model name 
		* @param id String/Object The classname of the model or the model class itself. 
		* @returns Ext.data.Model a model class. 
		*/
		static getModel( id?:any ): Ext.data.IModel;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.data {
	export interface INodeInterface extends Ext.IBase {
		/** [Config Option] (Boolean) */
		allowDrag?: boolean;
		/** [Config Option] (Boolean) */
		allowDrop?: boolean;
		/** [Config Option] (Boolean) */
		checked?: boolean;
		/** [Config Option] (Ext.data.NodeInterface[]) */
		children?: Ext.data.INodeInterface[];
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		expandable?: boolean;
		/** [Config Option] (Boolean) */
		expanded?: boolean;
		/** [Config Option] (String) */
		href?: string;
		/** [Config Option] (String) */
		hrefTarget?: string;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Boolean) */
		leaf?: boolean;
		/** [Config Option] (Number) */
		qshowDelay?: number;
		/** [Config Option] (String) */
		qtip?: string;
		/** [Config Option] (String) */
		qtitle?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Property] (Ext.data.NodeInterface[]) */
		childNodes?: Ext.data.INodeInterface[];

		/** [Property] (Ext.data.NodeInterface) */
		firstChild?: Ext.data.INodeInterface;

		/** [Property] (Boolean) */
		isNode?: boolean;

		/** [Property] (Ext.data.NodeInterface) */
		lastChild?: Ext.data.INodeInterface;

		/** [Property] (Ext.data.NodeInterface) */
		nextSibling?: Ext.data.INodeInterface;

		/** [Property] (Ext.data.NodeInterface) */
		parentNode?: Ext.data.INodeInterface;

		/** [Property] (Ext.data.NodeInterface) */
		previousSibling?: Ext.data.INodeInterface;

		/** [Method] Inserts node s as the last child node of this node  
		* @param node Ext.data.NodeInterface/Ext.data.NodeInterface[]/Object The node or Array of nodes to append 
		* @param suppressEvents Boolean True to suppress firing of events. 
		* @param commit Boolean 
		* @returns Ext.data.NodeInterface The appended node if single append, or null if an array was passed 
		*/
		appendChild?( node?:any, suppressEvents?:boolean, commit?:boolean ): Ext.data.INodeInterface;

		/** [Method] Bubbles up the tree from this node calling the specified function with each node  
		* @param fn Function The function to call 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Node. 
		* @param args Array The args to call the function with. Defaults to passing the current Node. 
		*/
		bubble?( fn?:any, scope?:any, args?:any[] ): void;

		/** [Method] Cascades down the tree from this node calling the specified functions with each node  
		* @param spec Object An object containing before and after functions, scope and an argument list. 
		*/
		cascadeBy?( spec?:any ): void;

		/** [Method] Collapse this node  
		* @param recursive Boolean True to recursively collapse all the children 
		* @param callback Function The function to execute once the collapse completes 
		* @param scope Object The scope to run the callback in 
		*/
		collapse?( recursive?:boolean, callback?:any, scope?:any ): void;

		/** [Method] Collapse all the children of this node  
		* @param recursive Function True to recursively collapse all the children 
		* @param callback Function The function to execute once all the children are collapsed 
		* @param scope Object The scope to run the callback in 
		*/
		collapseChildren?( recursive?:any, callback?:any, scope?:any ): void;

		/** [Method] Returns true if this node is an ancestor at any point of the passed node  
		* @param node Ext.data.NodeInterface 
		* @returns Boolean 
		*/
		contains?( node?:Ext.data.INodeInterface ): boolean;

		/** [Method] Creates a copy clone of this Node  
		* @param id String A new id, defaults to this Node's id. 
		* @param deep Boolean True to recursively copy all child Nodes into the new Node. False to copy without child Nodes. 
		* @returns Ext.data.NodeInterface A copy of this Node. 
		*/
		copy?( id?:string, deep?:boolean ): Ext.data.INodeInterface;

		/** [Method] Ensures that the passed object is an instance of a Record with the NodeInterface applied 
		* @param node Object 
		* @returns Ext.data.NodeInterface 
		*/
		createNode?( node?:any ): Ext.data.INodeInterface;

		/** [Method] Iterates the child nodes of this node calling the specified function with each node  
		* @param fn Function The function to call 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Node on which eachChild is called. 
		* @param args Array The args to call the function with. Defaults to passing the current Node. 
		*/
		eachChild?( fn?:any, scope?:any, args?:any[] ): void;

		/** [Method] Destroys the node  
		* @param options Object 
		*/
		erase?( options?:any ): void;

		/** [Method] Expand this node  
		* @param recursive Boolean True to recursively expand all the children 
		* @param callback Function The function to execute once the expand completes 
		* @param scope Object The scope to run the callback in 
		*/
		expand?( recursive?:boolean, callback?:any, scope?:any ): void;

		/** [Method] Expand all the children of this node  
		* @param recursive Boolean True to recursively expand all the children 
		* @param callback Function The function to execute once all the children are expanded 
		* @param scope Object The scope to run the callback in 
		*/
		expandChildren?( recursive?:boolean, callback?:any, scope?:any ): void;

		/** [Method] Finds the first child that has the attribute with the specified value  
		* @param attribute String The attribute name 
		* @param value Object The value to search for 
		* @param deep Boolean True to search through nodes deeper than the immediate children 
		* @returns Ext.data.NodeInterface The found child or null if none was found 
		*/
		findChild?( attribute?:string, value?:any, deep?:boolean ): Ext.data.INodeInterface;

		/** [Method] Finds the first child by a custom function  
		* @param fn Function A function which must return true if the passed Node is the required Node. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Node being tested. 
		* @param deep Boolean True to search through nodes deeper than the immediate children 
		* @returns Ext.data.NodeInterface The found child or null if none was found 
		*/
		findChildBy?( fn?:any, scope?:any, deep?:boolean ): Ext.data.INodeInterface;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Returns the child node at the specified index  
		* @param index Number 
		* @returns Ext.data.NodeInterface 
		*/
		getChildAt?( index?:number ): Ext.data.INodeInterface;

		/** [Method] Returns depth of this node the root node has a depth of 0  
		* @returns Number 
		*/
		getDepth?(): number;

		/** [Method] Returns the tree this node is in  
		* @returns Ext.tree.Panel The tree panel which owns this node. 
		*/
		getOwnerTree?(): Ext.tree.IPanel;

		/** [Method] Gets the hierarchical path from the root of the current node  
		* @param field String The field to construct the path from. Defaults to the model idProperty. 
		* @param separator String A separator to use. 
		* @returns String The node path 
		*/
		getPath?( field?:string, separator?:string ): string;

		/** [Method] Returns the Ext data TreeStore which owns this node  
		* @returns Ext.data.TreeStore The TreeStore which owns this node. 
		*/
		getTreeStore?(): Ext.data.ITreeStore;

		/** [Method] Returns true if this node has one or more child nodes else false  
		* @returns Boolean 
		*/
		hasChildNodes?(): boolean;

		/** [Method] Returns the index of a child node 
		* @param node Ext.data.NodeInterface 
		* @returns Number The index of the node or -1 if it was not found 
		*/
		indexOf?( node?:Ext.data.INodeInterface ): number;

		/** [Method] Returns the index of a child node that matches the id 
		* @param id String The id of the node to find 
		* @returns Number The index of the node or -1 if it was not found 
		*/
		indexOfId?( id?:string ): number;

		/** [Method] Inserts the first node before the second node in this nodes childNodes collection  
		* @param node Ext.data.NodeInterface/Ext.data.NodeInterface[]/Object The node to insert 
		* @param refNode Ext.data.NodeInterface The node to insert before (if null the node is appended) 
		* @returns Ext.data.NodeInterface The inserted node 
		*/
		insertBefore?( node?:any, refNode?:Ext.data.INodeInterface ): Ext.data.INodeInterface;

		/** [Method] Inserts a node into this node  
		* @param index Number The zero-based index to insert the node at 
		* @param node Ext.data.NodeInterface/Object The node to insert 
		* @returns Ext.data.NodeInterface The node you just inserted 
		*/
		insertChild?( index?:number, node?:any ): Ext.data.INodeInterface;

		/** [Method] Returns true if the passed node is an ancestor at any point of this node  
		* @param node Ext.data.NodeInterface 
		* @returns Boolean 
		*/
		isAncestor?( node?:Ext.data.INodeInterface ): boolean;

		/** [Method] Returns true if this node is a branch node and the entire branch is fully loaded  
		* @returns Boolean 
		*/
		isBranchLoaded?(): boolean;

		/** [Method] Returns true if this node has one or more child nodes or if the expandable node attribute is explicitly specified as  
		* @returns Boolean 
		*/
		isExpandable?(): boolean;

		/** [Method] Returns true if this node is expanded  
		* @returns Boolean 
		*/
		isExpanded?(): boolean;

		/** [Method] Returns true if this node is the first child of its parent 
		* @returns Boolean 
		*/
		isFirst?(): boolean;

		/** [Method] Returns true if this node is the last child of its parent 
		* @returns Boolean 
		*/
		isLast?(): boolean;

		/** [Method] Returns true if this node is a leaf 
		* @returns Boolean 
		*/
		isLeaf?(): boolean;

		/** [Method] Returns true if this node is loaded 
		* @returns Boolean 
		*/
		isLoaded?(): boolean;

		/** [Method] Returns true if this node is loading 
		* @returns Boolean 
		*/
		isLoading?(): boolean;

		/** [Method] Returns true if this node is the root node 
		* @returns Boolean 
		*/
		isRoot?(): boolean;

		/** [Method] Returns true if this node is visible  
		* @returns Boolean 
		*/
		isVisible?(): boolean;

		/** [Method] Removes this node from its parent  
		* @param erase Boolean True to erase the node using the configured proxy. This is only needed when the owning tree store is not taking care of synchronization operations. 
		* @returns Ext.data.NodeInterface this 
		*/
		remove?( erase?:boolean ): Ext.data.INodeInterface;

		/** [Method] Removes all child nodes from this node  
		* @param erase Boolean True to erase the node using the configured proxy. 
		* @returns Ext.data.NodeInterface this 
		*/
		removeAll?( erase?:boolean ): Ext.data.INodeInterface;

		/** [Method] Removes a child node from this node  
		* @param node Ext.data.NodeInterface The node to remove 
		* @param erase Boolean True to erase the record using the configured proxy. 
		* @returns Ext.data.NodeInterface The removed node 
		*/
		removeChild?( node?:Ext.data.INodeInterface, erase?:boolean ): Ext.data.INodeInterface;

		/** [Method] Replaces one child node in this node with another  
		* @param newChild Ext.data.NodeInterface The replacement node 
		* @param oldChild Ext.data.NodeInterface The node to replace 
		* @returns Ext.data.NodeInterface The replaced node 
		*/
		replaceChild?( newChild?:Ext.data.INodeInterface, oldChild?:Ext.data.INodeInterface ): Ext.data.INodeInterface;

		/** [Method] Creates an object representation of this node including its children  
		* @param writerParam Object 
		*/
		serialize?( writerParam?:any ): void;

		/** [Method] Sorts this nodes children using the supplied sort function  
		* @param sortFn Function A function which, when passed two Nodes, returns -1, 0 or 1 depending upon required sort order. It omitted, the node is sorted according to the existing sorters in the owning TreeStore. 
		* @param recursive Boolean True to apply this sort recursively 
		* @param suppressEvent Boolean True to not fire a sort event. 
		*/
		sort?( sortFn?:any, recursive?:boolean, suppressEvent?:boolean ): void;

		/** [Method] Updates general data of this node like isFirst isLast depth  
		* @param commit Boolean 
		* @param info Object The info to update. May contain any of the following 
		*/
		updateInfo?( commit?:boolean, info?:any ): void;

	}
	export class NodeInterface {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] This method allows you to decorate a Model s class to implement the NodeInterface  
		* @param model Ext.Class/Ext.data.Model The Model class or an instance of the Model class you want to decorate the prototype of. 
		*/
		static decorate( model?:any ): void;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.data {
	export interface INodeStore extends Ext.data.IStore {
		/** [Config Option] (Boolean) */
		folderSort?: boolean;
		/** [Config Option] (Ext.data.Model) */
		node?: Ext.data.IModel;
		/** [Config Option] (Boolean) */
		recursive?: boolean;
		/** [Config Option] (Boolean) */
		rootVisible?: boolean;
		/** [Property] (Number) */
		isExpandingOrCollapsing?: number;

		/** [Property] (Boolean) */
		isNodeStore?: boolean;

		/** [Method] Returns the value of folderSort  
		* @returns Boolean 
		*/
		getFolderSort?(): boolean;

		/** [Method] Returns the value of node  
		* @returns Ext.data.Model 
		*/
		getNode?(): Ext.data.IModel;

		/** [Method] Returns the value of recursive  
		* @returns Boolean 
		*/
		getRecursive?(): boolean;

		/** [Method] Returns the value of rootVisible  
		* @returns Boolean 
		*/
		getRootVisible?(): boolean;

		/** [Method] NodeStores are never buffered or paged  
		* @returns Number The total number of Model instances available via the Proxy. 0 returned if no value has been set via the reader. 
		*/
		getTotalCount?(): number;

		/** [Method]  
		* @param node Object 
		* @returns Boolean 
		*/
		isVisible?( node?:any ): boolean;

		/** [Method] Sets the value of folderSort  
		* @param folderSort Boolean The new value. 
		*/
		setFolderSort?( folderSort?:boolean ): void;

		/** [Method] Sets the value of node  
		* @param node Ext.data.Model The new value. 
		*/
		setNode?( node?:Ext.data.IModel ): void;

		/** [Method] Sets the value of recursive  
		* @param recursive Boolean The new value. 
		*/
		setRecursive?( recursive?:boolean ): void;

		/** [Method] Sets the value of rootVisible  
		* @param rootVisible Boolean The new value. 
		*/
		setRootVisible?( rootVisible?:boolean ): void;

	}

}

declare module Ext.data.operation {
	export interface ICreate extends Ext.data.operation.IOperation {
		/** [Method] Returns the value of recordCreator  
		* @returns Object 
		*/
		getRecordCreator?(): any;

		/** [Method] Sets the value of recordCreator  
		* @param recordCreator Object The new value. 
		*/
		setRecordCreator?( recordCreator?:any ): void;

	}

}

declare module Ext.data.operation {
	export interface IDestroy extends Ext.data.operation.IOperation {
		/** [Method] Process records in the operation after the response is successful and the result set is parsed correctly  */
		doProcess?(): void;

	}

}

declare module Ext.data.operation {
	export interface IOperation extends Ext.IBase {
		/** [Config Option] (Ext.data.Batch) */
		batch?: Ext.data.IBatch;
		/** [Config Option] (Function) */
		callback?: any;
		/** [Config Option] (Object) */
		id?: any;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (Ext.data.proxy.Proxy) */
		proxy?: Ext.data.proxy.IProxy;
		/** [Config Option] (Ext.data.Model[]) */
		records?: Ext.data.IModel[];
		/** [Config Option] (Ext.data.Request) */
		request?: Ext.data.IRequest;
		/** [Config Option] (Ext.data.ResultSet) */
		resultSet?: Ext.data.IResultSet;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		synchronous?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Aborts the processing of this operation on the proxy  */
		abort?(): void;

		/** [Method] Checks whether this operation should cause writing to occur  
		* @returns Boolean Whether the operation should cause a write to occur. 
		*/
		allowWrite?(): boolean;

		/** [Method] Process records in the operation after the response is successful and the result set is parsed correctly  
		* @param resultSet Ext.data.ResultSet The result set 
		* @param request Ext.data.Request The request 
		* @param response Object The response 
		*/
		doProcess?( resultSet?:Ext.data.IResultSet, request?:Ext.data.IRequest, response?:any ): void;

		/** [Method] Returns the value of batch  
		* @returns Ext.data.Batch 
		*/
		getBatch?(): Ext.data.IBatch;

		/** [Method] Returns the value of callback  
		* @returns Function 
		*/
		getCallback?(): any;

		/** [Method] Returns the error string or object that was set using setException 
		* @returns String/Object The error object 
		*/
		getError?(): any;

		/** [Method] Returns the value of id  
		* @returns Object 
		*/
		getId?(): any;

		/** [Method] Returns the value of params  
		* @returns Object 
		*/
		getParams?(): any;

		/** [Method] Returns the value of proxy  
		* @returns Ext.data.proxy.Proxy 
		*/
		getProxy?(): Ext.data.proxy.IProxy;

		/** [Method] Returns the records associated with this operation  
		* @returns Ext.data.Model[] 
		*/
		getRecords?(): Ext.data.IModel[];

		/** [Method] Returns the value of request  
		* @returns Ext.data.Request 
		*/
		getRequest?(): Ext.data.IRequest;

		/** [Method] Returns the value of resultSet  
		* @returns Ext.data.ResultSet 
		*/
		getResultSet?(): Ext.data.IResultSet;

		/** [Method] Returns the value of scope  
		* @returns Object 
		*/
		getScope?(): any;

		/** [Method] Returns the value of synchronous  
		* @returns Boolean 
		*/
		getSynchronous?(): boolean;

		/** [Method] Returns the value of url  
		* @returns String 
		*/
		getUrl?(): string;

		/** [Method] Returns true if this Operation encountered an exception see also getError  
		* @returns Boolean True if there was an exception 
		*/
		hasException?(): boolean;

		/** [Method] Returns true if the Operation has been completed 
		* @returns Boolean True if the Operation is complete 
		*/
		isComplete?(): boolean;

		/** [Method] Returns true if the Operation has been started but has not yet completed  
		* @returns Boolean True if the Operation is currently running 
		*/
		isRunning?(): boolean;

		/** [Method] Returns true if the Operation has been started  
		* @returns Boolean True if the Operation has started 
		*/
		isStarted?(): boolean;

		/** [Method] Sets the value of batch  
		* @param batch Ext.data.Batch The new value. 
		*/
		setBatch?( batch?:Ext.data.IBatch ): void;

		/** [Method] Sets the value of callback  
		* @param callback Function The new value. 
		*/
		setCallback?( callback?:any ): void;

		/** [Method] Marks the Operation as completed  */
		setCompleted?(): void;

		/** [Method] Marks the Operation as having experienced an exception  
		* @param error String/Object error string/object 
		*/
		setException?( error?:any ): void;

		/** [Method] Sets the value of id  
		* @param id Object The new value. 
		*/
		setId?( id?:any ): void;

		/** [Method] Sets the value of params  
		* @param params Object The new value. 
		*/
		setParams?( params?:any ): void;

		/** [Method] Sets the value of proxy  
		* @param proxy Ext.data.proxy.Proxy The new value. 
		*/
		setProxy?( proxy?:Ext.data.proxy.IProxy ): void;

		/** [Method] Sets the value of records  
		* @param records Ext.data.Model[] The new value. 
		*/
		setRecords?( records?:Ext.data.IModel[] ): void;

		/** [Method] Sets the value of request  
		* @param request Ext.data.Request The new value. 
		*/
		setRequest?( request?:Ext.data.IRequest ): void;

		/** [Method] Sets the value of resultSet  
		* @param resultSet Ext.data.ResultSet The new value. 
		*/
		setResultSet?( resultSet?:Ext.data.IResultSet ): void;

		/** [Method] Sets the value of scope  
		* @param scope Object The new value. 
		*/
		setScope?( scope?:any ): void;

		/** [Method] Marks the Operation as started  */
		setStarted?(): void;

		/** [Method] Marks the Operation as successful  
		* @param complete Boolean true to also mark this operation as being complete See setCompleted. 
		*/
		setSuccessful?( complete?:boolean ): void;

		/** [Method] Sets the value of synchronous  
		* @param synchronous Boolean The new value. 
		*/
		setSynchronous?( synchronous?:boolean ): void;

		/** [Method] Sets the value of url  
		* @param url String The new value. 
		*/
		setUrl?( url?:string ): void;

		/** [Method] Returns true if the Operation has completed and was successful 
		* @returns Boolean True if successful 
		*/
		wasSuccessful?(): boolean;

	}

}

declare module Ext.data {
	export interface IOperation extends Ext.IBase {
		/** [Config Option] (Ext.data.Batch) */
		batch?: Ext.data.IBatch;
		/** [Config Option] (Function) */
		callback?: any;
		/** [Config Option] (Object) */
		id?: any;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (Ext.data.proxy.Proxy) */
		proxy?: Ext.data.proxy.IProxy;
		/** [Config Option] (Ext.data.Model[]) */
		records?: Ext.data.IModel[];
		/** [Config Option] (Ext.data.Request) */
		request?: Ext.data.IRequest;
		/** [Config Option] (Ext.data.ResultSet) */
		resultSet?: Ext.data.IResultSet;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		synchronous?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Aborts the processing of this operation on the proxy  */
		abort?(): void;

		/** [Method] Checks whether this operation should cause writing to occur  
		* @returns Boolean Whether the operation should cause a write to occur. 
		*/
		allowWrite?(): boolean;

		/** [Method] Process records in the operation after the response is successful and the result set is parsed correctly  
		* @param resultSet Ext.data.ResultSet The result set 
		* @param request Ext.data.Request The request 
		* @param response Object The response 
		*/
		doProcess?( resultSet?:Ext.data.IResultSet, request?:Ext.data.IRequest, response?:any ): void;

		/** [Method] Returns the value of batch  
		* @returns Ext.data.Batch 
		*/
		getBatch?(): Ext.data.IBatch;

		/** [Method] Returns the value of callback  
		* @returns Function 
		*/
		getCallback?(): any;

		/** [Method] Returns the error string or object that was set using setException 
		* @returns String/Object The error object 
		*/
		getError?(): any;

		/** [Method] Returns the value of id  
		* @returns Object 
		*/
		getId?(): any;

		/** [Method] Returns the value of params  
		* @returns Object 
		*/
		getParams?(): any;

		/** [Method] Returns the value of proxy  
		* @returns Ext.data.proxy.Proxy 
		*/
		getProxy?(): Ext.data.proxy.IProxy;

		/** [Method] Returns the records associated with this operation  
		* @returns Ext.data.Model[] 
		*/
		getRecords?(): Ext.data.IModel[];

		/** [Method] Returns the value of request  
		* @returns Ext.data.Request 
		*/
		getRequest?(): Ext.data.IRequest;

		/** [Method] Returns the value of resultSet  
		* @returns Ext.data.ResultSet 
		*/
		getResultSet?(): Ext.data.IResultSet;

		/** [Method] Returns the value of scope  
		* @returns Object 
		*/
		getScope?(): any;

		/** [Method] Returns the value of synchronous  
		* @returns Boolean 
		*/
		getSynchronous?(): boolean;

		/** [Method] Returns the value of url  
		* @returns String 
		*/
		getUrl?(): string;

		/** [Method] Returns true if this Operation encountered an exception see also getError  
		* @returns Boolean True if there was an exception 
		*/
		hasException?(): boolean;

		/** [Method] Returns true if the Operation has been completed 
		* @returns Boolean True if the Operation is complete 
		*/
		isComplete?(): boolean;

		/** [Method] Returns true if the Operation has been started but has not yet completed  
		* @returns Boolean True if the Operation is currently running 
		*/
		isRunning?(): boolean;

		/** [Method] Returns true if the Operation has been started  
		* @returns Boolean True if the Operation has started 
		*/
		isStarted?(): boolean;

		/** [Method] Sets the value of batch  
		* @param batch Ext.data.Batch The new value. 
		*/
		setBatch?( batch?:Ext.data.IBatch ): void;

		/** [Method] Sets the value of callback  
		* @param callback Function The new value. 
		*/
		setCallback?( callback?:any ): void;

		/** [Method] Marks the Operation as completed  */
		setCompleted?(): void;

		/** [Method] Marks the Operation as having experienced an exception  
		* @param error String/Object error string/object 
		*/
		setException?( error?:any ): void;

		/** [Method] Sets the value of id  
		* @param id Object The new value. 
		*/
		setId?( id?:any ): void;

		/** [Method] Sets the value of params  
		* @param params Object The new value. 
		*/
		setParams?( params?:any ): void;

		/** [Method] Sets the value of proxy  
		* @param proxy Ext.data.proxy.Proxy The new value. 
		*/
		setProxy?( proxy?:Ext.data.proxy.IProxy ): void;

		/** [Method] Sets the value of records  
		* @param records Ext.data.Model[] The new value. 
		*/
		setRecords?( records?:Ext.data.IModel[] ): void;

		/** [Method] Sets the value of request  
		* @param request Ext.data.Request The new value. 
		*/
		setRequest?( request?:Ext.data.IRequest ): void;

		/** [Method] Sets the value of resultSet  
		* @param resultSet Ext.data.ResultSet The new value. 
		*/
		setResultSet?( resultSet?:Ext.data.IResultSet ): void;

		/** [Method] Sets the value of scope  
		* @param scope Object The new value. 
		*/
		setScope?( scope?:any ): void;

		/** [Method] Marks the Operation as started  */
		setStarted?(): void;

		/** [Method] Marks the Operation as successful  
		* @param complete Boolean true to also mark this operation as being complete See setCompleted. 
		*/
		setSuccessful?( complete?:boolean ): void;

		/** [Method] Sets the value of synchronous  
		* @param synchronous Boolean The new value. 
		*/
		setSynchronous?( synchronous?:boolean ): void;

		/** [Method] Sets the value of url  
		* @param url String The new value. 
		*/
		setUrl?( url?:string ): void;

		/** [Method] Returns true if the Operation has completed and was successful 
		* @returns Boolean True if successful 
		*/
		wasSuccessful?(): boolean;

	}

}

declare module Ext.data.operation {
	export interface IRead extends Ext.data.operation.IOperation {
		/** [Config Option] (Ext.util.Filter[]) */
		filters?: Ext.util.IFilter[];
		/** [Config Option] (Ext.util.Grouper) */
		grouper?: Ext.util.IGrouper;
		/** [Config Option] (Number) */
		limit?: number;
		/** [Config Option] (Number) */
		page?: number;
		/** [Config Option] (Ext.util.Sorter[]) */
		sorters?: Ext.util.ISorter[];
		/** [Config Option] (Number) */
		start?: number;
		/** [Method] Checks whether this operation should cause writing to occur  
		* @returns Boolean Whether the operation should cause a write to occur. 
		*/
		allowWrite?(): boolean;

		/** [Method] Process records in the operation after the response is successful and the result set is parsed correctly  */
		doProcess?(): void;

		/** [Method] Returns the value of filters  
		* @returns Ext.util.Filter[] 
		*/
		getFilters?(): Ext.util.IFilter[];

		/** [Method] Returns the value of grouper  
		* @returns Ext.util.Grouper 
		*/
		getGrouper?(): Ext.util.IGrouper;

		/** [Method] Returns the value of limit  
		* @returns Number 
		*/
		getLimit?(): number;

		/** [Method] Returns the value of page  
		* @returns Number 
		*/
		getPage?(): number;

		/** [Method] Returns the value of sorters  
		* @returns Ext.util.Sorter[] 
		*/
		getSorters?(): Ext.util.ISorter[];

		/** [Method] Returns the value of start  
		* @returns Number 
		*/
		getStart?(): number;

		/** [Method] Sets the value of filters  
		* @param filters Ext.util.Filter[] The new value. 
		*/
		setFilters?( filters?:Ext.util.IFilter[] ): void;

		/** [Method] Sets the value of grouper  
		* @param grouper Ext.util.Grouper The new value. 
		*/
		setGrouper?( grouper?:Ext.util.IGrouper ): void;

		/** [Method] Sets the value of limit  
		* @param limit Number The new value. 
		*/
		setLimit?( limit?:number ): void;

		/** [Method] Sets the value of page  
		* @param page Number The new value. 
		*/
		setPage?( page?:number ): void;

		/** [Method] Sets the value of sorters  
		* @param sorters Ext.util.Sorter[] The new value. 
		*/
		setSorters?( sorters?:Ext.util.ISorter[] ): void;

		/** [Method] Sets the value of start  
		* @param start Number The new value. 
		*/
		setStart?( start?:number ): void;

	}

}

declare module Ext.data.operation {
	export interface IUpdate extends Ext.data.operation.IOperation {
		/** [Method] Returns the value of recordCreator  
		* @returns Object 
		*/
		getRecordCreator?(): any;

		/** [Method] Sets the value of recordCreator  
		* @param recordCreator Object The new value. 
		*/
		setRecordCreator?( recordCreator?:any ): void;

	}

}

declare module Ext.data {
	export interface IPageMap extends Ext.util.ILruCache {
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Method] Maintain a generation counter so that the Store can reject incoming pages destined for the previous generation 
		* @param initial Object 
		* @returns Ext.util.HashMap this 
		*/
		clear?( initial?:any ): Ext.util.IHashMap;

		/** [Method] Returns the first record in this page map which elicits a true return value from the passed selection function  
		* @param fn Function The selection function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this PageMap. 
		* @returns Object The first record in this page map which returned true from the selection function, or null if none was found. 
		*/
		findBy?( fn?:any, scope?:any ): any;

		/** [Method] Returns the index in the whole dataset of the first record in this page map which elicits a true return value from th  
		* @param fn Function The selection function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this PageMap. 
		* @returns Number The index first record in this page map which returned true from the selection function, or -1 if none was found. 
		*/
		findIndexBy?( fn?:any, scope?:any ): number;

		/** [Method] Gets the number of items in the hash  
		* @returns Number The number of items in the hash. 
		*/
		getCount?(): number;

		/** [Method] Returns the value of pageSize  
		* @returns Number 
		*/
		getPageSize?(): number;

		/** [Method] Returns the value of rootProperty  
		* @returns String 
		*/
		getRootProperty?(): string;

		/** [Method] Returns the value of store  
		* @returns Object 
		*/
		getStore?(): any;

		/** [Method] Remove an item from the hash  
		* @returns Boolean True if the item was successfully removed. 
		*/
		remove?(): boolean;

		/** [Method] Sets the value of pageSize  
		* @param pageSize Number The new value. 
		*/
		setPageSize?( pageSize?:number ): void;

		/** [Method] Sets the value of rootProperty  
		* @param rootProperty String The new value. 
		*/
		setRootProperty?( rootProperty?:string ): void;

		/** [Method] Sets the value of store  
		* @param store Object The new value. 
		*/
		setStore?( store?:any ): void;

	}

}

declare module Ext.data.proxy {
	export interface IAjax extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		actionMethods?: any;
		/** [Config Option] (Boolean) */
		binary?: boolean;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (Boolean) */
		paramsAsJson?: boolean;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: boolean;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
		/** [Method] Aborts a running request  
		* @param request Ext.data.Request The request to abort. If not passed, the most recent active request will be aborted. 
		*/
		abort?( request?:Ext.data.IRequest ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] In ServerProxy subclasses the create read update and erase methods all pass through to doRequest  
		* @param operation Object 
		*/
		doRequest?( operation?:any ): void;

		/** [Method] Returns the value of actionMethods  
		* @returns Object 
		*/
		getActionMethods?(): any;

		/** [Method] Returns the value of binary  
		* @returns Boolean 
		*/
		getBinary?(): boolean;

		/** [Method] Returns the value of headers  
		* @returns Object 
		*/
		getHeaders?(): any;

		/** [Method] Returns the HTTP method name for a given request  
		* @param request Ext.data.Request The request object 
		* @returns String The HTTP method to use (should be one of 'GET', 'POST', 'PUT' or 'DELETE') 
		*/
		getMethod?( request?:Ext.data.IRequest ): string;

		/** [Method] Returns the value of paramsAsJson  
		* @returns Boolean 
		*/
		getParamsAsJson?(): boolean;

		/** [Method] Returns the value of password  
		* @returns String 
		*/
		getPassword?(): string;

		/** [Method] Returns the value of useDefaultXhrHeader  
		* @returns Boolean 
		*/
		getUseDefaultXhrHeader?(): boolean;

		/** [Method] Returns the value of username  
		* @returns String 
		*/
		getUsername?(): string;

		/** [Method] Returns the value of withCredentials  
		* @returns Boolean 
		*/
		getWithCredentials?(): boolean;

		/** [Method] Sets the value of actionMethods  
		* @param actionMethods Object The new value. 
		*/
		setActionMethods?( actionMethods?:any ): void;

		/** [Method] Sets the value of binary  
		* @param binary Boolean The new value. 
		*/
		setBinary?( binary?:boolean ): void;

		/** [Method] Sets the value of headers  
		* @param headers Object The new value. 
		*/
		setHeaders?( headers?:any ): void;

		/** [Method] Sets the value of paramsAsJson  
		* @param paramsAsJson Boolean The new value. 
		*/
		setParamsAsJson?( paramsAsJson?:boolean ): void;

		/** [Method] Sets the value of password  
		* @param password String The new value. 
		*/
		setPassword?( password?:string ): void;

		/** [Method] Sets the value of useDefaultXhrHeader  
		* @param useDefaultXhrHeader Boolean The new value. 
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:boolean ): void;

		/** [Method] Sets the value of username  
		* @param username String The new value. 
		*/
		setUsername?( username?:string ): void;

		/** [Method] Sets the value of withCredentials  
		* @param withCredentials Boolean The new value. 
		*/
		setWithCredentials?( withCredentials?:boolean ): void;

	}

}

declare module Ext.data {
	export interface IHttpProxy extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		actionMethods?: any;
		/** [Config Option] (Boolean) */
		binary?: boolean;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (Boolean) */
		paramsAsJson?: boolean;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: boolean;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
		/** [Method] Aborts a running request  
		* @param request Ext.data.Request The request to abort. If not passed, the most recent active request will be aborted. 
		*/
		abort?( request?:Ext.data.IRequest ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] In ServerProxy subclasses the create read update and erase methods all pass through to doRequest  
		* @param operation Object 
		*/
		doRequest?( operation?:any ): void;

		/** [Method] Returns the value of actionMethods  
		* @returns Object 
		*/
		getActionMethods?(): any;

		/** [Method] Returns the value of binary  
		* @returns Boolean 
		*/
		getBinary?(): boolean;

		/** [Method] Returns the value of headers  
		* @returns Object 
		*/
		getHeaders?(): any;

		/** [Method] Returns the HTTP method name for a given request  
		* @param request Ext.data.Request The request object 
		* @returns String The HTTP method to use (should be one of 'GET', 'POST', 'PUT' or 'DELETE') 
		*/
		getMethod?( request?:Ext.data.IRequest ): string;

		/** [Method] Returns the value of paramsAsJson  
		* @returns Boolean 
		*/
		getParamsAsJson?(): boolean;

		/** [Method] Returns the value of password  
		* @returns String 
		*/
		getPassword?(): string;

		/** [Method] Returns the value of useDefaultXhrHeader  
		* @returns Boolean 
		*/
		getUseDefaultXhrHeader?(): boolean;

		/** [Method] Returns the value of username  
		* @returns String 
		*/
		getUsername?(): string;

		/** [Method] Returns the value of withCredentials  
		* @returns Boolean 
		*/
		getWithCredentials?(): boolean;

		/** [Method] Sets the value of actionMethods  
		* @param actionMethods Object The new value. 
		*/
		setActionMethods?( actionMethods?:any ): void;

		/** [Method] Sets the value of binary  
		* @param binary Boolean The new value. 
		*/
		setBinary?( binary?:boolean ): void;

		/** [Method] Sets the value of headers  
		* @param headers Object The new value. 
		*/
		setHeaders?( headers?:any ): void;

		/** [Method] Sets the value of paramsAsJson  
		* @param paramsAsJson Boolean The new value. 
		*/
		setParamsAsJson?( paramsAsJson?:boolean ): void;

		/** [Method] Sets the value of password  
		* @param password String The new value. 
		*/
		setPassword?( password?:string ): void;

		/** [Method] Sets the value of useDefaultXhrHeader  
		* @param useDefaultXhrHeader Boolean The new value. 
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:boolean ): void;

		/** [Method] Sets the value of username  
		* @param username String The new value. 
		*/
		setUsername?( username?:string ): void;

		/** [Method] Sets the value of withCredentials  
		* @param withCredentials Boolean The new value. 
		*/
		setWithCredentials?( withCredentials?:boolean ): void;

	}

}

declare module Ext.data {
	export interface IAjaxProxy extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		actionMethods?: any;
		/** [Config Option] (Boolean) */
		binary?: boolean;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (Boolean) */
		paramsAsJson?: boolean;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: boolean;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
		/** [Method] Aborts a running request  
		* @param request Ext.data.Request The request to abort. If not passed, the most recent active request will be aborted. 
		*/
		abort?( request?:Ext.data.IRequest ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] In ServerProxy subclasses the create read update and erase methods all pass through to doRequest  
		* @param operation Object 
		*/
		doRequest?( operation?:any ): void;

		/** [Method] Returns the value of actionMethods  
		* @returns Object 
		*/
		getActionMethods?(): any;

		/** [Method] Returns the value of binary  
		* @returns Boolean 
		*/
		getBinary?(): boolean;

		/** [Method] Returns the value of headers  
		* @returns Object 
		*/
		getHeaders?(): any;

		/** [Method] Returns the HTTP method name for a given request  
		* @param request Ext.data.Request The request object 
		* @returns String The HTTP method to use (should be one of 'GET', 'POST', 'PUT' or 'DELETE') 
		*/
		getMethod?( request?:Ext.data.IRequest ): string;

		/** [Method] Returns the value of paramsAsJson  
		* @returns Boolean 
		*/
		getParamsAsJson?(): boolean;

		/** [Method] Returns the value of password  
		* @returns String 
		*/
		getPassword?(): string;

		/** [Method] Returns the value of useDefaultXhrHeader  
		* @returns Boolean 
		*/
		getUseDefaultXhrHeader?(): boolean;

		/** [Method] Returns the value of username  
		* @returns String 
		*/
		getUsername?(): string;

		/** [Method] Returns the value of withCredentials  
		* @returns Boolean 
		*/
		getWithCredentials?(): boolean;

		/** [Method] Sets the value of actionMethods  
		* @param actionMethods Object The new value. 
		*/
		setActionMethods?( actionMethods?:any ): void;

		/** [Method] Sets the value of binary  
		* @param binary Boolean The new value. 
		*/
		setBinary?( binary?:boolean ): void;

		/** [Method] Sets the value of headers  
		* @param headers Object The new value. 
		*/
		setHeaders?( headers?:any ): void;

		/** [Method] Sets the value of paramsAsJson  
		* @param paramsAsJson Boolean The new value. 
		*/
		setParamsAsJson?( paramsAsJson?:boolean ): void;

		/** [Method] Sets the value of password  
		* @param password String The new value. 
		*/
		setPassword?( password?:string ): void;

		/** [Method] Sets the value of useDefaultXhrHeader  
		* @param useDefaultXhrHeader Boolean The new value. 
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:boolean ): void;

		/** [Method] Sets the value of username  
		* @param username String The new value. 
		*/
		setUsername?( username?:string ): void;

		/** [Method] Sets the value of withCredentials  
		* @param withCredentials Boolean The new value. 
		*/
		setWithCredentials?( withCredentials?:boolean ): void;

	}

}

declare module Ext.data.proxy {
	export interface IClient extends Ext.data.proxy.IProxy {
		/** [Property] (Boolean) */
		isSynchronous?: boolean;

		/** [Method] Abstract function that must be implemented by each ClientProxy subclass  */
		clear?(): void;

	}

}

declare module Ext.data {
	export interface IClientProxy extends Ext.data.proxy.IProxy {
		/** [Property] (Boolean) */
		isSynchronous?: boolean;

		/** [Method] Abstract function that must be implemented by each ClientProxy subclass  */
		clear?(): void;

	}

}

declare module Ext.data.proxy {
	export interface IDirect extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Function/String) */
		directFn?: any;
		/** [Config Option] (Object/Array) */
		metadata?: any;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Method] Encode any values being sent to the server  
		* @param value Array An array of sorters/filters. 
		* @returns Object The encoded value 
		*/
		applyEncoding?( value?:any[] ): any;

		/** [Method] Generates a url based on a given Ext data Request object  
		* @param request Ext.data.Request The request object 
		* @returns String The url 
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;

		/** [Method] In ServerProxy subclasses the create read update and erase methods all pass through to doRequest  
		* @param operation Object 
		*/
		doRequest?( operation?:any ): void;

		/** [Method] Template method to allow subclasses to specify how to get the response for the reader  
		* @param response Object The server response 
		* @returns Object The response data to be used by the reader 
		*/
		extractResponseData?( response?:any ): any;

		/** [Method] Returns the value of api  
		* @returns Object 
		*/
		getApi?(): any;

		/** [Method] Returns the value of directFn  
		* @returns Function/String 
		*/
		getDirectFn?(): any;

		/** [Method] Returns the value of metadata  
		* @returns Object/Array 
		*/
		getMetadata?(): any;

		/** [Method] Returns the value of paramOrder  
		* @returns String/String[] 
		*/
		getParamOrder?(): any;

		/** [Method] Returns the value of paramsAsHash  
		* @returns Boolean 
		*/
		getParamsAsHash?(): boolean;

		/** [Method] Sets the value of api  
		* @param api Object The new value. 
		*/
		setApi?( api?:any ): void;

		/** [Method] Sets the value of directFn  
		* @param directFn Function/String The new value. 
		*/
		setDirectFn?( directFn?:any ): void;

		/** [Method] Sets up an exception on the operation 
		* @param operation Ext.data.operation.Operation The operation 
		* @param response Object The response 
		*/
		setException?( operation?:Ext.data.operation.IOperation, response?:any ): void;

		/** [Method] Sets the value of metadata  
		* @param metadata Object/Array The new value. 
		*/
		setMetadata?( metadata?:any ): void;

		/** [Method] Sets the value of paramOrder  
		* @param paramOrder String/String[] The new value. 
		*/
		setParamOrder?( paramOrder?:any ): void;

		/** [Method] Sets the value of paramsAsHash  
		* @param paramsAsHash Boolean The new value. 
		*/
		setParamsAsHash?( paramsAsHash?:boolean ): void;

	}

}

declare module Ext.data {
	export interface IDirectProxy extends Ext.data.proxy.IServer {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Function/String) */
		directFn?: any;
		/** [Config Option] (Object/Array) */
		metadata?: any;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Method] Encode any values being sent to the server  
		* @param value Array An array of sorters/filters. 
		* @returns Object The encoded value 
		*/
		applyEncoding?( value?:any[] ): any;

		/** [Method] Generates a url based on a given Ext data Request object  
		* @param request Ext.data.Request The request object 
		* @returns String The url 
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;

		/** [Method] In ServerProxy subclasses the create read update and erase methods all pass through to doRequest  
		* @param operation Object 
		*/
		doRequest?( operation?:any ): void;

		/** [Method] Template method to allow subclasses to specify how to get the response for the reader  
		* @param response Object The server response 
		* @returns Object The response data to be used by the reader 
		*/
		extractResponseData?( response?:any ): any;

		/** [Method] Returns the value of api  
		* @returns Object 
		*/
		getApi?(): any;

		/** [Method] Returns the value of directFn  
		* @returns Function/String 
		*/
		getDirectFn?(): any;

		/** [Method] Returns the value of metadata  
		* @returns Object/Array 
		*/
		getMetadata?(): any;

		/** [Method] Returns the value of paramOrder  
		* @returns String/String[] 
		*/
		getParamOrder?(): any;

		/** [Method] Returns the value of paramsAsHash  
		* @returns Boolean 
		*/
		getParamsAsHash?(): boolean;

		/** [Method] Sets the value of api  
		* @param api Object The new value. 
		*/
		setApi?( api?:any ): void;

		/** [Method] Sets the value of directFn  
		* @param directFn Function/String The new value. 
		*/
		setDirectFn?( directFn?:any ): void;

		/** [Method] Sets up an exception on the operation 
		* @param operation Ext.data.operation.Operation The operation 
		* @param response Object The response 
		*/
		setException?( operation?:Ext.data.operation.IOperation, response?:any ): void;

		/** [Method] Sets the value of metadata  
		* @param metadata Object/Array The new value. 
		*/
		setMetadata?( metadata?:any ): void;

		/** [Method] Sets the value of paramOrder  
		* @param paramOrder String/String[] The new value. 
		*/
		setParamOrder?( paramOrder?:any ): void;

		/** [Method] Sets the value of paramsAsHash  
		* @param paramsAsHash Boolean The new value. 
		*/
		setParamsAsHash?( paramsAsHash?:boolean ): void;

	}

}

declare module Ext.data.proxy {
	export interface IJsonP extends Ext.data.proxy.IServer {
		/** [Config Option] (Boolean) */
		autoAppendParams?: boolean;
		/** [Config Option] (String) */
		callbackKey?: string;
		/** [Config Option] (String) */
		recordParam?: string;
		/** [Method] Aborts a server request  
		* @param request Ext.data.Request The request to abort. 
		*/
		abort?( request?:Ext.data.IRequest ): void;

		/** [Method] Generates a url based on a given Ext data Request object  
		* @param request Ext.data.Request The request object 
		* @returns String The url 
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;

		/** [Method] Encodes an array of records into a value suitable to be added to the request params as the recordParam parameter  
		* @param records Ext.data.Model[] The records array 
		* @returns Array An array of record data objects 
		*/
		encodeRecords?( records?:Ext.data.IModel[] ): any[];

		/** [Method] Returns the value of autoAppendParams  
		* @returns Boolean 
		*/
		getAutoAppendParams?(): boolean;

		/** [Method] Returns the value of callbackKey  
		* @returns String 
		*/
		getCallbackKey?(): string;

		/** [Method] Returns the value of recordParam  
		* @returns String 
		*/
		getRecordParam?(): string;

		/** [Method] Sets the value of autoAppendParams  
		* @param autoAppendParams Boolean The new value. 
		*/
		setAutoAppendParams?( autoAppendParams?:boolean ): void;

		/** [Method] Sets the value of callbackKey  
		* @param callbackKey String The new value. 
		*/
		setCallbackKey?( callbackKey?:string ): void;

		/** [Method] Sets the value of recordParam  
		* @param recordParam String The new value. 
		*/
		setRecordParam?( recordParam?:string ): void;

	}

}

declare module Ext.data {
	export interface IScriptTagProxy extends Ext.data.proxy.IServer {
		/** [Config Option] (Boolean) */
		autoAppendParams?: boolean;
		/** [Config Option] (String) */
		callbackKey?: string;
		/** [Config Option] (String) */
		recordParam?: string;
		/** [Method] Aborts a server request  
		* @param request Ext.data.Request The request to abort. 
		*/
		abort?( request?:Ext.data.IRequest ): void;

		/** [Method] Generates a url based on a given Ext data Request object  
		* @param request Ext.data.Request The request object 
		* @returns String The url 
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;

		/** [Method] Encodes an array of records into a value suitable to be added to the request params as the recordParam parameter  
		* @param records Ext.data.Model[] The records array 
		* @returns Array An array of record data objects 
		*/
		encodeRecords?( records?:Ext.data.IModel[] ): any[];

		/** [Method] Returns the value of autoAppendParams  
		* @returns Boolean 
		*/
		getAutoAppendParams?(): boolean;

		/** [Method] Returns the value of callbackKey  
		* @returns String 
		*/
		getCallbackKey?(): string;

		/** [Method] Returns the value of recordParam  
		* @returns String 
		*/
		getRecordParam?(): string;

		/** [Method] Sets the value of autoAppendParams  
		* @param autoAppendParams Boolean The new value. 
		*/
		setAutoAppendParams?( autoAppendParams?:boolean ): void;

		/** [Method] Sets the value of callbackKey  
		* @param callbackKey String The new value. 
		*/
		setCallbackKey?( callbackKey?:string ): void;

		/** [Method] Sets the value of recordParam  
		* @param recordParam String The new value. 
		*/
		setRecordParam?( recordParam?:string ): void;

	}

}

declare module Ext.data.proxy {
	export interface ILocalStorage extends Ext.data.proxy.IWebStorage {
	}

}

declare module Ext.data {
	export interface ILocalStorageProxy extends Ext.data.proxy.IWebStorage {
	}

}

declare module Ext.data.proxy {
	export interface IMemory extends Ext.data.proxy.IClient {
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (Boolean) */
		enablePaging?: boolean;
		/** [Method] Abstract function that must be implemented by each ClientProxy subclass  */
		clear?(): void;

		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		create?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		erase?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Returns the value of data  
		* @returns Object 
		*/
		getData?(): any;

		/** [Method] Returns the value of enablePaging  
		* @returns Boolean 
		*/
		getEnablePaging?(): boolean;

		/** [Method] Reads data from the configured data object  
		* @param operation Ext.data.operation.Operation The read Operation 
		*/
		read?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Sets the value of data  
		* @param data Object The new value. 
		*/
		setData?( data?:any ): void;

		/** [Method] Sets the value of enablePaging  
		* @param enablePaging Boolean The new value. 
		*/
		setEnablePaging?( enablePaging?:boolean ): void;

		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		update?( operation?:Ext.data.operation.IOperation ): void;

	}

}

declare module Ext.data {
	export interface IMemoryProxy extends Ext.data.proxy.IClient {
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (Boolean) */
		enablePaging?: boolean;
		/** [Method] Abstract function that must be implemented by each ClientProxy subclass  */
		clear?(): void;

		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		create?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		erase?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Returns the value of data  
		* @returns Object 
		*/
		getData?(): any;

		/** [Method] Returns the value of enablePaging  
		* @returns Boolean 
		*/
		getEnablePaging?(): boolean;

		/** [Method] Reads data from the configured data object  
		* @param operation Ext.data.operation.Operation The read Operation 
		*/
		read?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Sets the value of data  
		* @param data Object The new value. 
		*/
		setData?( data?:any ): void;

		/** [Method] Sets the value of enablePaging  
		* @param enablePaging Boolean The new value. 
		*/
		setEnablePaging?( enablePaging?:boolean ): void;

		/** [Method] Currently this is a hard coded method that simply commits any records and sets the operation to successful then call  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		update?( operation?:Ext.data.operation.IOperation ): void;

	}

}

declare module Ext.data.proxy {
	export interface IProxy extends Ext.IBase, Ext.mixin.IFactoryable, Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		batchOrder?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Object/String/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Object/String/Ext.data.writer.Writer) */
		writer?: any;
		/** [Property] (Boolean) */
		isProxy?: boolean;

		/** [Property] (Boolean) */
		isSynchronous?: boolean;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Performs a batch of Operations in the order specified by batchOrder  
		* @param options Object Object containing one or more properties supported by the batch method: 
		* @returns Ext.data.Batch The newly created Batch 
		*/
		batch?( options?:any ): Ext.data.IBatch;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Performs the given create operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		create?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Performs the given destroy operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		erase?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the value of batchActions  
		* @returns Boolean 
		*/
		getBatchActions?(): boolean;

		/** [Method] Returns the value of batchOrder  
		* @returns String 
		*/
		getBatchOrder?(): string;

		/** [Method] Returns the value of model  
		* @returns String/Ext.data.Model 
		*/
		getModel?(): any;

		/** [Method] Returns the value of reader  
		* @returns Object/String/Ext.data.reader.Reader 
		*/
		getReader?(): any;

		/** [Method] Returns the value of writer  
		* @returns Object/String/Ext.data.writer.Writer 
		*/
		getWriter?(): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Performs the given read operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		read?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of batchActions  
		* @param batchActions Boolean The new value. 
		*/
		setBatchActions?( batchActions?:boolean ): void;

		/** [Method] Sets the value of batchOrder  
		* @param batchOrder String The new value. 
		*/
		setBatchOrder?( batchOrder?:string ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of model  
		* @param model String/Ext.data.Model The new value. 
		*/
		setModel?( model?:any ): void;

		/** [Method] Sets the value of reader  
		* @param reader Object/String/Ext.data.reader.Reader The new value. 
		*/
		setReader?( reader?:any ): void;

		/** [Method] Sets the value of writer  
		* @param writer Object/String/Ext.data.writer.Writer The new value. 
		*/
		setWriter?( writer?:any ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Performs the given update operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		update?( operation?:Ext.data.operation.IOperation ): void;

	}

}

declare module Ext.data {
	export interface IDataProxy extends Ext.IBase, Ext.mixin.IFactoryable, Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		batchOrder?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Object/String/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Object/String/Ext.data.writer.Writer) */
		writer?: any;
		/** [Property] (Boolean) */
		isProxy?: boolean;

		/** [Property] (Boolean) */
		isSynchronous?: boolean;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Performs a batch of Operations in the order specified by batchOrder  
		* @param options Object Object containing one or more properties supported by the batch method: 
		* @returns Ext.data.Batch The newly created Batch 
		*/
		batch?( options?:any ): Ext.data.IBatch;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Performs the given create operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		create?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Performs the given destroy operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		erase?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the value of batchActions  
		* @returns Boolean 
		*/
		getBatchActions?(): boolean;

		/** [Method] Returns the value of batchOrder  
		* @returns String 
		*/
		getBatchOrder?(): string;

		/** [Method] Returns the value of model  
		* @returns String/Ext.data.Model 
		*/
		getModel?(): any;

		/** [Method] Returns the value of reader  
		* @returns Object/String/Ext.data.reader.Reader 
		*/
		getReader?(): any;

		/** [Method] Returns the value of writer  
		* @returns Object/String/Ext.data.writer.Writer 
		*/
		getWriter?(): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Performs the given read operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		read?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of batchActions  
		* @param batchActions Boolean The new value. 
		*/
		setBatchActions?( batchActions?:boolean ): void;

		/** [Method] Sets the value of batchOrder  
		* @param batchOrder String The new value. 
		*/
		setBatchOrder?( batchOrder?:string ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of model  
		* @param model String/Ext.data.Model The new value. 
		*/
		setModel?( model?:any ): void;

		/** [Method] Sets the value of reader  
		* @param reader Object/String/Ext.data.reader.Reader The new value. 
		*/
		setReader?( reader?:any ): void;

		/** [Method] Sets the value of writer  
		* @param writer Object/String/Ext.data.writer.Writer The new value. 
		*/
		setWriter?( writer?:any ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Performs the given update operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		update?( operation?:Ext.data.operation.IOperation ): void;

	}

}

declare module Ext.data {
	export interface IProxy extends Ext.IBase, Ext.mixin.IFactoryable, Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		batchOrder?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Object/String/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Object/String/Ext.data.writer.Writer) */
		writer?: any;
		/** [Property] (Boolean) */
		isProxy?: boolean;

		/** [Property] (Boolean) */
		isSynchronous?: boolean;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Performs a batch of Operations in the order specified by batchOrder  
		* @param options Object Object containing one or more properties supported by the batch method: 
		* @returns Ext.data.Batch The newly created Batch 
		*/
		batch?( options?:any ): Ext.data.IBatch;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Performs the given create operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		create?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Performs the given destroy operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		erase?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the value of batchActions  
		* @returns Boolean 
		*/
		getBatchActions?(): boolean;

		/** [Method] Returns the value of batchOrder  
		* @returns String 
		*/
		getBatchOrder?(): string;

		/** [Method] Returns the value of model  
		* @returns String/Ext.data.Model 
		*/
		getModel?(): any;

		/** [Method] Returns the value of reader  
		* @returns Object/String/Ext.data.reader.Reader 
		*/
		getReader?(): any;

		/** [Method] Returns the value of writer  
		* @returns Object/String/Ext.data.writer.Writer 
		*/
		getWriter?(): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Performs the given read operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		read?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of batchActions  
		* @param batchActions Boolean The new value. 
		*/
		setBatchActions?( batchActions?:boolean ): void;

		/** [Method] Sets the value of batchOrder  
		* @param batchOrder String The new value. 
		*/
		setBatchOrder?( batchOrder?:string ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of model  
		* @param model String/Ext.data.Model The new value. 
		*/
		setModel?( model?:any ): void;

		/** [Method] Sets the value of reader  
		* @param reader Object/String/Ext.data.reader.Reader The new value. 
		*/
		setReader?( reader?:any ): void;

		/** [Method] Sets the value of writer  
		* @param writer Object/String/Ext.data.writer.Writer The new value. 
		*/
		setWriter?( writer?:any ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Performs the given update operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		update?( operation?:Ext.data.operation.IOperation ): void;

	}

}

declare module Ext.data.proxy {
	export interface IRest extends Ext.data.proxy.IAjax {
		/** [Config Option] (Object) */
		actionMethods?: any;
		/** [Config Option] (Boolean) */
		appendId?: boolean;
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		format?: string;
		/** [Method] Specialized version of buildUrl that incorporates the appendId and format options into the generated url  
		* @param request Object 
		* @returns string 
		*/
		buildUrl?( request?:any ): string;

		/** [Method] Returns the value of actionMethods  
		* @returns Object 
		*/
		getActionMethods?(): any;

		/** [Method] Returns the value of appendId  
		* @returns Boolean 
		*/
		getAppendId?(): boolean;

		/** [Method] Returns the value of batchActions  
		* @returns Boolean 
		*/
		getBatchActions?(): boolean;

		/** [Method] Returns the value of format  
		* @returns String 
		*/
		getFormat?(): string;

		/** [Method] Sets the value of actionMethods  
		* @param actionMethods Object The new value. 
		*/
		setActionMethods?( actionMethods?:any ): void;

		/** [Method] Sets the value of appendId  
		* @param appendId Boolean The new value. 
		*/
		setAppendId?( appendId?:boolean ): void;

		/** [Method] Sets the value of batchActions  
		* @param batchActions Boolean The new value. 
		*/
		setBatchActions?( batchActions?:boolean ): void;

		/** [Method] Sets the value of format  
		* @param format String The new value. 
		*/
		setFormat?( format?:string ): void;

	}

}

declare module Ext.data {
	export interface IRestProxy extends Ext.data.proxy.IAjax {
		/** [Config Option] (Object) */
		actionMethods?: any;
		/** [Config Option] (Boolean) */
		appendId?: boolean;
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		format?: string;
		/** [Method] Specialized version of buildUrl that incorporates the appendId and format options into the generated url  
		* @param request Object 
		* @returns string 
		*/
		buildUrl?( request?:any ): string;

		/** [Method] Returns the value of actionMethods  
		* @returns Object 
		*/
		getActionMethods?(): any;

		/** [Method] Returns the value of appendId  
		* @returns Boolean 
		*/
		getAppendId?(): boolean;

		/** [Method] Returns the value of batchActions  
		* @returns Boolean 
		*/
		getBatchActions?(): boolean;

		/** [Method] Returns the value of format  
		* @returns String 
		*/
		getFormat?(): string;

		/** [Method] Sets the value of actionMethods  
		* @param actionMethods Object The new value. 
		*/
		setActionMethods?( actionMethods?:any ): void;

		/** [Method] Sets the value of appendId  
		* @param appendId Boolean The new value. 
		*/
		setAppendId?( appendId?:boolean ): void;

		/** [Method] Sets the value of batchActions  
		* @param batchActions Boolean The new value. 
		*/
		setBatchActions?( batchActions?:boolean ): void;

		/** [Method] Sets the value of format  
		* @param format String The new value. 
		*/
		setFormat?( format?:string ): void;

	}

}

declare module Ext.data.proxy {
	export interface IServer extends Ext.data.proxy.IProxy {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (String) */
		cacheString?: string;
		/** [Config Option] (String) */
		directionParam?: string;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String) */
		filterParam?: string;
		/** [Config Option] (String) */
		groupDirectionParam?: string;
		/** [Config Option] (String) */
		groupParam?: string;
		/** [Config Option] (String) */
		idParam?: string;
		/** [Config Option] (String) */
		limitParam?: string;
		/** [Config Option] (Boolean) */
		noCache?: boolean;
		/** [Config Option] (String) */
		pageParam?: string;
		/** [Config Option] (Boolean) */
		simpleGroupMode?: boolean;
		/** [Config Option] (Boolean) */
		simpleSortMode?: boolean;
		/** [Config Option] (String) */
		sortParam?: string;
		/** [Config Option] (String) */
		startParam?: string;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Optional callback function which can be used to clean up after a request has been completed  
		* @param request Ext.data.Request The Request object 
		* @param success Boolean True if the request was successful 
		*/
		afterRequest?( request?:Ext.data.IRequest, success?:boolean ): void;

		/** [Method] Encode any values being sent to the server  
		* @param value Array An array of sorters/filters. 
		* @returns Object The encoded value 
		*/
		applyEncoding?( value?:any[] ): any;

		/** [Method] Creates an Request object from Operation  
		* @param operation Ext.data.operation.Operation The operation to execute 
		* @returns Ext.data.Request The request object 
		*/
		buildRequest?( operation?:Ext.data.operation.IOperation ): Ext.data.IRequest;

		/** [Method] Generates a url based on a given Ext data Request object  
		* @param request Ext.data.Request The request object 
		* @returns String The url 
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;

		/** [Method] in a ServerProxy all four CRUD operations are executed in the same manner so we delegate to doRequest in each case */
		create?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] In ServerProxy subclasses the create read update and erase methods all pass through to doRequest  
		* @param operation Ext.data.operation.Operation The Ext.data.operation.Operation object 
		* @param callback Function The callback function to call when the Operation has completed 
		* @param scope Object The scope in which to execute the callback 
		*/
		doRequest?( operation?:Ext.data.operation.IOperation, callback?:any, scope?:any ): void;

		/** [Method] Encodes the array of Ext util Filter objects into a string to be sent in the request url  
		* @param filters Ext.util.Filter[] The array of Filter objects 
		* @returns String The encoded filters 
		*/
		encodeFilters?( filters?:Ext.util.IFilter[] ): string;

		/** [Method] Encodes the array of Ext util Sorter objects into a string to be sent in the request url  
		* @param sorters Ext.util.Sorter[] The array of Sorter objects 
		* @param preventArray Boolean Prevents the items from being output as an array. 
		* @returns String The encoded sorters 
		*/
		encodeSorters?( sorters?:Ext.util.ISorter[], preventArray?:boolean ): string;

		/** [Method] Performs the given destroy operation  */
		erase?(): void;

		/** [Method] Returns the value of api  
		* @returns Object 
		*/
		getApi?(): any;

		/** [Method] Returns the value of cacheString  
		* @returns String 
		*/
		getCacheString?(): string;

		/** [Method] Returns the value of directionParam  
		* @returns String 
		*/
		getDirectionParam?(): string;

		/** [Method] Returns the value of extraParams  
		* @returns Object 
		*/
		getExtraParams?(): any;

		/** [Method] Returns the value of filterParam  
		* @returns String 
		*/
		getFilterParam?(): string;

		/** [Method] Returns the value of groupDirectionParam  
		* @returns String 
		*/
		getGroupDirectionParam?(): string;

		/** [Method] Returns the value of groupParam  
		* @returns String 
		*/
		getGroupParam?(): string;

		/** [Method] Returns the value of idParam  
		* @returns String 
		*/
		getIdParam?(): string;

		/** [Method] Returns the value of limitParam  
		* @returns String 
		*/
		getLimitParam?(): string;

		/** [Method] Returns the value of noCache  
		* @returns Boolean 
		*/
		getNoCache?(): boolean;

		/** [Method] Returns the value of pageParam  
		* @returns String 
		*/
		getPageParam?(): string;

		/** [Method] Returns the value of simpleGroupMode  
		* @returns Boolean 
		*/
		getSimpleGroupMode?(): boolean;

		/** [Method] Returns the value of simpleSortMode  
		* @returns Boolean 
		*/
		getSimpleSortMode?(): boolean;

		/** [Method] Returns the value of sortParam  
		* @returns String 
		*/
		getSortParam?(): string;

		/** [Method] Returns the value of startParam  
		* @returns String 
		*/
		getStartParam?(): string;

		/** [Method] Returns the value of timeout  
		* @returns Number 
		*/
		getTimeout?(): number;

		/** [Method] Performs the given read operation  */
		read?(): void;

		/** [Method] Sets the value of api  
		* @param api Object The new value. 
		*/
		setApi?( api?:any ): void;

		/** [Method] Sets the value of cacheString  
		* @param cacheString String The new value. 
		*/
		setCacheString?( cacheString?:string ): void;

		/** [Method] Sets the value of directionParam  
		* @param directionParam String The new value. 
		*/
		setDirectionParam?( directionParam?:string ): void;

		/** [Method] Sets a value in the underlying extraParams  
		* @param name String The key for the new value 
		* @param value Object The value 
		*/
		setExtraParam?( name?:string, value?:any ): void;

		/** [Method] Sets the value of extraParams  
		* @param extraParams Object The new value. 
		*/
		setExtraParams?( extraParams?:any ): void;

		/** [Method] Sets the value of filterParam  
		* @param filterParam String The new value. 
		*/
		setFilterParam?( filterParam?:string ): void;

		/** [Method] Sets the value of groupDirectionParam  
		* @param groupDirectionParam String The new value. 
		*/
		setGroupDirectionParam?( groupDirectionParam?:string ): void;

		/** [Method] Sets the value of groupParam  
		* @param groupParam String The new value. 
		*/
		setGroupParam?( groupParam?:string ): void;

		/** [Method] Sets the value of idParam  
		* @param idParam String The new value. 
		*/
		setIdParam?( idParam?:string ): void;

		/** [Method] Sets the value of limitParam  
		* @param limitParam String The new value. 
		*/
		setLimitParam?( limitParam?:string ): void;

		/** [Method] Sets the value of noCache  
		* @param noCache Boolean The new value. 
		*/
		setNoCache?( noCache?:boolean ): void;

		/** [Method] Sets the value of pageParam  
		* @param pageParam String The new value. 
		*/
		setPageParam?( pageParam?:string ): void;

		/** [Method] Sets the value of simpleGroupMode  
		* @param simpleGroupMode Boolean The new value. 
		*/
		setSimpleGroupMode?( simpleGroupMode?:boolean ): void;

		/** [Method] Sets the value of simpleSortMode  
		* @param simpleSortMode Boolean The new value. 
		*/
		setSimpleSortMode?( simpleSortMode?:boolean ): void;

		/** [Method] Sets the value of sortParam  
		* @param sortParam String The new value. 
		*/
		setSortParam?( sortParam?:string ): void;

		/** [Method] Sets the value of startParam  
		* @param startParam String The new value. 
		*/
		setStartParam?( startParam?:string ): void;

		/** [Method] Sets the value of timeout  
		* @param timeout Number The new value. 
		*/
		setTimeout?( timeout?:number ): void;

		/** [Method] Sets the value of url  
		* @param url String The new value. 
		*/
		setUrl?( url?:string ): void;

		/** [Method] Performs the given update operation  */
		update?(): void;

	}

}

declare module Ext.data {
	export interface IServerProxy extends Ext.data.proxy.IProxy {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (String) */
		cacheString?: string;
		/** [Config Option] (String) */
		directionParam?: string;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String) */
		filterParam?: string;
		/** [Config Option] (String) */
		groupDirectionParam?: string;
		/** [Config Option] (String) */
		groupParam?: string;
		/** [Config Option] (String) */
		idParam?: string;
		/** [Config Option] (String) */
		limitParam?: string;
		/** [Config Option] (Boolean) */
		noCache?: boolean;
		/** [Config Option] (String) */
		pageParam?: string;
		/** [Config Option] (Boolean) */
		simpleGroupMode?: boolean;
		/** [Config Option] (Boolean) */
		simpleSortMode?: boolean;
		/** [Config Option] (String) */
		sortParam?: string;
		/** [Config Option] (String) */
		startParam?: string;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Optional callback function which can be used to clean up after a request has been completed  
		* @param request Ext.data.Request The Request object 
		* @param success Boolean True if the request was successful 
		*/
		afterRequest?( request?:Ext.data.IRequest, success?:boolean ): void;

		/** [Method] Encode any values being sent to the server  
		* @param value Array An array of sorters/filters. 
		* @returns Object The encoded value 
		*/
		applyEncoding?( value?:any[] ): any;

		/** [Method] Creates an Request object from Operation  
		* @param operation Ext.data.operation.Operation The operation to execute 
		* @returns Ext.data.Request The request object 
		*/
		buildRequest?( operation?:Ext.data.operation.IOperation ): Ext.data.IRequest;

		/** [Method] Generates a url based on a given Ext data Request object  
		* @param request Ext.data.Request The request object 
		* @returns String The url 
		*/
		buildUrl?( request?:Ext.data.IRequest ): string;

		/** [Method] in a ServerProxy all four CRUD operations are executed in the same manner so we delegate to doRequest in each case */
		create?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] In ServerProxy subclasses the create read update and erase methods all pass through to doRequest  
		* @param operation Ext.data.operation.Operation The Ext.data.operation.Operation object 
		* @param callback Function The callback function to call when the Operation has completed 
		* @param scope Object The scope in which to execute the callback 
		*/
		doRequest?( operation?:Ext.data.operation.IOperation, callback?:any, scope?:any ): void;

		/** [Method] Encodes the array of Ext util Filter objects into a string to be sent in the request url  
		* @param filters Ext.util.Filter[] The array of Filter objects 
		* @returns String The encoded filters 
		*/
		encodeFilters?( filters?:Ext.util.IFilter[] ): string;

		/** [Method] Encodes the array of Ext util Sorter objects into a string to be sent in the request url  
		* @param sorters Ext.util.Sorter[] The array of Sorter objects 
		* @param preventArray Boolean Prevents the items from being output as an array. 
		* @returns String The encoded sorters 
		*/
		encodeSorters?( sorters?:Ext.util.ISorter[], preventArray?:boolean ): string;

		/** [Method] Performs the given destroy operation  */
		erase?(): void;

		/** [Method] Returns the value of api  
		* @returns Object 
		*/
		getApi?(): any;

		/** [Method] Returns the value of cacheString  
		* @returns String 
		*/
		getCacheString?(): string;

		/** [Method] Returns the value of directionParam  
		* @returns String 
		*/
		getDirectionParam?(): string;

		/** [Method] Returns the value of extraParams  
		* @returns Object 
		*/
		getExtraParams?(): any;

		/** [Method] Returns the value of filterParam  
		* @returns String 
		*/
		getFilterParam?(): string;

		/** [Method] Returns the value of groupDirectionParam  
		* @returns String 
		*/
		getGroupDirectionParam?(): string;

		/** [Method] Returns the value of groupParam  
		* @returns String 
		*/
		getGroupParam?(): string;

		/** [Method] Returns the value of idParam  
		* @returns String 
		*/
		getIdParam?(): string;

		/** [Method] Returns the value of limitParam  
		* @returns String 
		*/
		getLimitParam?(): string;

		/** [Method] Returns the value of noCache  
		* @returns Boolean 
		*/
		getNoCache?(): boolean;

		/** [Method] Returns the value of pageParam  
		* @returns String 
		*/
		getPageParam?(): string;

		/** [Method] Returns the value of simpleGroupMode  
		* @returns Boolean 
		*/
		getSimpleGroupMode?(): boolean;

		/** [Method] Returns the value of simpleSortMode  
		* @returns Boolean 
		*/
		getSimpleSortMode?(): boolean;

		/** [Method] Returns the value of sortParam  
		* @returns String 
		*/
		getSortParam?(): string;

		/** [Method] Returns the value of startParam  
		* @returns String 
		*/
		getStartParam?(): string;

		/** [Method] Returns the value of timeout  
		* @returns Number 
		*/
		getTimeout?(): number;

		/** [Method] Performs the given read operation  */
		read?(): void;

		/** [Method] Sets the value of api  
		* @param api Object The new value. 
		*/
		setApi?( api?:any ): void;

		/** [Method] Sets the value of cacheString  
		* @param cacheString String The new value. 
		*/
		setCacheString?( cacheString?:string ): void;

		/** [Method] Sets the value of directionParam  
		* @param directionParam String The new value. 
		*/
		setDirectionParam?( directionParam?:string ): void;

		/** [Method] Sets a value in the underlying extraParams  
		* @param name String The key for the new value 
		* @param value Object The value 
		*/
		setExtraParam?( name?:string, value?:any ): void;

		/** [Method] Sets the value of extraParams  
		* @param extraParams Object The new value. 
		*/
		setExtraParams?( extraParams?:any ): void;

		/** [Method] Sets the value of filterParam  
		* @param filterParam String The new value. 
		*/
		setFilterParam?( filterParam?:string ): void;

		/** [Method] Sets the value of groupDirectionParam  
		* @param groupDirectionParam String The new value. 
		*/
		setGroupDirectionParam?( groupDirectionParam?:string ): void;

		/** [Method] Sets the value of groupParam  
		* @param groupParam String The new value. 
		*/
		setGroupParam?( groupParam?:string ): void;

		/** [Method] Sets the value of idParam  
		* @param idParam String The new value. 
		*/
		setIdParam?( idParam?:string ): void;

		/** [Method] Sets the value of limitParam  
		* @param limitParam String The new value. 
		*/
		setLimitParam?( limitParam?:string ): void;

		/** [Method] Sets the value of noCache  
		* @param noCache Boolean The new value. 
		*/
		setNoCache?( noCache?:boolean ): void;

		/** [Method] Sets the value of pageParam  
		* @param pageParam String The new value. 
		*/
		setPageParam?( pageParam?:string ): void;

		/** [Method] Sets the value of simpleGroupMode  
		* @param simpleGroupMode Boolean The new value. 
		*/
		setSimpleGroupMode?( simpleGroupMode?:boolean ): void;

		/** [Method] Sets the value of simpleSortMode  
		* @param simpleSortMode Boolean The new value. 
		*/
		setSimpleSortMode?( simpleSortMode?:boolean ): void;

		/** [Method] Sets the value of sortParam  
		* @param sortParam String The new value. 
		*/
		setSortParam?( sortParam?:string ): void;

		/** [Method] Sets the value of startParam  
		* @param startParam String The new value. 
		*/
		setStartParam?( startParam?:string ): void;

		/** [Method] Sets the value of timeout  
		* @param timeout Number The new value. 
		*/
		setTimeout?( timeout?:number ): void;

		/** [Method] Sets the value of url  
		* @param url String The new value. 
		*/
		setUrl?( url?:string ): void;

		/** [Method] Performs the given update operation  */
		update?(): void;

	}

}

declare module Ext.data.proxy {
	export interface ISessionStorage extends Ext.data.proxy.IWebStorage {
	}

}

declare module Ext.data {
	export interface ISessionStorageProxy extends Ext.data.proxy.IWebStorage {
	}

}

declare module Ext.data.proxy {
	export interface ISql extends Ext.data.proxy.IClient {
		/** [Config Option] (String) */
		database?: string;
		/** [Config Option] (String) */
		table?: string;
		/** [Method] Performs the given create operation  
		* @param operation Object 
		* @param callback Object 
		* @param scope Object 
		*/
		create?( operation?:any, callback?:any, scope?:any ): void;

		/** [Method] Performs the given destroy operation  
		* @param operation Object 
		* @param callback Object 
		* @param scope Object 
		*/
		erase?( operation?:any, callback?:any, scope?:any ): void;

		/** [Method] Returns the value of columns  
		* @returns String 
		*/
		getColumns?(): string;

		/** [Method] Returns the value of database  
		* @returns String 
		*/
		getDatabase?(): string;

		/** [Method] Returns the value of defaultDateFormat  
		* @returns String 
		*/
		getDefaultDateFormat?(): string;

		/** [Method] Formats the data for each record before sending it to the server  
		* @param record Object The record that we are writing to the server. 
		* @returns Object An object literal of name/value keys to be written to the server. By default this method returns the data property on the record. 
		*/
		getRecordData?( record?:any ): any;

		/** [Method] Returns the value of table  
		* @returns String 
		*/
		getTable?(): string;

		/** [Method] Returns the value of tableExists  
		* @returns Boolean 
		*/
		getTableExists?(): boolean;

		/** [Method] Returns the value of uniqueIdStrategy  
		* @returns Boolean 
		*/
		getUniqueIdStrategy?(): boolean;

		/** [Method] Performs the given read operation  
		* @param operation Object 
		* @param callback Object 
		* @param scope Object 
		*/
		read?( operation?:any, callback?:any, scope?:any ): void;

		/** [Method] Sets the value of columns  
		* @param columns String The new value. 
		*/
		setColumns?( columns?:string ): void;

		/** [Method] Sets the value of database  
		* @param database String The new value. 
		*/
		setDatabase?( database?:string ): void;

		/** [Method] Sets the value of defaultDateFormat  
		* @param defaultDateFormat String The new value. 
		*/
		setDefaultDateFormat?( defaultDateFormat?:string ): void;

		/** [Method] Sets the value of table  
		* @param table String The new value. 
		*/
		setTable?( table?:string ): void;

		/** [Method] Sets the value of tableExists  
		* @param tableExists Boolean The new value. 
		*/
		setTableExists?( tableExists?:boolean ): void;

		/** [Method] Sets the value of uniqueIdStrategy  
		* @param uniqueIdStrategy Boolean The new value. 
		*/
		setUniqueIdStrategy?( uniqueIdStrategy?:boolean ): void;

		/** [Method] Performs the given update operation  
		* @param operation Object 
		* @param callback Object 
		* @param scope Object 
		*/
		update?( operation?:any, callback?:any, scope?:any ): void;

	}

}

declare module Ext.data.proxy {
	export interface IWebStorage extends Ext.data.proxy.IClient {
		/** [Config Option] (String) */
		id?: string;
		/** [Property] (Object) */
		cache?: any;

		/** [Method] Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the storage o  */
		clear?(): void;

		/** [Method] Performs the given create operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		create?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Performs the given destroy operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		erase?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Returns the value of id  
		* @returns String 
		*/
		getId?(): string;

		/** [Method] Performs the given read operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		read?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Sets the value of id  
		* @param id String The new value. 
		*/
		setId?( id?:string ): void;

		/** [Method] Saves the given record in the Proxy  
		* @param record Ext.data.Model The model instance 
		* @param id String The id to save the record under (defaults to the value of the record's getId() function) 
		*/
		setRecord?( record?:Ext.data.IModel, id?:string ): void;

		/** [Method] Performs the given update operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		update?( operation?:Ext.data.operation.IOperation ): void;

	}

}

declare module Ext.data {
	export interface IWebStorageProxy extends Ext.data.proxy.IClient {
		/** [Config Option] (String) */
		id?: string;
		/** [Property] (Object) */
		cache?: any;

		/** [Method] Destroys all records stored in the proxy and removes all keys and values used to support the proxy from the storage o  */
		clear?(): void;

		/** [Method] Performs the given create operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		create?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Performs the given destroy operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		erase?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Returns the value of id  
		* @returns String 
		*/
		getId?(): string;

		/** [Method] Performs the given read operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		read?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Sets the value of id  
		* @param id String The new value. 
		*/
		setId?( id?:string ): void;

		/** [Method] Saves the given record in the Proxy  
		* @param record Ext.data.Model The model instance 
		* @param id String The id to save the record under (defaults to the value of the record's getId() function) 
		*/
		setRecord?( record?:Ext.data.IModel, id?:string ): void;

		/** [Method] Performs the given update operation  
		* @param operation Ext.data.operation.Operation The Operation to perform 
		*/
		update?( operation?:Ext.data.operation.IOperation ): void;

	}

}

declare module Ext.data {
	export interface IProxyStore extends Ext.data.IAbstractStore {
		/** [Config Option] (Boolean/Object) */
		autoLoad?: any;
		/** [Config Option] (Boolean) */
		autoSync?: boolean;
		/** [Config Option] (String) */
		batchUpdateMode?: string;
		/** [Config Option] (Object[]) */
		fields?: any[];
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
		/** [Config Option] (Boolean) */
		sortOnLoad?: boolean;
		/** [Config Option] (Boolean) */
		trackRemoved?: boolean;
		/** [Property] (Object) */
		lastOptions?: any;

		/** [Property] (Ext.data.Model[]) */
		removed?: Ext.data.IModel[];

		/** [Method] Returns the value of autoLoad  
		* @returns Boolean/Object 
		*/
		getAutoLoad?(): any;

		/** [Method] Returns the value of autoSync  
		* @returns Boolean 
		*/
		getAutoSync?(): boolean;

		/** [Method] Returns the value of batchUpdateMode  
		* @returns String 
		*/
		getBatchUpdateMode?(): string;

		/** [Method] Returns the value of fields  
		* @returns Object[] 
		*/
		getFields?(): any[];

		/** [Method] Returns the value of model  
		* @returns String/Ext.data.Model 
		*/
		getModel?(): any;

		/** [Method] Gets all records added or updated since the last commit  
		* @returns Ext.data.Model[] The added and updated Model instances 
		*/
		getModifiedRecords?(): Ext.data.IModel[];

		/** [Method] Returns all Model instances that are either currently a phantom e g  
		* @returns Ext.data.Model[] The Model instances 
		*/
		getNewRecords?(): Ext.data.IModel[];

		/** [Method] Returns the value of proxy  
		* @returns String/Ext.data.proxy.Proxy/Object 
		*/
		getProxy?(): any;

		/** [Method] Returns any records that have been removed from the store but not yet destroyed on the proxy  
		* @returns Ext.data.Model[] The removed Model instances 
		*/
		getRemovedRecords?(): Ext.data.IModel[];

		/** [Method] Returns the value of sortOnLoad  
		* @returns Boolean 
		*/
		getSortOnLoad?(): boolean;

		/** [Method] Returns the total number of Model instances that the Proxy indicates exist  
		* @returns Number The total number of Model instances available via the Proxy. 0 returned if no value has been set via the reader. 
		*/
		getTotalCount?(): number;

		/** [Method] Returns the value of trackRemoved  
		* @returns Boolean 
		*/
		getTrackRemoved?(): boolean;

		/** [Method] Returns all valid non phantom Model instances that have been updated in the Store but not yet synchronized with the 
		* @returns Ext.data.Model[] The updated Model instances 
		*/
		getUpdatedRecords?(): Ext.data.IModel[];

		/** [Method] Returns true if the Store has been loaded  
		* @returns Boolean true if the Store has been loaded. 
		*/
		isLoaded?(): boolean;

		/** [Method] Returns true if the Store is currently performing a load operation 
		* @returns Boolean true if the Store is currently loading 
		*/
		isLoading?(): boolean;

		/** [Method] Loads the Store using its configured proxy  
		* @param options Object config object. This is passed into the Operation object that is created and then sent to the proxy's Ext.data.proxy.Proxy.read function 
		* @returns Ext.data.Store this 
		*/
		load?( options?:any ): Ext.data.IStore;

		/** [Method] Reloads the store using the last options passed to the load method  
		* @param options Object A config object which contains options which may override the options passed to the previous load call. See the load method for valid configs. 
		*/
		reload?( options?:any ): void;

		/** [Method] Removes all records from the store  */
		removeAll?(): void;

		/** [Method] Resumes automatically syncing the Store with its Proxy  
		* @param syncNow Boolean Pass true to synchronize now. Only synchronizes with the Proxy if the suspension count has gone to zero (We are not under a higher level of suspension) 
		*/
		resumeAutoSync?( syncNow?:boolean ): void;

		/** [Method] Saves all pending changes via the configured proxy  */
		save?(): void;

		/** [Method] Sets the value of autoLoad  
		* @param autoLoad Boolean/Object The new value. 
		*/
		setAutoLoad?( autoLoad?:any ): void;

		/** [Method] Sets the value of autoSync  
		* @param autoSync Boolean The new value. 
		*/
		setAutoSync?( autoSync?:boolean ): void;

		/** [Method] Sets the value of batchUpdateMode  
		* @param batchUpdateMode String The new value. 
		*/
		setBatchUpdateMode?( batchUpdateMode?:string ): void;

		/** [Method] Sets the value of fields  
		* @param fields Object[] The new value. 
		*/
		setFields?( fields?:any[] ): void;

		/** [Method] Sets the value of model  
		* @param model String/Ext.data.Model The new value. 
		*/
		setModel?( model?:any ): void;

		/** [Method] Sets the value of proxy  
		* @param proxy String/Ext.data.proxy.Proxy/Object The new value. 
		*/
		setProxy?( proxy?:any ): void;

		/** [Method] Sets the value of sortOnLoad  
		* @param sortOnLoad Boolean The new value. 
		*/
		setSortOnLoad?( sortOnLoad?:boolean ): void;

		/** [Method] Sets the value of trackRemoved  
		* @param trackRemoved Boolean The new value. 
		*/
		setTrackRemoved?( trackRemoved?:boolean ): void;

		/** [Method] Suspends automatically syncing the Store with its Proxy  */
		suspendAutoSync?(): void;

		/** [Method] Synchronizes the store with its proxy  
		* @param options Object Object containing one or more properties supported by the sync method (these get passed along to the underlying proxy's batch method): 
		* @returns Ext.data.Store this 
		*/
		sync?( options?:any ): Ext.data.IStore;

	}

}

declare module Ext.data.reader {
	export interface IArray extends Ext.data.reader.IJson {
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Method] Returns the value of successProperty  
		* @returns Object 
		*/
		getSuccessProperty?(): any;

		/** [Method] Returns the value of totalProperty  
		* @returns Object 
		*/
		getTotalProperty?(): any;

		/** [Method] Sets the value of successProperty  
		* @param successProperty Object The new value. 
		*/
		setSuccessProperty?( successProperty?:any ): void;

		/** [Method] Sets the value of totalProperty  
		* @param totalProperty Object The new value. 
		*/
		setTotalProperty?( totalProperty?:any ): void;

	}

}

declare module Ext.data {
	export interface IArrayReader extends Ext.data.reader.IJson {
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Method] Returns the value of successProperty  
		* @returns Object 
		*/
		getSuccessProperty?(): any;

		/** [Method] Returns the value of totalProperty  
		* @returns Object 
		*/
		getTotalProperty?(): any;

		/** [Method] Sets the value of successProperty  
		* @param successProperty Object The new value. 
		*/
		setSuccessProperty?( successProperty?:any ): void;

		/** [Method] Sets the value of totalProperty  
		* @param totalProperty Object The new value. 
		*/
		setTotalProperty?( totalProperty?:any ): void;

	}

}

declare module Ext.data.reader {
	export interface IJson extends Ext.data.reader.IReader {
		/** [Config Option] (String) */
		metaProperty?: string;
		/** [Config Option] (Boolean) */
		preserveRawData?: boolean;
		/** [Config Option] (String) */
		record?: string;
		/** [Config Option] (Boolean) */
		useSimpleAccessors?: boolean;
		/** [Method] Returns the value of metaProperty  
		* @returns String 
		*/
		getMetaProperty?(): string;

		/** [Method] Returns the value of preserveRawData  
		* @returns Boolean 
		*/
		getPreserveRawData?(): boolean;

		/** [Method] Returns the value of record  
		* @returns String 
		*/
		getRecord?(): string;

		/** [Method] inherit docs 
		* @param response Object 
		* @returns Object The extracted data from the response. For example, a JSON object or an XML document. 
		*/
		getResponseData?( response?:any ): any;

		/** [Method] Returns the value of useSimpleAccessors  
		* @returns Boolean 
		*/
		getUseSimpleAccessors?(): boolean;

		/** [Method] Reads a JSON object and returns a ResultSet  
		* @param data Object The raw JSON data 
		* @param readOptions Object See read for details. 
		* @returns Ext.data.ResultSet A ResultSet containing model instances and meta data about the results 
		*/
		readRecords?( data?:any, readOptions?:any ): Ext.data.IResultSet;

		/** [Method] Sets the value of metaProperty  
		* @param metaProperty String The new value. 
		*/
		setMetaProperty?( metaProperty?:string ): void;

		/** [Method] Sets the value of preserveRawData  
		* @param preserveRawData Boolean The new value. 
		*/
		setPreserveRawData?( preserveRawData?:boolean ): void;

		/** [Method] Sets the value of record  
		* @param record String The new value. 
		*/
		setRecord?( record?:string ): void;

		/** [Method] Sets the value of useSimpleAccessors  
		* @param useSimpleAccessors Boolean The new value. 
		*/
		setUseSimpleAccessors?( useSimpleAccessors?:boolean ): void;

	}

}

declare module Ext.data {
	export interface IJsonReader extends Ext.data.reader.IReader {
		/** [Config Option] (String) */
		metaProperty?: string;
		/** [Config Option] (Boolean) */
		preserveRawData?: boolean;
		/** [Config Option] (String) */
		record?: string;
		/** [Config Option] (Boolean) */
		useSimpleAccessors?: boolean;
		/** [Method] Returns the value of metaProperty  
		* @returns String 
		*/
		getMetaProperty?(): string;

		/** [Method] Returns the value of preserveRawData  
		* @returns Boolean 
		*/
		getPreserveRawData?(): boolean;

		/** [Method] Returns the value of record  
		* @returns String 
		*/
		getRecord?(): string;

		/** [Method] inherit docs 
		* @param response Object 
		* @returns Object The extracted data from the response. For example, a JSON object or an XML document. 
		*/
		getResponseData?( response?:any ): any;

		/** [Method] Returns the value of useSimpleAccessors  
		* @returns Boolean 
		*/
		getUseSimpleAccessors?(): boolean;

		/** [Method] Reads a JSON object and returns a ResultSet  
		* @param data Object The raw JSON data 
		* @param readOptions Object See read for details. 
		* @returns Ext.data.ResultSet A ResultSet containing model instances and meta data about the results 
		*/
		readRecords?( data?:any, readOptions?:any ): Ext.data.IResultSet;

		/** [Method] Sets the value of metaProperty  
		* @param metaProperty String The new value. 
		*/
		setMetaProperty?( metaProperty?:string ): void;

		/** [Method] Sets the value of preserveRawData  
		* @param preserveRawData Boolean The new value. 
		*/
		setPreserveRawData?( preserveRawData?:boolean ): void;

		/** [Method] Sets the value of record  
		* @param record String The new value. 
		*/
		setRecord?( record?:string ): void;

		/** [Method] Sets the value of useSimpleAccessors  
		* @param useSimpleAccessors Boolean The new value. 
		*/
		setUseSimpleAccessors?( useSimpleAccessors?:boolean ): void;

	}

}

declare module Ext.data.reader {
	export interface IReader extends Ext.IBase, Ext.mixin.IObservable, Ext.mixin.IFactoryable {
		/** [Config Option] (Boolean) */
		implicitIncludes?: boolean;
		/** [Config Option] (Boolean) */
		keepRawData?: boolean;
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Boolean) */
		readRecordsOnFailure?: boolean;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Config Option] (Function|Object) */
		transform?: any;
		/** [Config Option] (String) */
		typeProperty?: string;
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Boolean) */
		isReader?: boolean;

		/** [Property] (Object) */
		metaData?: any;

		/** [Property] (Object) */
		rawData?: any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] This method provides a hook to do any data transformation before the reading process begins  
		* @param data Object The data object 
		* @returns Object The normalized data object 
		*/
		getData?( data?:any ): any;

		/** [Method] Returns the value of implicitIncludes  
		* @returns Boolean 
		*/
		getImplicitIncludes?(): boolean;

		/** [Method] Returns the value of keepRawData  
		* @returns Boolean 
		*/
		getKeepRawData?(): boolean;

		/** [Method] Returns the value of messageProperty  
		* @returns String 
		*/
		getMessageProperty?(): string;

		/** [Method] Returns the value of model  
		* @returns String/Ext.data.Model 
		*/
		getModel?(): any;

		/** [Method] Returns the value of readRecordsOnFailure  
		* @returns Boolean 
		*/
		getReadRecordsOnFailure?(): boolean;

		/** [Method] Takes a raw response object as passed to the read method and returns the useful data segment from it  
		* @param response Object The response object 
		* @returns Object The extracted data from the response. For example, a JSON object or an XML document. 
		*/
		getResponseData?( response?:any ): any;

		/** [Method] Returns the value of rootProperty  
		* @returns String 
		*/
		getRootProperty?(): string;

		/** [Method] Returns the value of successProperty  
		* @returns String 
		*/
		getSuccessProperty?(): string;

		/** [Method] Returns the value of totalProperty  
		* @returns String 
		*/
		getTotalProperty?(): string;

		/** [Method] Returns the value of transform  
		* @returns Function|Object 
		*/
		getTransform?(): any;

		/** [Method] Returns the value of typeProperty  
		* @returns String 
		*/
		getTypeProperty?(): string;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Reads the given response object  
		* @param response Object The response object. This may be either an XMLHttpRequest object or a plain JS object 
		* @param readOptions Object Various options that instruct the reader on how to read the data 
		* @returns Ext.data.ResultSet The parsed or default ResultSet object 
		*/
		read?( response?:any, readOptions?:any ): Ext.data.IResultSet;

		/** [Method] Abstracts common functionality used by all Reader subclasses  
		* @param data Object The raw data object 
		* @param readOptions Object See read for details. 
		* @returns Ext.data.ResultSet A ResultSet object 
		*/
		readRecords?( data?:any, readOptions?:any ): Ext.data.IResultSet;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of implicitIncludes  
		* @param implicitIncludes Boolean The new value. 
		*/
		setImplicitIncludes?( implicitIncludes?:boolean ): void;

		/** [Method] Sets the value of keepRawData  
		* @param keepRawData Boolean The new value. 
		*/
		setKeepRawData?( keepRawData?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of messageProperty  
		* @param messageProperty String The new value. 
		*/
		setMessageProperty?( messageProperty?:string ): void;

		/** [Method] Sets the value of model  
		* @param model String/Ext.data.Model The new value. 
		*/
		setModel?( model?:any ): void;

		/** [Method] Sets the value of readRecordsOnFailure  
		* @param readRecordsOnFailure Boolean The new value. 
		*/
		setReadRecordsOnFailure?( readRecordsOnFailure?:boolean ): void;

		/** [Method] Sets the value of rootProperty  
		* @param rootProperty String The new value. 
		*/
		setRootProperty?( rootProperty?:string ): void;

		/** [Method] Sets the value of successProperty  
		* @param successProperty String The new value. 
		*/
		setSuccessProperty?( successProperty?:string ): void;

		/** [Method] Sets the value of totalProperty  
		* @param totalProperty String The new value. 
		*/
		setTotalProperty?( totalProperty?:string ): void;

		/** [Method] Sets the value of transform  
		* @param transform Function|Object The new value. 
		*/
		setTransform?( transform?:any ): void;

		/** [Method] Sets the value of typeProperty  
		* @param typeProperty String The new value. 
		*/
		setTypeProperty?( typeProperty?:string ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.data {
	export interface IReader extends Ext.IBase, Ext.mixin.IObservable, Ext.mixin.IFactoryable {
		/** [Config Option] (Boolean) */
		implicitIncludes?: boolean;
		/** [Config Option] (Boolean) */
		keepRawData?: boolean;
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Boolean) */
		readRecordsOnFailure?: boolean;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Config Option] (Function|Object) */
		transform?: any;
		/** [Config Option] (String) */
		typeProperty?: string;
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Boolean) */
		isReader?: boolean;

		/** [Property] (Object) */
		metaData?: any;

		/** [Property] (Object) */
		rawData?: any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] This method provides a hook to do any data transformation before the reading process begins  
		* @param data Object The data object 
		* @returns Object The normalized data object 
		*/
		getData?( data?:any ): any;

		/** [Method] Returns the value of implicitIncludes  
		* @returns Boolean 
		*/
		getImplicitIncludes?(): boolean;

		/** [Method] Returns the value of keepRawData  
		* @returns Boolean 
		*/
		getKeepRawData?(): boolean;

		/** [Method] Returns the value of messageProperty  
		* @returns String 
		*/
		getMessageProperty?(): string;

		/** [Method] Returns the value of model  
		* @returns String/Ext.data.Model 
		*/
		getModel?(): any;

		/** [Method] Returns the value of readRecordsOnFailure  
		* @returns Boolean 
		*/
		getReadRecordsOnFailure?(): boolean;

		/** [Method] Takes a raw response object as passed to the read method and returns the useful data segment from it  
		* @param response Object The response object 
		* @returns Object The extracted data from the response. For example, a JSON object or an XML document. 
		*/
		getResponseData?( response?:any ): any;

		/** [Method] Returns the value of rootProperty  
		* @returns String 
		*/
		getRootProperty?(): string;

		/** [Method] Returns the value of successProperty  
		* @returns String 
		*/
		getSuccessProperty?(): string;

		/** [Method] Returns the value of totalProperty  
		* @returns String 
		*/
		getTotalProperty?(): string;

		/** [Method] Returns the value of transform  
		* @returns Function|Object 
		*/
		getTransform?(): any;

		/** [Method] Returns the value of typeProperty  
		* @returns String 
		*/
		getTypeProperty?(): string;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Reads the given response object  
		* @param response Object The response object. This may be either an XMLHttpRequest object or a plain JS object 
		* @param readOptions Object Various options that instruct the reader on how to read the data 
		* @returns Ext.data.ResultSet The parsed or default ResultSet object 
		*/
		read?( response?:any, readOptions?:any ): Ext.data.IResultSet;

		/** [Method] Abstracts common functionality used by all Reader subclasses  
		* @param data Object The raw data object 
		* @param readOptions Object See read for details. 
		* @returns Ext.data.ResultSet A ResultSet object 
		*/
		readRecords?( data?:any, readOptions?:any ): Ext.data.IResultSet;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of implicitIncludes  
		* @param implicitIncludes Boolean The new value. 
		*/
		setImplicitIncludes?( implicitIncludes?:boolean ): void;

		/** [Method] Sets the value of keepRawData  
		* @param keepRawData Boolean The new value. 
		*/
		setKeepRawData?( keepRawData?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of messageProperty  
		* @param messageProperty String The new value. 
		*/
		setMessageProperty?( messageProperty?:string ): void;

		/** [Method] Sets the value of model  
		* @param model String/Ext.data.Model The new value. 
		*/
		setModel?( model?:any ): void;

		/** [Method] Sets the value of readRecordsOnFailure  
		* @param readRecordsOnFailure Boolean The new value. 
		*/
		setReadRecordsOnFailure?( readRecordsOnFailure?:boolean ): void;

		/** [Method] Sets the value of rootProperty  
		* @param rootProperty String The new value. 
		*/
		setRootProperty?( rootProperty?:string ): void;

		/** [Method] Sets the value of successProperty  
		* @param successProperty String The new value. 
		*/
		setSuccessProperty?( successProperty?:string ): void;

		/** [Method] Sets the value of totalProperty  
		* @param totalProperty String The new value. 
		*/
		setTotalProperty?( totalProperty?:string ): void;

		/** [Method] Sets the value of transform  
		* @param transform Function|Object The new value. 
		*/
		setTransform?( transform?:any ): void;

		/** [Method] Sets the value of typeProperty  
		* @param typeProperty String The new value. 
		*/
		setTypeProperty?( typeProperty?:string ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.data {
	export interface IDataReader extends Ext.IBase, Ext.mixin.IObservable, Ext.mixin.IFactoryable {
		/** [Config Option] (Boolean) */
		implicitIncludes?: boolean;
		/** [Config Option] (Boolean) */
		keepRawData?: boolean;
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Boolean) */
		readRecordsOnFailure?: boolean;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Config Option] (Function|Object) */
		transform?: any;
		/** [Config Option] (String) */
		typeProperty?: string;
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Boolean) */
		isReader?: boolean;

		/** [Property] (Object) */
		metaData?: any;

		/** [Property] (Object) */
		rawData?: any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] This method provides a hook to do any data transformation before the reading process begins  
		* @param data Object The data object 
		* @returns Object The normalized data object 
		*/
		getData?( data?:any ): any;

		/** [Method] Returns the value of implicitIncludes  
		* @returns Boolean 
		*/
		getImplicitIncludes?(): boolean;

		/** [Method] Returns the value of keepRawData  
		* @returns Boolean 
		*/
		getKeepRawData?(): boolean;

		/** [Method] Returns the value of messageProperty  
		* @returns String 
		*/
		getMessageProperty?(): string;

		/** [Method] Returns the value of model  
		* @returns String/Ext.data.Model 
		*/
		getModel?(): any;

		/** [Method] Returns the value of readRecordsOnFailure  
		* @returns Boolean 
		*/
		getReadRecordsOnFailure?(): boolean;

		/** [Method] Takes a raw response object as passed to the read method and returns the useful data segment from it  
		* @param response Object The response object 
		* @returns Object The extracted data from the response. For example, a JSON object or an XML document. 
		*/
		getResponseData?( response?:any ): any;

		/** [Method] Returns the value of rootProperty  
		* @returns String 
		*/
		getRootProperty?(): string;

		/** [Method] Returns the value of successProperty  
		* @returns String 
		*/
		getSuccessProperty?(): string;

		/** [Method] Returns the value of totalProperty  
		* @returns String 
		*/
		getTotalProperty?(): string;

		/** [Method] Returns the value of transform  
		* @returns Function|Object 
		*/
		getTransform?(): any;

		/** [Method] Returns the value of typeProperty  
		* @returns String 
		*/
		getTypeProperty?(): string;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Reads the given response object  
		* @param response Object The response object. This may be either an XMLHttpRequest object or a plain JS object 
		* @param readOptions Object Various options that instruct the reader on how to read the data 
		* @returns Ext.data.ResultSet The parsed or default ResultSet object 
		*/
		read?( response?:any, readOptions?:any ): Ext.data.IResultSet;

		/** [Method] Abstracts common functionality used by all Reader subclasses  
		* @param data Object The raw data object 
		* @param readOptions Object See read for details. 
		* @returns Ext.data.ResultSet A ResultSet object 
		*/
		readRecords?( data?:any, readOptions?:any ): Ext.data.IResultSet;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of implicitIncludes  
		* @param implicitIncludes Boolean The new value. 
		*/
		setImplicitIncludes?( implicitIncludes?:boolean ): void;

		/** [Method] Sets the value of keepRawData  
		* @param keepRawData Boolean The new value. 
		*/
		setKeepRawData?( keepRawData?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of messageProperty  
		* @param messageProperty String The new value. 
		*/
		setMessageProperty?( messageProperty?:string ): void;

		/** [Method] Sets the value of model  
		* @param model String/Ext.data.Model The new value. 
		*/
		setModel?( model?:any ): void;

		/** [Method] Sets the value of readRecordsOnFailure  
		* @param readRecordsOnFailure Boolean The new value. 
		*/
		setReadRecordsOnFailure?( readRecordsOnFailure?:boolean ): void;

		/** [Method] Sets the value of rootProperty  
		* @param rootProperty String The new value. 
		*/
		setRootProperty?( rootProperty?:string ): void;

		/** [Method] Sets the value of successProperty  
		* @param successProperty String The new value. 
		*/
		setSuccessProperty?( successProperty?:string ): void;

		/** [Method] Sets the value of totalProperty  
		* @param totalProperty String The new value. 
		*/
		setTotalProperty?( totalProperty?:string ): void;

		/** [Method] Sets the value of transform  
		* @param transform Function|Object The new value. 
		*/
		setTransform?( transform?:any ): void;

		/** [Method] Sets the value of typeProperty  
		* @param typeProperty String The new value. 
		*/
		setTypeProperty?( typeProperty?:string ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.data.reader {
	export interface IXml extends Ext.data.reader.IReader {
		/** [Config Option] (String) */
		namespace?: string;
		/** [Config Option] (String) */
		record?: string;
		/** [Property] (Object) */
		xmlData?: any;

		/** [Method] Normalizes the data object  
		* @param data Object The raw data object 
		* @returns Object The documentElement property of the data object if present, or the same object if not. 
		*/
		getData?( data?:any ): any;

		/** [Method] Returns the value of namespace  
		* @returns String 
		*/
		getNamespace?(): string;

		/** [Method] Returns the value of record  
		* @returns String 
		*/
		getRecord?(): string;

		/** [Method] inherit docs 
		* @param response Object 
		* @returns Object The extracted data from the response. For example, a JSON object or an XML document. 
		*/
		getResponseData?( response?:any ): any;

		/** [Method] Parses an XML document and returns a ResultSet containing the model instances  
		* @param doc Object Parsed XML document 
		* @param readOptions Object See read for details. 
		* @returns Ext.data.ResultSet The parsed result set 
		*/
		readRecords?( doc?:any, readOptions?:any ): Ext.data.IResultSet;

		/** [Method] Sets the value of namespace  
		* @param namespace String The new value. 
		*/
		setNamespace?( namespace?:string ): void;

		/** [Method] Sets the value of record  
		* @param record String The new value. 
		*/
		setRecord?( record?:string ): void;

	}

}

declare module Ext.data {
	export interface IXmlReader extends Ext.data.reader.IReader {
		/** [Config Option] (String) */
		namespace?: string;
		/** [Config Option] (String) */
		record?: string;
		/** [Property] (Object) */
		xmlData?: any;

		/** [Method] Normalizes the data object  
		* @param data Object The raw data object 
		* @returns Object The documentElement property of the data object if present, or the same object if not. 
		*/
		getData?( data?:any ): any;

		/** [Method] Returns the value of namespace  
		* @returns String 
		*/
		getNamespace?(): string;

		/** [Method] Returns the value of record  
		* @returns String 
		*/
		getRecord?(): string;

		/** [Method] inherit docs 
		* @param response Object 
		* @returns Object The extracted data from the response. For example, a JSON object or an XML document. 
		*/
		getResponseData?( response?:any ): any;

		/** [Method] Parses an XML document and returns a ResultSet containing the model instances  
		* @param doc Object Parsed XML document 
		* @param readOptions Object See read for details. 
		* @returns Ext.data.ResultSet The parsed result set 
		*/
		readRecords?( doc?:any, readOptions?:any ): Ext.data.IResultSet;

		/** [Method] Sets the value of namespace  
		* @param namespace String The new value. 
		*/
		setNamespace?( namespace?:string ): void;

		/** [Method] Sets the value of record  
		* @param record String The new value. 
		*/
		setRecord?( record?:string ): void;

	}

}

declare module Ext.data {
	export interface IRequest extends Ext.IBase {
		/** [Config Option] (String) */
		action?: string;
		/** [Config Option] (Boolean) */
		binary?: boolean;
		/** [Config Option] (String) */
		callbackKey?: string;
		/** [Config Option] (Boolean) */
		disableCaching?: boolean;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (Object) */
		jsonData?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Ext.data.operation.Operation) */
		operation?: Ext.data.operation.IOperation;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Ext.data.proxy.Proxy) */
		proxy?: Ext.data.proxy.IProxy;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
		/** [Config Option] (Object) */
		xmlData?: any;
		/** [Method] Returns the value of action  
		* @returns String 
		*/
		getAction?(): string;

		/** [Method] Returns the value of args  
		* @returns Object 
		*/
		getArgs?(): any;

		/** [Method] Returns the value of binary  
		* @returns Boolean 
		*/
		getBinary?(): boolean;

		/** [Method] Returns the value of callback  
		* @returns Object 
		*/
		getCallback?(): any;

		/** [Method] Returns the value of callbackKey  
		* @returns String 
		*/
		getCallbackKey?(): string;

		/** [Method] Returns the value of directFn  
		* @returns Object 
		*/
		getDirectFn?(): any;

		/** [Method] Returns the value of disableCaching  
		* @returns Boolean 
		*/
		getDisableCaching?(): boolean;

		/** [Method] Returns the value of headers  
		* @returns Object 
		*/
		getHeaders?(): any;

		/** [Method] Returns the value of jsonData  
		* @returns Object 
		*/
		getJsonData?(): any;

		/** [Method] Returns the value of method  
		* @returns String 
		*/
		getMethod?(): string;

		/** [Method] Returns the value of operation  
		* @returns Ext.data.operation.Operation 
		*/
		getOperation?(): Ext.data.operation.IOperation;

		/** [Method] Gets a single param from the params  
		* @param key String The key for the param. 
		* @returns Object The value for the param. undefined if it does not exist. 
		*/
		getParam?( key?:string ): any;

		/** [Method] Returns the value of params  
		* @returns Object 
		*/
		getParams?(): any;

		/** [Method] Returns the value of password  
		* @returns String 
		*/
		getPassword?(): string;

		/** [Method] Returns the value of proxy  
		* @returns Ext.data.proxy.Proxy 
		*/
		getProxy?(): Ext.data.proxy.IProxy;

		/** [Method] Returns the value of records  
		* @returns Object 
		*/
		getRecords?(): any;

		/** [Method] Returns the value of scope  
		* @returns Object 
		*/
		getScope?(): any;

		/** [Method] Returns the value of timeout  
		* @returns Number 
		*/
		getTimeout?(): number;

		/** [Method] Returns the value of url  
		* @returns String 
		*/
		getUrl?(): string;

		/** [Method] Returns the value of useDefaultXhrHeader  
		* @returns Object 
		*/
		getUseDefaultXhrHeader?(): any;

		/** [Method] Returns the value of username  
		* @returns String 
		*/
		getUsername?(): string;

		/** [Method] Returns the value of withCredentials  
		* @returns Boolean 
		*/
		getWithCredentials?(): boolean;

		/** [Method] Returns the value of xmlData  
		* @returns Object 
		*/
		getXmlData?(): any;

		/** [Method] Sets the value of action  
		* @param action String The new value. 
		*/
		setAction?( action?:string ): void;

		/** [Method] Sets the value of args  
		* @param args Object The new value. 
		*/
		setArgs?( args?:any ): void;

		/** [Method] Sets the value of binary  
		* @param binary Boolean The new value. 
		*/
		setBinary?( binary?:boolean ): void;

		/** [Method] Sets the value of callback  
		* @param callback Object The new value. 
		*/
		setCallback?( callback?:any ): void;

		/** [Method] Sets the value of callbackKey  
		* @param callbackKey String The new value. 
		*/
		setCallbackKey?( callbackKey?:string ): void;

		/** [Method] Sets the value of directFn  
		* @param directFn Object The new value. 
		*/
		setDirectFn?( directFn?:any ): void;

		/** [Method] Sets the value of disableCaching  
		* @param disableCaching Boolean The new value. 
		*/
		setDisableCaching?( disableCaching?:boolean ): void;

		/** [Method] Sets the value of headers  
		* @param headers Object The new value. 
		*/
		setHeaders?( headers?:any ): void;

		/** [Method] Sets the value of jsonData  
		* @param jsonData Object The new value. 
		*/
		setJsonData?( jsonData?:any ): void;

		/** [Method] Sets the value of method  
		* @param method String The new value. 
		*/
		setMethod?( method?:string ): void;

		/** [Method] Sets the value of operation  
		* @param operation Ext.data.operation.Operation The new value. 
		*/
		setOperation?( operation?:Ext.data.operation.IOperation ): void;

		/** [Method] Sets a single param value in the params  
		* @param key String The key to set. 
		* @param value Object The value to set. 
		*/
		setParam?( key?:string, value?:any ): void;

		/** [Method] Sets the value of params  
		* @param params Object The new value. 
		*/
		setParams?( params?:any ): void;

		/** [Method] Sets the value of password  
		* @param password String The new value. 
		*/
		setPassword?( password?:string ): void;

		/** [Method] Sets the value of proxy  
		* @param proxy Ext.data.proxy.Proxy The new value. 
		*/
		setProxy?( proxy?:Ext.data.proxy.IProxy ): void;

		/** [Method] Sets the value of records  
		* @param records Object The new value. 
		*/
		setRecords?( records?:any ): void;

		/** [Method] Sets the value of scope  
		* @param scope Object The new value. 
		*/
		setScope?( scope?:any ): void;

		/** [Method] Sets the value of timeout  
		* @param timeout Number The new value. 
		*/
		setTimeout?( timeout?:number ): void;

		/** [Method] Sets the value of url  
		* @param url String The new value. 
		*/
		setUrl?( url?:string ): void;

		/** [Method] Sets the value of useDefaultXhrHeader  
		* @param useDefaultXhrHeader Object The new value. 
		*/
		setUseDefaultXhrHeader?( useDefaultXhrHeader?:any ): void;

		/** [Method] Sets the value of username  
		* @param username String The new value. 
		*/
		setUsername?( username?:string ): void;

		/** [Method] Sets the value of withCredentials  
		* @param withCredentials Boolean The new value. 
		*/
		setWithCredentials?( withCredentials?:boolean ): void;

		/** [Method] Sets the value of xmlData  
		* @param xmlData Object The new value. 
		*/
		setXmlData?( xmlData?:any ): void;

	}

}

declare module Ext.data {
	export interface IResultSet extends Ext.IBase {
		/** [Config Option] (Number) */
		count?: number;
		/** [Config Option] (Boolean) */
		loaded?: boolean;
		/** [Config Option] (String) */
		message?: string;
		/** [Config Option] (Ext.data.Model[]/Object[]) */
		records?: any;
		/** [Config Option] (Boolean) */
		success?: boolean;
		/** [Config Option] (Number) */
		total?: number;
		/** [Property] (Boolean) */
		isResultSet?: boolean;

		/** [Method] Returns the value of loaded  
		* @returns Boolean 
		*/
		getLoaded?(): boolean;

		/** [Method] Returns the value of message  
		* @returns String 
		*/
		getMessage?(): string;

		/** [Method] Returns the value of records  
		* @returns Ext.data.Model[]/Object[] 
		*/
		getRecords?(): any;

		/** [Method] Returns the value of success  
		* @returns Boolean 
		*/
		getSuccess?(): boolean;

		/** [Method] Returns the value of total  
		* @returns Number 
		*/
		getTotal?(): number;

		/** [Method] Sets the value of count  
		* @param count Number The new value. 
		*/
		setCount?( count?:number ): void;

		/** [Method] Sets the value of loaded  
		* @param loaded Boolean The new value. 
		*/
		setLoaded?( loaded?:boolean ): void;

		/** [Method] Sets the value of message  
		* @param message String The new value. 
		*/
		setMessage?( message?:string ): void;

		/** [Method] Sets the value of records  
		* @param records Ext.data.Model[]/Object[] The new value. 
		*/
		setRecords?( records?:any ): void;

		/** [Method] Sets the value of success  
		* @param success Boolean The new value. 
		*/
		setSuccess?( success?:boolean ): void;

		/** [Method] Sets the value of total  
		* @param total Number The new value. 
		*/
		setTotal?( total?:number ): void;

	}

}

declare module Ext.data.schema {
	export interface IAssociation extends Ext.IBase {
		/** [Config Option] (String) */
		name?: string;
		/** [Property] (Ext.Class) */
		definedBy?: Ext.IClass;

		/** [Property] (Ext.data.field.Field) */
		field?: Ext.data.field.IField;

		/** [Property] (Ext.data.schema.Role) */
		left?: Ext.data.schema.IRole;

		/** [Property] (Boolean) */
		nullable?: boolean;

		/** [Property] (Object) */
		owner?: any;

		/** [Property] (Ext.data.schema.Role) */
		right?: Ext.data.schema.IRole;

		/** [Property] (Ext.data.schema.Schema) */
		schema?: Ext.data.schema.ISchema;

	}

}

declare module Ext.data.schema {
	export interface IManyToMany extends Ext.data.schema.IAssociation {
	}

}

declare module Ext.data.schema {
	export interface IManyToOne extends Ext.data.schema.IAssociation {
	}

}

declare module Ext.data.schema {
	export interface INamer extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Method] Given the name of a foreign key field return the role of the related entity  
		* @param name Object 
		*/
		fieldRole?( name?:any ): void;

		/** [Method] Returns the name for a one to many association given the left and right type and the associating role  
		* @param leftType Object 
		* @param leftRole Object 
		* @param rightType Object 
		* @param rightRole Object 
		*/
		manyToOne?( leftType?:any, leftRole?:any, rightType?:any, rightRole?:any ): void;

	}

}

declare module Ext.data.schema {
	export interface IOneToOne extends Ext.data.schema.IAssociation {
	}

}

declare module Ext.data.schema {
	export interface IRole extends Ext.IBase {
		/** [Property] (Ext.data.schema.Association) */
		association?: Ext.data.schema.IAssociation;

		/** [Property] (Ext.Class) */
		cls?: Ext.IClass;

		/** [Property] (Ext.data.schema.Role) */
		inverse?: Ext.data.schema.IRole;

		/** [Property] (Boolean) */
		isMany?: boolean;

		/** [Property] (Boolean) */
		left?: boolean;

		/** [Property] (Boolean) */
		owner?: boolean;

		/** [Property] (String) */
		role?: string;

		/** [Property] (String) */
		side?: string;

		/** [Property] (String) */
		type?: string;

	}

}

declare module Ext.data.schema {
	export interface ISchema extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Config Option] (Object) */
		defaultIdentifier?: any;
		/** [Config Option] (String/Object/Ext.data.schema.Namer) */
		namer?: any;
		/** [Config Option] (String) */
		namespace?: string;
		/** [Config Option] (Object/Ext.util.ObjectTemplate) */
		proxy?: any;
		/** [Config Option] (String) */
		urlPrefix?: string;
		/** [Property] (Number) */
		assocCount?: number;

		/** [Property] (Number) */
		entityCount?: number;

		/** [Property] (String) */
		type?: string;

		/** [Method] Adds an entry from a matrix config declared by an entity  
		* @param entityType Ext.Class A class derived from Ext.data.Model. 
		* @param matrixName String The name of the matrix association. 
		* @param relation String A base name for the matrix. For information about the meaning of this see Ext.data.schema.ManyToMany. 
		* @param left Object The descriptor for the "left" of the matrix. 
		* @param right Object The descriptor for the "right" of the matrix. 
		*/
		addMatrix?( entityType?:Ext.IClass, matrixName?:string, relation?:string, left?:any, right?:any ): void;

		/** [Method] Adds a reference field association for an entity to this schema  
		* @param entityType Ext.Class A class derived from Ext.data.Model. 
		* @param referenceField Ext.data.field.Field The field with the reference config. 
		* @param association String The name of the association. If empty or null, this will be derived from entityType, role, inverse and referenceField.unique. 
		* @param role String The name of the relationship from entityType to the target type. If not specified, the default is the referenceField.name (minus any "Id" suffix if present). 
		* @param inverse String The name of the relationship from the target type to the entityType. If not specified, this is derived from the entityName of the entityType (singularized or pluralized based on referenceField.unique). 
		* @param type String The entityName of the target of the reference. 
		* @param descr Object The reference descriptor from the referenceField if one was given in the field definition. 
		* @param unique Boolean Indicates if the reference is one-to-one. 
		*/
		addReference?( entityType?:Ext.IClass, referenceField?:Ext.data.field.IField, association?:string, role?:string, inverse?:string, type?:string, descr?:any, unique?:boolean ): void;

		/** [Method] Returns an Association by name  
		* @param name String The name of the association. 
		* @returns Ext.data.schema.Association The association instance. 
		*/
		getAssociation?( name?:string ): Ext.data.schema.IAssociation;

		/** [Method] Returns the value of defaultIdentifier  
		* @returns Object 
		*/
		getDefaultIdentifier?(): any;

		/** [Method] Returns an entity by name  
		* @param name String The name of the entity 
		* @returns Ext.data.Model The entity class. 
		*/
		getEntity?( name?:string ): Ext.data.IModel;

		/** [Method] Get the entity name taking into account the namespace  
		* @param cls String/Ext.data.Model The model class or name of the class. 
		* @returns String The entity name 
		*/
		getEntityName?( cls?:any ): string;

		/** [Method] Returns the value of namer  
		* @returns String/Object/Ext.data.schema.Namer 
		*/
		getNamer?(): any;

		/** [Method] Returns the value of namespace  
		* @returns String 
		*/
		getNamespace?(): string;

		/** [Method] Returns the value of proxy  
		* @returns Object/Ext.util.ObjectTemplate 
		*/
		getProxy?(): any;

		/** [Method] Returns the value of urlPrefix  
		* @returns String 
		*/
		getUrlPrefix?(): string;

		/** [Method] Checks if the passed entity has attached associations that need to be read when using nested loading  
		* @param The String/Ext.Class/Ext.data.Model name, instance or Model class. 
		* @returns Boolean true if there are associations attached to the entity. 
		*/
		hasAssociations?( The?:any ): boolean;

		/** [Method] Checks if an entity is defined 
		* @param entity String/Ext.data.Model The name or model 
		* @returns Boolean True if this entity is defined 
		*/
		hasEntity?( entity?:any ): boolean;

		/** [Method] Sets the value of defaultIdentifier  
		* @param defaultIdentifier Object The new value. 
		*/
		setDefaultIdentifier?( defaultIdentifier?:any ): void;

		/** [Method] Sets the value of namer  
		* @param namer String/Object/Ext.data.schema.Namer The new value. 
		*/
		setNamer?( namer?:any ): void;

		/** [Method] Sets the value of namespace  
		* @param namespace String The new value. 
		*/
		setNamespace?( namespace?:string ): void;

		/** [Method] Sets the value of proxy  
		* @param proxy Object/Ext.util.ObjectTemplate The new value. 
		*/
		setProxy?( proxy?:any ): void;

		/** [Method] Sets the value of urlPrefix  
		* @param urlPrefix String The new value. 
		*/
		setUrlPrefix?( urlPrefix?:string ): void;

	}
	export class Schema {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Returns the Schema instance given its id or config object  
		* @param config String/Object The id, type or config object of the schema. 
		* @returns Ext.data.schema.Schema The previously existing or newly created instance. 
		*/
		static get( config?:any ): Ext.data.schema.ISchema;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.data.session {
	export interface IBatchVisitor extends Ext.IBase {
	}

}

declare module Ext.data.session {
	export interface IChangesVisitor extends Ext.IBase {
	}

}

declare module Ext.data.session {
	export interface IChildChangesVisitor extends Ext.data.session.IChangesVisitor {
	}

}

declare module Ext.data {
	export interface ISession extends Ext.IBase {
		/** [Config Option] (Boolean) */
		autoDestroy?: boolean;
		/** [Config Option] (Ext.data.Session) */
		parent?: Ext.data.ISession;
		/** [Config Option] (String/Ext.data.schema.Schema) */
		schema?: any;
		/** [Method] Adds an existing record instance to the session  
		* @param record Ext.data.Model The record to adopt. 
		*/
		adopt?( record?:Ext.data.IModel ): void;

		/** [Method] Marks the session as clean by calling Ext data Model commit on each record that is known to the session  */
		commit?(): void;

		/** [Method] Creates a new record and tracks it in this session  
		* @param type String/Ext.Class The entityName or the actual class of record to create. 
		* @param data Object The data for the record. 
		* @returns Ext.data.Model The new record. 
		*/
		createRecord?( type?:any, data?:any ): Ext.data.IModel;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of autoDestroy  
		* @returns Boolean 
		*/
		getAutoDestroy?(): boolean;

		/** [Method] Returns an object describing all of the modified fields created or dropped records and many to many association chan  
		* @returns Object An object in the CRUD format (see the intro docs). null if there are no changes. 
		*/
		getChanges?(): any;

		/** [Method] The same functionality as getChanges however we also take into account our parent session  
		* @returns Object An object in the CRUD format (see the intro docs). null if there are no changes. 
		*/
		getChangesForParent?(): any;

		/** [Method] Returns the value of crudProperties  
		* @returns Object 
		*/
		getCrudProperties?(): any;

		/** [Method] Transforms a list of ids into a list of records for a particular type  
		* @param entityType Ext.Class The entity type. 
		* @param ids Object[] The ids to transform. 
		* @returns Ext.data.Model[] The models corresponding to the ids. 
		*/
		getEntityList?( entityType?:Ext.IClass, ids?:any[] ): Ext.data.IModel[];

		/** [Method] Gets a user friendly identifier for a Model  
		* @param entityType Ext.Class The entity type. 
		* @param id Object The id of the entity. 
		* @returns String The identifier. 
		*/
		getModelIdentifier?( entityType?:Ext.IClass, id?:any ): string;

		/** [Method] Returns the value of parent  
		* @returns Ext.data.Session 
		*/
		getParent?(): Ext.data.ISession;

		/** [Method] Get a cached record from the session  
		* @param type String/Ext.Class The entityName or the actual class of record to create. 
		* @param id Object The id of the record. 
		* @param autoLoad Boolean/Object false to prevent the record from being loaded if it does not exist. If this parameter is an object, it will be passed to the Ext.data.Model.load call. 
		* @returns Ext.data.Model The record. 
		*/
		getRecord?( type?:any, id?:any, autoLoad?:any ): Ext.data.IModel;

		/** [Method] Returns an Ext data Batch containing the Ext data operation Operation instances that are needed to save all of the ch  
		* @param sort Boolean Pass false to disable the batch operation sort. 
		* @returns Ext.data.Batch 
		*/
		getSaveBatch?( sort?:boolean ): Ext.data.IBatch;

		/** [Method] Returns the value of schema  
		* @returns String/Ext.data.schema.Schema 
		*/
		getSchema?(): any;

		/** [Method] Triggered when an associated item from update references a record that does not exist in the session  
		* @param entityType Ext.Class The entity type. 
		* @param id Object The id of the model. 
		*/
		onInvalidAssociationEntity?( entityType?:Ext.IClass, id?:any ): void;

		/** [Method] Triggered when an drop block from update tries to create a record that already exists  
		* @param entityType Ext.Class The entity type. 
		* @param id Object The id of the model. 
		*/
		onInvalidEntityCreate?( entityType?:Ext.IClass, id?:any ): void;

		/** [Method] Triggered when an drop block from update references a record that does not exist in the session  
		* @param entityType Ext.Class The entity type. 
		* @param id Object The id of the model. 
		*/
		onInvalidEntityDrop?( entityType?:Ext.IClass, id?:any ): void;

		/** [Method] Triggered when an drop block from update tries to create a record that already exists  
		* @param entityType Ext.Class The entity type. 
		* @param id Object The id of the model. 
		*/
		onInvalidEntityRead?( entityType?:Ext.IClass, id?:any ): void;

		/** [Method] Triggered when an update block from update references a record that does not exist in the session  
		* @param entityType Ext.Class The entity type. 
		* @param id Object The id of the model. 
		* @param dropped Boolean true if the record was dropped. 
		*/
		onInvalidEntityUpdate?( entityType?:Ext.IClass, id?:any, dropped?:boolean ): void;

		/** [Method] Gets an existing record from the session  
		* @param type String/Ext.Class The entityName or the actual class of record to create. 
		* @param id Object The id of the record. 
		* @param deep Boolean true to consult 
		* @returns Ext.data.Model The record, null if it does not exist. 
		*/
		peekRecord?( type?:any, id?:any, deep?:boolean ): Ext.data.IModel;

		/** [Method] Save any changes in this session to a parent session  */
		save?(): void;

		/** [Method] Sets the value of autoDestroy  
		* @param autoDestroy Boolean The new value. 
		*/
		setAutoDestroy?( autoDestroy?:boolean ): void;

		/** [Method] Sets the value of crudProperties  
		* @param crudProperties Object The new value. 
		*/
		setCrudProperties?( crudProperties?:any ): void;

		/** [Method] Sets the value of parent  
		* @param parent Ext.data.Session The new value. 
		*/
		setParent?( parent?:Ext.data.ISession ): void;

		/** [Method] Sets the value of schema  
		* @param schema String/Ext.data.schema.Schema The new value. 
		*/
		setSchema?( schema?:any ): void;

		/** [Method] Create a child session with this session as the parent  
		* @returns Ext.data.Session The copied session. 
		*/
		spawn?(): Ext.data.ISession;

		/** [Method] Complete a bulk update for this session  
		* @param data Object Data in the CRUD format (see the intro docs). 
		*/
		update?( data?:any ): void;

		/** [Method] Walks the internal data tracked by this session and calls methods on the provided visitor object  
		* @param visitor Object 
		* @returns Object The visitor instance 
		*/
		visitData?( visitor?:any ): any;

	}

}

declare module Ext.data.soap {
	export interface IProxy extends Ext.data.proxy.IAjax {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Ext.XTemplate/Array) */
		createBodyTpl?: any;
		/** [Config Option] (Ext.XTemplate/Array) */
		destroyBodyTpl?: any;
		/** [Config Option] (Array) */
		envelopeTpl?: any[];
		/** [Config Option] (String) */
		operationParam?: string;
		/** [Config Option] (Ext.XTemplate/Array) */
		readBodyTpl?: any;
		/** [Config Option] (Object/String/Ext.data.soap.Reader) */
		reader?: any;
		/** [Config Option] (Object) */
		soapAction?: any;
		/** [Config Option] (String) */
		targetNamespace?: string;
		/** [Config Option] (Ext.XTemplate/Array) */
		updateBodyTpl?: any;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (Ext.XTemplate/Array) */
		writeBodyTpl?: any;
		/** [Property] (Object) */
		actionMethods?: any;

		/** [Method] Returns the value of createBodyTpl  
		* @returns Ext.XTemplate/Array 
		*/
		getCreateBodyTpl?(): any;

		/** [Method] Returns the value of destroyBodyTpl  
		* @returns Ext.XTemplate/Array 
		*/
		getDestroyBodyTpl?(): any;

		/** [Method] Returns the value of envelopeTpl  
		* @returns Array 
		*/
		getEnvelopeTpl?(): any[];

		/** [Method] Returns the value of operationParam  
		* @returns String 
		*/
		getOperationParam?(): string;

		/** [Method] Returns the value of readBodyTpl  
		* @returns Ext.XTemplate/Array 
		*/
		getReadBodyTpl?(): any;

		/** [Method] Returns the value of reader  
		* @returns Object/String/Ext.data.soap.Reader 
		*/
		getReader?(): any;

		/** [Method] Returns the value of soapAction  
		* @returns Object 
		*/
		getSoapAction?(): any;

		/** [Method] Returns the value of targetNamespace  
		* @returns String 
		*/
		getTargetNamespace?(): string;

		/** [Method] Returns the value of updateBodyTpl  
		* @returns Ext.XTemplate/Array 
		*/
		getUpdateBodyTpl?(): any;

		/** [Method] Returns the value of url  
		* @returns String 
		*/
		getUrl?(): string;

		/** [Method] Returns the value of writeBodyTpl  
		* @returns Ext.XTemplate/Array 
		*/
		getWriteBodyTpl?(): any;

		/** [Method] Sets the value of createBodyTpl  
		* @param createBodyTpl Ext.XTemplate/Array The new value. 
		*/
		setCreateBodyTpl?( createBodyTpl?:any ): void;

		/** [Method] Sets the value of destroyBodyTpl  
		* @param destroyBodyTpl Ext.XTemplate/Array The new value. 
		*/
		setDestroyBodyTpl?( destroyBodyTpl?:any ): void;

		/** [Method] Sets the value of envelopeTpl  
		* @param envelopeTpl Array The new value. 
		*/
		setEnvelopeTpl?( envelopeTpl?:any[] ): void;

		/** [Method] Sets the value of operationParam  
		* @param operationParam String The new value. 
		*/
		setOperationParam?( operationParam?:string ): void;

		/** [Method] Sets the value of readBodyTpl  
		* @param readBodyTpl Ext.XTemplate/Array The new value. 
		*/
		setReadBodyTpl?( readBodyTpl?:any ): void;

		/** [Method] Sets the value of reader  
		* @param reader Object/String/Ext.data.soap.Reader The new value. 
		*/
		setReader?( reader?:any ): void;

		/** [Method] Sets the value of soapAction  
		* @param soapAction Object The new value. 
		*/
		setSoapAction?( soapAction?:any ): void;

		/** [Method] Sets the value of targetNamespace  
		* @param targetNamespace String The new value. 
		*/
		setTargetNamespace?( targetNamespace?:string ): void;

		/** [Method] Sets the value of updateBodyTpl  
		* @param updateBodyTpl Ext.XTemplate/Array The new value. 
		*/
		setUpdateBodyTpl?( updateBodyTpl?:any ): void;

		/** [Method] Sets the value of url  
		* @param url String The new value. 
		*/
		setUrl?( url?:string ): void;

		/** [Method] Sets the value of writeBodyTpl  
		* @param writeBodyTpl Ext.XTemplate/Array The new value. 
		*/
		setWriteBodyTpl?( writeBodyTpl?:any ): void;

	}

}

declare module Ext.data.soap {
	export interface IReader extends Ext.data.reader.IXml {
		/** [Method] Normalizes the data object  
		* @param data Object 
		* @returns Object The documentElement property of the data object if present, or the same object if not. 
		*/
		getData?( data?:any ): any;

	}

}

declare module Ext.data {
	export interface ISortTypes extends Ext.IBase {
	}
	export class SortTypes {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (RegExp) */
		static stripCommasRe: RegExp;

		/** [Property] (RegExp) */
		static stripTagsRE: RegExp;

		/** [Method] Date sorting 
		* @param s Object The value being converted 
		* @returns Number The comparison value 
		*/
		static asDate( s?:any ): number;

		/** [Method] Float sorting 
		* @param s Object The value being converted 
		* @returns Number The comparison value 
		*/
		static asFloat( s?:any ): number;

		/** [Method] Integer sorting 
		* @param s Object The value being converted 
		* @returns Number The comparison value 
		*/
		static asInt( s?:any ): number;

		/** [Method] Strips all HTML tags to sort on text only 
		* @param s Object The value being converted 
		* @returns String The comparison value 
		*/
		static asText( s?:any ): string;

		/** [Method] Case insensitive string 
		* @param s Object The value being converted 
		* @returns String The comparison value 
		*/
		static asUCString( s?:any ): string;

		/** [Method] Strips all HTML tags to sort on text only  Case insensitive 
		* @param s Object The value being converted 
		* @returns String The comparison value 
		*/
		static asUCText( s?:any ): string;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Default sort that does nothing 
		* @param s Object The value being converted 
		* @returns Object The comparison value 
		*/
		static none( s?:any ): any;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.data {
	export interface IStore extends Ext.data.IProxyStore, Ext.data.ILocalStore {
		/** [Config Option] (Boolean) */
		clearOnPageLoad?: boolean;
		/** [Config Option] (Boolean) */
		clearRemovedOnLoad?: boolean;
		/** [Config Option] (Object[]/Ext.data.Model[]) */
		data?: any;
		/** [Config Option] (Ext.data.Session) */
		session?: Ext.data.ISession;
		/** [Property] (Number) */
		loadCount?: number;

		/** [Method] Adds Model instance to the Store  
		* @param model Ext.data.Model[]/Ext.data.Model.../Object[]/Object... An array of Model instances or Model configuration objects, or variable number of Model instance or config arguments. 
		* @returns Ext.data.Model[] The model instances that were added 
		*/
		add?( model?:any ): Ext.data.IModel[];

		/** [Method] Local sort only Inserts the passed Record into the Store at the index where it should go based on the current sort 
		* @param record Ext.data.Record 
		*/
		addSorted?( record?:Ext.data.IRecord ): void;

		/** [Method] Runs the aggregate function for all the records in the store  
		* @param fn Function The function to execute. The function is called with a single parameter, an array of records for that group. 
		* @param scope Object The scope to execute the function in. Defaults to the store. 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the group average being the value. The grouped parameter is only honored if the store has a groupField. 
		* @param field String The field to get the value from 
		* @returns Object An object literal with the group names and their appropriate values. 
		*/
		aggregate?( fn?:any, scope?:any, grouped?:boolean, field?:string ): any;

		/** [Method] Gets the average value in the store  
		* @param field String The field in each record 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the group average being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Object The average value, if no items exist, 0. 
		*/
		average?( field?:string, grouped?:boolean ): any;

		/** [Method] Collects unique values for a particular dataIndex from this store  
		* @param dataIndex String The property to collect 
		* @param allowNull Boolean Pass true to allow null, undefined or empty string values 
		* @param bypassFilter Boolean Pass true to collect from all records, even ones which are filtered. 
		* @returns Object[] An array of the unique values 
		*/
		collect?( dataIndex?:string, allowNull?:boolean, bypassFilter?:boolean ): any[];

		/** [Method] Commits all Records with outstanding changes  */
		commitChanges?(): void;

		/** [Method] Gets the count of items in the store  
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the count for each group being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Number the count 
		*/
		count?( grouped?:boolean ): number;

		/** [Method] Calls the specified function for each record in the store  
		* @param fn Function The function to call. The Record is passed as the first parameter. Returning false aborts and exits the iteration. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current record in the iteration. 
		*/
		each?( fn?:any, scope?:any ): void;

		/** [Method] Convenience function for getting the first model instance in the store  
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the first record being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Ext.data.Model/undefined The first model instance in the store, or undefined 
		*/
		first?( grouped?:boolean ): any;

		/** [Method] Get the Record with the specified id  
		* @param id Mixed The id of the Record to find. 
		* @returns Ext.data.Model The Record with the passed id. Returns null if not found. 
		*/
		getById?( id?:any ): Ext.data.IModel;

		/** [Method] Get the Record with the specified internalId  
		* @param internalId Mixed The id of the Record to find. 
		* @returns Ext.data.Model The Record with the passed internalId. Returns null if not found. 
		*/
		getByInternalId?( internalId?:any ): Ext.data.IModel;

		/** [Method] Returns the value of clearOnPageLoad  
		* @returns Boolean 
		*/
		getClearOnPageLoad?(): boolean;

		/** [Method] Returns the value of clearRemovedOnLoad  
		* @returns Boolean 
		*/
		getClearRemovedOnLoad?(): boolean;

		/** [Method] Returns the store s records  
		* @returns Ext.util.Collection An Ext.util.Collection of records (an empty Collection if no records are held by the store). 
		*/
		getData?(): Ext.util.ICollection;

		/** [Method] Returns the value of extraKeys  
		* @returns Object 
		*/
		getExtraKeys?(): any;

		/** [Method] Returns all Model instances that are either currently a phantom e g  
		* @returns Ext.data.Model[] The Model instances 
		*/
		getNewRecords?(): Ext.data.IModel[];

		/** [Method] Returns the value of session  
		* @returns Ext.data.Session 
		*/
		getSession?(): Ext.data.ISession;

		/** [Method] Returns all valid non phantom Model instances that have been updated in the Store but not yet synchronized with the 
		* @returns Ext.data.Model[] The updated Model instances 
		*/
		getUpdatedRecords?(): Ext.data.IModel[];

		/** [Method] Get the index of the record within the store  
		* @param record Ext.data.Model The Ext.data.Model object to find. 
		* @returns Number The index of the passed Record. Returns -1 if not found. 
		*/
		indexOf?( record?:Ext.data.IModel ): number;

		/** [Method] Get the index within the store of the Record with the passed id  
		* @param id String The id of the Record to find. 
		* @returns Number The index of the Record. Returns -1 if not found. 
		*/
		indexOfId?( id?:string ): number;

		/** [Method] Inserts Model instances into the Store at the given index and fires the add event  
		* @param index Number The start index at which to insert the passed Records. 
		* @param records Ext.data.Model/Ext.data.Model[]/Object/Object[] An Ext.data.Model instance, the data needed to populate an instance or an array of either of these. 
		* @returns Ext.data.Model[] records The added records 
		*/
		insert?( index?:number, records?:any ): Ext.data.IModel[];

		/** [Method] Convenience function for getting the last model instance in the store  
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the last record being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Ext.data.Model/undefined The last model instance in the store, or undefined 
		*/
		last?( grouped?:boolean ): any;

		/** [Method] Loads data into the Store via the configured proxy  
		* @param options Object/Function config object, passed into the Ext.data.operation.Operation object before loading. Additionally addRecords: true can be specified to add these records to the existing records, default is to remove the Store's existing records first. 
		* @returns Ext.data.Store 
		*/
		load?( options?:any ): Ext.data.IStore;

		/** [Method] Loads an array of data straight into the Store  
		* @param data Ext.data.Model[]/Object[] Array of data to load. Any non-model instances will be cast into model instances first. 
		* @param append Boolean true to add the records to the existing records in the store, false to remove the old ones first. 
		*/
		loadData?( data?:any, append?:boolean ): void;

		/** [Method] Loads a given page of data by setting the start and limit values appropriately  
		* @param page Number The number of the page to load. 
		* @param options Object See options for load. 
		*/
		loadPage?( page?:number, options?:any ): void;

		/** [Method] Loads data via the bound Proxy s reader Use this method if you are attempting to load data and want to utilize the c  
		* @param data Object[] The full JSON object you'd like to load into the Data store. 
		* @param append Boolean true to add the records to the existing records in the store, false to remove the old ones first. 
		* @returns Boolean true if the reader processed the records correctly. See Ext.data.reader.Reader.successProperty. If the reader did not process the records, nothing will be added. 
		*/
		loadRawData?( data?:any[], append?:boolean ): boolean;

		/** [Method] Loads an array of model instances into the store fires the datachanged event  
		* @param records Ext.data.Model[] The array of records to load 
		* @param options Object 
		*/
		loadRecords?( records?:Ext.data.IModel[], options?:any ): void;

		/** [Method] Gets the maximum value in the store  
		* @param field String The field in each record 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the maximum in the group being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Object The maximum value, if no items exist, undefined. 
		*/
		max?( field?:string, grouped?:boolean ): any;

		/** [Method] Gets the minimum value in the store  
		* @param field String The field in each record 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the minimum in the group being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Object The minimum value, if no items exist, undefined. 
		*/
		min?( field?:string, grouped?:boolean ): any;

		/** [Method] Loads the next page in the current data set 
		* @param options Object See options for load 
		*/
		nextPage?( options?:any ): void;

		/** [Method] Loads the previous page in the current data set 
		* @param options Object See options for load 
		*/
		previousPage?( options?:any ): void;

		/** [Method] Query all the cached records in this Store by name value pair  
		* @param property String The property to create the filter function for 
		* @param value String/RegExp The string/regex to compare the property value to 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean true to create a case-sensitive regex. 
		* @param exactMatch Boolean True to force exact match (^ and $ characters added to the regex). Ignored if anyMatch is true. 
		* @returns Ext.util.Collection The matched records 
		*/
		query?( property?:string, value?:any, anyMatch?:boolean, caseSensitive?:boolean, exactMatch?:boolean ): Ext.util.ICollection;

		/** [Method] Query all the cached records in this Store using a filtering function  
		* @param fn Function The function to be called. It will be passed the following parameters: 
		* @param scope Object The scope (this reference) in which the function is executed Defaults to this Store. 
		* @returns Ext.util.Collection The matched records 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.util.ICollection;

		/** [Method] Rejects outstanding changes on all modified records and re insert any records that were removed locally  */
		rejectChanges?(): void;

		/** [Method] Removes the specified record s from the Store firing the remove event for the removed records  
		* @param records Ext.data.Model/Ext.data.Model[]/Number/Number[] Model instance or array of instances to remove or an array of indices from which to remove records. 
		*/
		remove?( records?:any ): void;

		/** [Method] Removes all items from the store  
		* @param silent Boolean Pass true to prevent the clear event from being fired. This method is affected by filtering. 
		* @returns Ext.data.Model[] The removed records. 
		*/
		removeAll?( silent?:boolean ): Ext.data.IModel[];

		/** [Method] Removes the model instance s at the given index 
		* @param index Number The record index 
		* @param count Number The number of records to delete 
		*/
		removeAt?( index?:number, count?:number ): void;

		/** [Method] Sets the value of clearOnPageLoad  
		* @param clearOnPageLoad Boolean The new value. 
		*/
		setClearOnPageLoad?( clearOnPageLoad?:boolean ): void;

		/** [Method] Sets the value of clearRemovedOnLoad  
		* @param clearRemovedOnLoad Boolean The new value. 
		*/
		setClearRemovedOnLoad?( clearRemovedOnLoad?:boolean ): void;

		/** [Method] Loads an array of data directly into the Store  
		* @param data Ext.data.Model[]/Object[] Array of data to load. Any non-model instances will be cast into model instances first. 
		*/
		setData?( data?:any ): void;

		/** [Method] Sets the value of extraKeys  
		* @param extraKeys Object The new value. 
		*/
		setExtraKeys?( extraKeys?:any ): void;

		/** [Method] Sets the value of session  
		* @param session Ext.data.Session The new value. 
		*/
		setSession?( session?:Ext.data.ISession ): void;

		/** [Method] Sums the value of field for each record in store and returns the result  
		* @param field String A field in each record 
		* @param grouped Boolean True to perform the operation for each group in the store. The value returned will be an object literal with the key being the group name and the sum for that group being the value. The grouped parameter is only honored if the store has a groupField. 
		* @returns Number The sum 
		*/
		sum?( field?:string, grouped?:boolean ): number;

	}

}

declare module Ext.data {
	export interface IStoreManager extends Ext.util.IMixedCollection {
	}
	export class StoreManager {
		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isMixedCollection: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Boolean) */
		static isSortable: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Adds an item to the collection  
		* @param key String/Object The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter. 
		* @param obj Object The item to add. Note that when adding a value that is iterable, it must be wrapped in brackets, i.e.: c.add([[1, 2]]);  This will be needed for any value that is iterable, i.e., an array, arguments object, HTML collections, etc. 
		* @returns Object The item added. 
		*/
		static add( key?:any, obj?:any ): any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Adds all elements of an Array or an Object to the collection  
		* @param objs Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if allowFunctions has been set to true. 
		*/
		static addAll( objs?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all items from the collection  */
		static clear(): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] Creates a shallow copy of this collection 
		* @returns Ext.util.MixedCollection 
		*/
		static clone(): Ext.util.IMixedCollection;

		/** [Method] Collects unique values of a particular property in this MixedCollection 
		* @param property String The property to collect on 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param allowBlank Boolean Pass true to allow null, undefined or empty string values 
		* @returns Array The unique values 
		*/
		static collect( property?:string, root?:string, allowBlank?:boolean ): any[];

		/** [Method] Returns true if the collection contains the passed Object as an item  
		* @param o Object The Object to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as an item. 
		*/
		static contains( o?:any ): boolean;

		/** [Method] Returns true if the collection contains the passed Object as a key  
		* @param key String The key to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as a key. 
		*/
		static containsKey( key?:string ): boolean;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Executes the specified function once for every item in the collection  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration. 
		*/
		static each( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		static eachKey( fn?:any, scope?:any ): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Filters the objects in this collection by a set of Filters or by a single property value pair with optional paramete  
		* @param property Ext.util.Filter[]/String A property on your objects, or an array of Filter objects 
		* @param value String/RegExp Either string that the property values should start with or a RegExp to test against the property 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		static filter( property?:any, value?:any, anyMatch?:boolean, caseSensitive?:boolean ): Ext.util.IMixedCollection;

		/** [Method] Filter by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		static filterBy( fn?:any, scope?:any ): Ext.util.IMixedCollection;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  */
		static find(): void;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  
		* @param fn Function The selection function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		* @returns Object The first item in the collection which returned true from the selection function, or null if none was found. 
		*/
		static findBy( fn?:any, scope?:any ): any;

		/** [Method] Finds the index of the first matching object in this collection by a specific property value  
		* @param property String The name of a property on your objects. 
		* @param value String/RegExp A string that the property values should start with or a RegExp to test against the property. 
		* @param start Number The index to start searching at. 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Number The matched index or -1 
		*/
		static findIndex( property?:string, value?:any, start?:number, anyMatch?:boolean, caseSensitive?:boolean ): number;

		/** [Method] Find the index of the first matching object in this collection by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @param start Number The index to start searching at. 
		* @returns Number The matched index or -1 
		*/
		static findIndexBy( fn?:any, scope?:any, start?:number ): number;

		/** [Method] Calculates the insertion index of the new item based upon the comparison function passed or the current sort order  
		* @param newItem Object The new object to find the insertion position of. 
		* @param sorterFn Function The function to sort by. This is the same as the sorting function passed to sortBy. It accepts 2 items from this MixedCollection, and returns -1 0, or 1 depending on the relative sort positions of the 2 compared items. If omitted, a function generated from the currently defined set of sorters will be used. 
		* @returns Number The insertion point to add the new item into this MixedCollection at using insert 
		*/
		static findInsertionIndex( newItem?:any, sorterFn?:any ): number;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the first item in the collection  
		* @returns Object the first item in the collection.. 
		*/
		static first(): any;

		/** [Method] Returns a comparator function which compares two items and returns 1 0 or 1 depending on the currently defined set  */
		static generateComparator(): void;

		/** [Method] Returns the item associated with the passed key OR index  
		* @param key String/Number The key or index of the item. 
		* @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null. 
		*/
		static get( key?:any ): any;

		/** [Method] Returns the item at the specified index  
		* @param index Number The index of the item. 
		* @returns Object The item at the specified index. 
		*/
		static getAt( index?:number ): any;

		/** [Method] Returns the item associated with the passed key  
		* @param key String/Number The key of the item. 
		* @returns Object The item associated with the passed key. 
		*/
		static getByKey( key?:any ): any;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the number of items in the collection  
		* @returns Number the number of items in the collection. 
		*/
		static getCount(): number;

		/** [Method] Gets the first sorter from the sorters collection excluding any groupers that may be in place 
		* @returns Ext.util.Sorter The sorter, null if none exist 
		*/
		static getFirstSorter(): Ext.util.ISorter;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] getKey implementation for MixedCollection 
		* @param o Object 
		* @returns Object The key for the passed item. 
		*/
		static getKey( o?:any ): any;

		/** [Method] Returns a range of items in this collection 
		* @param startIndex Number The starting index. Defaults to 0. 
		* @param endIndex Number The ending index. Defaults to the last item. 
		* @returns Array An array of items 
		*/
		static getRange( startIndex?:number, endIndex?:number ): any[];

		/** [Method] Returns the number of Sorters which apply to this Sortable  */
		static getSorterCount(): void;

		/** [Method] Returns the value of sorters  
		* @returns Ext.util.Sorter[]/Object[] 
		*/
		static getSorters(): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Returns index within the collection of the passed Object  
		* @param o Object The item to find the index of. 
		* @returns Number index of the item. Returns -1 if not found. 
		*/
		static indexOf( o?:any ): number;

		/** [Method] Returns index within the collection of the passed key  
		* @param key String The key to find the index of. 
		* @returns Number index of the key. 
		*/
		static indexOfKey( key?:string ): number;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Inserts an item at the specified index in the collection  
		* @param index Number The index to insert the item at. 
		* @param key String/Object/String[]/Object[] The key to associate with the new item, or the item itself. May also be an array of either to insert multiple items at once. 
		* @param o Object/Object[] If the second parameter was a key, the new item. May also be an array to insert multiple items at once. 
		* @returns Object The item inserted or an array of items inserted. 
		*/
		static insert( index?:number, key?:any, o?:any ): any;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Returns the last item in the collection  
		* @returns Object the last item in the collection.. 
		*/
		static last(): any;

		/** [Method] Gets a registered Store by id 
		* @param store String/Object The id of the Store, or a Store instance, or a store configuration 
		* @returns Ext.data.Store 
		*/
		static lookup( store?:any ): Ext.data.IStore;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Registers one or more Stores with the StoreManager  
		* @param stores Ext.data.Store... Any number of Store instances 
		*/
		static register( stores:Ext.data.IStore ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Remove an item from the collection  
		* @param o Object The item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		static remove( o?:any ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Remove all items in the collection  
		* @param items Array An array of items to be removed. 
		* @returns Ext.util.MixedCollection this object 
		*/
		static removeAll( items?:any[] ): Ext.util.IMixedCollection;

		/** [Method] Remove an item from a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		static removeAt( index?:number ): any;

		/** [Method] Removes an item associated with the passed key fom the collection  
		* @param key String The key of the item to remove. If null is passed, all objects which yielded no key from the configured getKey function are removed. 
		* @returns Object Only returned if removing at a specified key. The item removed or false if no item was removed. 
		*/
		static removeAtKey( key?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Remove a range of items starting at a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @param removeCount Number The nuber of items to remove beginning at the specified index. 
		* @returns Object The last item removed or false if no item was removed. 
		*/
		static removeRange( index?:number, removeCount?:number ): any;

		/** [Method] Reorders each of the items based on a mapping from old index to new index  
		* @param mapping Object Mapping from old item index to new item index 
		*/
		static reorder( mapping?:any ): void;

		/** [Method] Replaces an item in the collection  
		* @param key String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter. 
		* @param o Object {Object} o (optional) If the first parameter passed was a key, the item to associate with that key. 
		* @returns Object The new item. 
		*/
		static replace( key?:string, o?:any ): any;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Sets the value of sorters  
		* @param sorters Ext.util.Sorter[]/Object[] The new value. 
		*/
		static setSorters( sorters?:any ): void;

		/** [Method] Updates the sorters collection and triggers sorting of this Sortable  
		* @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations. 
		* @param direction String The overall direction to sort the data by. 
		* @param insertionPosition String Where to put the new sorter in the collection of sorters. This may take the following values:  replace : This means that the new sorter(s) becomes the sole sorter set for this Sortable. This is the most useful call mode  to programatically sort by multiple fields. prepend : This means that the new sorters are inserted as the primary sorters, unchanged, and the sorter list length must be controlled by the developer. multi : This is mainly useful for implementing intuitive "Sort by this" user interfaces such as the GridPanel's column sorting UI. This mode is only supported when passing a property name and a direction. This means that the new sorter is becomes the primary sorter. If the sorter was already the primary sorter, the direction  of sort is toggled if no direction parameter is specified. The number of sorters maintained is limited by the multiSortLimit configuration. append : This means that the new sorter becomes the last sorter.  
		* @returns Ext.util.Sorter[] The new sorters. 
		*/
		static sort( sorters?:any, direction?:string, insertionPosition?:string ): Ext.util.ISorter[];

		/** [Method] Sorts the collection by a single sorter function 
		* @param sorterFn Function The function to sort by 
		*/
		static sortBy( sorterFn?:any ): void;

		/** [Method] Sorts this collection by keys  
		* @param direction String 'ASC' or 'DESC'. Defaults to 'ASC'. 
		* @param fn Function Comparison function that defines the sort order. Defaults to sorting by case insensitive string. 
		*/
		static sortByKey( direction?:string, fn?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Collects all of the values of the given property and returns their sum 
		* @param property String The property to sum by 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param start Number The record index to start at 
		* @param end Number The record index to end at 
		* @returns Number The total 
		*/
		static sum( property?:string, root?:string, start?:number, end?:number ): number;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Unregisters one or more Stores with the StoreManager 
		* @param stores String/Object... Any number of Store instances or ID-s 
		*/
		static unregister( stores?:any ): void;

		/** [Method] Change the key for an existing item in the collection  
		* @param oldKey Object The old key 
		* @param newKey Object The new key 
		*/
		static updateKey( oldKey?:any, newKey?:any ): void;

	}

}

declare module Ext {
	export interface IStoreMgr extends Ext.util.IMixedCollection {
	}
	export class StoreMgr {
		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isMixedCollection: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Boolean) */
		static isSortable: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Adds an item to the collection  
		* @param key String/Object The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter. 
		* @param obj Object The item to add. Note that when adding a value that is iterable, it must be wrapped in brackets, i.e.: c.add([[1, 2]]);  This will be needed for any value that is iterable, i.e., an array, arguments object, HTML collections, etc. 
		* @returns Object The item added. 
		*/
		static add( key?:any, obj?:any ): any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Adds all elements of an Array or an Object to the collection  
		* @param objs Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if allowFunctions has been set to true. 
		*/
		static addAll( objs?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all items from the collection  */
		static clear(): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] Creates a shallow copy of this collection 
		* @returns Ext.util.MixedCollection 
		*/
		static clone(): Ext.util.IMixedCollection;

		/** [Method] Collects unique values of a particular property in this MixedCollection 
		* @param property String The property to collect on 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param allowBlank Boolean Pass true to allow null, undefined or empty string values 
		* @returns Array The unique values 
		*/
		static collect( property?:string, root?:string, allowBlank?:boolean ): any[];

		/** [Method] Returns true if the collection contains the passed Object as an item  
		* @param o Object The Object to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as an item. 
		*/
		static contains( o?:any ): boolean;

		/** [Method] Returns true if the collection contains the passed Object as a key  
		* @param key String The key to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as a key. 
		*/
		static containsKey( key?:string ): boolean;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Executes the specified function once for every item in the collection  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration. 
		*/
		static each( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		static eachKey( fn?:any, scope?:any ): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Filters the objects in this collection by a set of Filters or by a single property value pair with optional paramete  
		* @param property Ext.util.Filter[]/String A property on your objects, or an array of Filter objects 
		* @param value String/RegExp Either string that the property values should start with or a RegExp to test against the property 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		static filter( property?:any, value?:any, anyMatch?:boolean, caseSensitive?:boolean ): Ext.util.IMixedCollection;

		/** [Method] Filter by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		static filterBy( fn?:any, scope?:any ): Ext.util.IMixedCollection;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  */
		static find(): void;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  
		* @param fn Function The selection function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		* @returns Object The first item in the collection which returned true from the selection function, or null if none was found. 
		*/
		static findBy( fn?:any, scope?:any ): any;

		/** [Method] Finds the index of the first matching object in this collection by a specific property value  
		* @param property String The name of a property on your objects. 
		* @param value String/RegExp A string that the property values should start with or a RegExp to test against the property. 
		* @param start Number The index to start searching at. 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Number The matched index or -1 
		*/
		static findIndex( property?:string, value?:any, start?:number, anyMatch?:boolean, caseSensitive?:boolean ): number;

		/** [Method] Find the index of the first matching object in this collection by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @param start Number The index to start searching at. 
		* @returns Number The matched index or -1 
		*/
		static findIndexBy( fn?:any, scope?:any, start?:number ): number;

		/** [Method] Calculates the insertion index of the new item based upon the comparison function passed or the current sort order  
		* @param newItem Object The new object to find the insertion position of. 
		* @param sorterFn Function The function to sort by. This is the same as the sorting function passed to sortBy. It accepts 2 items from this MixedCollection, and returns -1 0, or 1 depending on the relative sort positions of the 2 compared items. If omitted, a function generated from the currently defined set of sorters will be used. 
		* @returns Number The insertion point to add the new item into this MixedCollection at using insert 
		*/
		static findInsertionIndex( newItem?:any, sorterFn?:any ): number;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the first item in the collection  
		* @returns Object the first item in the collection.. 
		*/
		static first(): any;

		/** [Method] Returns a comparator function which compares two items and returns 1 0 or 1 depending on the currently defined set  */
		static generateComparator(): void;

		/** [Method] Returns the item associated with the passed key OR index  
		* @param key String/Number The key or index of the item. 
		* @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null. 
		*/
		static get( key?:any ): any;

		/** [Method] Returns the item at the specified index  
		* @param index Number The index of the item. 
		* @returns Object The item at the specified index. 
		*/
		static getAt( index?:number ): any;

		/** [Method] Returns the item associated with the passed key  
		* @param key String/Number The key of the item. 
		* @returns Object The item associated with the passed key. 
		*/
		static getByKey( key?:any ): any;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the number of items in the collection  
		* @returns Number the number of items in the collection. 
		*/
		static getCount(): number;

		/** [Method] Gets the first sorter from the sorters collection excluding any groupers that may be in place 
		* @returns Ext.util.Sorter The sorter, null if none exist 
		*/
		static getFirstSorter(): Ext.util.ISorter;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] getKey implementation for MixedCollection 
		* @param o Object 
		* @returns Object The key for the passed item. 
		*/
		static getKey( o?:any ): any;

		/** [Method] Returns a range of items in this collection 
		* @param startIndex Number The starting index. Defaults to 0. 
		* @param endIndex Number The ending index. Defaults to the last item. 
		* @returns Array An array of items 
		*/
		static getRange( startIndex?:number, endIndex?:number ): any[];

		/** [Method] Returns the number of Sorters which apply to this Sortable  */
		static getSorterCount(): void;

		/** [Method] Returns the value of sorters  
		* @returns Ext.util.Sorter[]/Object[] 
		*/
		static getSorters(): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Returns index within the collection of the passed Object  
		* @param o Object The item to find the index of. 
		* @returns Number index of the item. Returns -1 if not found. 
		*/
		static indexOf( o?:any ): number;

		/** [Method] Returns index within the collection of the passed key  
		* @param key String The key to find the index of. 
		* @returns Number index of the key. 
		*/
		static indexOfKey( key?:string ): number;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Inserts an item at the specified index in the collection  
		* @param index Number The index to insert the item at. 
		* @param key String/Object/String[]/Object[] The key to associate with the new item, or the item itself. May also be an array of either to insert multiple items at once. 
		* @param o Object/Object[] If the second parameter was a key, the new item. May also be an array to insert multiple items at once. 
		* @returns Object The item inserted or an array of items inserted. 
		*/
		static insert( index?:number, key?:any, o?:any ): any;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Returns the last item in the collection  
		* @returns Object the last item in the collection.. 
		*/
		static last(): any;

		/** [Method] Gets a registered Store by id 
		* @param store String/Object The id of the Store, or a Store instance, or a store configuration 
		* @returns Ext.data.Store 
		*/
		static lookup( store?:any ): Ext.data.IStore;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Registers one or more Stores with the StoreManager  
		* @param stores Ext.data.Store... Any number of Store instances 
		*/
		static register( stores:Ext.data.IStore ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Remove an item from the collection  
		* @param o Object The item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		static remove( o?:any ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Remove all items in the collection  
		* @param items Array An array of items to be removed. 
		* @returns Ext.util.MixedCollection this object 
		*/
		static removeAll( items?:any[] ): Ext.util.IMixedCollection;

		/** [Method] Remove an item from a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		static removeAt( index?:number ): any;

		/** [Method] Removes an item associated with the passed key fom the collection  
		* @param key String The key of the item to remove. If null is passed, all objects which yielded no key from the configured getKey function are removed. 
		* @returns Object Only returned if removing at a specified key. The item removed or false if no item was removed. 
		*/
		static removeAtKey( key?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Remove a range of items starting at a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @param removeCount Number The nuber of items to remove beginning at the specified index. 
		* @returns Object The last item removed or false if no item was removed. 
		*/
		static removeRange( index?:number, removeCount?:number ): any;

		/** [Method] Reorders each of the items based on a mapping from old index to new index  
		* @param mapping Object Mapping from old item index to new item index 
		*/
		static reorder( mapping?:any ): void;

		/** [Method] Replaces an item in the collection  
		* @param key String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter. 
		* @param o Object {Object} o (optional) If the first parameter passed was a key, the item to associate with that key. 
		* @returns Object The new item. 
		*/
		static replace( key?:string, o?:any ): any;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Sets the value of sorters  
		* @param sorters Ext.util.Sorter[]/Object[] The new value. 
		*/
		static setSorters( sorters?:any ): void;

		/** [Method] Updates the sorters collection and triggers sorting of this Sortable  
		* @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations. 
		* @param direction String The overall direction to sort the data by. 
		* @param insertionPosition String Where to put the new sorter in the collection of sorters. This may take the following values:  replace : This means that the new sorter(s) becomes the sole sorter set for this Sortable. This is the most useful call mode  to programatically sort by multiple fields. prepend : This means that the new sorters are inserted as the primary sorters, unchanged, and the sorter list length must be controlled by the developer. multi : This is mainly useful for implementing intuitive "Sort by this" user interfaces such as the GridPanel's column sorting UI. This mode is only supported when passing a property name and a direction. This means that the new sorter is becomes the primary sorter. If the sorter was already the primary sorter, the direction  of sort is toggled if no direction parameter is specified. The number of sorters maintained is limited by the multiSortLimit configuration. append : This means that the new sorter becomes the last sorter.  
		* @returns Ext.util.Sorter[] The new sorters. 
		*/
		static sort( sorters?:any, direction?:string, insertionPosition?:string ): Ext.util.ISorter[];

		/** [Method] Sorts the collection by a single sorter function 
		* @param sorterFn Function The function to sort by 
		*/
		static sortBy( sorterFn?:any ): void;

		/** [Method] Sorts this collection by keys  
		* @param direction String 'ASC' or 'DESC'. Defaults to 'ASC'. 
		* @param fn Function Comparison function that defines the sort order. Defaults to sorting by case insensitive string. 
		*/
		static sortByKey( direction?:string, fn?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Collects all of the values of the given property and returns their sum 
		* @param property String The property to sum by 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param start Number The record index to start at 
		* @param end Number The record index to end at 
		* @returns Number The total 
		*/
		static sum( property?:string, root?:string, start?:number, end?:number ): number;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Unregisters one or more Stores with the StoreManager 
		* @param stores String/Object... Any number of Store instances or ID-s 
		*/
		static unregister( stores?:any ): void;

		/** [Method] Change the key for an existing item in the collection  
		* @param oldKey Object The old key 
		* @param newKey Object The new key 
		*/
		static updateKey( oldKey?:any, newKey?:any ): void;

	}

}

declare module Ext.data {
	export interface IStoreMgr extends Ext.util.IMixedCollection {
	}
	export class StoreMgr {
		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isMixedCollection: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Boolean) */
		static isSortable: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Adds an item to the collection  
		* @param key String/Object The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter. 
		* @param obj Object The item to add. Note that when adding a value that is iterable, it must be wrapped in brackets, i.e.: c.add([[1, 2]]);  This will be needed for any value that is iterable, i.e., an array, arguments object, HTML collections, etc. 
		* @returns Object The item added. 
		*/
		static add( key?:any, obj?:any ): any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Adds all elements of an Array or an Object to the collection  
		* @param objs Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if allowFunctions has been set to true. 
		*/
		static addAll( objs?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all items from the collection  */
		static clear(): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] Creates a shallow copy of this collection 
		* @returns Ext.util.MixedCollection 
		*/
		static clone(): Ext.util.IMixedCollection;

		/** [Method] Collects unique values of a particular property in this MixedCollection 
		* @param property String The property to collect on 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param allowBlank Boolean Pass true to allow null, undefined or empty string values 
		* @returns Array The unique values 
		*/
		static collect( property?:string, root?:string, allowBlank?:boolean ): any[];

		/** [Method] Returns true if the collection contains the passed Object as an item  
		* @param o Object The Object to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as an item. 
		*/
		static contains( o?:any ): boolean;

		/** [Method] Returns true if the collection contains the passed Object as a key  
		* @param key String The key to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as a key. 
		*/
		static containsKey( key?:string ): boolean;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Executes the specified function once for every item in the collection  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration. 
		*/
		static each( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		static eachKey( fn?:any, scope?:any ): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Filters the objects in this collection by a set of Filters or by a single property value pair with optional paramete  
		* @param property Ext.util.Filter[]/String A property on your objects, or an array of Filter objects 
		* @param value String/RegExp Either string that the property values should start with or a RegExp to test against the property 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		static filter( property?:any, value?:any, anyMatch?:boolean, caseSensitive?:boolean ): Ext.util.IMixedCollection;

		/** [Method] Filter by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		static filterBy( fn?:any, scope?:any ): Ext.util.IMixedCollection;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  */
		static find(): void;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  
		* @param fn Function The selection function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		* @returns Object The first item in the collection which returned true from the selection function, or null if none was found. 
		*/
		static findBy( fn?:any, scope?:any ): any;

		/** [Method] Finds the index of the first matching object in this collection by a specific property value  
		* @param property String The name of a property on your objects. 
		* @param value String/RegExp A string that the property values should start with or a RegExp to test against the property. 
		* @param start Number The index to start searching at. 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Number The matched index or -1 
		*/
		static findIndex( property?:string, value?:any, start?:number, anyMatch?:boolean, caseSensitive?:boolean ): number;

		/** [Method] Find the index of the first matching object in this collection by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @param start Number The index to start searching at. 
		* @returns Number The matched index or -1 
		*/
		static findIndexBy( fn?:any, scope?:any, start?:number ): number;

		/** [Method] Calculates the insertion index of the new item based upon the comparison function passed or the current sort order  
		* @param newItem Object The new object to find the insertion position of. 
		* @param sorterFn Function The function to sort by. This is the same as the sorting function passed to sortBy. It accepts 2 items from this MixedCollection, and returns -1 0, or 1 depending on the relative sort positions of the 2 compared items. If omitted, a function generated from the currently defined set of sorters will be used. 
		* @returns Number The insertion point to add the new item into this MixedCollection at using insert 
		*/
		static findInsertionIndex( newItem?:any, sorterFn?:any ): number;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the first item in the collection  
		* @returns Object the first item in the collection.. 
		*/
		static first(): any;

		/** [Method] Returns a comparator function which compares two items and returns 1 0 or 1 depending on the currently defined set  */
		static generateComparator(): void;

		/** [Method] Returns the item associated with the passed key OR index  
		* @param key String/Number The key or index of the item. 
		* @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null. 
		*/
		static get( key?:any ): any;

		/** [Method] Returns the item at the specified index  
		* @param index Number The index of the item. 
		* @returns Object The item at the specified index. 
		*/
		static getAt( index?:number ): any;

		/** [Method] Returns the item associated with the passed key  
		* @param key String/Number The key of the item. 
		* @returns Object The item associated with the passed key. 
		*/
		static getByKey( key?:any ): any;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the number of items in the collection  
		* @returns Number the number of items in the collection. 
		*/
		static getCount(): number;

		/** [Method] Gets the first sorter from the sorters collection excluding any groupers that may be in place 
		* @returns Ext.util.Sorter The sorter, null if none exist 
		*/
		static getFirstSorter(): Ext.util.ISorter;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] getKey implementation for MixedCollection 
		* @param o Object 
		* @returns Object The key for the passed item. 
		*/
		static getKey( o?:any ): any;

		/** [Method] Returns a range of items in this collection 
		* @param startIndex Number The starting index. Defaults to 0. 
		* @param endIndex Number The ending index. Defaults to the last item. 
		* @returns Array An array of items 
		*/
		static getRange( startIndex?:number, endIndex?:number ): any[];

		/** [Method] Returns the number of Sorters which apply to this Sortable  */
		static getSorterCount(): void;

		/** [Method] Returns the value of sorters  
		* @returns Ext.util.Sorter[]/Object[] 
		*/
		static getSorters(): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Returns index within the collection of the passed Object  
		* @param o Object The item to find the index of. 
		* @returns Number index of the item. Returns -1 if not found. 
		*/
		static indexOf( o?:any ): number;

		/** [Method] Returns index within the collection of the passed key  
		* @param key String The key to find the index of. 
		* @returns Number index of the key. 
		*/
		static indexOfKey( key?:string ): number;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Inserts an item at the specified index in the collection  
		* @param index Number The index to insert the item at. 
		* @param key String/Object/String[]/Object[] The key to associate with the new item, or the item itself. May also be an array of either to insert multiple items at once. 
		* @param o Object/Object[] If the second parameter was a key, the new item. May also be an array to insert multiple items at once. 
		* @returns Object The item inserted or an array of items inserted. 
		*/
		static insert( index?:number, key?:any, o?:any ): any;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Returns the last item in the collection  
		* @returns Object the last item in the collection.. 
		*/
		static last(): any;

		/** [Method] Gets a registered Store by id 
		* @param store String/Object The id of the Store, or a Store instance, or a store configuration 
		* @returns Ext.data.Store 
		*/
		static lookup( store?:any ): Ext.data.IStore;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Registers one or more Stores with the StoreManager  
		* @param stores Ext.data.Store... Any number of Store instances 
		*/
		static register( stores:Ext.data.IStore ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Remove an item from the collection  
		* @param o Object The item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		static remove( o?:any ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Remove all items in the collection  
		* @param items Array An array of items to be removed. 
		* @returns Ext.util.MixedCollection this object 
		*/
		static removeAll( items?:any[] ): Ext.util.IMixedCollection;

		/** [Method] Remove an item from a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		static removeAt( index?:number ): any;

		/** [Method] Removes an item associated with the passed key fom the collection  
		* @param key String The key of the item to remove. If null is passed, all objects which yielded no key from the configured getKey function are removed. 
		* @returns Object Only returned if removing at a specified key. The item removed or false if no item was removed. 
		*/
		static removeAtKey( key?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Remove a range of items starting at a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @param removeCount Number The nuber of items to remove beginning at the specified index. 
		* @returns Object The last item removed or false if no item was removed. 
		*/
		static removeRange( index?:number, removeCount?:number ): any;

		/** [Method] Reorders each of the items based on a mapping from old index to new index  
		* @param mapping Object Mapping from old item index to new item index 
		*/
		static reorder( mapping?:any ): void;

		/** [Method] Replaces an item in the collection  
		* @param key String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter. 
		* @param o Object {Object} o (optional) If the first parameter passed was a key, the item to associate with that key. 
		* @returns Object The new item. 
		*/
		static replace( key?:string, o?:any ): any;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Sets the value of sorters  
		* @param sorters Ext.util.Sorter[]/Object[] The new value. 
		*/
		static setSorters( sorters?:any ): void;

		/** [Method] Updates the sorters collection and triggers sorting of this Sortable  
		* @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations. 
		* @param direction String The overall direction to sort the data by. 
		* @param insertionPosition String Where to put the new sorter in the collection of sorters. This may take the following values:  replace : This means that the new sorter(s) becomes the sole sorter set for this Sortable. This is the most useful call mode  to programatically sort by multiple fields. prepend : This means that the new sorters are inserted as the primary sorters, unchanged, and the sorter list length must be controlled by the developer. multi : This is mainly useful for implementing intuitive "Sort by this" user interfaces such as the GridPanel's column sorting UI. This mode is only supported when passing a property name and a direction. This means that the new sorter is becomes the primary sorter. If the sorter was already the primary sorter, the direction  of sort is toggled if no direction parameter is specified. The number of sorters maintained is limited by the multiSortLimit configuration. append : This means that the new sorter becomes the last sorter.  
		* @returns Ext.util.Sorter[] The new sorters. 
		*/
		static sort( sorters?:any, direction?:string, insertionPosition?:string ): Ext.util.ISorter[];

		/** [Method] Sorts the collection by a single sorter function 
		* @param sorterFn Function The function to sort by 
		*/
		static sortBy( sorterFn?:any ): void;

		/** [Method] Sorts this collection by keys  
		* @param direction String 'ASC' or 'DESC'. Defaults to 'ASC'. 
		* @param fn Function Comparison function that defines the sort order. Defaults to sorting by case insensitive string. 
		*/
		static sortByKey( direction?:string, fn?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Collects all of the values of the given property and returns their sum 
		* @param property String The property to sum by 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param start Number The record index to start at 
		* @param end Number The record index to end at 
		* @returns Number The total 
		*/
		static sum( property?:string, root?:string, start?:number, end?:number ): number;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Unregisters one or more Stores with the StoreManager 
		* @param stores String/Object... Any number of Store instances or ID-s 
		*/
		static unregister( stores?:any ): void;

		/** [Method] Change the key for an existing item in the collection  
		* @param oldKey Object The old key 
		* @param newKey Object The new key 
		*/
		static updateKey( oldKey?:any, newKey?:any ): void;

	}

}

declare module Ext {
	export interface IStoreManager extends Ext.util.IMixedCollection {
	}
	export class StoreManager {
		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isMixedCollection: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Boolean) */
		static isSortable: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Adds an item to the collection  
		* @param key String/Object The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter. 
		* @param obj Object The item to add. Note that when adding a value that is iterable, it must be wrapped in brackets, i.e.: c.add([[1, 2]]);  This will be needed for any value that is iterable, i.e., an array, arguments object, HTML collections, etc. 
		* @returns Object The item added. 
		*/
		static add( key?:any, obj?:any ): any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Adds all elements of an Array or an Object to the collection  
		* @param objs Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if allowFunctions has been set to true. 
		*/
		static addAll( objs?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all items from the collection  */
		static clear(): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] Creates a shallow copy of this collection 
		* @returns Ext.util.MixedCollection 
		*/
		static clone(): Ext.util.IMixedCollection;

		/** [Method] Collects unique values of a particular property in this MixedCollection 
		* @param property String The property to collect on 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param allowBlank Boolean Pass true to allow null, undefined or empty string values 
		* @returns Array The unique values 
		*/
		static collect( property?:string, root?:string, allowBlank?:boolean ): any[];

		/** [Method] Returns true if the collection contains the passed Object as an item  
		* @param o Object The Object to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as an item. 
		*/
		static contains( o?:any ): boolean;

		/** [Method] Returns true if the collection contains the passed Object as a key  
		* @param key String The key to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as a key. 
		*/
		static containsKey( key?:string ): boolean;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Executes the specified function once for every item in the collection  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration. 
		*/
		static each( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		static eachKey( fn?:any, scope?:any ): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Filters the objects in this collection by a set of Filters or by a single property value pair with optional paramete  
		* @param property Ext.util.Filter[]/String A property on your objects, or an array of Filter objects 
		* @param value String/RegExp Either string that the property values should start with or a RegExp to test against the property 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		static filter( property?:any, value?:any, anyMatch?:boolean, caseSensitive?:boolean ): Ext.util.IMixedCollection;

		/** [Method] Filter by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		static filterBy( fn?:any, scope?:any ): Ext.util.IMixedCollection;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  */
		static find(): void;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  
		* @param fn Function The selection function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		* @returns Object The first item in the collection which returned true from the selection function, or null if none was found. 
		*/
		static findBy( fn?:any, scope?:any ): any;

		/** [Method] Finds the index of the first matching object in this collection by a specific property value  
		* @param property String The name of a property on your objects. 
		* @param value String/RegExp A string that the property values should start with or a RegExp to test against the property. 
		* @param start Number The index to start searching at. 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Number The matched index or -1 
		*/
		static findIndex( property?:string, value?:any, start?:number, anyMatch?:boolean, caseSensitive?:boolean ): number;

		/** [Method] Find the index of the first matching object in this collection by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @param start Number The index to start searching at. 
		* @returns Number The matched index or -1 
		*/
		static findIndexBy( fn?:any, scope?:any, start?:number ): number;

		/** [Method] Calculates the insertion index of the new item based upon the comparison function passed or the current sort order  
		* @param newItem Object The new object to find the insertion position of. 
		* @param sorterFn Function The function to sort by. This is the same as the sorting function passed to sortBy. It accepts 2 items from this MixedCollection, and returns -1 0, or 1 depending on the relative sort positions of the 2 compared items. If omitted, a function generated from the currently defined set of sorters will be used. 
		* @returns Number The insertion point to add the new item into this MixedCollection at using insert 
		*/
		static findInsertionIndex( newItem?:any, sorterFn?:any ): number;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the first item in the collection  
		* @returns Object the first item in the collection.. 
		*/
		static first(): any;

		/** [Method] Returns a comparator function which compares two items and returns 1 0 or 1 depending on the currently defined set  */
		static generateComparator(): void;

		/** [Method] Returns the item associated with the passed key OR index  
		* @param key String/Number The key or index of the item. 
		* @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null. 
		*/
		static get( key?:any ): any;

		/** [Method] Returns the item at the specified index  
		* @param index Number The index of the item. 
		* @returns Object The item at the specified index. 
		*/
		static getAt( index?:number ): any;

		/** [Method] Returns the item associated with the passed key  
		* @param key String/Number The key of the item. 
		* @returns Object The item associated with the passed key. 
		*/
		static getByKey( key?:any ): any;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the number of items in the collection  
		* @returns Number the number of items in the collection. 
		*/
		static getCount(): number;

		/** [Method] Gets the first sorter from the sorters collection excluding any groupers that may be in place 
		* @returns Ext.util.Sorter The sorter, null if none exist 
		*/
		static getFirstSorter(): Ext.util.ISorter;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] getKey implementation for MixedCollection 
		* @param o Object 
		* @returns Object The key for the passed item. 
		*/
		static getKey( o?:any ): any;

		/** [Method] Returns a range of items in this collection 
		* @param startIndex Number The starting index. Defaults to 0. 
		* @param endIndex Number The ending index. Defaults to the last item. 
		* @returns Array An array of items 
		*/
		static getRange( startIndex?:number, endIndex?:number ): any[];

		/** [Method] Returns the number of Sorters which apply to this Sortable  */
		static getSorterCount(): void;

		/** [Method] Returns the value of sorters  
		* @returns Ext.util.Sorter[]/Object[] 
		*/
		static getSorters(): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Returns index within the collection of the passed Object  
		* @param o Object The item to find the index of. 
		* @returns Number index of the item. Returns -1 if not found. 
		*/
		static indexOf( o?:any ): number;

		/** [Method] Returns index within the collection of the passed key  
		* @param key String The key to find the index of. 
		* @returns Number index of the key. 
		*/
		static indexOfKey( key?:string ): number;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Inserts an item at the specified index in the collection  
		* @param index Number The index to insert the item at. 
		* @param key String/Object/String[]/Object[] The key to associate with the new item, or the item itself. May also be an array of either to insert multiple items at once. 
		* @param o Object/Object[] If the second parameter was a key, the new item. May also be an array to insert multiple items at once. 
		* @returns Object The item inserted or an array of items inserted. 
		*/
		static insert( index?:number, key?:any, o?:any ): any;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Returns the last item in the collection  
		* @returns Object the last item in the collection.. 
		*/
		static last(): any;

		/** [Method] Gets a registered Store by id 
		* @param store String/Object The id of the Store, or a Store instance, or a store configuration 
		* @returns Ext.data.Store 
		*/
		static lookup( store?:any ): Ext.data.IStore;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Registers one or more Stores with the StoreManager  
		* @param stores Ext.data.Store... Any number of Store instances 
		*/
		static register( stores:Ext.data.IStore ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Remove an item from the collection  
		* @param o Object The item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		static remove( o?:any ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Remove all items in the collection  
		* @param items Array An array of items to be removed. 
		* @returns Ext.util.MixedCollection this object 
		*/
		static removeAll( items?:any[] ): Ext.util.IMixedCollection;

		/** [Method] Remove an item from a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		static removeAt( index?:number ): any;

		/** [Method] Removes an item associated with the passed key fom the collection  
		* @param key String The key of the item to remove. If null is passed, all objects which yielded no key from the configured getKey function are removed. 
		* @returns Object Only returned if removing at a specified key. The item removed or false if no item was removed. 
		*/
		static removeAtKey( key?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Remove a range of items starting at a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @param removeCount Number The nuber of items to remove beginning at the specified index. 
		* @returns Object The last item removed or false if no item was removed. 
		*/
		static removeRange( index?:number, removeCount?:number ): any;

		/** [Method] Reorders each of the items based on a mapping from old index to new index  
		* @param mapping Object Mapping from old item index to new item index 
		*/
		static reorder( mapping?:any ): void;

		/** [Method] Replaces an item in the collection  
		* @param key String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter. 
		* @param o Object {Object} o (optional) If the first parameter passed was a key, the item to associate with that key. 
		* @returns Object The new item. 
		*/
		static replace( key?:string, o?:any ): any;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Sets the value of sorters  
		* @param sorters Ext.util.Sorter[]/Object[] The new value. 
		*/
		static setSorters( sorters?:any ): void;

		/** [Method] Updates the sorters collection and triggers sorting of this Sortable  
		* @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations. 
		* @param direction String The overall direction to sort the data by. 
		* @param insertionPosition String Where to put the new sorter in the collection of sorters. This may take the following values:  replace : This means that the new sorter(s) becomes the sole sorter set for this Sortable. This is the most useful call mode  to programatically sort by multiple fields. prepend : This means that the new sorters are inserted as the primary sorters, unchanged, and the sorter list length must be controlled by the developer. multi : This is mainly useful for implementing intuitive "Sort by this" user interfaces such as the GridPanel's column sorting UI. This mode is only supported when passing a property name and a direction. This means that the new sorter is becomes the primary sorter. If the sorter was already the primary sorter, the direction  of sort is toggled if no direction parameter is specified. The number of sorters maintained is limited by the multiSortLimit configuration. append : This means that the new sorter becomes the last sorter.  
		* @returns Ext.util.Sorter[] The new sorters. 
		*/
		static sort( sorters?:any, direction?:string, insertionPosition?:string ): Ext.util.ISorter[];

		/** [Method] Sorts the collection by a single sorter function 
		* @param sorterFn Function The function to sort by 
		*/
		static sortBy( sorterFn?:any ): void;

		/** [Method] Sorts this collection by keys  
		* @param direction String 'ASC' or 'DESC'. Defaults to 'ASC'. 
		* @param fn Function Comparison function that defines the sort order. Defaults to sorting by case insensitive string. 
		*/
		static sortByKey( direction?:string, fn?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Collects all of the values of the given property and returns their sum 
		* @param property String The property to sum by 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param start Number The record index to start at 
		* @param end Number The record index to end at 
		* @returns Number The total 
		*/
		static sum( property?:string, root?:string, start?:number, end?:number ): number;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Unregisters one or more Stores with the StoreManager 
		* @param stores String/Object... Any number of Store instances or ID-s 
		*/
		static unregister( stores?:any ): void;

		/** [Method] Change the key for an existing item in the collection  
		* @param oldKey Object The old key 
		* @param newKey Object The new key 
		*/
		static updateKey( oldKey?:any, newKey?:any ): void;

	}

}

declare module Ext.data {
	export interface ITreeModel extends Ext.data.IModel, Ext.mixin.IQueryable {
		/** [Config Option] (String) */
		childType?: string;
		/** [Method] Retrieves the first direct child of this container which matches the passed selector or component  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching child Ext.Component (or null if no match was found). 
		*/
		child?( selector?:any ): any;

		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found). 
		*/
		down?( selector?:any ): any;

		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned. 
		* @returns Ext.Component[] Components which matched the selector 
		*/
		query?( selector?:string ): Ext.IComponent[];

		/** [Method] Retrieves all descendant components which match the passed function  
		* @param fn Function The matcher function. It will be called with a single argument, the component being tested. 
		* @param scope Object The scope in which to run the function. If not specified, it will default to the active component. 
		* @returns Ext.Component[] Components matched by the passed function 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.IComponent[];

		/** [Method] Finds a component at any level under this container matching the id itemId  
		* @param id String The id to find 
		* @returns Ext.Component The matching id, null if not found 
		*/
		queryById?( id?:string ): Ext.IComponent;

		/** [Method] Traverses the tree rooted at this node in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPostOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at this node in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPreOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

	}

}

declare module Ext.data {
	export interface ITreeStore extends Ext.data.INodeStore {
		/** [Config Option] (Boolean) */
		clearOnLoad?: boolean;
		/** [Config Option] (Boolean) */
		clearRemovedOnLoad?: boolean;
		/** [Config Option] (String) */
		defaultRootId?: string;
		/** [Config Option] (String) */
		defaultRootProperty?: string;
		/** [Config Option] (String) */
		defaultRootText?: string;
		/** [Config Option] (Object[]) */
		fields?: any[];
		/** [Config Option] (Boolean) */
		folderSort?: boolean;
		/** [Config Option] (Boolean) */
		lazyFill?: boolean;
		/** [Config Option] (String) */
		nodeParam?: string;
		/** [Config Option] (String) */
		parentIdProperty?: string;
		/** [Config Option] (Boolean) */
		recursive?: boolean;
		/** [Config Option] (Ext.data.TreeModel/Ext.data.NodeInterface/Object) */
		root?: any;
		/** [Config Option] (Boolean) */
		rootVisible?: boolean;
		/** [Property] (Boolean) */
		isTreeStore?: boolean;

		/** [Method] Commits all Records with outstanding changes  */
		commitChanges?(): void;

		/** [Method] Finds the first matching node in the tree by a specific field value regardless of visibility due to collapsed states 
		* @param fieldName String The name of the Record field to test. 
		* @param value String/RegExp Either a string that the field value should begin with, or a RegExp to test against the field. 
		* @param anyMatch Boolean False to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean True for case sensitive comparison 
		* @param exactMatch Boolean True to force exact match (^ and $ characters added to the regex). Ignored if anyMatch is true. 
		* @returns Ext.data.NodeInterface The matched node or null 
		*/
		findNode?( fieldName?:string, value?:any, anyMatch?:boolean, caseSensitive?:boolean, exactMatch?:boolean ): Ext.data.INodeInterface;

		/** [Method] Get the Record with the specified id  
		* @param id Mixed The id of the Record to find. 
		* @returns Ext.data.Model The Record with the passed id. Returns null if not found. 
		*/
		getById?( id?:any ): Ext.data.IModel;

		/** [Method] Returns the value of clearOnLoad  
		* @returns Boolean 
		*/
		getClearOnLoad?(): boolean;

		/** [Method] Returns the value of clearRemovedOnLoad  
		* @returns Boolean 
		*/
		getClearRemovedOnLoad?(): boolean;

		/** [Method] Returns the value of defaultRootId  
		* @returns String 
		*/
		getDefaultRootId?(): string;

		/** [Method] Returns the value of defaultRootProperty  
		* @returns String 
		*/
		getDefaultRootProperty?(): string;

		/** [Method] Returns the value of defaultRootText  
		* @returns String 
		*/
		getDefaultRootText?(): string;

		/** [Method] Returns the value of folderSort  
		* @returns Boolean 
		*/
		getFolderSort?(): boolean;

		/** [Method] Returns all Model instances that are either currently a phantom e g  
		* @returns Ext.data.Model[] The Model instances 
		*/
		getNewRecords?(): Ext.data.IModel[];

		/** [Method] Returns the record node by id regardless of visibility due to collapsed states all nodes present in the tree structu  
		* @param id String The id of the node to get. 
		* @returns Ext.data.NodeInterface 
		*/
		getNodeById?( id?:string ): Ext.data.INodeInterface;

		/** [Method] Returns the value of nodeParam  
		* @returns String 
		*/
		getNodeParam?(): string;

		/** [Method] Returns the value of parentIdProperty  
		* @returns String 
		*/
		getParentIdProperty?(): string;

		/** [Method] Returns the value of recursive  
		* @returns Boolean 
		*/
		getRecursive?(): boolean;

		/** [Method] Returns any records that have been removed from the store but not yet destroyed on the proxy  
		* @returns Ext.data.Model[] The removed Model instances 
		*/
		getRemovedRecords?(): Ext.data.IModel[];

		/** [Method] Returns the value of root  
		* @returns Ext.data.TreeModel/Ext.data.NodeInterface/Object 
		*/
		getRoot?(): any;

		/** [Method] Returns the root node for this tree  
		* @returns Ext.data.NodeInterface 
		*/
		getRootNode?(): Ext.data.INodeInterface;

		/** [Method] Returns the value of rootVisible  
		* @returns Boolean 
		*/
		getRootVisible?(): boolean;

		/** [Method] Returns all valid non phantom Model instances that have been updated in the Store but not yet synchronized with the 
		* @returns Ext.data.Model[] The updated Model instances 
		*/
		getUpdatedRecords?(): Ext.data.IModel[];

		/** [Method]  
		* @param node Object 
		* @returns Boolean 
		*/
		isVisible?( node?:any ): boolean;

		/** [Method] Loads the passed node defaulting to the root node using the configured proxy  
		* @param options Object config object. This is passed into the Operation object that is created and then sent to the proxy's Ext.data.proxy.Proxy.read function. The options can also contain a node, which indicates which node is to be loaded. If not specified, it will default to the root node. 
		* @returns Ext.data.Store 
		*/
		load?( options?:any ): Ext.data.IStore;

		/** [Method] Removes all items from the store  
		* @returns Ext.data.Model[] The removed records. 
		*/
		removeAll?(): Ext.data.IModel[];

		/** [Method] Sets the value of clearOnLoad  
		* @param clearOnLoad Boolean The new value. 
		*/
		setClearOnLoad?( clearOnLoad?:boolean ): void;

		/** [Method] Sets the value of clearRemovedOnLoad  
		* @param clearRemovedOnLoad Boolean The new value. 
		*/
		setClearRemovedOnLoad?( clearRemovedOnLoad?:boolean ): void;

		/** [Method] Sets the value of defaultRootId  
		* @param defaultRootId String The new value. 
		*/
		setDefaultRootId?( defaultRootId?:string ): void;

		/** [Method] Sets the value of defaultRootProperty  
		* @param defaultRootProperty String The new value. 
		*/
		setDefaultRootProperty?( defaultRootProperty?:string ): void;

		/** [Method] Sets the value of defaultRootText  
		* @param defaultRootText String The new value. 
		*/
		setDefaultRootText?( defaultRootText?:string ): void;

		/** [Method] Sets the value of folderSort  
		* @param folderSort Boolean The new value. 
		*/
		setFolderSort?( folderSort?:boolean ): void;

		/** [Method] Sets the value of nodeParam  
		* @param nodeParam String The new value. 
		*/
		setNodeParam?( nodeParam?:string ): void;

		/** [Method] Sets the value of parentIdProperty  
		* @param parentIdProperty String The new value. 
		*/
		setParentIdProperty?( parentIdProperty?:string ): void;

		/** [Method] Sets the value of proxy  
		* @param proxy Object 
		*/
		setProxy?( proxy?:any ): void;

		/** [Method] Sets the value of recursive  
		* @param recursive Boolean The new value. 
		*/
		setRecursive?( recursive?:boolean ): void;

		/** [Method] Sets the value of root  
		* @param root Ext.data.TreeModel/Ext.data.NodeInterface/Object The new value. 
		*/
		setRoot?( root?:any ): void;

		/** [Method] Sets the root node for this store  
		* @param root Ext.data.TreeModel/Ext.data.NodeInterface/Object 
		* @returns Ext.data.NodeInterface The new root 
		*/
		setRootNode?( root?:any ): Ext.data.INodeInterface;

		/** [Method] Sets the value of rootVisible  
		* @param rootVisible Boolean The new value. 
		*/
		setRootVisible?( rootVisible?:boolean ): void;

	}

}

declare module Ext.data {
	export interface ITypes extends Ext.IBase {
	}
	export class Types {
		/** [Property] (Object) */
		static AUTO: any;

		/** [Property] (Object) */
		static BOOL: any;

		/** [Property] (Object) */
		static BOOLEAN: any;

		/** [Property] (Object) */
		static DATE: any;

		/** [Property] (Object) */
		static FLOAT: any;

		/** [Property] (Object) */
		static INT: any;

		/** [Property] (Object) */
		static INTEGER: any;

		/** [Property] (Object) */
		static NUMBER: any;

		/** [Property] (Object) */
		static STRING: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (RegExp) */
		static stripRe: RegExp;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.data {
	export interface IValidation extends Ext.data.IModel {
		/** [Property] (Ext.data.Model) */
		record?: Ext.data.IModel;

		/** [Method] Returns the Ext data Validation record holding the results of this record s validators  
		* @returns Ext.data.Validation The Validation record for this record. 
		*/
		getValidation?(): Ext.data.IValidation;

		/** [Method] Returns true if the associated record not this one is valid  
		* @returns Boolean 
		*/
		isValid?(): boolean;

	}

}

declare module Ext.data.validator {
	export interface IBound extends Ext.data.validator.IValidator {
		/** [Config Option] (String) */
		bothMessage?: string;
		/** [Config Option] (String) */
		emptyMessage?: string;
		/** [Config Option] (Number) */
		max?: number;
		/** [Config Option] (String) */
		maxOnlyMessage?: string;
		/** [Config Option] (Number) */
		min?: number;
		/** [Config Option] (String) */
		minOnlyMessage?: string;
		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of emptyMessage  
		* @returns String 
		*/
		getEmptyMessage?(): string;

		/** [Method] Returns the value of max  
		* @returns Number 
		*/
		getMax?(): number;

		/** [Method] Returns the value of maxOnlyMessage  
		* @returns String 
		*/
		getMaxOnlyMessage?(): string;

		/** [Method] Returns the value of min  
		* @returns Number 
		*/
		getMin?(): number;

		/** [Method] Returns the value of minOnlyMessage  
		* @returns String 
		*/
		getMinOnlyMessage?(): string;

		/** [Method] Sets a single multiple configuration options  
		* @returns Ext.Base this 
		*/
		setConfig?(): Ext.IBase;

		/** [Method] Sets the value of emptyMessage  
		* @param emptyMessage String The new value. 
		*/
		setEmptyMessage?( emptyMessage?:string ): void;

		/** [Method] Sets the value of max  
		* @param max Number The new value. 
		*/
		setMax?( max?:number ): void;

		/** [Method] Sets the value of maxOnlyMessage  
		* @param maxOnlyMessage String The new value. 
		*/
		setMaxOnlyMessage?( maxOnlyMessage?:string ): void;

		/** [Method] Sets the value of min  
		* @param min Number The new value. 
		*/
		setMin?( min?:number ): void;

		/** [Method] Sets the value of minOnlyMessage  
		* @param minOnlyMessage String The new value. 
		*/
		setMinOnlyMessage?( minOnlyMessage?:string ): void;

		/** [Method] Validates the passed value  
		* @param value Object 
		* @returns Boolean/String true if the value is valid. A string may be returned if the value is not valid, to indicate an error message. Any other non true value indicates the value is not valid. 
		*/
		validate?( value?:any ): any;

	}

}

declare module Ext.data.validator {
	export interface IEmail extends Ext.data.validator.IFormat {
		/** [Config Option] (RegExp) */
		matcher?: RegExp;
		/** [Config Option] (String) */
		message?: string;
		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of matcher  
		* @returns RegExp 
		*/
		getMatcher?(): RegExp;

		/** [Method] Returns the value of message  
		* @returns String 
		*/
		getMessage?(): string;

		/** [Method] Sets the value of matcher  
		* @param matcher RegExp The new value. 
		*/
		setMatcher?( matcher?:RegExp ): void;

		/** [Method] Sets the value of message  
		* @param message String The new value. 
		*/
		setMessage?( message?:string ): void;

	}

}

declare module Ext.data.validator {
	export interface IExclusion extends Ext.data.validator.IList {
		/** [Config Option] (String) */
		message?: string;
		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of message  
		* @returns String 
		*/
		getMessage?(): string;

		/** [Method] Sets the value of message  
		* @param message String The new value. 
		*/
		setMessage?( message?:string ): void;

	}

}

declare module Ext.data.validator {
	export interface IFormat extends Ext.data.validator.IValidator {
		/** [Config Option] (RegExp) */
		matcher?: RegExp;
		/** [Config Option] (String) */
		message?: string;
		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of matcher  
		* @returns RegExp 
		*/
		getMatcher?(): RegExp;

		/** [Method] Returns the value of message  
		* @returns String 
		*/
		getMessage?(): string;

		/** [Method] Sets the value of matcher  
		* @param matcher RegExp The new value. 
		*/
		setMatcher?( matcher?:RegExp ): void;

		/** [Method] Sets the value of message  
		* @param message String The new value. 
		*/
		setMessage?( message?:string ): void;

		/** [Method]  
		* @param value Object 
		* @returns Boolean/String true if the value is valid. A string may be returned if the value is not valid, to indicate an error message. Any other non true value indicates the value is not valid. 
		*/
		validate?( value?:any ): any;

	}

}

declare module Ext.data.validator {
	export interface IInclusion extends Ext.data.validator.IList {
		/** [Config Option] (String) */
		message?: string;
		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of message  
		* @returns String 
		*/
		getMessage?(): string;

		/** [Method] Sets the value of message  
		* @param message String The new value. 
		*/
		setMessage?( message?:string ): void;

	}

}

declare module Ext.data.validator {
	export interface ILength extends Ext.data.validator.IBound {
		/** [Config Option] (String) */
		bothMessage?: string;
		/** [Config Option] (Number) */
		max?: number;
		/** [Config Option] (String) */
		maxOnlyMessage?: string;
		/** [Config Option] (Number) */
		min?: number;
		/** [Config Option] (String) */
		minOnlyMessage?: string;
		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of bothMessage  
		* @returns String 
		*/
		getBothMessage?(): string;

		/** [Method] Returns the value of maxOnlyMessage  
		* @returns String 
		*/
		getMaxOnlyMessage?(): string;

		/** [Method] Returns the value of minOnlyMessage  
		* @returns String 
		*/
		getMinOnlyMessage?(): string;

		/** [Method] Sets the value of bothMessage  
		* @param bothMessage String The new value. 
		*/
		setBothMessage?( bothMessage?:string ): void;

		/** [Method] Sets the value of maxOnlyMessage  
		* @param maxOnlyMessage String The new value. 
		*/
		setMaxOnlyMessage?( maxOnlyMessage?:string ): void;

		/** [Method] Sets the value of minOnlyMessage  
		* @param minOnlyMessage String The new value. 
		*/
		setMinOnlyMessage?( minOnlyMessage?:string ): void;

	}

}

declare module Ext.data.validator {
	export interface IList extends Ext.data.validator.IValidator {
		/** [Config Option] (Array) */
		list?: any[];
		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of list  
		* @returns Array 
		*/
		getList?(): any[];

		/** [Method] Sets the value of list  
		* @param list Array The new value. 
		*/
		setList?( list?:any[] ): void;

		/** [Method] Validates the passed value  
		* @param value Object 
		* @returns Boolean/String true if the value is valid. A string may be returned if the value is not valid, to indicate an error message. Any other non true value indicates the value is not valid. 
		*/
		validate?( value?:any ): any;

	}

}

declare module Ext.data.validator {
	export interface IPresence extends Ext.data.validator.IValidator {
		/** [Config Option] (Boolean) */
		allowEmpty?: boolean;
		/** [Config Option] (String) */
		message?: string;
		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of allowEmpty  
		* @returns Boolean 
		*/
		getAllowEmpty?(): boolean;

		/** [Method] Returns the value of message  
		* @returns String 
		*/
		getMessage?(): string;

		/** [Method] Sets the value of allowEmpty  
		* @param allowEmpty Boolean The new value. 
		*/
		setAllowEmpty?( allowEmpty?:boolean ): void;

		/** [Method] Sets the value of message  
		* @param message String The new value. 
		*/
		setMessage?( message?:string ): void;

		/** [Method] Validates the passed value  
		* @param value Object 
		* @returns Boolean/String true if the value is valid. A string may be returned if the value is not valid, to indicate an error message. Any other non true value indicates the value is not valid. 
		*/
		validate?( value?:any ): any;

	}

}

declare module Ext.data.validator {
	export interface IRange extends Ext.data.validator.IBound {
		/** [Config Option] (String) */
		bothMessage?: string;
		/** [Config Option] (Number) */
		max?: number;
		/** [Config Option] (String) */
		maxOnlyMessage?: string;
		/** [Config Option] (Number) */
		min?: number;
		/** [Config Option] (String) */
		minOnlyMessage?: string;
		/** [Config Option] (String) */
		nanMessage?: string;
		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of bothMessage  
		* @returns String 
		*/
		getBothMessage?(): string;

		/** [Method] Returns the value of maxOnlyMessage  
		* @returns String 
		*/
		getMaxOnlyMessage?(): string;

		/** [Method] Returns the value of minOnlyMessage  
		* @returns String 
		*/
		getMinOnlyMessage?(): string;

		/** [Method] Returns the value of nanMessage  
		* @returns String 
		*/
		getNanMessage?(): string;

		/** [Method] Sets the value of bothMessage  
		* @param bothMessage String The new value. 
		*/
		setBothMessage?( bothMessage?:string ): void;

		/** [Method] Sets the value of maxOnlyMessage  
		* @param maxOnlyMessage String The new value. 
		*/
		setMaxOnlyMessage?( maxOnlyMessage?:string ): void;

		/** [Method] Sets the value of minOnlyMessage  
		* @param minOnlyMessage String The new value. 
		*/
		setMinOnlyMessage?( minOnlyMessage?:string ): void;

		/** [Method] Sets the value of nanMessage  
		* @param nanMessage String The new value. 
		*/
		setNanMessage?( nanMessage?:string ): void;

	}

}

declare module Ext.data.validator {
	export interface IValidator extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Property] (String) */
		type?: string;

		/** [Method] Validates the passed value  
		* @param value Object The value 
		* @param record Ext.data.Model The record 
		* @returns Boolean/String true if the value is valid. A string may be returned if the value is not valid, to indicate an error message. Any other non true value indicates the value is not valid. 
		*/
		validate?( value?:any, record?:Ext.data.IModel ): any;

	}

}

declare module Ext.data.writer {
	export interface IJson extends Ext.data.writer.IWriter {
		/** [Config Option] (Boolean) */
		allowSingle?: boolean;
		/** [Config Option] (Boolean) */
		encode?: boolean;
		/** [Config Option] (Boolean) */
		expandData?: boolean;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Method] Returns the value of allowSingle  
		* @returns Boolean 
		*/
		getAllowSingle?(): boolean;

		/** [Method] Returns the value of encode  
		* @returns Boolean 
		*/
		getEncode?(): boolean;

		/** [Method] Returns the value of expandData  
		* @returns Boolean 
		*/
		getExpandData?(): boolean;

		/** [Method] The Reader classes support dot delimited data mappings for extracting nested raw data into fields so the writer must  
		* @param data Object 
		*/
		getExpandedData?( data?:any ): void;

		/** [Method] Returns the value of rootProperty  
		* @returns String 
		*/
		getRootProperty?(): string;

		/** [Method] Sets the value of allowSingle  
		* @param allowSingle Boolean The new value. 
		*/
		setAllowSingle?( allowSingle?:boolean ): void;

		/** [Method] Sets the value of encode  
		* @param encode Boolean The new value. 
		*/
		setEncode?( encode?:boolean ): void;

		/** [Method] Sets the value of expandData  
		* @param expandData Boolean The new value. 
		*/
		setExpandData?( expandData?:boolean ): void;

		/** [Method] Sets the value of rootProperty  
		* @param rootProperty String The new value. 
		*/
		setRootProperty?( rootProperty?:string ): void;

		/** [Method] Write the record data to the request in the appropriate format  
		* @param request Object 
		* @param data Object 
		* @returns Ext.data.Request The request. 
		*/
		writeRecords?( request?:any, data?:any ): Ext.data.IRequest;

	}

}

declare module Ext.data {
	export interface IJsonWriter extends Ext.data.writer.IWriter {
		/** [Config Option] (Boolean) */
		allowSingle?: boolean;
		/** [Config Option] (Boolean) */
		encode?: boolean;
		/** [Config Option] (Boolean) */
		expandData?: boolean;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Method] Returns the value of allowSingle  
		* @returns Boolean 
		*/
		getAllowSingle?(): boolean;

		/** [Method] Returns the value of encode  
		* @returns Boolean 
		*/
		getEncode?(): boolean;

		/** [Method] Returns the value of expandData  
		* @returns Boolean 
		*/
		getExpandData?(): boolean;

		/** [Method] The Reader classes support dot delimited data mappings for extracting nested raw data into fields so the writer must  
		* @param data Object 
		*/
		getExpandedData?( data?:any ): void;

		/** [Method] Returns the value of rootProperty  
		* @returns String 
		*/
		getRootProperty?(): string;

		/** [Method] Sets the value of allowSingle  
		* @param allowSingle Boolean The new value. 
		*/
		setAllowSingle?( allowSingle?:boolean ): void;

		/** [Method] Sets the value of encode  
		* @param encode Boolean The new value. 
		*/
		setEncode?( encode?:boolean ): void;

		/** [Method] Sets the value of expandData  
		* @param expandData Boolean The new value. 
		*/
		setExpandData?( expandData?:boolean ): void;

		/** [Method] Sets the value of rootProperty  
		* @param rootProperty String The new value. 
		*/
		setRootProperty?( rootProperty?:string ): void;

		/** [Method] Write the record data to the request in the appropriate format  
		* @param request Object 
		* @param data Object 
		* @returns Ext.data.Request The request. 
		*/
		writeRecords?( request?:any, data?:any ): Ext.data.IRequest;

	}

}

declare module Ext.data.writer {
	export interface IWriter extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Config Option] (Object) */
		allDataOptions?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (String) */
		nameProperty?: string;
		/** [Config Option] (Object) */
		partialDataOptions?: any;
		/** [Config Option] (Function|Object) */
		transform?: any;
		/** [Config Option] (Boolean) */
		writeAllFields?: boolean;
		/** [Config Option] (Boolean) */
		writeRecordId?: boolean;
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Boolean) */
		isWriter?: boolean;

		/** [Method] Returns the value of allDataOptions  
		* @returns Object 
		*/
		getAllDataOptions?(): any;

		/** [Method] Returns the value of clientIdProperty  
		* @returns String 
		*/
		getClientIdProperty?(): string;

		/** [Method] Returns the value of dateFormat  
		* @returns String 
		*/
		getDateFormat?(): string;

		/** [Method] Returns the value of nameProperty  
		* @returns String 
		*/
		getNameProperty?(): string;

		/** [Method] Returns the value of partialDataOptions  
		* @returns Object 
		*/
		getPartialDataOptions?(): any;

		/** [Method] Formats the data for each record before sending it to the server  
		* @param record Ext.data.Model The record that we are writing to the server. 
		* @param operation Ext.data.operation.Operation An operation object. 
		* @returns Object An object literal of name/value keys to be written to the server. By default this method returns the data property on the record. 
		*/
		getRecordData?( record?:Ext.data.IModel, operation?:Ext.data.operation.IOperation ): any;

		/** [Method] Returns the value of transform  
		* @returns Function|Object 
		*/
		getTransform?(): any;

		/** [Method] Returns the value of writeAllFields  
		* @returns Boolean 
		*/
		getWriteAllFields?(): boolean;

		/** [Method] Returns the value of writeRecordId  
		* @returns Boolean 
		*/
		getWriteRecordId?(): boolean;

		/** [Method] Sets the value of allDataOptions  
		* @param allDataOptions Object The new value. 
		*/
		setAllDataOptions?( allDataOptions?:any ): void;

		/** [Method] Sets the value of clientIdProperty  
		* @param clientIdProperty String The new value. 
		*/
		setClientIdProperty?( clientIdProperty?:string ): void;

		/** [Method] Sets the value of dateFormat  
		* @param dateFormat String The new value. 
		*/
		setDateFormat?( dateFormat?:string ): void;

		/** [Method] Sets the value of nameProperty  
		* @param nameProperty String The new value. 
		*/
		setNameProperty?( nameProperty?:string ): void;

		/** [Method] Sets the value of partialDataOptions  
		* @param partialDataOptions Object The new value. 
		*/
		setPartialDataOptions?( partialDataOptions?:any ): void;

		/** [Method] Sets the value of transform  
		* @param transform Function|Object The new value. 
		*/
		setTransform?( transform?:any ): void;

		/** [Method] Sets the value of writeAllFields  
		* @param writeAllFields Boolean The new value. 
		*/
		setWriteAllFields?( writeAllFields?:boolean ): void;

		/** [Method] Sets the value of writeRecordId  
		* @param writeRecordId Boolean The new value. 
		*/
		setWriteRecordId?( writeRecordId?:boolean ): void;

		/** [Method] Prepares a Proxy s Ext data Request object  
		* @param request Ext.data.Request The request object. 
		* @returns Ext.data.Request The modified request object. 
		*/
		write?( request?:Ext.data.IRequest ): Ext.data.IRequest;

		/** [Method] Write the record data to the request in the appropriate format  
		* @param request Ext.data.Request The request. 
		* @param data Array An array of objects containing data. 
		* @returns Ext.data.Request The request. 
		*/
		writeRecords?( request?:Ext.data.IRequest, data?:any[] ): Ext.data.IRequest;

	}

}

declare module Ext.data {
	export interface IDataWriter extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Config Option] (Object) */
		allDataOptions?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (String) */
		nameProperty?: string;
		/** [Config Option] (Object) */
		partialDataOptions?: any;
		/** [Config Option] (Function|Object) */
		transform?: any;
		/** [Config Option] (Boolean) */
		writeAllFields?: boolean;
		/** [Config Option] (Boolean) */
		writeRecordId?: boolean;
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Boolean) */
		isWriter?: boolean;

		/** [Method] Returns the value of allDataOptions  
		* @returns Object 
		*/
		getAllDataOptions?(): any;

		/** [Method] Returns the value of clientIdProperty  
		* @returns String 
		*/
		getClientIdProperty?(): string;

		/** [Method] Returns the value of dateFormat  
		* @returns String 
		*/
		getDateFormat?(): string;

		/** [Method] Returns the value of nameProperty  
		* @returns String 
		*/
		getNameProperty?(): string;

		/** [Method] Returns the value of partialDataOptions  
		* @returns Object 
		*/
		getPartialDataOptions?(): any;

		/** [Method] Formats the data for each record before sending it to the server  
		* @param record Ext.data.Model The record that we are writing to the server. 
		* @param operation Ext.data.operation.Operation An operation object. 
		* @returns Object An object literal of name/value keys to be written to the server. By default this method returns the data property on the record. 
		*/
		getRecordData?( record?:Ext.data.IModel, operation?:Ext.data.operation.IOperation ): any;

		/** [Method] Returns the value of transform  
		* @returns Function|Object 
		*/
		getTransform?(): any;

		/** [Method] Returns the value of writeAllFields  
		* @returns Boolean 
		*/
		getWriteAllFields?(): boolean;

		/** [Method] Returns the value of writeRecordId  
		* @returns Boolean 
		*/
		getWriteRecordId?(): boolean;

		/** [Method] Sets the value of allDataOptions  
		* @param allDataOptions Object The new value. 
		*/
		setAllDataOptions?( allDataOptions?:any ): void;

		/** [Method] Sets the value of clientIdProperty  
		* @param clientIdProperty String The new value. 
		*/
		setClientIdProperty?( clientIdProperty?:string ): void;

		/** [Method] Sets the value of dateFormat  
		* @param dateFormat String The new value. 
		*/
		setDateFormat?( dateFormat?:string ): void;

		/** [Method] Sets the value of nameProperty  
		* @param nameProperty String The new value. 
		*/
		setNameProperty?( nameProperty?:string ): void;

		/** [Method] Sets the value of partialDataOptions  
		* @param partialDataOptions Object The new value. 
		*/
		setPartialDataOptions?( partialDataOptions?:any ): void;

		/** [Method] Sets the value of transform  
		* @param transform Function|Object The new value. 
		*/
		setTransform?( transform?:any ): void;

		/** [Method] Sets the value of writeAllFields  
		* @param writeAllFields Boolean The new value. 
		*/
		setWriteAllFields?( writeAllFields?:boolean ): void;

		/** [Method] Sets the value of writeRecordId  
		* @param writeRecordId Boolean The new value. 
		*/
		setWriteRecordId?( writeRecordId?:boolean ): void;

		/** [Method] Prepares a Proxy s Ext data Request object  
		* @param request Ext.data.Request The request object. 
		* @returns Ext.data.Request The modified request object. 
		*/
		write?( request?:Ext.data.IRequest ): Ext.data.IRequest;

		/** [Method] Write the record data to the request in the appropriate format  
		* @param request Ext.data.Request The request. 
		* @param data Array An array of objects containing data. 
		* @returns Ext.data.Request The request. 
		*/
		writeRecords?( request?:Ext.data.IRequest, data?:any[] ): Ext.data.IRequest;

	}

}

declare module Ext.data {
	export interface IWriter extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Config Option] (Object) */
		allDataOptions?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (String) */
		nameProperty?: string;
		/** [Config Option] (Object) */
		partialDataOptions?: any;
		/** [Config Option] (Function|Object) */
		transform?: any;
		/** [Config Option] (Boolean) */
		writeAllFields?: boolean;
		/** [Config Option] (Boolean) */
		writeRecordId?: boolean;
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Boolean) */
		isWriter?: boolean;

		/** [Method] Returns the value of allDataOptions  
		* @returns Object 
		*/
		getAllDataOptions?(): any;

		/** [Method] Returns the value of clientIdProperty  
		* @returns String 
		*/
		getClientIdProperty?(): string;

		/** [Method] Returns the value of dateFormat  
		* @returns String 
		*/
		getDateFormat?(): string;

		/** [Method] Returns the value of nameProperty  
		* @returns String 
		*/
		getNameProperty?(): string;

		/** [Method] Returns the value of partialDataOptions  
		* @returns Object 
		*/
		getPartialDataOptions?(): any;

		/** [Method] Formats the data for each record before sending it to the server  
		* @param record Ext.data.Model The record that we are writing to the server. 
		* @param operation Ext.data.operation.Operation An operation object. 
		* @returns Object An object literal of name/value keys to be written to the server. By default this method returns the data property on the record. 
		*/
		getRecordData?( record?:Ext.data.IModel, operation?:Ext.data.operation.IOperation ): any;

		/** [Method] Returns the value of transform  
		* @returns Function|Object 
		*/
		getTransform?(): any;

		/** [Method] Returns the value of writeAllFields  
		* @returns Boolean 
		*/
		getWriteAllFields?(): boolean;

		/** [Method] Returns the value of writeRecordId  
		* @returns Boolean 
		*/
		getWriteRecordId?(): boolean;

		/** [Method] Sets the value of allDataOptions  
		* @param allDataOptions Object The new value. 
		*/
		setAllDataOptions?( allDataOptions?:any ): void;

		/** [Method] Sets the value of clientIdProperty  
		* @param clientIdProperty String The new value. 
		*/
		setClientIdProperty?( clientIdProperty?:string ): void;

		/** [Method] Sets the value of dateFormat  
		* @param dateFormat String The new value. 
		*/
		setDateFormat?( dateFormat?:string ): void;

		/** [Method] Sets the value of nameProperty  
		* @param nameProperty String The new value. 
		*/
		setNameProperty?( nameProperty?:string ): void;

		/** [Method] Sets the value of partialDataOptions  
		* @param partialDataOptions Object The new value. 
		*/
		setPartialDataOptions?( partialDataOptions?:any ): void;

		/** [Method] Sets the value of transform  
		* @param transform Function|Object The new value. 
		*/
		setTransform?( transform?:any ): void;

		/** [Method] Sets the value of writeAllFields  
		* @param writeAllFields Boolean The new value. 
		*/
		setWriteAllFields?( writeAllFields?:boolean ): void;

		/** [Method] Sets the value of writeRecordId  
		* @param writeRecordId Boolean The new value. 
		*/
		setWriteRecordId?( writeRecordId?:boolean ): void;

		/** [Method] Prepares a Proxy s Ext data Request object  
		* @param request Ext.data.Request The request object. 
		* @returns Ext.data.Request The modified request object. 
		*/
		write?( request?:Ext.data.IRequest ): Ext.data.IRequest;

		/** [Method] Write the record data to the request in the appropriate format  
		* @param request Ext.data.Request The request. 
		* @param data Array An array of objects containing data. 
		* @returns Ext.data.Request The request. 
		*/
		writeRecords?( request?:Ext.data.IRequest, data?:any[] ): Ext.data.IRequest;

	}

}

declare module Ext.data.writer {
	export interface IXml extends Ext.data.writer.IWriter {
		/** [Config Option] (String) */
		defaultDocumentRoot?: string;
		/** [Config Option] (String) */
		documentRoot?: string;
		/** [Config Option] (String) */
		header?: string;
		/** [Config Option] (String) */
		record?: string;
		/** [Method] Returns the value of defaultDocumentRoot  
		* @returns String 
		*/
		getDefaultDocumentRoot?(): string;

		/** [Method] Returns the value of documentRoot  
		* @returns String 
		*/
		getDocumentRoot?(): string;

		/** [Method] Returns the value of header  
		* @returns String 
		*/
		getHeader?(): string;

		/** [Method] Returns the value of record  
		* @returns String 
		*/
		getRecord?(): string;

		/** [Method] Serializes an object to XML  
		* @param name String The element name for the object. 
		* @param o Object The object to serialize. 
		* @param output Array The array into which to serialize the object. 
		* @returns undefined 
		*/
		objectToElement?( name?:string, o?:any, output?:any[] ): void;

		/** [Method] Sets the value of defaultDocumentRoot  
		* @param defaultDocumentRoot String The new value. 
		*/
		setDefaultDocumentRoot?( defaultDocumentRoot?:string ): void;

		/** [Method] Sets the value of documentRoot  
		* @param documentRoot String The new value. 
		*/
		setDocumentRoot?( documentRoot?:string ): void;

		/** [Method] Sets the value of header  
		* @param header String The new value. 
		*/
		setHeader?( header?:string ): void;

		/** [Method] Sets the value of record  
		* @param record String The new value. 
		*/
		setRecord?( record?:string ): void;

		/** [Method] inherit docs 
		* @param request Object 
		* @param data Object 
		* @returns Ext.data.Request The request. 
		*/
		writeRecords?( request?:any, data?:any ): Ext.data.IRequest;

	}

}

declare module Ext.data {
	export interface IXmlWriter extends Ext.data.writer.IWriter {
		/** [Config Option] (String) */
		defaultDocumentRoot?: string;
		/** [Config Option] (String) */
		documentRoot?: string;
		/** [Config Option] (String) */
		header?: string;
		/** [Config Option] (String) */
		record?: string;
		/** [Method] Returns the value of defaultDocumentRoot  
		* @returns String 
		*/
		getDefaultDocumentRoot?(): string;

		/** [Method] Returns the value of documentRoot  
		* @returns String 
		*/
		getDocumentRoot?(): string;

		/** [Method] Returns the value of header  
		* @returns String 
		*/
		getHeader?(): string;

		/** [Method] Returns the value of record  
		* @returns String 
		*/
		getRecord?(): string;

		/** [Method] Serializes an object to XML  
		* @param name String The element name for the object. 
		* @param o Object The object to serialize. 
		* @param output Array The array into which to serialize the object. 
		* @returns undefined 
		*/
		objectToElement?( name?:string, o?:any, output?:any[] ): void;

		/** [Method] Sets the value of defaultDocumentRoot  
		* @param defaultDocumentRoot String The new value. 
		*/
		setDefaultDocumentRoot?( defaultDocumentRoot?:string ): void;

		/** [Method] Sets the value of documentRoot  
		* @param documentRoot String The new value. 
		*/
		setDocumentRoot?( documentRoot?:string ): void;

		/** [Method] Sets the value of header  
		* @param header String The new value. 
		*/
		setHeader?( header?:string ): void;

		/** [Method] Sets the value of record  
		* @param record String The new value. 
		*/
		setRecord?( record?:string ): void;

		/** [Method] inherit docs 
		* @param request Object 
		* @param data Object 
		* @returns Ext.data.Request The request. 
		*/
		writeRecords?( request?:any, data?:any ): Ext.data.IRequest;

	}

}

declare module Ext.data {
	export interface IXmlStore extends Ext.data.IStore {
	}

}

declare module Ext {
	export interface IDate {
	}
	export class Date {
		/** [Property] (String) */
		static DAY: string;

		/** [Property] (String) */
		static HOUR: string;

		/** [Property] (String) */
		static MILLI: string;

		/** [Property] (String) */
		static MINUTE: string;

		/** [Property] (String) */
		static MONTH: string;

		/** [Property] (String) */
		static SECOND: string;

		/** [Property] (String) */
		static YEAR: string;

		/** [Property] (String[]) */
		static dayNames: string[];

		/** [Property] (String) */
		static defaultFormat: string;

		/** [Property] (Object) */
		static defaults: any;

		/** [Property] (Object) */
		static formatCodes: any;

		/** [Property] (Object) */
		static formatFunctions: any;

		/** [Property] (String[]) */
		static monthNames: string[];

		/** [Property] (Object) */
		static monthNumbers: any;

		/** [Property] (Object) */
		static parseFunctions: any;

		/** [Property] (Boolean) */
		static useStrict: boolean;

		/** [Method] Provides a convenient method for performing basic date arithmetic  
		* @param date Date The date to modify 
		* @param interval String A valid date interval enum value. 
		* @param value Number The amount to add to the current date. 
		* @returns Date The new Date instance. 
		*/
		static add( date?:any, interval?:string, value?:number ): any;

		/** [Method] Align the date to unit  
		* @param date Date The date to be aligned. 
		* @param unit String The unit. This unit is compatible with the date interval constants. 
		* @returns Date The aligned date. 
		*/
		static align( date?:any, unit?:string ): any;

		/** [Method] Checks if a date falls on or between the given start and end dates  
		* @param date Date The date to check 
		* @param start Date Start date 
		* @param end Date End date 
		* @returns Boolean true if this date falls on or between the given start and end dates. 
		*/
		static between( date?:any, start?:any, end?:any ): boolean;

		/** [Method] Attempts to clear all time information from this Date by setting the time to midnight of the same day automatically 
		* @param date Date The date 
		* @param clone Boolean true to create a clone of this date, clear the time and return it. 
		* @returns Date this or the clone. 
		*/
		static clearTime( date?:any, clone?:boolean ): any;

		/** [Method] Creates and returns a new Date instance with the exact same date value as the called instance  
		* @param date Date The date. 
		* @returns Date The new Date instance. 
		*/
		static clone( date?:any ): any;

		/** [Method] Calculate how many units are there between two time  
		* @param min Date The first time. 
		* @param max Date The second time. 
		* @param unit String The unit. This unit is compatible with the date interval constants. 
		* @returns Number The maximum number n of units that min + n * unit &lt;= max. 
		*/
		static diff( min?:any, max?:any, unit?:string ): number;

		/** [Method] Formats a date given the supplied format string  
		* @param date Date The date to format 
		* @param format String The format string 
		* @returns String The formatted date or an empty string if date parameter is not a JavaScript Date object 
		*/
		static format( date?:any, format?:string ): string;

		/** [Method] Checks if the specified format contains information about anything other than the time  
		* @param format String The format to check 
		* @returns Boolean True if the format contains information about date/day information. 
		*/
		static formatContainsDateInfo( format?:string ): boolean;

		/** [Method] Checks if the specified format contains hour information 
		* @param format String The format to check 
		* @returns Boolean True if the format contains hour information 
		*/
		static formatContainsHourInfo( format?:string ): boolean;

		/** [Method] Get the numeric day number of the year adjusted for leap year  
		* @param date Date The date 
		* @returns Number 0 to 364 (365 in leap years). 
		*/
		static getDayOfYear( date?:any ): number;

		/** [Method] Get the number of days in the current month adjusted for leap year  
		* @param date Date The date 
		* @returns Number The number of days in the month. 
		*/
		static getDaysInMonth( date?:any ): number;

		/** [Method] Returns the number of milliseconds between two dates  
		* @param dateA Date The first date. 
		* @param dateB Date The second date. 
		* @returns Number The difference in milliseconds 
		*/
		static getElapsed( dateA?:any, dateB?:any ): number;

		/** [Method] Get the date of the first day of the month in which this date resides  
		* @param date Date The date 
		* @returns Date 
		*/
		static getFirstDateOfMonth( date?:any ): any;

		/** [Method] Get the first day of the current month adjusted for leap year  
		* @param date Date The date 
		* @returns Number The day number (0-6). 
		*/
		static getFirstDayOfMonth( date?:any ): number;

		/** [Method] Get the offset from GMT of the current date equivalent to the format specifier O  
		* @param date Date The date 
		* @param colon Boolean true to separate the hours and minutes with a colon. 
		* @returns String The 4-character offset string prefixed with + or - (e.g. '-0600'). 
		*/
		static getGMTOffset( date?:any, colon?:boolean ): string;

		/** [Method] Get the date of the last day of the month in which this date resides  
		* @param date Date The date 
		* @returns Date 
		*/
		static getLastDateOfMonth( date?:any ): any;

		/** [Method] Get the last day of the current month adjusted for leap year  
		* @param date Date The date 
		* @returns Number The day number (0-6). 
		*/
		static getLastDayOfMonth( date?:any ): number;

		/** [Method] Get the zero based JavaScript month number for the given short full month name  
		* @param name String The short/full month name. 
		* @returns Number The zero-based JavaScript month number. 
		*/
		static getMonthNumber( name?:string ): number;

		/** [Method] Get the short day name for the given day number  
		* @param day Number A zero-based JavaScript day number. 
		* @returns String The short day name. 
		*/
		static getShortDayName( day?:number ): string;

		/** [Method] Get the short month name for the given month number  
		* @param month Number A zero-based JavaScript month number. 
		* @returns String The short month name. 
		*/
		static getShortMonthName( month?:number ): string;

		/** [Method] Get the English ordinal suffix of the current day equivalent to the format specifier S  
		* @param date Date The date 
		* @returns String 'st, 'nd', 'rd' or 'th'. 
		*/
		static getSuffix( date?:any ): string;

		/** [Method] Get the timezone abbreviation of the current date equivalent to the format specifier T  
		* @param date Date The date 
		* @returns String The abbreviated timezone name (e.g. 'CST', 'PDT', 'EDT', 'MPST' ...). 
		*/
		static getTimezone( date?:any ): string;

		/** [Method] Get the numeric ISO 8601 week number of the year  
		* @param date Date The date. 
		* @returns Number 1 to 53. 
		*/
		static getWeekOfYear( date?:any ): number;

		/** [Method] Checks if the current date is affected by Daylight Saving Time DST 
		* @param date Date The date 
		* @returns Boolean true if the current date is affected by DST. 
		*/
		static isDST( date?:any ): boolean;

		/** [Method] Compares if two dates are equal by comparing their values  
		* @param date1 Date 
		* @param date2 Date 
		* @returns Boolean true if the date values are equal 
		*/
		static isEqual( date1?:any, date2?:any ): boolean;

		/** [Method] Checks if the current date falls within a leap year  
		* @param date Date The date 
		* @returns Boolean true if the current date falls within a leap year, false otherwise. 
		*/
		static isLeapYear( date?:any ): boolean;

		/** [Method] Checks if the passed Date parameters will cause a JavaScript Date rollover 
		* @param year Number 4-digit year. 
		* @param month Number 1-based month-of-year. 
		* @param day Number Day of month. 
		* @param hour Number Hour. 
		* @param minute Number Minute. 
		* @param second Number Second. 
		* @param millisecond Number Millisecond. 
		* @returns Boolean true if the passed parameters do not cause a Date "rollover", false otherwise. 
		*/
		static isValid( year?:number, month?:number, day?:number, hour?:number, minute?:number, second?:number, millisecond?:number ): boolean;

		/** [Method] Parses the passed string using the specified date format  
		* @param input String The raw date string. 
		* @param format String The expected date string format. 
		* @param strict Boolean true to validate date strings while parsing (i.e. prevents JavaScript Date "rollover"). Invalid date strings will return null when parsed. 
		* @returns Date/null The parsed Date, or null if an invalid date string. 
		*/
		static parse( input?:string, format?:string, strict?:boolean ): any;

		/** [Method] Provides a convenient method for performing basic date arithmetic  
		* @param date Date The date to modify 
		* @param interval String A valid date interval enum value. 
		* @param value Number The amount to subtract from the current date. 
		* @returns Date The new Date instance. 
		*/
		static subtract( date?:any, interval?:string, value?:number ): any;

		/** [Method] Removes all escaping for a date format string  
		* @param format String The format to unescape 
		* @returns String The unescaped format 
		*/
		static unescapeFormat( format?:string ): string;

	}

}

declare module Ext.dd {
	export interface IDD extends Ext.dd.IDragDrop {
		/** [Property] (Boolean) */
		scroll?: boolean;

		/** [Method] Sets the element to the location of the mousedown or click event maintaining the cursor location relative to the loc  
		* @param el HTMLElement the element to move 
		* @param iPageX Number the X coordinate of the mousedown or drag event 
		* @param iPageY Number the Y coordinate of the mousedown or drag event 
		*/
		alignElWithMouse?( el?:HTMLElement, iPageX?:number, iPageY?:number ): void;

		/** [Method] Sets up config options specific to this class  */
		applyConfig?(): void;

		/** [Method] Sets the pointer offset to the distance between the linked element s top left corner and the location the element was  
		* @param iPageX Number the X coordinate of the click 
		* @param iPageY Number the Y coordinate of the click 
		*/
		autoOffset?( iPageX?:number, iPageY?:number ): void;

		/** [Method] Event that fires prior to the onDrag event  
		* @param e Object 
		*/
		b4Drag?( e?:any ): void;

		/** [Method] Event that fires prior to the onMouseDown event  
		* @param e Object 
		*/
		b4MouseDown?( e?:any ): void;

		/** [Method] Saves the most recent position so that we can reset the constraints and tick marks on demand  
		* @param iPageX Number the current x position (this just makes it so we don't have to look it up again) 
		* @param iPageY Number the current y position (this just makes it so we don't have to look it up again) 
		*/
		cachePosition?( iPageX?:number, iPageY?:number ): void;

		/** [Method] Sets the pointer offset  
		* @param iDeltaX Number the distance from the left 
		* @param iDeltaY Number the distance from the top 
		*/
		setDelta?( iDeltaX?:number, iDeltaY?:number ): void;

		/** [Method] Sets the drag element to the location of the mousedown or click event maintaining the cursor location relative to th  
		* @param iPageX Number the X coordinate of the mousedown or drag event 
		* @param iPageY Number the Y coordinate of the mousedown or drag event 
		*/
		setDragElPos?( iPageX?:number, iPageY?:number ): void;

		/** [Method] toString method 
		* @returns String string representation of the dd obj 
		*/
		toString?(): string;

	}

}

declare module Ext.dd {
	export interface IDDProxy extends Ext.dd.IDD {
		/** [Property] (Boolean) */
		centerFrame?: boolean;

		/** [Property] (Boolean) */
		resizeFrame?: boolean;

		/** [Property] (String) */
		dragElId?: string;

		/** [Method] Sets up config options specific to this class  */
		applyConfig?(): void;

		/** [Method] overrides Ext dd DragDrop 
		* @param e Object 
		*/
		b4MouseDown?( e?:any ): void;

		/** [Method] Creates the proxy element if it does not yet exist */
		createFrame?(): void;

		/** [Method] overrides Ext dd DragDrop By default we try to move the element to the last location of the frame  
		* @param e Object 
		*/
		endDrag?( e?:any ): void;

		/** [Method] Initialization for the drag frame element  */
		initFrame?(): void;

		/** [Method] toString method 
		* @returns String string representation of the dd obj 
		*/
		toString?(): string;

	}

}

declare module Ext.dd {
	export interface IDDTarget extends Ext.dd.IDragDrop {
		/** [Method] toString method 
		* @returns String string representation of the dd obj 
		*/
		toString?(): string;

	}

}

declare module Ext.dd {
	export interface IDragDrop extends Ext.IBase {
		/** [Property] (Boolean) */
		available?: boolean;

		/** [Property] (Object) */
		config?: any;

		/** [Property] (Object) */
		defaultPadding?: any;

		/** [Property] (Object) */
		groups?: any;

		/** [Property] (Boolean) */
		hasOuterHandles?: boolean;

		/** [Property] (String) */
		id?: string;

		/** [Property] (Boolean) */
		ignoreSelf?: boolean;

		/** [Property] (String[]) */
		invalidHandleClasses?: string[];

		/** [Property] (Object) */
		invalidHandleIds?: any;

		/** [Property] (Object) */
		invalidHandleTypes?: any;

		/** [Property] (Boolean) */
		isTarget?: boolean;

		/** [Property] (Boolean) */
		maintainOffset?: boolean;

		/** [Property] (Boolean) */
		moveOnly?: boolean;

		/** [Property] (Number[]) */
		padding?: number[];

		/** [Property] (Boolean) */
		primaryButtonOnly?: boolean;

		/** [Property] (Number[]) */
		xTicks?: number[];

		/** [Property] (Number[]) */
		yTicks?: number[];

		/** [Method] Lets you specify a css class of elements that will not initiate a drag 
		* @param cssClass String the class of the elements you wish to ignore 
		*/
		addInvalidHandleClass?( cssClass?:string ): void;

		/** [Method] Lets you to specify an element id for a child of a drag handle that should not initiate a drag 
		* @param id String the element id of the element you wish to ignore 
		*/
		addInvalidHandleId?( id?:string ): void;

		/** [Method] Allows you to specify a tag name that should not start a drag operation when clicked  
		* @param tagName String the type of element to exclude 
		*/
		addInvalidHandleType?( tagName?:string ): void;

		/** [Method] Adds this instance to a group of related drag drop objects  
		* @param sGroup String the name of the group 
		*/
		addToGroup?( sGroup?:string ): void;

		/** [Method] Applies the configuration parameters that were passed into the constructor  */
		applyConfig?(): void;

		/** [Method] Clears any constraints applied to this instance  */
		clearConstraints?(): void;

		/** [Method] Clears any tick interval defined for this instance */
		clearTicks?(): void;

		/** [Method] Initializes the drag drop object s constraints to restrict movement to a certain element  
		* @param constrainTo String/HTMLElement/Ext.dom.Element The element or element ID to constrain to. 
		* @param pad Object/Number Pad provides a way to specify "padding" of the constraints, and can be either a number for symmetrical padding (4 would be equal to {left:4, right:4, top:4, bottom:4}) or an object containing the sides to pad. For example: {right:10, bottom:10} 
		* @param inContent Boolean Constrain the draggable in the content box of the element (inside padding and borders) 
		*/
		constrainTo?( constrainTo?:any, pad?:any, inContent?:boolean ): void;

		/** [Method] Destroy this DragDrop instance */
		destroy?(): void;

		/** [Method] Called when we are done dragging the object 
		* @param e Event the mouseup event 
		*/
		endDrag?( e?:Event ): void;

		/** [Method] Returns a reference to the actual element to drag  
		* @returns HTMLElement the html element 
		*/
		getDragEl?(): HTMLElement;

		/** [Method] Returns a reference to the linked element 
		* @returns HTMLElement the html element 
		*/
		getEl?(): HTMLElement;

		/** [Method] Sets up the DragDrop object  
		* @param id String the id of the linked element 
		* @param sGroup String the group of related items 
		* @param config Object configuration attributes 
		*/
		init?( id?:string, sGroup?:string, config?:any ): void;

		/** [Method] Initializes Targeting functionality only  
		* @param id String the id of the linked element 
		* @param sGroup String the group of related items 
		* @param config Object configuration attributes 
		*/
		initTarget?( id?:string, sGroup?:string, config?:any ): void;

		/** [Method] Returns true if this instance is locked or the drag drop mgr is locked meaning that all drag drop is disabled on th  
		* @returns Boolean true if this obj or all drag/drop is locked, else false 
		*/
		isLocked?(): boolean;

		/** [Method] Checks the tag exclusion list to see if this click should be ignored 
		* @param node HTMLElement the HTMLElement to evaluate 
		* @returns Boolean true if this is a valid tag type, false if not 
		*/
		isValidHandleChild?( node?:HTMLElement ): boolean;

		/** [Method] Locks this instance */
		lock?(): void;

		/** [Method] Override the onAvailable method to do what is needed after the initial position was determined  */
		onAvailable?(): void;

		/** [Method] Abstract method called during the onMouseMove event while dragging an object  
		* @param e Event the mousemove event 
		*/
		onDrag?( e?:Event ): void;

		/** [Method] Abstract method called when this item is dropped on another DragDrop obj 
		* @param e Event the mouseup event 
		* @param id String/Ext.dd.DragDrop[] In POINT mode, the element id this was dropped on. In INTERSECT mode, an array of dd items this was dropped on. 
		*/
		onDragDrop?( e?:Event, id?:any ): void;

		/** [Method] Abstract method called when this element fist begins hovering over another DragDrop obj 
		* @param e Event the mousemove event 
		* @param id String/Ext.dd.DragDrop[] In POINT mode, the element id this is hovering over. In INTERSECT mode, an array of one or more dragdrop items being hovered over. 
		*/
		onDragEnter?( e?:Event, id?:any ): void;

		/** [Method] Abstract method called when we are no longer hovering over an element 
		* @param e Event the mousemove event 
		* @param id String/Ext.dd.DragDrop[] In POINT mode, the element id this was hovering over. In INTERSECT mode, an array of dd items that the mouse is no longer over. 
		*/
		onDragOut?( e?:Event, id?:any ): void;

		/** [Method] Abstract method called when this element is hovering over another DragDrop obj 
		* @param e Event the mousemove event 
		* @param id String/Ext.dd.DragDrop[] In POINT mode, the element id this is hovering over. In INTERSECT mode, an array of dd items being hovered over. 
		*/
		onDragOver?( e?:Event, id?:any ): void;

		/** [Method] Abstract method called when this item is dropped on an area with no drop target 
		* @param e Event the mouseup event 
		*/
		onInvalidDrop?( e?:Event ): void;

		/** [Method] Called when a drag drop obj gets a mousedown 
		* @param e Event the mousedown event 
		*/
		onMouseDown?( e?:Event ): void;

		/** [Method] Called when a drag drop obj gets a mouseup 
		* @param e Event the mouseup event 
		*/
		onMouseUp?( e?:Event ): void;

		/** [Method] Removes this instance from the supplied interaction group 
		* @param sGroup String The group to drop 
		*/
		removeFromGroup?( sGroup?:string ): void;

		/** [Method] Unsets an invalid css class 
		* @param cssClass String the class of the element(s) you wish to re-enable 
		*/
		removeInvalidHandleClass?( cssClass?:string ): void;

		/** [Method] Unsets an invalid handle id 
		* @param id String the id of the element to re-enable 
		*/
		removeInvalidHandleId?( id?:string ): void;

		/** [Method] Unsets an excluded tag name set by addInvalidHandleType 
		* @param tagName String the type of element to unexclude 
		*/
		removeInvalidHandleType?( tagName?:string ): void;

		/** [Method] Must be called if you manually reposition a dd element  
		* @param maintainOffset Boolean 
		*/
		resetConstraints?( maintainOffset?:boolean ): void;

		/** [Method] Allows you to specify that an element other than the linked element will be moved with the cursor during a drag 
		* @param id String the id of the element that will be used to initiate the drag 
		*/
		setDragElId?( id?:string ): void;

		/** [Method] Allows you to specify a child of the linked element that should be used to initiate the drag operation  
		* @param id String the id of the element that will be used to initiate the drag. 
		*/
		setHandleElId?( id?:string ): void;

		/** [Method] Stores the initial placement of the linked element  
		* @param diffX Number the X offset, default 0 
		* @param diffY Number the Y offset, default 0 
		*/
		setInitPosition?( diffX?:number, diffY?:number ): void;

		/** [Method] Allows you to set an element outside of the linked element as a drag handle 
		* @param id String the id of the element that will be used to initiate the drag 
		*/
		setOuterHandleElId?( id?:string ): void;

		/** [Method] Configures the padding for the target zone in px  
		* @param iTop Number Top pad 
		* @param iRight Number Right pad 
		* @param iBot Number Bot pad 
		* @param iLeft Number Left pad 
		*/
		setPadding?( iTop?:number, iRight?:number, iBot?:number, iLeft?:number ): void;

		/** [Method] By default the element can be dragged any place on the screen  
		* @param iLeft Number the number of pixels the element can move to the left 
		* @param iRight Number the number of pixels the element can move to the right 
		* @param iTickSize Number parameter for specifying that the element should move iTickSize pixels at a time. 
		*/
		setXConstraint?( iLeft?:number, iRight?:number, iTickSize?:number ): void;

		/** [Method] By default the element can be dragged any place on the screen  
		* @param iUp Number the number of pixels the element can move up 
		* @param iDown Number the number of pixels the element can move down 
		* @param iTickSize Number parameter for specifying that the element should move iTickSize pixels at a time. 
		*/
		setYConstraint?( iUp?:number, iDown?:number, iTickSize?:number ): void;

		/** [Method] Abstract method called after a drag drop object is clicked and the drag or mousedown time thresholds have beeen met  
		* @param x Number X click location 
		* @param y Number Y click location 
		*/
		startDrag?( x?:number, y?:number ): void;

		/** [Method] toString method 
		* @returns String string representation of the dd obj 
		*/
		toString?(): string;

		/** [Method] Unlocks this instace */
		unlock?(): void;

		/** [Method] Removes all drag and drop hooks for this element */
		unreg?(): void;

	}

}

declare module Ext.dd {
	export interface IDragDropElement {
		/** [Method] Returns the X position of an html element 
		* @param el HTMLElement the element for which to get the position 
		* @returns Number the X coordinate 
		*/
		getPosX?( el?:HTMLElement ): number;

		/** [Method] Returns the Y position of an html element 
		* @param el HTMLElement the element for which to get the position 
		* @returns Number the Y coordinate 
		*/
		getPosY?( el?:HTMLElement ): number;

		/** [Method] Gets the scrollLeft 
		* @returns Number the document's scrollTop 
		*/
		getScrollLeft?(): number;

		/** [Method] Gets the scrollTop 
		* @returns Number the document's scrollTop 
		*/
		getScrollTop?(): number;

		/** [Method] Returns the specified element style property 
		* @param el HTMLElement the element 
		* @param styleProp String the style property 
		* @returns String The value of the style property 
		*/
		getStyle?( el?:HTMLElement, styleProp?:string ): string;

		/** [Method] Recursively searches the immediate parent and all child nodes for the handle element in order to determine wheter or 
		* @param node HTMLElement the html element to inspect 
		*/
		handleWasClicked?( node?:HTMLElement ): void;

		/** [Method] Sets the x y position of an element to the location of the target element  
		* @param moveEl HTMLElement The element to move 
		* @param targetEl HTMLElement The position reference element 
		*/
		moveToEl?( moveEl?:HTMLElement, targetEl?:HTMLElement ): void;

		/** [Method] Numeric array sort function 
		* @param a Number 
		* @param b Number 
		* @returns Number positive, negative or 0 
		*/
		numericSort?( a?:number, b?:number ): number;

		/** [Method] Swap two nodes  
		* @param n1 HTMLElement the first node to swap 
		* @param n2 HTMLElement the other node to swap 
		*/
		swapNode?( n1?:HTMLElement, n2?:HTMLElement ): void;

	}

}

declare module Ext.dd.dragdropmanager {
	export interface IElementWrapper {
		/** [Property] (Object) */
		css?: any;

		/** [Property] (Object) */
		el?: any;

		/** [Property] (Object) */
		id?: any;

	}

}

declare module Ext.dd {
	export interface IDragDropManager extends Ext.IBase {
	}
	export class DragDropManager {
		/** [Property] (Number) */
		static INTERSECT: number;

		/** [Property] (Number) */
		static POINT: number;

		/** [Property] (Number) */
		static clickPixelThresh: number;

		/** [Property] (String) */
		static dragCls: string;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Number) */
		static mode: number;

		/** [Property] (Boolean) */
		static notifyOccluded: boolean;

		/** [Property] (Boolean) */
		static preventDefault: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (Boolean) */
		static stopPropagation: boolean;

		/** [Property] (Boolean) */
		static useCache: boolean;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Helper function for getting the best match from the list of drag and drop objects returned by the drag and drop event  
		* @param dds Ext.dd.DragDrop[] The array of drag and drop objects targeted 
		* @returns Ext.dd.DragDrop The best single match 
		*/
		static getBestMatch( dds?:Ext.dd.IDragDrop[] ): Ext.dd.IDragDrop;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the style property for the DOM element i e  document getElById id style  
		* @param id String the id of the elment to get 
		* @returns Object The style property of the element 
		*/
		static getCss( id?:string ): any;

		/** [Method] Returns the DragDrop instance for a given id 
		* @param id String the id of the DragDrop object 
		* @returns Ext.dd.DragDrop the drag drop object, null if it is not found 
		*/
		static getDDById( id?:string ): Ext.dd.IDragDrop;

		/** [Method] Returns the actual DOM element 
		* @param id String the id of the elment to get 
		* @returns Object The element 
		*/
		static getElement( id?:string ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Returns a Region object containing the drag and drop element s position and size including the padding configured fo  
		* @param oDD Ext.dd.DragDrop the drag and drop object to get the location for. 
		* @returns Ext.util.Region a Region object representing the total area the element occupies, including any padding the instance is configured for. 
		*/
		static getLocation( oDD?:Ext.dd.IDragDrop ): Ext.util.IRegion;

		/** [Method] Returns the drag and drop instances that are in all groups the passed in instance belongs to  
		* @param p_oDD Ext.dd.DragDrop the obj to get related data for 
		* @param bTargetsOnly Boolean if true, only return targetable objs 
		* @returns Ext.dd.DragDrop[] the related instances 
		*/
		static getRelated( p_oDD?:Ext.dd.IDragDrop, bTargetsOnly?:boolean ): Ext.dd.IDragDrop[];

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Utility function to determine if a given element has been registered as a drag drop item  
		* @param id String the element id to check 
		* @returns Boolean true if this element is a DragDrop item, false otherwise 
		*/
		static isDragDrop( id?:string ): boolean;

		/** [Method] Utility function to determine if a given element has been registered as a drag drop handle for the given Drag Drop ob  
		* @param id String the element id to check 
		* @returns Boolean true if this element is a DragDrop handle, false otherwise 
		*/
		static isHandle( id?:string ): boolean;

		/** [Method] Returns true if the specified dd target is a legal target for the specifice drag obj 
		* @param oDD Ext.dd.DragDrop the drag obj 
		* @param oTargetDD Ext.dd.DragDrop the target 
		* @returns Boolean true if the target is a legal target for the dd obj 
		*/
		static isLegalTarget( oDD?:Ext.dd.IDragDrop, oTargetDD?:Ext.dd.IDragDrop ): boolean;

		/** [Method] Is drag and drop locked  
		* @returns Boolean True if drag and drop is locked, false otherwise. 
		*/
		static isLocked(): boolean;

		/** [Method] My goal is to be able to transparently determine if an object is typeof DragDrop and the exact subclass of DragDrop  
		* @param the Object object to evaluate 
		* @returns Boolean true if typeof oDD = DragDrop 
		*/
		static isTypeOfDD( the?:any ): boolean;

		/** [Method] Lock all drag and drop functionality */
		static lock(): void;

		/** [Method] Refreshes the cache of the top left and bottom right points of the drag and drop objects in the specified group s 
		* @param groups Object an associative array of groups to refresh 
		*/
		static refreshCache( groups?:any ): void;

		/** [Method] Each DragDrop instance must be registered with the DragDropManager  
		* @param oDD Ext.dd.DragDrop the DragDrop object to register 
		* @param sGroup String the name of the group this element belongs to 
		*/
		static regDragDrop( oDD?:Ext.dd.IDragDrop, sGroup?:string ): void;

		/** [Method] Each DragDrop handle element must be registered  
		* @param sDDId String the DragDrop id this element is a handle for 
		* @param sHandleId String the id of the element that is the drag handle 
		*/
		static regHandle( sDDId?:string, sHandleId?:string ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Fired when either the drag pixel threshold or the mousedown hold time threshold has been met  
		* @param x Number the X position of the original mousedown 
		* @param y Number the Y position of the original mousedown 
		*/
		static startDrag( x?:number, y?:number ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Utility to stop event propagation and event default if these features are turned on  
		* @param e Event the event as returned by this.getEvent() 
		*/
		static stopEvent( e?:Event ): void;

		/** [Method] Unlock all drag and drop functionality */
		static unlock(): void;

		/** [Method] This checks to make sure an element exists and is in the DOM  
		* @param el HTMLElement the element to check 
		* @returns Boolean true if the element looks usable 
		*/
		static verifyEl( el?:HTMLElement ): boolean;

	}

}

declare module Ext.dd {
	export interface IDragDropMgr extends Ext.IBase {
	}
	export class DragDropMgr {
		/** [Property] (Number) */
		static INTERSECT: number;

		/** [Property] (Number) */
		static POINT: number;

		/** [Property] (Number) */
		static clickPixelThresh: number;

		/** [Property] (String) */
		static dragCls: string;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Number) */
		static mode: number;

		/** [Property] (Boolean) */
		static notifyOccluded: boolean;

		/** [Property] (Boolean) */
		static preventDefault: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (Boolean) */
		static stopPropagation: boolean;

		/** [Property] (Boolean) */
		static useCache: boolean;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Helper function for getting the best match from the list of drag and drop objects returned by the drag and drop event  
		* @param dds Ext.dd.DragDrop[] The array of drag and drop objects targeted 
		* @returns Ext.dd.DragDrop The best single match 
		*/
		static getBestMatch( dds?:Ext.dd.IDragDrop[] ): Ext.dd.IDragDrop;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the style property for the DOM element i e  document getElById id style  
		* @param id String the id of the elment to get 
		* @returns Object The style property of the element 
		*/
		static getCss( id?:string ): any;

		/** [Method] Returns the DragDrop instance for a given id 
		* @param id String the id of the DragDrop object 
		* @returns Ext.dd.DragDrop the drag drop object, null if it is not found 
		*/
		static getDDById( id?:string ): Ext.dd.IDragDrop;

		/** [Method] Returns the actual DOM element 
		* @param id String the id of the elment to get 
		* @returns Object The element 
		*/
		static getElement( id?:string ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Returns a Region object containing the drag and drop element s position and size including the padding configured fo  
		* @param oDD Ext.dd.DragDrop the drag and drop object to get the location for. 
		* @returns Ext.util.Region a Region object representing the total area the element occupies, including any padding the instance is configured for. 
		*/
		static getLocation( oDD?:Ext.dd.IDragDrop ): Ext.util.IRegion;

		/** [Method] Returns the drag and drop instances that are in all groups the passed in instance belongs to  
		* @param p_oDD Ext.dd.DragDrop the obj to get related data for 
		* @param bTargetsOnly Boolean if true, only return targetable objs 
		* @returns Ext.dd.DragDrop[] the related instances 
		*/
		static getRelated( p_oDD?:Ext.dd.IDragDrop, bTargetsOnly?:boolean ): Ext.dd.IDragDrop[];

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Utility function to determine if a given element has been registered as a drag drop item  
		* @param id String the element id to check 
		* @returns Boolean true if this element is a DragDrop item, false otherwise 
		*/
		static isDragDrop( id?:string ): boolean;

		/** [Method] Utility function to determine if a given element has been registered as a drag drop handle for the given Drag Drop ob  
		* @param id String the element id to check 
		* @returns Boolean true if this element is a DragDrop handle, false otherwise 
		*/
		static isHandle( id?:string ): boolean;

		/** [Method] Returns true if the specified dd target is a legal target for the specifice drag obj 
		* @param oDD Ext.dd.DragDrop the drag obj 
		* @param oTargetDD Ext.dd.DragDrop the target 
		* @returns Boolean true if the target is a legal target for the dd obj 
		*/
		static isLegalTarget( oDD?:Ext.dd.IDragDrop, oTargetDD?:Ext.dd.IDragDrop ): boolean;

		/** [Method] Is drag and drop locked  
		* @returns Boolean True if drag and drop is locked, false otherwise. 
		*/
		static isLocked(): boolean;

		/** [Method] My goal is to be able to transparently determine if an object is typeof DragDrop and the exact subclass of DragDrop  
		* @param the Object object to evaluate 
		* @returns Boolean true if typeof oDD = DragDrop 
		*/
		static isTypeOfDD( the?:any ): boolean;

		/** [Method] Lock all drag and drop functionality */
		static lock(): void;

		/** [Method] Refreshes the cache of the top left and bottom right points of the drag and drop objects in the specified group s 
		* @param groups Object an associative array of groups to refresh 
		*/
		static refreshCache( groups?:any ): void;

		/** [Method] Each DragDrop instance must be registered with the DragDropManager  
		* @param oDD Ext.dd.DragDrop the DragDrop object to register 
		* @param sGroup String the name of the group this element belongs to 
		*/
		static regDragDrop( oDD?:Ext.dd.IDragDrop, sGroup?:string ): void;

		/** [Method] Each DragDrop handle element must be registered  
		* @param sDDId String the DragDrop id this element is a handle for 
		* @param sHandleId String the id of the element that is the drag handle 
		*/
		static regHandle( sDDId?:string, sHandleId?:string ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Fired when either the drag pixel threshold or the mousedown hold time threshold has been met  
		* @param x Number the X position of the original mousedown 
		* @param y Number the Y position of the original mousedown 
		*/
		static startDrag( x?:number, y?:number ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Utility to stop event propagation and event default if these features are turned on  
		* @param e Event the event as returned by this.getEvent() 
		*/
		static stopEvent( e?:Event ): void;

		/** [Method] Unlock all drag and drop functionality */
		static unlock(): void;

		/** [Method] This checks to make sure an element exists and is in the DOM  
		* @param el HTMLElement the element to check 
		* @returns Boolean true if the element looks usable 
		*/
		static verifyEl( el?:HTMLElement ): boolean;

	}

}

declare module Ext.dd {
	export interface IDDM extends Ext.IBase {
	}
	export class DDM {
		/** [Property] (Number) */
		static INTERSECT: number;

		/** [Property] (Number) */
		static POINT: number;

		/** [Property] (Number) */
		static clickPixelThresh: number;

		/** [Property] (String) */
		static dragCls: string;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Number) */
		static mode: number;

		/** [Property] (Boolean) */
		static notifyOccluded: boolean;

		/** [Property] (Boolean) */
		static preventDefault: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (Boolean) */
		static stopPropagation: boolean;

		/** [Property] (Boolean) */
		static useCache: boolean;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Helper function for getting the best match from the list of drag and drop objects returned by the drag and drop event  
		* @param dds Ext.dd.DragDrop[] The array of drag and drop objects targeted 
		* @returns Ext.dd.DragDrop The best single match 
		*/
		static getBestMatch( dds?:Ext.dd.IDragDrop[] ): Ext.dd.IDragDrop;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the style property for the DOM element i e  document getElById id style  
		* @param id String the id of the elment to get 
		* @returns Object The style property of the element 
		*/
		static getCss( id?:string ): any;

		/** [Method] Returns the DragDrop instance for a given id 
		* @param id String the id of the DragDrop object 
		* @returns Ext.dd.DragDrop the drag drop object, null if it is not found 
		*/
		static getDDById( id?:string ): Ext.dd.IDragDrop;

		/** [Method] Returns the actual DOM element 
		* @param id String the id of the elment to get 
		* @returns Object The element 
		*/
		static getElement( id?:string ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Returns a Region object containing the drag and drop element s position and size including the padding configured fo  
		* @param oDD Ext.dd.DragDrop the drag and drop object to get the location for. 
		* @returns Ext.util.Region a Region object representing the total area the element occupies, including any padding the instance is configured for. 
		*/
		static getLocation( oDD?:Ext.dd.IDragDrop ): Ext.util.IRegion;

		/** [Method] Returns the drag and drop instances that are in all groups the passed in instance belongs to  
		* @param p_oDD Ext.dd.DragDrop the obj to get related data for 
		* @param bTargetsOnly Boolean if true, only return targetable objs 
		* @returns Ext.dd.DragDrop[] the related instances 
		*/
		static getRelated( p_oDD?:Ext.dd.IDragDrop, bTargetsOnly?:boolean ): Ext.dd.IDragDrop[];

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Utility function to determine if a given element has been registered as a drag drop item  
		* @param id String the element id to check 
		* @returns Boolean true if this element is a DragDrop item, false otherwise 
		*/
		static isDragDrop( id?:string ): boolean;

		/** [Method] Utility function to determine if a given element has been registered as a drag drop handle for the given Drag Drop ob  
		* @param id String the element id to check 
		* @returns Boolean true if this element is a DragDrop handle, false otherwise 
		*/
		static isHandle( id?:string ): boolean;

		/** [Method] Returns true if the specified dd target is a legal target for the specifice drag obj 
		* @param oDD Ext.dd.DragDrop the drag obj 
		* @param oTargetDD Ext.dd.DragDrop the target 
		* @returns Boolean true if the target is a legal target for the dd obj 
		*/
		static isLegalTarget( oDD?:Ext.dd.IDragDrop, oTargetDD?:Ext.dd.IDragDrop ): boolean;

		/** [Method] Is drag and drop locked  
		* @returns Boolean True if drag and drop is locked, false otherwise. 
		*/
		static isLocked(): boolean;

		/** [Method] My goal is to be able to transparently determine if an object is typeof DragDrop and the exact subclass of DragDrop  
		* @param the Object object to evaluate 
		* @returns Boolean true if typeof oDD = DragDrop 
		*/
		static isTypeOfDD( the?:any ): boolean;

		/** [Method] Lock all drag and drop functionality */
		static lock(): void;

		/** [Method] Refreshes the cache of the top left and bottom right points of the drag and drop objects in the specified group s 
		* @param groups Object an associative array of groups to refresh 
		*/
		static refreshCache( groups?:any ): void;

		/** [Method] Each DragDrop instance must be registered with the DragDropManager  
		* @param oDD Ext.dd.DragDrop the DragDrop object to register 
		* @param sGroup String the name of the group this element belongs to 
		*/
		static regDragDrop( oDD?:Ext.dd.IDragDrop, sGroup?:string ): void;

		/** [Method] Each DragDrop handle element must be registered  
		* @param sDDId String the DragDrop id this element is a handle for 
		* @param sHandleId String the id of the element that is the drag handle 
		*/
		static regHandle( sDDId?:string, sHandleId?:string ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Fired when either the drag pixel threshold or the mousedown hold time threshold has been met  
		* @param x Number the X position of the original mousedown 
		* @param y Number the Y position of the original mousedown 
		*/
		static startDrag( x?:number, y?:number ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Utility to stop event propagation and event default if these features are turned on  
		* @param e Event the event as returned by this.getEvent() 
		*/
		static stopEvent( e?:Event ): void;

		/** [Method] Unlock all drag and drop functionality */
		static unlock(): void;

		/** [Method] This checks to make sure an element exists and is in the DOM  
		* @param el HTMLElement the element to check 
		* @returns Boolean true if the element looks usable 
		*/
		static verifyEl( el?:HTMLElement ): boolean;

	}

}

declare module Ext.dd {
	export interface IDragSource extends Ext.dd.IDDProxy {
		/** [Config Option] (Boolean) */
		animRepair?: boolean;
		/** [Config Option] (String) */
		ddGroup?: string;
		/** [Config Option] (String) */
		dropAllowed?: string;
		/** [Config Option] (String) */
		dropNotAllowed?: string;
		/** [Config Option] (String) */
		repairHighlightColor?: string;
		/** [Property] (Object) */
		dragData?: any;

		/** [Method] An empty function by default but provided so that you can perform a custom action after a valid drag drop has occurr  
		* @param target Ext.dd.DragDrop The drop target 
		* @param e Event The event object 
		* @param id String The id of the dropped element 
		*/
		afterDragDrop?( target?:Ext.dd.IDragDrop, e?:Event, id?:string ): void;

		/** [Method] An empty function by default but provided so that you can perform a custom action when the dragged item enters the d  
		* @param target Ext.dd.DragDrop The drop target 
		* @param e Event The event object 
		* @param id String The id of the dragged element 
		*/
		afterDragEnter?( target?:Ext.dd.IDragDrop, e?:Event, id?:string ): void;

		/** [Method] An empty function by default but provided so that you can perform a custom action after the dragged item is dragged 
		* @param target Ext.dd.DragDrop The drop target 
		* @param e Event The event object 
		* @param id String The id of the dragged element 
		*/
		afterDragOut?( target?:Ext.dd.IDragDrop, e?:Event, id?:string ): void;

		/** [Method] An empty function by default but provided so that you can perform a custom action while the dragged item is over the  
		* @param target Ext.dd.DragDrop The drop target 
		* @param e Event The event object 
		* @param id String The id of the dragged element 
		*/
		afterDragOver?( target?:Ext.dd.IDragDrop, e?:Event, id?:string ): void;

		/** [Method] An empty function by default but provided so that you can perform a custom action after an invalid drop has occurred  
		* @param e Event The event object 
		* @param id String The id of the dropped element 
		*/
		afterInvalidDrop?( e?:Event, id?:string ): void;

		/** [Method] An empty function by default but provided so that you can perform a custom action after a valid drop has occurred by  
		* @param target Object The target DD 
		* @param e Event The event object 
		* @param id String The id of the dropped element 
		*/
		afterValidDrop?( target?:any, e?:Event, id?:string ): void;

		/** [Method] Sets the element to the location of the mousedown or click event maintaining the cursor location relative to the loc  */
		alignElWithMouse?(): void;

		/** [Method] An empty function by default but provided so that you can perform a custom action before the dragged item is dropped  
		* @param target Ext.dd.DragDrop The drop target 
		* @param e Event The event object 
		* @param id String The id of the dragged element 
		* @returns Boolean isValid True if the drag drop event is valid, else false to cancel 
		*/
		beforeDragDrop?( target?:Ext.dd.IDragDrop, e?:Event, id?:string ): boolean;

		/** [Method] An empty function by default but provided so that you can perform a custom action before the dragged item enters the  
		* @param target Ext.dd.DragDrop The drop target 
		* @param e Event The event object 
		* @param id String The id of the dragged element 
		* @returns Boolean isValid True if the drag event is valid, else false to cancel 
		*/
		beforeDragEnter?( target?:Ext.dd.IDragDrop, e?:Event, id?:string ): boolean;

		/** [Method] An empty function by default but provided so that you can perform a custom action before the dragged item is dragged  
		* @param target Ext.dd.DragDrop The drop target 
		* @param e Event The event object 
		* @param id String The id of the dragged element 
		* @returns Boolean isValid True if the drag event is valid, else false to cancel 
		*/
		beforeDragOut?( target?:Ext.dd.IDragDrop, e?:Event, id?:string ): boolean;

		/** [Method] An empty function by default but provided so that you can perform a custom action while the dragged item is over the  
		* @param target Ext.dd.DragDrop The drop target 
		* @param e Event The event object 
		* @param id String The id of the dragged element 
		* @returns Boolean isValid True if the drag event is valid, else false to cancel 
		*/
		beforeDragOver?( target?:Ext.dd.IDragDrop, e?:Event, id?:string ): boolean;

		/** [Method] An empty function by default but provided so that you can perform a custom action after an invalid drop has occurred  
		* @param target Ext.dd.DragDrop The drop target 
		* @param e Event The event object 
		* @param id String The id of the dragged element 
		* @returns Boolean isValid True if the invalid drop should proceed, else false to cancel 
		*/
		beforeInvalidDrop?( target?:Ext.dd.IDragDrop, e?:Event, id?:string ): boolean;

		/** [Method] Destroy this DragDrop instance */
		destroy?(): void;

		/** [Method] Returns the data object associated with this drag source 
		* @param e Object 
		* @returns Object data An object containing arbitrary data 
		*/
		getDragData?( e?:any ): any;

		/** [Method] Returns the drag source s underlying Ext dd StatusProxy 
		* @returns Ext.dd.StatusProxy proxy The StatusProxy 
		*/
		getProxy?(): Ext.dd.IStatusProxy;

		/** [Method] Hides the drag source s Ext dd StatusProxy */
		hideProxy?(): void;

		/** [Method] An empty function by default but provided so that you can perform a custom action before the initial drag event begi  
		* @param data Object An object containing arbitrary data to be shared with drop targets 
		* @param e Event The event object 
		* @returns Boolean isValid True if the drag event is valid, else false to cancel 
		*/
		onBeforeDrag?( data?:any, e?:Event ): boolean;

		/** [Method] An empty function by default but provided so that you can perform a custom action once the initial drag event has be  
		* @param x Number The x position of the click on the dragged object 
		* @param y Number The y position of the click on the dragged object 
		*/
		onStartDrag?( x?:number, y?:number ): void;

	}

}

declare module Ext.dd {
	export interface IDragTracker extends Ext.IBase, Ext.util.IObservable {
		/** [Config Option] (Boolean/Number) */
		autoStart?: any;
		/** [Config Option] (Ext.util.Region/Ext.dom.Element) */
		constrainTo?: any;
		/** [Config Option] (String) */
		delegate?: string;
		/** [Config Option] (Ext.dom.Element/HTMLElement/String) */
		el?: any;
		/** [Config Option] (String) */
		overCls?: string;
		/** [Config Option] (Boolean) */
		preventDefault?: boolean;
		/** [Config Option] (Boolean) */
		stopEvent?: boolean;
		/** [Config Option] (Number) */
		tolerance?: number;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
		/** [Property] (Boolean) */
		active?: boolean;

		/** [Property] (HTMLElement) */
		dragTarget?: HTMLElement;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the drag target  
		* @returns Ext.dom.Element The element currently being tracked. 
		*/
		getDragTarget?(): Ext.dom.IElement;

		/** [Method] Returns the X Y offset of the current mouse position from the mousedown point  
		* @param constrainMode String If omitted the true mouse position is returned. May be passed as point or dragTarget. See above. 
		* @returns Number[] The X, Y offset from the mousedown point, optionally constrained. 
		*/
		getOffset?( constrainMode?:string ): number[];

		/** [Method] Initializes the DragTracker on a given element  
		* @param el Ext.dom.Element/HTMLElement/String The element or element ID 
		*/
		initEl?( el?:any ): void;

		/** [Method] Template method which should be overridden by each DragTracker instance  
		* @param e Ext.event.Event The event object 
		*/
		onBeforeStart?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method which should be overridden by each DragTracker instance  
		* @param e Ext.event.Event The event object 
		*/
		onDrag?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method which should be overridden by each DragTracker instance  
		* @param e Ext.event.Event The event object 
		*/
		onEnd?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method which should be overridden by each DragTracker instance  
		* @param e Ext.event.Event The event object 
		*/
		onStart?( e?:Ext.event.IEvent ): void;

	}

}

declare module Ext.dd {
	export interface IDragZone extends Ext.dd.IDragSource {
		/** [Config Option] (Object/Boolean) */
		containerScroll?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		scrollEl?: any;
		/** [Method] Destroy this DragDrop instance */
		destroy?(): void;

		/** [Method] Called when a mousedown occurs in this container  
		* @param e Event The mouse down event 
		* @returns Object The dragData 
		*/
		getDragData?( e?:Event ): any;

		/** [Method] Called before a repair of an invalid drop to get the XY to animate to  
		* @param e Event The mouse up event 
		* @returns Number[] The xy location (e.g. [100, 200]) 
		*/
		getRepairXY?( e?:Event ): number[];

		/** [Method] Called once drag threshold has been reached to initialize the proxy element  
		* @param x Number The x position of the click on the dragged object 
		* @param y Number The y position of the click on the dragged object 
		* @returns Boolean true to continue the drag, false to cancel 
		*/
		onInitDrag?( x?:number, y?:number ): boolean;

	}

}

declare module Ext.dd {
	export interface IDropTarget extends Ext.dd.IDDTarget {
		/** [Config Option] (Boolean) */
		containerScroll?: boolean;
		/** [Config Option] (String) */
		ddGroup?: string;
		/** [Config Option] (String) */
		dropAllowed?: string;
		/** [Config Option] (String) */
		dropNotAllowed?: string;
		/** [Config Option] (String) */
		overClass?: string;
		/** [Property] (Boolean) */
		isTarget?: boolean;

		/** [Method] Destroy this DragDrop instance */
		destroy?(): void;

		/** [Method] The function a Ext dd DragSource calls once to notify this drop target that the dragged item has been dropped on it  
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop target 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag source 
		* @returns Boolean False if the drop was invalid. 
		*/
		notifyDrop?( source?:Ext.dd.IDragSource, e?:Event, data?:any ): boolean;

		/** [Method] The function a Ext dd DragSource calls once to notify this drop target that the source is now over the target  
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop target 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag source 
		* @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated 
		*/
		notifyEnter?( source?:Ext.dd.IDragSource, e?:Event, data?:any ): string;

		/** [Method] The function a Ext dd DragSource calls once to notify this drop target that the source has been dragged out of the ta  
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop target 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag source 
		*/
		notifyOut?( source?:Ext.dd.IDragSource, e?:Event, data?:any ): void;

		/** [Method] The function a Ext dd DragSource calls continuously while it is being dragged over the target  
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop target 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag source 
		* @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated 
		*/
		notifyOver?( source?:Ext.dd.IDragSource, e?:Event, data?:any ): string;

	}

}

declare module Ext.dd {
	export interface IDropZone extends Ext.dd.IDropTarget {
		/** [Method] Returns a custom data object associated with the DOM node that is the target of the event  
		* @param e Event The event 
		* @returns Object data The custom data 
		*/
		getTargetFromEvent?( e?:Event ): any;

		/** [Method] The function a Ext dd DragSource calls once to notify this drop zone that the dragged item has been dropped on it  
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop zone 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag source 
		* @returns Boolean False if the drop was invalid. 
		*/
		notifyDrop?( source?:Ext.dd.IDragSource, e?:Event, data?:any ): boolean;

		/** [Method] The function a Ext dd DragSource calls once to notify this drop zone that the source is now over the zone  
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop zone 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag source 
		* @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated 
		*/
		notifyEnter?( source?:Ext.dd.IDragSource, e?:Event, data?:any ): string;

		/** [Method] The function a Ext dd DragSource calls once to notify this drop zone that the source has been dragged out of the zone  
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop target 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag zone 
		*/
		notifyOut?( source?:Ext.dd.IDragSource, e?:Event, data?:any ): void;

		/** [Method] The function a Ext dd DragSource calls continuously while it is being dragged over the drop zone  
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop zone 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag source 
		* @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated 
		*/
		notifyOver?( source?:Ext.dd.IDragSource, e?:Event, data?:any ): string;

		/** [Method] Called when the DropZone determines that a Ext dd DragSource has been dropped on it but not on any of its registered  
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop zone 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag source 
		* @returns Boolean True if the drop was valid, else false 
		*/
		onContainerDrop?( source?:Ext.dd.IDragSource, e?:Event, data?:any ): boolean;

		/** [Method] Called while the DropZone determines that a Ext dd DragSource is being dragged over it but not over any of its regis  
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop zone 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag source 
		* @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated 
		*/
		onContainerOver?( source?:Ext.dd.IDragSource, e?:Event, data?:any ): string;

		/** [Method] Called when the DropZone determines that a Ext dd DragSource has been dropped onto the drop node  
		* @param nodeData Object The custom data associated with the drop node (this is the same value returned from getTargetFromEvent for this node) 
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop zone 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag source 
		* @returns Boolean True if the drop was valid, else false 
		*/
		onNodeDrop?( nodeData?:any, source?:Ext.dd.IDragSource, e?:Event, data?:any ): boolean;

		/** [Method] Called when the DropZone determines that a Ext dd DragSource has entered a drop node that has either been registered 
		* @param nodeData Object The custom data associated with the drop node (this is the same value returned from getTargetFromEvent for this node) 
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop zone 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag source 
		*/
		onNodeEnter?( nodeData?:any, source?:Ext.dd.IDragSource, e?:Event, data?:any ): void;

		/** [Method] Called when the DropZone determines that a Ext dd DragSource has been dragged out of the drop node without dropping  
		* @param nodeData Object The custom data associated with the drop node (this is the same value returned from getTargetFromEvent for this node) 
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop zone 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag source 
		*/
		onNodeOut?( nodeData?:any, source?:Ext.dd.IDragSource, e?:Event, data?:any ): void;

		/** [Method] Called while the DropZone determines that a Ext dd DragSource is over a drop node that has either been registered or 
		* @param nodeData Object The custom data associated with the drop node (this is the same value returned from getTargetFromEvent for this node) 
		* @param source Ext.dd.DragSource The drag source that was dragged over this drop zone 
		* @param e Event The event 
		* @param data Object An object containing arbitrary data supplied by the drag source 
		* @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated 
		*/
		onNodeOver?( nodeData?:any, source?:Ext.dd.IDragSource, e?:Event, data?:any ): string;

	}

}

declare module Ext.dd {
	export interface IRegistry extends Ext.IBase {
	}
	export class Registry {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the handle registered for a DOM Node by id 
		* @param id String/HTMLElement The DOM node or id to look up 
		* @returns Object handle The custom handle data 
		*/
		static getHandle( id?:any ): any;

		/** [Method] Returns the handle that is registered for the DOM node that is the target of the event 
		* @param e Event The event 
		* @returns Object handle The custom handle data 
		*/
		static getHandleFromEvent( e?:Event ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Returns a custom data object that is registered for a DOM node by id 
		* @param id String/HTMLElement The DOM node or id to look up 
		* @returns Object data The custom data 
		*/
		static getTarget( id?:any ): any;

		/** [Method] Returns a custom data object that is registered for the DOM node that is the target of the event 
		* @param e Event The event 
		* @returns Object data The custom data 
		*/
		static getTargetFromEvent( e?:Event ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Registers a drag drop element  
		* @param element String/HTMLElement The id or DOM node to register 
		* @param data Object An custom data object that will be passed between the elements that are involved in drag drop operations. You can populate this object with any arbitrary properties that your own code knows how to interpret, plus there are some specific properties known to the Registry that should be populated in the data object (if applicable): 
		*/
		static register( element?:any, data?:any ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Unregister a drag drop element 
		* @param element String/HTMLElement The id or DOM node to unregister 
		*/
		static unregister( element?:any ): void;

	}

}

declare module Ext.dd {
	export interface IScrollManager extends Ext.IBase {
	}
	export class ScrollManager {
		/** [Property] (Number) */
		static animDuration: number;

		/** [Property] (Boolean) */
		static animate: boolean;

		/** [Property] (String) */
		static ddGroup: string;

		/** [Property] (Number) */
		static frequency: number;

		/** [Property] (Object) */
		static hthresh: any;

		/** [Property] (Number) */
		static increment: number;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (Object) */
		static vthresh: any;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Manually trigger a cache refresh  */
		static refreshCache(): void;

		/** [Method] Registers new overflow element s to auto scroll 
		* @param el String/HTMLElement/Ext.dom.Element/String[]/HTMLElement[]/Ext.dom.Element[] The id of or the element to be scrolled or an array of either 
		*/
		static register( el?:any ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Unregisters overflow element s so they are no longer scrolled 
		* @param el String/HTMLElement/Ext.dom.Element/String[]/HTMLElement[]/Ext.dom.Element[] The id of or the element to be removed or an array of either 
		*/
		static unregister( el?:any ): void;

	}

}

declare module Ext.dd {
	export interface IStatusProxy extends Ext.IComponent {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		dropAllowed?: string;
		/** [Config Option] (String) */
		dropNotAllowed?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Method] Returns the ghost element 
		* @returns Ext.dom.Element el 
		*/
		getGhost?(): Ext.dom.IElement;

		/** [Method] Hides the proxy 
		* @param clear Boolean True to reset the status and clear the ghost contents, false to preserve them 
		* @returns Ext.Component 
		*/
		hide?( clear?:boolean ): Ext.IComponent;

		/** [Method] Causes the proxy to return to its position of origin via an animation  
		* @param xy Number[] The XY position of the element ([x, y]) 
		* @param callback Function The function to call after the repair is complete. 
		* @param scope Object The scope (this reference) in which the callback function is executed. Defaults to the browser window. 
		*/
		repair?( xy?:number[], callback?:any, scope?:any ): void;

		/** [Method] Resets the status indicator to the default dropNotAllowed value 
		* @param clearGhost Boolean True to also remove all content from the ghost, false to preserve it 
		*/
		reset?( clearGhost?:boolean ): void;

		/** [Method] Updates the proxy s visual element to indicate the status of whether or not drop is allowed over the current target e  
		* @param cssClass String The css class for the new drop status indicator image 
		*/
		setStatus?( cssClass?:string ): void;

		/** [Method] Stops the repair animation if it s currently running */
		stop?(): void;

		/** [Method] Force the Element to sync its shadow and shim positions */
		sync?(): void;

		/** [Method] Updates the contents of the ghost element 
		* @param html String/HTMLElement The html that will replace the current innerHTML of the ghost element, or a DOM node to append as the child of the ghost element (in which case the innerHTML will be cleared first). 
		*/
		update?( html?:any ): void;

	}

}

declare module Ext.direct {
	export interface IEvent extends Ext.IBase {
		/** [Method] Return the raw data for this event  
		* @returns Mixed The data from the event 
		*/
		getData?(): any;

		/** [Method] Return the name for this event  
		* @returns String The name of event 
		*/
		getName?(): string;

	}

}

declare module Ext.direct {
	export interface IExceptionEvent extends Ext.direct.IRemotingEvent {
	}

}

declare module Ext.direct {
	export interface IJsonProvider extends Ext.direct.IProvider {
		/** [Method] Create an event from a response object 
		* @param response Object Response object 
		* @returns Ext.direct.Event The event 
		*/
		createEvent?( response?:any ): Ext.direct.IEvent;

		/** [Method] Creates a set of events based on the XHR response 
		* @param response Object The XHR response 
		* @returns Ext.direct.Event[] An array of Ext.direct.Event 
		*/
		createEvents?( response?:any ): Ext.direct.IEvent[];

	}

}

declare module Ext.direct {
	export interface IManager extends Ext.IBase, Ext.mixin.IObservable {
	}
	export class Manager {
		/** [Config Option] (String) */
		static varName: string;
		/** [Property] (Object) */
		static exceptions: any;

		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Adds an Ext Direct Provider and creates the proxy or stub methods to execute server side methods for RemotingProviders  
		* @param provider Ext.direct.Provider/Object... Accepts any number of Provider descriptions (an instance or config object for a Provider). Each Provider description instructs Ext Direct how to create client-side stub methods. 
		*/
		static addProvider( provider?:any ): void;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Retrieves a provider by the id specified when the provider is added  
		* @param id String/Ext.direct.Provider The id of the provider, or the provider instance. 
		*/
		static getProvider( id?:any ): void;

		/** [Method] Returns the value of varName  
		* @returns String 
		*/
		static getVarName(): string;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Load Ext Direct Provider API declaration from the server and construct a new Provider instance  
		* @param config Object Remoting API configuration. 
		* @param callback Function Optional callback to execute when Provider is created, or when an error has occured. 
		* @param scope Object Optional scope to execute callback function in. For additional information see the [Ext Direct specification][1]. 
		*/
		static loadProvider( config?:any, callback?:any, scope?:any ): void;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Parses a direct function  
		* @param fn String/Function The direct function 
		* @returns Function The function to use in the direct call. Null if not found 
		*/
		static parseMethod( fn?:any ): any;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Removes the provider  
		* @param provider String/Ext.direct.Provider The provider instance or the id of the provider. 
		* @returns Ext.direct.Provider The provider, null if not found. 
		*/
		static removeProvider( provider?:any ): Ext.direct.IProvider;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Sets the value of varName  
		* @param varName String The new value. 
		*/
		static setVarName( varName?:string ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext {
	export interface IDirect extends Ext.IBase, Ext.mixin.IObservable {
	}
	export class Direct {
		/** [Config Option] (String) */
		static varName: string;
		/** [Property] (Object) */
		static exceptions: any;

		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Adds an Ext Direct Provider and creates the proxy or stub methods to execute server side methods for RemotingProviders  
		* @param provider Ext.direct.Provider/Object... Accepts any number of Provider descriptions (an instance or config object for a Provider). Each Provider description instructs Ext Direct how to create client-side stub methods. 
		*/
		static addProvider( provider?:any ): void;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Retrieves a provider by the id specified when the provider is added  
		* @param id String/Ext.direct.Provider The id of the provider, or the provider instance. 
		*/
		static getProvider( id?:any ): void;

		/** [Method] Returns the value of varName  
		* @returns String 
		*/
		static getVarName(): string;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Load Ext Direct Provider API declaration from the server and construct a new Provider instance  
		* @param config Object Remoting API configuration. 
		* @param callback Function Optional callback to execute when Provider is created, or when an error has occured. 
		* @param scope Object Optional scope to execute callback function in. For additional information see the [Ext Direct specification][1]. 
		*/
		static loadProvider( config?:any, callback?:any, scope?:any ): void;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Parses a direct function  
		* @param fn String/Function The direct function 
		* @returns Function The function to use in the direct call. Null if not found 
		*/
		static parseMethod( fn?:any ): any;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Removes the provider  
		* @param provider String/Ext.direct.Provider The provider instance or the id of the provider. 
		* @returns Ext.direct.Provider The provider, null if not found. 
		*/
		static removeProvider( provider?:any ): Ext.direct.IProvider;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Sets the value of varName  
		* @param varName String The new value. 
		*/
		static setVarName( varName?:string ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.direct {
	export interface IPollingProvider extends Ext.direct.IJsonProvider {
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Number) */
		interval?: number;
		/** [Config Option] (String/Function) */
		pollFn?: any;
		/** [Config Option] (String/Function) */
		url?: any;
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Do connection setup  */
		doConnect?(): void;

		/** [Method] Do connection teardown  */
		doDisconnect?(): void;

	}
	export class PollingProvider {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Check if the passed configuration object contains enough information to construct a Provider  
		* @param config Object 
		* @returns Boolean true if config is sufficient, false otherwise. 
		*/
		static checkConfig( config?:any ): boolean;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.direct {
	export interface IProvider extends Ext.IBase, Ext.util.IObservable {
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String[]) */
		relayedEvents?: string[];
		/** [Method] Connect the provider and start its service  */
		connect?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Disconnect the provider and stop its service  
		* @param force Object 
		*/
		disconnect?( force?:any ): void;

		/** [Method] Do connection setup  */
		doConnect?(): void;

		/** [Method] Do connection teardown  */
		doDisconnect?(): void;

		/** [Method] Returns whether or not the server side is currently connected  */
		isConnected?(): void;

	}
	export class Provider {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Check if the passed configuration object contains enough information to construct a Provider  
		* @param config Object 
		* @returns Boolean true if config is sufficient, false otherwise. 
		*/
		static checkConfig( config?:any ): boolean;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.direct {
	export interface IRemotingEvent extends Ext.direct.IEvent {
		/** [Method] Get the transaction associated with this event  
		* @returns Ext.direct.Transaction The transaction 
		*/
		getTransaction?(): Ext.direct.ITransaction;

	}

}

declare module Ext.direct {
	export interface IRemotingMethod extends Ext.IBase {
		/** [Method] Prepare Direct function arguments that can be used with getCallData  
		* @param config Object 
		*/
		getArgs?( config?:any ): void;

		/** [Method] Takes the arguments for a Direct function and splits the arguments from the scope and the callback  
		* @param args Array The arguments passed to the direct call 
		* @returns Object An object with 4 properties: args, callback, scope, and options object. 
		*/
		getCallData?( args?:any[] ): any;

	}

}

declare module Ext.direct {
	export interface IRemotingProvider extends Ext.direct.IJsonProvider {
		/** [Config Option] (Object) */
		actions?: any;
		/** [Config Option] (Boolean) */
		disableNestedActions?: boolean;
		/** [Config Option] (Number/Boolean) */
		enableBuffer?: any;
		/** [Config Option] (String) */
		enableUrlEncode?: string;
		/** [Config Option] (Number) */
		maxRetries?: number;
		/** [Config Option] (String/Object) */
		namespace?: any;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Method] Connect the provider and start its service  */
		connect?(): void;

		/** [Method] Do connection setup  */
		doConnect?(): void;

	}
	export class RemotingProvider {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Check if the passed configuration object contains enough information to construct a Provider  
		* @param config Object 
		* @returns Boolean true if config is sufficient, false otherwise. 
		*/
		static checkConfig( config?:any ): boolean;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.direct {
	export interface ITransaction extends Ext.IBase {
		/** [Config Option] (Ext.direct.Provider) */
		provider?: Ext.direct.IProvider;
	}

}

declare module Ext.dom {
	export interface IButtonElement extends Ext.dom.IElement {
		/** [Method] Set the height of this Element  
		* @param height Object 
		* @param animate Object 
		* @returns Ext.dom.Element this 
		*/
		setHeight?( height?:any, animate?:any ): Ext.dom.IElement;

		/** [Method] Set the size of this Element  
		* @param width Object 
		* @param height Object 
		* @param animate Object 
		* @returns Ext.dom.Element this 
		*/
		setSize?( width?:any, height?:any, animate?:any ): Ext.dom.IElement;

		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles  
		* @param prop Object 
		* @param value Object 
		* @returns Ext.dom.Element this 
		*/
		setStyle?( prop?:any, value?:any ): Ext.dom.IElement;

		/** [Method] Set the width of this Element  
		* @param width Object 
		* @param animate Object 
		* @returns Ext.dom.Element this 
		*/
		setWidth?( width?:any, animate?:any ): Ext.dom.IElement;

	}

}

declare module Ext.dom {
	export interface ICompositeElement extends Ext.dom.ICompositeElementLite {
	}

}

declare module Ext {
	export interface ICompositeElement extends Ext.dom.ICompositeElementLite {
	}

}

declare module Ext.dom {
	export interface ICompositeElementLite extends Ext.IBase, Ext.dom.IElement {
		/** [Property] (HTMLElement[]) */
		elements?: HTMLElement[];

		/** [Property] (Boolean) */
		isComposite?: boolean;

		/** [Method] Adds elements to this Composite object  
		* @param els HTMLElement[]/Ext.dom.CompositeElementLite Either an Array of DOM elements to add, or another Composite object who's elements should be added. 
		* @param root HTMLElement/String The root element of the query or id of the root. 
		* @returns Ext.dom.CompositeElementLite This Composite object. 
		*/
		add?( els?:any, root?:any ): Ext.dom.ICompositeElementLite;

		/** [Method] Adds the given CSS class es to this Element  
		* @param names String/String[] The CSS classes to add separated by space, or an array of classes 
		* @param prefix String Prefix to prepend to each class. The separator - will be appended to the prefix. 
		* @param suffix String Suffix to append to each class. The separator - will be prepended to the suffix. 
		* @returns Ext.dom.Element this 
		*/
		addCls?( names?:any, prefix?:string, suffix?:string ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to add and remove a css class when the mouse is down and then up on this element a click effect  
		* @param className String The class to add 
		* @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added. 
		* @param scope Object The scope to execute the testFn in. 
		* @returns Ext.dom.Element this 
		*/
		addClsOnClick?( className?:string, testFn?:any, scope?:any ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to add and remove a css class when this element has the focus 
		* @param className String The class to add 
		* @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added. 
		* @param scope Object The scope to execute the testFn in. 
		* @returns Ext.dom.Element this 
		*/
		addClsOnFocus?( className?:string, testFn?:any, scope?:any ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to add and remove a css class when the mouse is over this element 
		* @param className String The class to add 
		* @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added. 
		* @param scope Object The scope to execute the testFn in. 
		* @returns Ext.dom.Element this 
		*/
		addClsOnOver?( className?:string, testFn?:any, scope?:any ): Ext.dom.IElement;

		/** [Method] Convenience method for constructing a KeyMap 
		* @param key String/Number/Number[]/Object Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options: 
		* @param fn Function The function to call 
		* @param scope Object The scope (this reference) in which the specified function is executed. Defaults to this Element. 
		* @returns Ext.util.KeyMap The KeyMap created 
		*/
		addKeyListener?( key?:any, fn?:any, scope?:any ): Ext.util.IKeyMap;

		/** [Method] Creates a KeyMap for this element 
		* @param config Object The KeyMap config. See Ext.util.KeyMap for more details 
		* @returns Ext.util.KeyMap The KeyMap created 
		*/
		addKeyMap?( config?:any ): Ext.util.IKeyMap;

		/** [Method] Performs custom animation on this Element  
		* @param config Object Configuration for Ext.fx.Anim. Note that the to config is required. 
		* @returns Ext.dom.Element this 
		*/
		animate?( config?:any ): Ext.dom.IElement;

		/** [Method] Appends the passed element s to this element 
		* @param el String/HTMLElement/Ext.dom.Element/Object The id or element to insert or a DomHelper config 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The inserted Ext.dom.Element (or HTMLElement if returnDom is true). 
		*/
		appendChild?( el?:any, returnDom?:boolean ): any;

		/** [Method] Appends this element to the passed element  
		* @param el String/HTMLElement/Ext.dom.Element The new parent element. The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element This element. 
		*/
		appendTo?( el?:any ): Ext.dom.IElement;

		/** [Method] More flexible version of setStyle for setting style properties  
		* @param styles String/Object/Function A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification. 
		* @returns Ext.dom.Element this 
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;

		/** [Method] Tries to blur the element  
		* @returns Ext.dom.Element this 
		*/
		blur?(): Ext.dom.IElement;

		/** [Method] Wraps the specified element with a special 9 element markup CSS block that renders by default as a gray container wit  
		* @param class String A base CSS class to apply to the containing wrapper element. Note that there are a number of CSS rules that are dependent on this name to make the overall effect work, so if you supply an alternate base class, make sure you also supply all of the necessary rules. 
		* @returns Ext.dom.Element The outermost wrapping element of the created box structure. 
		*/
		boxWrap?( clazz?:string ): Ext.dom.IElement;

		/** [Method] When an element is moved around in the DOM or is hidden using display none it loses layout and therefore all scrol  
		* @returns Function A function which will restore all descendant elements of this Element to their scroll positions recorded when this function was executed. Be aware that the returned function is a closure which has captured the scope of cacheScrollValues, so take care to derefence it as soon as not needed - if is it is a var it will drop out of scope, and the reference will be freed. 
		*/
		cacheScrollValues?(): any;

		/** [Method] Centers the Element in either the viewport or another Element  
		* @param centerIn String/HTMLElement/Ext.dom.Element element in which to center the element. 
		* @returns Ext.dom.Element This element 
		*/
		center?( centerIn?:any ): Ext.dom.IElement;

		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector String The CSS selector. 
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element. 
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true) 
		*/
		child?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Removes Empty or whitespace filled text nodes  
		* @param forceReclean Boolean By default the element keeps track if it has been cleaned already so you can call this over and over. However, if you update the element and need to force a re-clean, you can pass true. 
		*/
		clean?( forceReclean?:boolean ): void;

		/** [Method] Removes all elements from this Composite  
		* @param removeDom Boolean True to also remove the elements from the document. 
		*/
		clear?( removeDom?:boolean ): void;

		/** [Method] Clears any opacity settings from this element  
		* @returns Ext.dom.Element this 
		*/
		clearOpacity?(): Ext.dom.IElement;

		/** [Method] Clears positioning back to the default when the document was loaded  
		* @param value String The value to use for the left, right, top, bottom. You could use 'auto'. 
		* @returns Ext.dom.Element this 
		*/
		clearPositioning?( value?:string ): Ext.dom.IElement;

		/** [Method] Store the current overflow setting and clip overflow on the element  use unclip to remove 
		* @returns Ext.dom.Element this 
		*/
		clip?(): Ext.dom.IElement;

		/** [Method] Returns true if this composite contains the passed element 
		* @param el String/HTMLElement/Ext.dom.Element/Number The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection. 
		* @returns Boolean 
		*/
		contains?( el?:any ): boolean;

		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e  
		* @param config Object DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes. 
		* @param insertBefore HTMLElement a child element of this element 
		* @param returnDom Boolean true to return the dom node instead of creating an Element 
		* @returns Ext.dom.Element/HTMLElement The new child element (or HTMLElement if returnDom is true) 
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:boolean ): any;

		/** [Method] Creates a proxy element of this element 
		* @param config String/Object The class name of the proxy element or a DomHelper config object 
		* @param renderTo String/HTMLElement The element or element id to render the proxy to. Defaults to: document.body. 
		* @param matchBox Boolean True to align and size the proxy to this element now. 
		* @returns Ext.dom.Element The new proxy element 
		*/
		createProxy?( config?:any, renderTo?:any, matchBox?:boolean ): Ext.dom.IElement;

		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;

		/** [Method] Destroys this element by removing it from the cache removing its DOM reference and removing all of its event listen  */
		destroy?(): void;

		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector String The CSS selector 
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element 
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true) 
		*/
		down?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Calls the passed function for each element in this composite  
		* @param fn Function The function to call. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Element. 
		* @returns Ext.dom.CompositeElementLite this 
		*/
		each?( fn?:any, scope?:any ): Ext.dom.ICompositeElementLite;

		/** [Method] Convenience method for setVisibilityMode Element DISPLAY 
		* @param display String What to set display to when visible 
		* @returns Ext.dom.Element this 
		*/
		enableDisplayMode?( display?:string ): Ext.dom.IElement;

		/** [Method] Fade an element in from transparent to opaque 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		fadeIn?( options?:any ): Ext.dom.IElement;

		/** [Method] Fade an element out from opaque to transparent 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		fadeOut?( options?:any ): Ext.dom.IElement;

		/** [Method] Clears this Composite and adds the elements passed  
		* @param els HTMLElement[]/Ext.dom.CompositeElementLite Either an array of DOM elements, or another Composite from which to fill this Composite. 
		* @returns Ext.dom.CompositeElementLite this 
		*/
		fill?( els?:any ): Ext.dom.ICompositeElementLite;

		/** [Method] Filters this composite to only elements that match the passed selector  
		* @param selector String/Function A string CSS selector or a comparison function. The comparison function will be called with the following arguments: 
		* @returns Ext.dom.CompositeElementLite this 
		*/
		filter?( selector?:any ): Ext.dom.ICompositeElementLite;

		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector  
		* @param selector String The simple selector to test. See Ext.dom.Query for information about simple selectors. 
		* @param limit Number/String/HTMLElement/Ext.dom.Element The max depth to search as a number or an element which causes the upward traversal to stop and is not considered for inclusion as the result. (defaults to 50 || document.documentElement) 
		* @param returnEl Boolean True to return a Ext.dom.Element object instead of DOM node 
		* @returns HTMLElement/Ext.dom.Element The matching DOM node (or Ext.dom.Element if returnEl is true). Or null if no match was found. 
		*/
		findParent?( selector?:string, limit?:any, returnEl?:boolean ): any;

		/** [Method] Looks at parent nodes for a match of the passed simple selector  
		* @param selector String The simple selector to test. See Ext.dom.Query for information about simple selectors. 
		* @param limit Number/String/HTMLElement/Ext.dom.Element The max depth to search as a number or an element which causes the upward traversal to stop and is not&lt;/ considered for inclusion as the result. (defaults to 50 || document.documentElement) 
		* @param returnEl Boolean True to return a Ext.dom.Element object instead of DOM node 
		* @returns HTMLElement/Ext.dom.Element The matching DOM node (or Ext.dom.Element if returnEl is true). Or null if no match was found. 
		*/
		findParentNode?( selector?:string, limit?:any, returnEl?:boolean ): any;

		/** [Method] Returns the first Element 
		* @returns Ext.dom.Element 
		*/
		first?(): Ext.dom.IElement;

		/** [Method] Tries to focus the element  
		* @param defer Number Milliseconds to defer the focus 
		* @returns Ext.dom.Element this 
		*/
		focus?( defer?:number ): Ext.dom.IElement;

		/** [Method] Checks whether this element can be focused  
		* @returns Boolean True if the element is focusable 
		*/
		focusable?(): boolean;

		/** [Method] Shows a ripple of exploding attenuating borders to draw attention to an Element  
		* @param color String The hex color value for the border. 
		* @param count Number The number of ripples to display. 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		frame?( color?:string, count?:number, options?:any ): Ext.dom.IElement;

		/** [Method] Returns the value of an attribute from the element s underlying DOM node  
		* @param name String The attribute name. 
		* @param namespace String The namespace in which to look for the attribute. 
		* @returns String The attribute value. 
		*/
		getAttribute?( name?:string, namespace?:string ): string;

		/** [Method] Returns the value of a namespaced attribute from the element s underlying DOM node  
		* @param namespace String The namespace in which to look for the attribute 
		* @param name String The attribute name 
		* @returns String The attribute value 
		*/
		getAttributeNS?( namespace?:string, name?:string ): string;

		/** [Method] Returns an object containing a map of all attributes of this element s DOM node  
		* @returns Object Key/value pairs of attribute names and their values. 
		*/
		getAttributes?(): any;

		/** [Method] Gets the width of the border s for the specified side s  
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width. 
		* @returns Number The width of the sides passed added together 
		*/
		getBorderWidth?( side?:string ): number;

		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height  
		* @param local Boolean True to get the local css position instead of page coordinate 
		* @returns Number 
		*/
		getBottom?( local?:boolean ): number;

		/** [Method] Returns a child element of this element given its id  
		* @param id String The id of the desired child element. 
		* @param asDom Boolean True to return the DOM element, false to return a wrapped Element object. 
		* @returns Ext.dom.Element/HTMLElement The child element (or HTMLElement if asDom is true). Or null if no match was found. 
		*/
		getById?( id?:string, asDom?:boolean ): any;

		/** [Method] Calculates the x y to center this element on the screen 
		* @returns Number[] The x, y values [x, y] 
		*/
		getCenterXY?(): number[];

		/** [Method] Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders when  
		* @returns Number 
		*/
		getComputedHeight?(): number;

		/** [Method] Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders when ne  
		* @returns Number 
		*/
		getComputedWidth?(): number;

		/** [Method] Returns the number of elements in this Composite  
		* @returns Number 
		*/
		getCount?(): number;

		/** [Method] Returns the innerHTML of an Element or an empty string if the element s dom no longer exists  
		* @returns String 
		*/
		getHTML?(): string;

		/** [Method] Returns the offset height of the element  
		* @param contentHeight Boolean true to get the height minus borders and padding. 
		* @returns Number The element's height. 
		*/
		getHeight?( contentHeight?:boolean ): number;

		/** [Method] Returns the innerHTML of an Element or an empty string if the element s dom no longer exists  
		* @returns String 
		*/
		getHtml?(): string;

		/** [Method] Gets the left X coordinate 
		* @param local Boolean True to get the local css position instead of page coordinate 
		* @returns Number 
		*/
		getLeft?( local?:boolean ): number;

		/** [Method] Gets this element s ElementLoader 
		* @returns Ext.ElementLoader The loader 
		*/
		getLoader?(): Ext.IElementLoader;

		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i  
		* @param sides String Any combination of 'l', 'r', 't', 'b' to get the sum of those sides. 
		* @returns Object/Number 
		*/
		getMargin?( sides?:string ): any;

		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;

		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;

		/** [Method] Gets the width of the padding s for the specified side s 
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right. 
		* @returns Number The padding of the sides passed added together. 
		*/
		getPadding?( side?:string ): number;

		/** [Method] Returns an object defining the area of this Element which can be passed to Ext util Positionable setBox to set anothe  
		* @param asRegion Boolean If true an Ext.util.Region will be returned 
		* @returns Object/Ext.util.Region box An object in the following format: {  left: &lt;Element's X position&gt;,  top: &lt;Element's Y position&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. So the result may also be used for setXY 
		*/
		getPageBox?( asRegion?:boolean ): any;

		/** [Method] Gets an object with all CSS positioning properties  
		* @param autoPx Boolean true to return pixel values for "auto" styles. 
		* @returns Object 
		*/
		getPositioning?( autoPx?:boolean ): any;

		/** [Method] Gets the right X coordinate of the element element X position  element width  
		* @param local Boolean True to get the local css position instead of page coordinates 
		* @returns Number 
		*/
		getRight?( local?:boolean ): number;

		/** [Method] Returns the current scroll position of the element  
		* @returns Object An object containing the scroll position in the format {left: (scrollLeft), top: (scrollTop)} 
		*/
		getScroll?(): any;

		/** [Method] Gets the left scroll position 
		* @returns Number The left scroll position 
		*/
		getScrollLeft?(): number;

		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;

		/** [Method] Gets the top scroll position 
		* @returns Number The top scroll position 
		*/
		getScrollTop?(): number;

		/** [Method] Returns the size of the element  
		* @param contentSize Boolean true to get the width/size minus borders and padding. 
		* @returns Object An object containing the element's size: 
		*/
		getSize?( contentSize?:boolean ): any;

		/** [Method] Returns a named style property based on computed currentStyle primary and inline style if primary is not available  
		* @param property String/String[] The style property (or multiple property names in an array) whose value is returned. 
		* @param inline Boolean if true only inline styles will be returned. 
		* @returns String/Object The current value of the style property for this element (or a hash of named style values if multiple property arguments are requested). 
		*/
		getStyle?( property?:any, inline?:boolean ): any;

		/** [Method] Returns the dimensions of the element available to lay content out in  
		* @returns Object Object describing width and height. 
		*/
		getStyleSize?(): any;

		/** [Method] Returns the width in pixels of the passed text or the width of the text in this Element  
		* @param text String The text to measure. Defaults to the innerHTML of the element. 
		* @param min Number The minumum value to return. 
		* @param max Number The maximum value to return. 
		* @returns Number The text width in pixels. 
		*/
		getTextWidth?( text?:string, min?:number, max?:number ): number;

		/** [Method] Gets the top Y coordinate 
		* @param local Boolean True to get the local css position instead of page coordinates 
		* @returns Number 
		*/
		getTop?( local?:boolean ): number;

		/** [Method] Returns the value of the value attribute  
		* @param asNumber Boolean true to parse the value as a number. 
		* @returns String/Number 
		*/
		getValue?( asNumber?:boolean ): any;

		/** [Method] Returns the dimensions of the element available to lay content out in  
		* @returns Object Object describing width and height. 
		*/
		getViewSize?(): any;

		/** [Method] Returns the offset width of the element  
		* @param contentWidth Boolean true to get the width minus borders and padding. 
		* @returns Number The element's width. 
		*/
		getWidth?( contentWidth?:boolean ): number;

		/** [Method] Gets element X position in page coordinates 
		* @returns Number 
		*/
		getX?(): number;

		/** [Method] Gets element X and Y positions in page coordinates 
		* @returns Array [x, y] 
		*/
		getXY?(): any[];

		/** [Method] Gets element Y position in page coordinates 
		* @returns Number 
		*/
		getY?(): number;

		/** [Method] Returns this element s z index 
		* @returns Number 
		*/
		getZIndex?(): number;

		/** [Method] Slides the element while fading it out of view  
		* @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to bottom: 'b') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		ghost?( anchor?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Checks if the specified CSS class exists on this element s DOM node  
		* @param name String The CSS class to check for. 
		* @returns Boolean true if the class exists, else false. 
		*/
		hasCls?( name?:string ): boolean;

		/** [Method] Hide this element  Uses display mode to determine whether to use display visibility  or offsets 
		* @returns Ext.dom.Element this 
		*/
		hide?(): Ext.dom.IElement;

		/** [Method] Highlights the Element by setting a color applies to the background color by default but can be changed using the  
		* @param color String The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		highlight?( color?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element  
		* @param overFn Function The function to call when the mouse enters the Element. 
		* @param outFn Function The function to call when the mouse leaves the Element. 
		* @param scope Object The scope (this reference) in which the functions are executed. Defaults to the Element's DOM element. 
		* @param options Object Options for the listener. See the options parameter. 
		* @returns Ext.dom.Element this 
		*/
		hover?( overFn?:any, outFn?:any, scope?:any, options?:any ): Ext.dom.IElement;

		/** [Method] Find the index of the passed element within the composite collection  
		* @param el String/HTMLElement/Ext.dom.Element/Number The id of an element, or an Ext.dom.Element, or an HtmlElement to find within the composite collection. 
		* @returns Number The index of the passed Ext.dom.Element in the composite collection, or -1 if not found. 
		*/
		indexOf?( el?:any ): number;

		/** [Method] Initializes a Ext dd DD drag drop object for this element  
		* @param group String The group the DD object is member of 
		* @param config Object The DD config object 
		* @param overrides Object An object containing methods to override/implement on the DD object 
		* @returns Ext.dd.DD The DD object 
		*/
		initDD?( group?:string, config?:any, overrides?:any ): Ext.dd.IDD;

		/** [Method] Initializes a Ext dd DDProxy object for this element  
		* @param group String The group the DDProxy object is member of 
		* @param config Object The DDProxy config object 
		* @param overrides Object An object containing methods to override/implement on the DDProxy object 
		* @returns Ext.dd.DDProxy The DDProxy object 
		*/
		initDDProxy?( group?:string, config?:any, overrides?:any ): Ext.dd.IDDProxy;

		/** [Method] Initializes a Ext dd DDTarget object for this element  
		* @param group String The group the DDTarget object is member of 
		* @param config Object The DDTarget config object 
		* @param overrides Object An object containing methods to override/implement on the DDTarget object 
		* @returns Ext.dd.DDTarget The DDTarget object 
		*/
		initDDTarget?( group?:string, config?:any, overrides?:any ): Ext.dd.IDDTarget;

		/** [Method] Inserts this element after the passed element in the DOM  
		* @param el String/HTMLElement/Ext.dom.Element The element to insert after. The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element This element. 
		*/
		insertAfter?( el?:any ): Ext.dom.IElement;

		/** [Method] Inserts this element before the passed element in the DOM  
		* @param el String/HTMLElement/Ext.dom.Element The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element This element. 
		*/
		insertBefore?( el?:any ): Ext.dom.IElement;

		/** [Method] Inserts or creates an element as the first child of this element 
		* @param el String/HTMLElement/Ext.dom.Element/Object The id or element to insert or a DomHelper config to create and insert 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The new child element (or HTMLElement if returnDom is true). 
		*/
		insertFirst?( el?:any, returnDom?:boolean ): any;

		/** [Method] Inserts an html fragment into this element 
		* @param where String Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd. See Ext.dom.Helper.insertHtml for details. 
		* @param html String The HTML fragment 
		* @param returnEl Boolean True to return an Ext.dom.Element 
		* @returns HTMLElement/Ext.dom.Element The inserted node (or nearest related if more than 1 inserted) 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:boolean ): any;

		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element 
		* @param el String/HTMLElement/Ext.dom.Element/Object/Array The id, element to insert or a DomHelper config to create and insert or an array of any of those. 
		* @param where String 'before' or 'after' 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The inserted Ext.dom.Element (or HTMLElement if returnDom is true). If an array is passed, the last inserted element is returned. 
		*/
		insertSibling?( el?:any, where?:string, returnDom?:boolean ): any;

		/** [Method] Returns true if this element matches the passed simple selector e g  
		* @param selector String/Function The simple selector to test or a function which is passed candidate nodes, and should return true for nodes which match. 
		* @returns Boolean true if this element matches the selector, else false. 
		*/
		is?( selector?:any ): boolean;

		/** [Method] Returns true if this element is an ancestor of the passed element 
		* @param el String/HTMLElement/Ext.dom.Element The element or id of the element to search for in this elements descendants. 
		* @returns Boolean 
		*/
		isAncestor?( el?:any ): boolean;

		/** [Method] Returns true if this element uses the border box sizing model  
		* @returns Boolean 
		*/
		isBorderBox?(): boolean;

		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;

		/** [Method] Returns true if display is not none  
		* @returns Boolean 
		*/
		isDisplayed?(): boolean;

		/** [Method] Checks whether this element can be focused programmatically or by clicking  
		* @returns Boolean True if the element is focusable 
		*/
		isFocusable?(): boolean;

		/** [Method] Returns true if this Element is an input field or is editable in any way  
		* @returns Boolean true if this Element is an input field, or is editable in any way. 
		*/
		isInputField?(): boolean;

		/** [Method] Returns true if this element is masked  
		* @param deep Boolean Go up the DOM hierarchy to determine if any parent element is masked. 
		* @returns Boolean 
		*/
		isMasked?( deep?:boolean ): boolean;

		/** [Method] Returns true if this element is scrollable  
		* @returns Boolean 
		*/
		isScrollable?(): boolean;

		/** [Method] Checks if the current value of a style is equal to a given value  
		* @param style String property whose value is returned. 
		* @param value String to check against. 
		* @returns Boolean true for when the current value equals the given value. 
		*/
		isStyle?( style?:string, value?:string ): boolean;

		/** [Method] Checks whether this element participates in the sequential focus navigation and can be reached by using Tab key  
		* @returns Boolean True if the element is tabbable. 
		*/
		isTabbable?(): boolean;

		/** [Method] Returns true if the value of the given property is visually transparent  
		* @param prop String The style property whose value is to be tested. 
		* @returns Boolean true if the style property is visually transparent. 
		*/
		isTransparent?( prop?:string ): boolean;

		/** [Method] Checks whether the element is currently visible using both visibility and display properties  
		* @param deep Boolean True to walk the dom and see if parent elements are hidden. If false, the function only checks the visibility of the element itself and it may return true even though a parent is not visible. 
		* @returns Boolean true if the element is currently visible, else false 
		*/
		isVisible?( deep?:boolean ): boolean;

		/** [Method] Returns a flyweight Element of the dom element object at the specified index  
		* @param index Number 
		* @returns Ext.dom.Element 
		*/
		item?( index?:number ): Ext.dom.IElement;

		/** [Method] Returns the last Element 
		* @returns Ext.dom.Element 
		*/
		last?(): Ext.dom.IElement;

		/** [Method] Direct access to the Ext ElementLoader Ext ElementLoader load method  
		* @param options Object a options object for Ext.ElementLoader Ext.ElementLoader.load 
		* @returns Ext.dom.Element this 
		*/
		load?( options?:any ): Ext.dom.IElement;

		/** [Method] Puts a mask over this element to disable user interaction  
		* @param msg String A message to display in the mask 
		* @param msgCls String A css class to apply to the msg element 
		* @returns Ext.dom.Element The mask element 
		*/
		mask?( msg?:string, msgCls?:string ): Ext.dom.IElement;

		/** [Method] Monitors this Element for the mouse leaving  
		* @param delay Number The delay in milliseconds to wait for possible mouse re-entry before calling the handler function. 
		* @param handler Function The function to call if the mouse remains outside of this Element for the specified time. 
		* @param scope Object The scope (this reference) in which the handler function executes. Defaults to this Element. 
		* @returns Object The listeners object which was added to this element so that monitoring can be stopped. Example usage: // Hide the menu if the mouse moves out for 250ms or more this.mouseLeaveMonitor = this.menuEl.monitorMouseLeave(250, this.hideMenu, this); ... // Remove mouseleave monitor on menu destroy this.menuEl.un(this.mouseLeaveMonitor); 
		*/
		monitorMouseLeave?( delay?:number, handler?:any, scope?:any ): any;

		/** [Method] Sets the position of the element in page coordinates  
		* @param x Number X value for new position (coordinates are page-based) 
		* @param y Number Y value for new position (coordinates are page-based) 
		* @param animate Boolean/Object True for the default animation, or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		moveTo?( x?:number, y?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Gets the next sibling skipping text nodes 
		* @param selector String Find the next sibling that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean true to return a raw dom node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The next sibling Ext.dom.Element (or HTMLElement if asDom is true). Or null if no match is found. 
		*/
		next?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector 
		* @param selector String Find a parent node that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean True to return a raw dom node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The parent node (Ext.dom.Element or HTMLElement if returnDom is true). Or null if no match is found. 
		*/
		parent?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Creates a pause before any subsequent queued effects begin  
		* @param seconds Number The length of time to pause (in seconds) 
		* @returns Ext.dom.Element The Element 
		*/
		pause?( seconds?:number ): Ext.dom.IElement;

		/** [Method] Initializes positioning on this element  
		* @param pos String Positioning to use "relative", "absolute" or "fixed" 
		* @param zIndex Number The zIndex to apply 
		* @param x Number Set the page X position 
		* @param y Number Set the page Y position 
		*/
		position?( pos?:string, zIndex?:number, x?:number, y?:number ): void;

		/** [Method] Gets the previous sibling skipping text nodes 
		* @param selector String Find the previous sibling that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The previous sibling (Ext.dom.Element or HTMLElement if returnDom is true). Or null if no match is found. 
		*/
		prev?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Fades the element out while slowly expanding it in all directions  
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		puff?( options?:any ): Ext.dom.IElement;

		/** [Method] Removes all listeners for this object including the managed listeners */
		purgeAllListeners?(): void;

		/** [Method] Selects child nodes based on the passed CSS selector  
		* @param selector String The CSS selector. 
		* @param asDom Boolean false to return an array of Ext.dom.Element 
		* @returns HTMLElement[]/Ext.dom.Element[] An Array of elements ( HTMLElement or Ext.dom.Element if asDom is false) that match the selector. If there are no matches, an empty Array is returned. 
		*/
		query?( selector?:string, asDom?:boolean ): any;

		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings  
		* @param className String/String[] The CSS class to add, or an array of classes. 
		* @returns Ext.dom.Element this 
		*/
		radioCls?( className?:any ): Ext.dom.IElement;

		/** [Method] Destroys this element by removing it from the cache removing its DOM reference and removing all of its event listen  */
		remove?(): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		removeAllListeners?(): void;

		/** [Method] Removes the given CSS class es from this Element  
		* @param names String/String[] The CSS classes to remove separated by space, or an array of classes 
		* @param prefix String Prefix to prepend to each class. The separator - will be appended to the prefix. 
		* @param suffix String Suffix to append to each class. The separator - will be prepended to the suffix. return {Ext.dom.Element} this 
		*/
		removeCls?( names?:any, prefix?:string, suffix?:string ): void;

		/** [Method] Removes the specified element s 
		* @param el String/HTMLElement/Ext.dom.Element/Number The id of an element, the Element itself, the index of the element in this composite or an array of any of those. 
		* @param removeDom Boolean true to also remove the element from the document 
		* @returns Ext.dom.CompositeElementLite this 
		*/
		removeElement?( el?:any, removeDom?:boolean ): Ext.dom.ICompositeElementLite;

		/** [Method] Forces the browser to repaint this element  
		* @returns Ext.dom.Element this 
		*/
		repaint?(): Ext.dom.IElement;

		/** [Method] Replaces the passed element with this element 
		* @param el String/HTMLElement/Ext.dom.Element The element to replace. The id of the node, a DOM Node or an existing Element. 
		* @param destroy Boolean false to prevent destruction of the replaced element 
		* @returns Ext.dom.Element This element 
		*/
		replace?( el?:any, destroy?:boolean ): Ext.dom.IElement;

		/** [Method] Replaces a CSS class on the element with another  
		* @param oldName String The CSS class to replace. 
		* @param newName String The replacement CSS class. 
		* @param prefix String Prefix to prepend to each class to be replaced. 
		* @param suffix String Suffix to append to each class to be replaced. 
		* @returns Ext.dom.Element this 
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;

		/** [Method] Replaces the specified element with the passed element  
		* @param el String/HTMLElement/Ext.dom.Element/Number The id of an element, the Element itself, the index of the element in this composite to replace. 
		* @param replacement String/Ext.dom.Element The id of an element or the Element itself. 
		* @param domReplace Boolean true to remove and replace the element in the document too. 
		* @returns Ext.dom.CompositeElementLite this 
		*/
		replaceElement?( el?:any, replacement?:any, domReplace?:boolean ): Ext.dom.ICompositeElementLite;

		/** [Method] Replaces this element with the passed element 
		* @param el String/HTMLElement/Ext.dom.Element/Object The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create 
		* @returns Ext.dom.Element This element 
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;

		/** [Method] Animates the transition of an element s dimensions from a starting height width to an ending height width  
		* @param width Number The new width (pass undefined to keep the original width) 
		* @param height Number The new height (pass undefined to keep the original height) 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		scale?( width?:number, height?:number, options?:any ): Ext.dom.IElement;

		/** [Method] Scrolls this element the specified direction  
		* @param direction String Possible values are:  "l" (or "left") "r" (or "right") "t" (or "top", or "up") "b" (or "bottom", or "down")  
		* @param distance Number How far to scroll the element in pixels 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @returns Boolean Returns true if a scroll was triggered or false if the element was scrolled as far as it could go. 
		*/
		scroll?( direction?:string, distance?:number, animate?:any ): boolean;

		/** [Method] Scrolls this element by the passed delta values optionally animating  
		* @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties. 
		* @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object. 
		* @param animate Boolean/Object Animate flag/config object if the delta values were passed separately. 
		* @returns Ext.dom.Element this 
		*/
		scrollBy?( deltaX?:any, deltaY?:any, animate?:any ): Ext.dom.IElement;

		/** [Method] Scrolls this element into view within the passed container  
		* @param container String/HTMLElement/Ext.Element The container element to scroll. Should be a string (id), dom node, or Ext.Element. 
		* @param hscroll Boolean False to disable horizontal scroll. 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @param highlight Boolean true to highlight the element when it is in view. 
		* @returns Ext.dom.Element this 
		*/
		scrollIntoView?( container?:any, hscroll?:boolean, animate?:any, highlight?:boolean ): Ext.dom.IElement;

		/** [Method] Scrolls this element the specified scroll point  
		* @param side String Either "left" for scrollLeft values or "top" for scrollTop values. 
		* @param value Number The new scroll value 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		scrollTo?( side?:string, value?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Selects descendant elements of this element based on the passed CSS selector to enable Element methods to be applied 
		* @param selector String/HTMLElement[] The CSS selector or an array of elements 
		* @param composite Boolean Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false. 
		* @returns Ext.dom.CompositeElementLite/Ext.dom.CompositeElement 
		*/
		select?( selector?:any, composite?:boolean ): Ext.dom.ICompositeElementLite;

		/** [Method] Selects a single descendant element of this element using a CSS selector see query 
		* @param selector String The selector query 
		* @param asDom Boolean false to return an Ext.dom.Element 
		* @returns HTMLElement/Ext.dom.Element The DOM element (or Ext.dom.Element if asDom is false) which matched the selector. 
		*/
		selectNode?( selector?:string, asDom?:boolean ): any;

		/** [Method] Enable text selection for this element normalized across browsers  
		* @returns Ext.dom.Element this 
		*/
		selectable?(): Ext.dom.IElement;

		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function 
		* @param attributes Object The object with the attributes. 
		* @param useSet Boolean false to override the default setAttribute to use expandos. 
		* @returns Ext.dom.Element this 
		*/
		set?( attributes?:any, useSet?:boolean ): Ext.dom.IElement;

		/** [Method] Sets the element s CSS bottom style  
		* @param bottom Number/String Number of pixels or CSS string value to set as the bottom CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setBottom?( bottom?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s position and size in one shot  
		* @param x Number X value for new position (coordinates are page-based) 
		* @param y Number Y value for new position (coordinates are page-based) 
		* @param width Number/String The new width. This may be one of:  A Number specifying the new width in pixels A String used to set the CSS width style. Animation may not be used.  
		* @param height Number/String The new height. This may be one of:  A Number specifying the new height in pixels A String used to set the CSS height style. Animation may not be used.  
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		setBounds?( x?:number, y?:number, width?:any, height?:any, animate?:any ): Ext.dom.IElement;

		/** [Method] Sets the specified CSS class on this element s DOM node  
		* @param className String/Array The CSS class to set on this element. 
		*/
		setCls?( className?:any ): void;

		/** [Method] Sets the CSS display property  
		* @param value Boolean/String Boolean value to display the element using its default display, or a string to set the display directly. 
		* @returns Ext.dom.Element this 
		*/
		setDisplayed?( value?:any ): Ext.dom.IElement;

		/** [Method] Sets the innerHTML of this element  
		* @param html String The new HTML. 
		*/
		setHTML?( html?:string ): void;

		/** [Method] Set the height of this Element  
		* @param height Number/String The new height. 
		* @returns Ext.dom.Element this 
		*/
		setHeight?( height?:any ): Ext.dom.IElement;

		/** [Method] Sets the innerHTML of this element  
		* @param html String The new HTML. 
		*/
		setHtml?( html?:string ): void;

		/** [Method] Sets the element s left position directly using CSS style instead of setX 
		* @param left Number/String Number of pixels or CSS string value to set as the left CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setLeft?( left?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s left and top positions directly using CSS style 
		* @param left Number/String Number of pixels or CSS string value to set as the left CSS property value 
		* @param top Number/String Number of pixels or CSS string value to set as the top CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setLeftTop?( left?:any, top?:any ): Ext.dom.IElement;

		/** [Method] Sets the position of the element in page coordinates  
		* @param x Number X value for new position 
		* @param y Number Y value for new position 
		* @param animate Boolean/Object True for the default animation, or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		setLocation?( x?:number, y?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Set the maximum height of this Element  
		* @param height Number/String The new maximum height. 
		* @returns Ext.dom.Element this 
		*/
		setMaxHeight?( height?:any ): Ext.dom.IElement;

		/** [Method] Set the maximum width of this Element  
		* @param width Number/String The new maximum width. 
		* @returns Ext.dom.Element this 
		*/
		setMaxWidth?( width?:any ): Ext.dom.IElement;

		/** [Method] Set the minimum height of this Element  
		* @param height Number/String The new minimum height. 
		* @returns Ext.dom.Element this 
		*/
		setMinHeight?( height?:any ): Ext.dom.IElement;

		/** [Method] Set the minimum width of this Element  
		* @param width Number/String The new minimum width. 
		* @returns Ext.dom.Element this 
		*/
		setMinWidth?( width?:any ): Ext.dom.IElement;

		/** [Method] Set the opacity of the element 
		* @param opacity Number The new opacity. 0 = transparent, .5 = 50% visible, 1 = fully visible, etc 
		* @param animate Boolean/Object a standard Element animation config object or true for the default animation ({duration: 350, easing: 'ease-in'}) 
		* @returns Ext.dom.Element this 
		*/
		setOpacity?( opacity?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Set positioning with an object returned by getPositioning  
		* @param posCfg Object 
		* @returns Ext.dom.Element this 
		*/
		setPositioning?( posCfg?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s CSS right style  
		* @param right Number/String Number of pixels or CSS string value to set as the right CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setRight?( right?:any ): Ext.dom.IElement;

		/** [Method] Sets the left scroll position 
		* @param left Number The left scroll position 
		* @returns Ext.dom.Element this 
		*/
		setScrollLeft?( left?:number ): Ext.dom.IElement;

		/** [Method] Sets the top scroll position 
		* @param top Number The top scroll position 
		* @returns Ext.dom.Element this 
		*/
		setScrollTop?( top?:number ): Ext.dom.IElement;

		/** [Method] Set the size of this Element  
		* @param width Number/String The new width. This may be one of:  A Number specifying the new width in pixels. A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.  
		* @param height Number/String The new height. This may be one of:  A Number specifying the new height in pixels. A String used to set the CSS height style. Animation may not be used.  
		* @returns Ext.dom.Element this 
		*/
		setSize?( width?:any, height?:any ): Ext.dom.IElement;

		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles  
		* @param property String/Object The style property to be set, or an object of multiple styles. 
		* @param value String The value to apply to the given property, or null if an object was passed. 
		* @returns Ext.dom.Element this 
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;

		/** [Method] Sets the element s top position directly using CSS style instead of setY 
		* @param top Number/String Number of pixels or CSS string value to set as the top CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setTop?( top?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;

		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS  
		* @param dummy null mode The method by which the element will be hidden (you can also use the setVisible or toggle method to toggle element visibility). 
		* @returns Ext.dom.Element this 
		*/
		setVisibilityMode?( dummy?:any ): Ext.dom.IElement;

		/** [Method] Sets the visibility of the element based on the current visibility mode  
		* @param visible Boolean Whether the element is visible. 
		* @returns Ext.dom.Element this 
		*/
		setVisible?( visible?:boolean ): Ext.dom.IElement;

		/** [Method] Set the width of this Element  
		* @param width Number/String The new width. 
		* @returns Ext.dom.Element this 
		*/
		setWidth?( width?:any ): Ext.dom.IElement;

		/** [Method] Sets this Element s page level x coordinate 
		* @param x Number 
		* @returns Ext.dom.Element this 
		*/
		setX?( x?:number ): Ext.dom.IElement;

		/** [Method] Sets this Element s page level x and y coordinates 
		* @param xy Number[] 
		* @returns Ext.dom.Element this 
		*/
		setXY?( xy?:number[] ): Ext.dom.IElement;

		/** [Method] Sets this Element s page level y coordinate 
		* @param y Number 
		* @returns Ext.dom.Element this 
		*/
		setY?( y?:number ): Ext.dom.IElement;

		/** [Method] Sets the z index of this Element and synchronizes the z index of shadow and or shim if present  
		* @param zindex Number The new z-index to set 
		* @returns Ext.dom.Element this 
		*/
		setZIndex?( zindex?:number ): Ext.dom.IElement;

		/** [Method] Animates the transition of any combination of an element s dimensions xy position and or opacity  
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		shift?( options?:any ): Ext.dom.IElement;

		/** [Method] Show this element  Uses display mode to determine whether to use display visibility  or offsets 
		* @returns Ext.dom.Element this 
		*/
		show?(): Ext.dom.IElement;

		/** [Method] Gets a range nodes  
		* @param start Number The index of the first node in the range 
		* @param end Number The index of the last node in the range 
		* @returns HTMLElement[] An array of nodes 
		*/
		slice?( start?:number, end?:number ): HTMLElement[];

		/** [Method] Slides the element into view  
		* @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		slideIn?( anchor?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Slides the element out of view  
		* @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		slideOut?( anchor?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Stops the specified event s from bubbling and optionally prevents the default action var store  Ext create Ext da  
		* @param eventName String/String[] an event / array of events to stop from bubbling 
		* @param preventDefault Boolean true to prevent the default action too 
		* @returns Ext.dom.Element this 
		*/
		swallowEvent?( eventName?:any, preventDefault?:boolean ): Ext.dom.IElement;

		/** [Method] Blinks the element as if it was clicked and then collapses on its center similar to switching off a television 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		switchOff?( options?:any ): Ext.dom.IElement;

		/** [Method] Toggles the element s visibility depending on visibility mode  
		* @returns Ext.dom.Element this 
		*/
		toggle?(): Ext.dom.IElement;

		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it 
		* @param className String The CSS class to toggle. 
		* @returns Ext.dom.Element this 
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;

		/** [Method] Return clipping overflow to original clipping before clip was called 
		* @returns Ext.dom.Element this 
		*/
		unclip?(): Ext.dom.IElement;

		/** [Method] Hides a previously applied mask  */
		unmask?(): void;

		/** [Method] Disables text selection for this element normalized across browsers  
		* @returns Ext.dom.Element this 
		*/
		unselectable?(): Ext.dom.IElement;

		/** [Method]  Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param selector String The simple selector to test. See Ext.dom.Query for information about simple selectors. 
		* @param limit Number/String/HTMLElement/Ext.dom.Element The max depth to search as a number or an element which causes the upward traversal to stop and is not considered for inclusion as the result. (defaults to 50 || document.documentElement) 
		* @param returnDom Boolean True to return the DOM node instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The matching DOM node (or HTMLElement if returnDom is true). Or null if no match was found. 
		*/
		up?( selector?:string, limit?:any, returnDom?:boolean ): any;

		/** [Method] Sets the innerHTML of this element  
		* @param html String The new HTML. 
		*/
		update?( html?:string ): void;

		/** [Method] Updates the text value of this element  
		* @param text String The text to display in this Element. 
		*/
		updateText?( text?:string ): void;

		/** [Method] Creates and wraps this element with another element 
		* @param config Object DomHelper element config object for the wrapper element or null for an empty div 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @param selector String A CSS selector to select a descendant node within the created element to use as the wrapping element. 
		* @returns HTMLElement/Ext.dom.Element The newly created wrapper element 
		*/
		wrap?( config?:any, returnDom?:boolean, selector?:string ): any;

	}

}

declare module Ext {
	export interface ICompositeElementLite extends Ext.IBase, Ext.dom.IElement {
		/** [Property] (HTMLElement[]) */
		elements?: HTMLElement[];

		/** [Property] (Boolean) */
		isComposite?: boolean;

		/** [Method] Adds elements to this Composite object  
		* @param els HTMLElement[]/Ext.dom.CompositeElementLite Either an Array of DOM elements to add, or another Composite object who's elements should be added. 
		* @param root HTMLElement/String The root element of the query or id of the root. 
		* @returns Ext.dom.CompositeElementLite This Composite object. 
		*/
		add?( els?:any, root?:any ): Ext.dom.ICompositeElementLite;

		/** [Method] Adds the given CSS class es to this Element  
		* @param names String/String[] The CSS classes to add separated by space, or an array of classes 
		* @param prefix String Prefix to prepend to each class. The separator - will be appended to the prefix. 
		* @param suffix String Suffix to append to each class. The separator - will be prepended to the suffix. 
		* @returns Ext.dom.Element this 
		*/
		addCls?( names?:any, prefix?:string, suffix?:string ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to add and remove a css class when the mouse is down and then up on this element a click effect  
		* @param className String The class to add 
		* @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added. 
		* @param scope Object The scope to execute the testFn in. 
		* @returns Ext.dom.Element this 
		*/
		addClsOnClick?( className?:string, testFn?:any, scope?:any ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to add and remove a css class when this element has the focus 
		* @param className String The class to add 
		* @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added. 
		* @param scope Object The scope to execute the testFn in. 
		* @returns Ext.dom.Element this 
		*/
		addClsOnFocus?( className?:string, testFn?:any, scope?:any ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to add and remove a css class when the mouse is over this element 
		* @param className String The class to add 
		* @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added. 
		* @param scope Object The scope to execute the testFn in. 
		* @returns Ext.dom.Element this 
		*/
		addClsOnOver?( className?:string, testFn?:any, scope?:any ): Ext.dom.IElement;

		/** [Method] Convenience method for constructing a KeyMap 
		* @param key String/Number/Number[]/Object Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options: 
		* @param fn Function The function to call 
		* @param scope Object The scope (this reference) in which the specified function is executed. Defaults to this Element. 
		* @returns Ext.util.KeyMap The KeyMap created 
		*/
		addKeyListener?( key?:any, fn?:any, scope?:any ): Ext.util.IKeyMap;

		/** [Method] Creates a KeyMap for this element 
		* @param config Object The KeyMap config. See Ext.util.KeyMap for more details 
		* @returns Ext.util.KeyMap The KeyMap created 
		*/
		addKeyMap?( config?:any ): Ext.util.IKeyMap;

		/** [Method] Performs custom animation on this Element  
		* @param config Object Configuration for Ext.fx.Anim. Note that the to config is required. 
		* @returns Ext.dom.Element this 
		*/
		animate?( config?:any ): Ext.dom.IElement;

		/** [Method] Appends the passed element s to this element 
		* @param el String/HTMLElement/Ext.dom.Element/Object The id or element to insert or a DomHelper config 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The inserted Ext.dom.Element (or HTMLElement if returnDom is true). 
		*/
		appendChild?( el?:any, returnDom?:boolean ): any;

		/** [Method] Appends this element to the passed element  
		* @param el String/HTMLElement/Ext.dom.Element The new parent element. The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element This element. 
		*/
		appendTo?( el?:any ): Ext.dom.IElement;

		/** [Method] More flexible version of setStyle for setting style properties  
		* @param styles String/Object/Function A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification. 
		* @returns Ext.dom.Element this 
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;

		/** [Method] Tries to blur the element  
		* @returns Ext.dom.Element this 
		*/
		blur?(): Ext.dom.IElement;

		/** [Method] Wraps the specified element with a special 9 element markup CSS block that renders by default as a gray container wit  
		* @param class String A base CSS class to apply to the containing wrapper element. Note that there are a number of CSS rules that are dependent on this name to make the overall effect work, so if you supply an alternate base class, make sure you also supply all of the necessary rules. 
		* @returns Ext.dom.Element The outermost wrapping element of the created box structure. 
		*/
		boxWrap?( clazz?:string ): Ext.dom.IElement;

		/** [Method] When an element is moved around in the DOM or is hidden using display none it loses layout and therefore all scrol  
		* @returns Function A function which will restore all descendant elements of this Element to their scroll positions recorded when this function was executed. Be aware that the returned function is a closure which has captured the scope of cacheScrollValues, so take care to derefence it as soon as not needed - if is it is a var it will drop out of scope, and the reference will be freed. 
		*/
		cacheScrollValues?(): any;

		/** [Method] Centers the Element in either the viewport or another Element  
		* @param centerIn String/HTMLElement/Ext.dom.Element element in which to center the element. 
		* @returns Ext.dom.Element This element 
		*/
		center?( centerIn?:any ): Ext.dom.IElement;

		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector String The CSS selector. 
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element. 
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true) 
		*/
		child?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Removes Empty or whitespace filled text nodes  
		* @param forceReclean Boolean By default the element keeps track if it has been cleaned already so you can call this over and over. However, if you update the element and need to force a re-clean, you can pass true. 
		*/
		clean?( forceReclean?:boolean ): void;

		/** [Method] Removes all elements from this Composite  
		* @param removeDom Boolean True to also remove the elements from the document. 
		*/
		clear?( removeDom?:boolean ): void;

		/** [Method] Clears any opacity settings from this element  
		* @returns Ext.dom.Element this 
		*/
		clearOpacity?(): Ext.dom.IElement;

		/** [Method] Clears positioning back to the default when the document was loaded  
		* @param value String The value to use for the left, right, top, bottom. You could use 'auto'. 
		* @returns Ext.dom.Element this 
		*/
		clearPositioning?( value?:string ): Ext.dom.IElement;

		/** [Method] Store the current overflow setting and clip overflow on the element  use unclip to remove 
		* @returns Ext.dom.Element this 
		*/
		clip?(): Ext.dom.IElement;

		/** [Method] Returns true if this composite contains the passed element 
		* @param el String/HTMLElement/Ext.dom.Element/Number The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection. 
		* @returns Boolean 
		*/
		contains?( el?:any ): boolean;

		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e  
		* @param config Object DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes. 
		* @param insertBefore HTMLElement a child element of this element 
		* @param returnDom Boolean true to return the dom node instead of creating an Element 
		* @returns Ext.dom.Element/HTMLElement The new child element (or HTMLElement if returnDom is true) 
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:boolean ): any;

		/** [Method] Creates a proxy element of this element 
		* @param config String/Object The class name of the proxy element or a DomHelper config object 
		* @param renderTo String/HTMLElement The element or element id to render the proxy to. Defaults to: document.body. 
		* @param matchBox Boolean True to align and size the proxy to this element now. 
		* @returns Ext.dom.Element The new proxy element 
		*/
		createProxy?( config?:any, renderTo?:any, matchBox?:boolean ): Ext.dom.IElement;

		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;

		/** [Method] Destroys this element by removing it from the cache removing its DOM reference and removing all of its event listen  */
		destroy?(): void;

		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector String The CSS selector 
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element 
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true) 
		*/
		down?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Calls the passed function for each element in this composite  
		* @param fn Function The function to call. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Element. 
		* @returns Ext.dom.CompositeElementLite this 
		*/
		each?( fn?:any, scope?:any ): Ext.dom.ICompositeElementLite;

		/** [Method] Convenience method for setVisibilityMode Element DISPLAY 
		* @param display String What to set display to when visible 
		* @returns Ext.dom.Element this 
		*/
		enableDisplayMode?( display?:string ): Ext.dom.IElement;

		/** [Method] Fade an element in from transparent to opaque 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		fadeIn?( options?:any ): Ext.dom.IElement;

		/** [Method] Fade an element out from opaque to transparent 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		fadeOut?( options?:any ): Ext.dom.IElement;

		/** [Method] Clears this Composite and adds the elements passed  
		* @param els HTMLElement[]/Ext.dom.CompositeElementLite Either an array of DOM elements, or another Composite from which to fill this Composite. 
		* @returns Ext.dom.CompositeElementLite this 
		*/
		fill?( els?:any ): Ext.dom.ICompositeElementLite;

		/** [Method] Filters this composite to only elements that match the passed selector  
		* @param selector String/Function A string CSS selector or a comparison function. The comparison function will be called with the following arguments: 
		* @returns Ext.dom.CompositeElementLite this 
		*/
		filter?( selector?:any ): Ext.dom.ICompositeElementLite;

		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector  
		* @param selector String The simple selector to test. See Ext.dom.Query for information about simple selectors. 
		* @param limit Number/String/HTMLElement/Ext.dom.Element The max depth to search as a number or an element which causes the upward traversal to stop and is not considered for inclusion as the result. (defaults to 50 || document.documentElement) 
		* @param returnEl Boolean True to return a Ext.dom.Element object instead of DOM node 
		* @returns HTMLElement/Ext.dom.Element The matching DOM node (or Ext.dom.Element if returnEl is true). Or null if no match was found. 
		*/
		findParent?( selector?:string, limit?:any, returnEl?:boolean ): any;

		/** [Method] Looks at parent nodes for a match of the passed simple selector  
		* @param selector String The simple selector to test. See Ext.dom.Query for information about simple selectors. 
		* @param limit Number/String/HTMLElement/Ext.dom.Element The max depth to search as a number or an element which causes the upward traversal to stop and is not&lt;/ considered for inclusion as the result. (defaults to 50 || document.documentElement) 
		* @param returnEl Boolean True to return a Ext.dom.Element object instead of DOM node 
		* @returns HTMLElement/Ext.dom.Element The matching DOM node (or Ext.dom.Element if returnEl is true). Or null if no match was found. 
		*/
		findParentNode?( selector?:string, limit?:any, returnEl?:boolean ): any;

		/** [Method] Returns the first Element 
		* @returns Ext.dom.Element 
		*/
		first?(): Ext.dom.IElement;

		/** [Method] Tries to focus the element  
		* @param defer Number Milliseconds to defer the focus 
		* @returns Ext.dom.Element this 
		*/
		focus?( defer?:number ): Ext.dom.IElement;

		/** [Method] Checks whether this element can be focused  
		* @returns Boolean True if the element is focusable 
		*/
		focusable?(): boolean;

		/** [Method] Shows a ripple of exploding attenuating borders to draw attention to an Element  
		* @param color String The hex color value for the border. 
		* @param count Number The number of ripples to display. 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		frame?( color?:string, count?:number, options?:any ): Ext.dom.IElement;

		/** [Method] Returns the value of an attribute from the element s underlying DOM node  
		* @param name String The attribute name. 
		* @param namespace String The namespace in which to look for the attribute. 
		* @returns String The attribute value. 
		*/
		getAttribute?( name?:string, namespace?:string ): string;

		/** [Method] Returns the value of a namespaced attribute from the element s underlying DOM node  
		* @param namespace String The namespace in which to look for the attribute 
		* @param name String The attribute name 
		* @returns String The attribute value 
		*/
		getAttributeNS?( namespace?:string, name?:string ): string;

		/** [Method] Returns an object containing a map of all attributes of this element s DOM node  
		* @returns Object Key/value pairs of attribute names and their values. 
		*/
		getAttributes?(): any;

		/** [Method] Gets the width of the border s for the specified side s  
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width. 
		* @returns Number The width of the sides passed added together 
		*/
		getBorderWidth?( side?:string ): number;

		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height  
		* @param local Boolean True to get the local css position instead of page coordinate 
		* @returns Number 
		*/
		getBottom?( local?:boolean ): number;

		/** [Method] Returns a child element of this element given its id  
		* @param id String The id of the desired child element. 
		* @param asDom Boolean True to return the DOM element, false to return a wrapped Element object. 
		* @returns Ext.dom.Element/HTMLElement The child element (or HTMLElement if asDom is true). Or null if no match was found. 
		*/
		getById?( id?:string, asDom?:boolean ): any;

		/** [Method] Calculates the x y to center this element on the screen 
		* @returns Number[] The x, y values [x, y] 
		*/
		getCenterXY?(): number[];

		/** [Method] Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders when  
		* @returns Number 
		*/
		getComputedHeight?(): number;

		/** [Method] Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders when ne  
		* @returns Number 
		*/
		getComputedWidth?(): number;

		/** [Method] Returns the number of elements in this Composite  
		* @returns Number 
		*/
		getCount?(): number;

		/** [Method] Returns the innerHTML of an Element or an empty string if the element s dom no longer exists  
		* @returns String 
		*/
		getHTML?(): string;

		/** [Method] Returns the offset height of the element  
		* @param contentHeight Boolean true to get the height minus borders and padding. 
		* @returns Number The element's height. 
		*/
		getHeight?( contentHeight?:boolean ): number;

		/** [Method] Returns the innerHTML of an Element or an empty string if the element s dom no longer exists  
		* @returns String 
		*/
		getHtml?(): string;

		/** [Method] Gets the left X coordinate 
		* @param local Boolean True to get the local css position instead of page coordinate 
		* @returns Number 
		*/
		getLeft?( local?:boolean ): number;

		/** [Method] Gets this element s ElementLoader 
		* @returns Ext.ElementLoader The loader 
		*/
		getLoader?(): Ext.IElementLoader;

		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i  
		* @param sides String Any combination of 'l', 'r', 't', 'b' to get the sum of those sides. 
		* @returns Object/Number 
		*/
		getMargin?( sides?:string ): any;

		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;

		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;

		/** [Method] Gets the width of the padding s for the specified side s 
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right. 
		* @returns Number The padding of the sides passed added together. 
		*/
		getPadding?( side?:string ): number;

		/** [Method] Returns an object defining the area of this Element which can be passed to Ext util Positionable setBox to set anothe  
		* @param asRegion Boolean If true an Ext.util.Region will be returned 
		* @returns Object/Ext.util.Region box An object in the following format: {  left: &lt;Element's X position&gt;,  top: &lt;Element's Y position&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. So the result may also be used for setXY 
		*/
		getPageBox?( asRegion?:boolean ): any;

		/** [Method] Gets an object with all CSS positioning properties  
		* @param autoPx Boolean true to return pixel values for "auto" styles. 
		* @returns Object 
		*/
		getPositioning?( autoPx?:boolean ): any;

		/** [Method] Gets the right X coordinate of the element element X position  element width  
		* @param local Boolean True to get the local css position instead of page coordinates 
		* @returns Number 
		*/
		getRight?( local?:boolean ): number;

		/** [Method] Returns the current scroll position of the element  
		* @returns Object An object containing the scroll position in the format {left: (scrollLeft), top: (scrollTop)} 
		*/
		getScroll?(): any;

		/** [Method] Gets the left scroll position 
		* @returns Number The left scroll position 
		*/
		getScrollLeft?(): number;

		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;

		/** [Method] Gets the top scroll position 
		* @returns Number The top scroll position 
		*/
		getScrollTop?(): number;

		/** [Method] Returns the size of the element  
		* @param contentSize Boolean true to get the width/size minus borders and padding. 
		* @returns Object An object containing the element's size: 
		*/
		getSize?( contentSize?:boolean ): any;

		/** [Method] Returns a named style property based on computed currentStyle primary and inline style if primary is not available  
		* @param property String/String[] The style property (or multiple property names in an array) whose value is returned. 
		* @param inline Boolean if true only inline styles will be returned. 
		* @returns String/Object The current value of the style property for this element (or a hash of named style values if multiple property arguments are requested). 
		*/
		getStyle?( property?:any, inline?:boolean ): any;

		/** [Method] Returns the dimensions of the element available to lay content out in  
		* @returns Object Object describing width and height. 
		*/
		getStyleSize?(): any;

		/** [Method] Returns the width in pixels of the passed text or the width of the text in this Element  
		* @param text String The text to measure. Defaults to the innerHTML of the element. 
		* @param min Number The minumum value to return. 
		* @param max Number The maximum value to return. 
		* @returns Number The text width in pixels. 
		*/
		getTextWidth?( text?:string, min?:number, max?:number ): number;

		/** [Method] Gets the top Y coordinate 
		* @param local Boolean True to get the local css position instead of page coordinates 
		* @returns Number 
		*/
		getTop?( local?:boolean ): number;

		/** [Method] Returns the value of the value attribute  
		* @param asNumber Boolean true to parse the value as a number. 
		* @returns String/Number 
		*/
		getValue?( asNumber?:boolean ): any;

		/** [Method] Returns the dimensions of the element available to lay content out in  
		* @returns Object Object describing width and height. 
		*/
		getViewSize?(): any;

		/** [Method] Returns the offset width of the element  
		* @param contentWidth Boolean true to get the width minus borders and padding. 
		* @returns Number The element's width. 
		*/
		getWidth?( contentWidth?:boolean ): number;

		/** [Method] Gets element X position in page coordinates 
		* @returns Number 
		*/
		getX?(): number;

		/** [Method] Gets element X and Y positions in page coordinates 
		* @returns Array [x, y] 
		*/
		getXY?(): any[];

		/** [Method] Gets element Y position in page coordinates 
		* @returns Number 
		*/
		getY?(): number;

		/** [Method] Returns this element s z index 
		* @returns Number 
		*/
		getZIndex?(): number;

		/** [Method] Slides the element while fading it out of view  
		* @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to bottom: 'b') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		ghost?( anchor?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Checks if the specified CSS class exists on this element s DOM node  
		* @param name String The CSS class to check for. 
		* @returns Boolean true if the class exists, else false. 
		*/
		hasCls?( name?:string ): boolean;

		/** [Method] Hide this element  Uses display mode to determine whether to use display visibility  or offsets 
		* @returns Ext.dom.Element this 
		*/
		hide?(): Ext.dom.IElement;

		/** [Method] Highlights the Element by setting a color applies to the background color by default but can be changed using the  
		* @param color String The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		highlight?( color?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element  
		* @param overFn Function The function to call when the mouse enters the Element. 
		* @param outFn Function The function to call when the mouse leaves the Element. 
		* @param scope Object The scope (this reference) in which the functions are executed. Defaults to the Element's DOM element. 
		* @param options Object Options for the listener. See the options parameter. 
		* @returns Ext.dom.Element this 
		*/
		hover?( overFn?:any, outFn?:any, scope?:any, options?:any ): Ext.dom.IElement;

		/** [Method] Find the index of the passed element within the composite collection  
		* @param el String/HTMLElement/Ext.dom.Element/Number The id of an element, or an Ext.dom.Element, or an HtmlElement to find within the composite collection. 
		* @returns Number The index of the passed Ext.dom.Element in the composite collection, or -1 if not found. 
		*/
		indexOf?( el?:any ): number;

		/** [Method] Initializes a Ext dd DD drag drop object for this element  
		* @param group String The group the DD object is member of 
		* @param config Object The DD config object 
		* @param overrides Object An object containing methods to override/implement on the DD object 
		* @returns Ext.dd.DD The DD object 
		*/
		initDD?( group?:string, config?:any, overrides?:any ): Ext.dd.IDD;

		/** [Method] Initializes a Ext dd DDProxy object for this element  
		* @param group String The group the DDProxy object is member of 
		* @param config Object The DDProxy config object 
		* @param overrides Object An object containing methods to override/implement on the DDProxy object 
		* @returns Ext.dd.DDProxy The DDProxy object 
		*/
		initDDProxy?( group?:string, config?:any, overrides?:any ): Ext.dd.IDDProxy;

		/** [Method] Initializes a Ext dd DDTarget object for this element  
		* @param group String The group the DDTarget object is member of 
		* @param config Object The DDTarget config object 
		* @param overrides Object An object containing methods to override/implement on the DDTarget object 
		* @returns Ext.dd.DDTarget The DDTarget object 
		*/
		initDDTarget?( group?:string, config?:any, overrides?:any ): Ext.dd.IDDTarget;

		/** [Method] Inserts this element after the passed element in the DOM  
		* @param el String/HTMLElement/Ext.dom.Element The element to insert after. The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element This element. 
		*/
		insertAfter?( el?:any ): Ext.dom.IElement;

		/** [Method] Inserts this element before the passed element in the DOM  
		* @param el String/HTMLElement/Ext.dom.Element The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element This element. 
		*/
		insertBefore?( el?:any ): Ext.dom.IElement;

		/** [Method] Inserts or creates an element as the first child of this element 
		* @param el String/HTMLElement/Ext.dom.Element/Object The id or element to insert or a DomHelper config to create and insert 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The new child element (or HTMLElement if returnDom is true). 
		*/
		insertFirst?( el?:any, returnDom?:boolean ): any;

		/** [Method] Inserts an html fragment into this element 
		* @param where String Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd. See Ext.dom.Helper.insertHtml for details. 
		* @param html String The HTML fragment 
		* @param returnEl Boolean True to return an Ext.dom.Element 
		* @returns HTMLElement/Ext.dom.Element The inserted node (or nearest related if more than 1 inserted) 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:boolean ): any;

		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element 
		* @param el String/HTMLElement/Ext.dom.Element/Object/Array The id, element to insert or a DomHelper config to create and insert or an array of any of those. 
		* @param where String 'before' or 'after' 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The inserted Ext.dom.Element (or HTMLElement if returnDom is true). If an array is passed, the last inserted element is returned. 
		*/
		insertSibling?( el?:any, where?:string, returnDom?:boolean ): any;

		/** [Method] Returns true if this element matches the passed simple selector e g  
		* @param selector String/Function The simple selector to test or a function which is passed candidate nodes, and should return true for nodes which match. 
		* @returns Boolean true if this element matches the selector, else false. 
		*/
		is?( selector?:any ): boolean;

		/** [Method] Returns true if this element is an ancestor of the passed element 
		* @param el String/HTMLElement/Ext.dom.Element The element or id of the element to search for in this elements descendants. 
		* @returns Boolean 
		*/
		isAncestor?( el?:any ): boolean;

		/** [Method] Returns true if this element uses the border box sizing model  
		* @returns Boolean 
		*/
		isBorderBox?(): boolean;

		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;

		/** [Method] Returns true if display is not none  
		* @returns Boolean 
		*/
		isDisplayed?(): boolean;

		/** [Method] Checks whether this element can be focused programmatically or by clicking  
		* @returns Boolean True if the element is focusable 
		*/
		isFocusable?(): boolean;

		/** [Method] Returns true if this Element is an input field or is editable in any way  
		* @returns Boolean true if this Element is an input field, or is editable in any way. 
		*/
		isInputField?(): boolean;

		/** [Method] Returns true if this element is masked  
		* @param deep Boolean Go up the DOM hierarchy to determine if any parent element is masked. 
		* @returns Boolean 
		*/
		isMasked?( deep?:boolean ): boolean;

		/** [Method] Returns true if this element is scrollable  
		* @returns Boolean 
		*/
		isScrollable?(): boolean;

		/** [Method] Checks if the current value of a style is equal to a given value  
		* @param style String property whose value is returned. 
		* @param value String to check against. 
		* @returns Boolean true for when the current value equals the given value. 
		*/
		isStyle?( style?:string, value?:string ): boolean;

		/** [Method] Checks whether this element participates in the sequential focus navigation and can be reached by using Tab key  
		* @returns Boolean True if the element is tabbable. 
		*/
		isTabbable?(): boolean;

		/** [Method] Returns true if the value of the given property is visually transparent  
		* @param prop String The style property whose value is to be tested. 
		* @returns Boolean true if the style property is visually transparent. 
		*/
		isTransparent?( prop?:string ): boolean;

		/** [Method] Checks whether the element is currently visible using both visibility and display properties  
		* @param deep Boolean True to walk the dom and see if parent elements are hidden. If false, the function only checks the visibility of the element itself and it may return true even though a parent is not visible. 
		* @returns Boolean true if the element is currently visible, else false 
		*/
		isVisible?( deep?:boolean ): boolean;

		/** [Method] Returns a flyweight Element of the dom element object at the specified index  
		* @param index Number 
		* @returns Ext.dom.Element 
		*/
		item?( index?:number ): Ext.dom.IElement;

		/** [Method] Returns the last Element 
		* @returns Ext.dom.Element 
		*/
		last?(): Ext.dom.IElement;

		/** [Method] Direct access to the Ext ElementLoader Ext ElementLoader load method  
		* @param options Object a options object for Ext.ElementLoader Ext.ElementLoader.load 
		* @returns Ext.dom.Element this 
		*/
		load?( options?:any ): Ext.dom.IElement;

		/** [Method] Puts a mask over this element to disable user interaction  
		* @param msg String A message to display in the mask 
		* @param msgCls String A css class to apply to the msg element 
		* @returns Ext.dom.Element The mask element 
		*/
		mask?( msg?:string, msgCls?:string ): Ext.dom.IElement;

		/** [Method] Monitors this Element for the mouse leaving  
		* @param delay Number The delay in milliseconds to wait for possible mouse re-entry before calling the handler function. 
		* @param handler Function The function to call if the mouse remains outside of this Element for the specified time. 
		* @param scope Object The scope (this reference) in which the handler function executes. Defaults to this Element. 
		* @returns Object The listeners object which was added to this element so that monitoring can be stopped. Example usage: // Hide the menu if the mouse moves out for 250ms or more this.mouseLeaveMonitor = this.menuEl.monitorMouseLeave(250, this.hideMenu, this); ... // Remove mouseleave monitor on menu destroy this.menuEl.un(this.mouseLeaveMonitor); 
		*/
		monitorMouseLeave?( delay?:number, handler?:any, scope?:any ): any;

		/** [Method] Sets the position of the element in page coordinates  
		* @param x Number X value for new position (coordinates are page-based) 
		* @param y Number Y value for new position (coordinates are page-based) 
		* @param animate Boolean/Object True for the default animation, or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		moveTo?( x?:number, y?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Gets the next sibling skipping text nodes 
		* @param selector String Find the next sibling that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean true to return a raw dom node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The next sibling Ext.dom.Element (or HTMLElement if asDom is true). Or null if no match is found. 
		*/
		next?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector 
		* @param selector String Find a parent node that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean True to return a raw dom node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The parent node (Ext.dom.Element or HTMLElement if returnDom is true). Or null if no match is found. 
		*/
		parent?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Creates a pause before any subsequent queued effects begin  
		* @param seconds Number The length of time to pause (in seconds) 
		* @returns Ext.dom.Element The Element 
		*/
		pause?( seconds?:number ): Ext.dom.IElement;

		/** [Method] Initializes positioning on this element  
		* @param pos String Positioning to use "relative", "absolute" or "fixed" 
		* @param zIndex Number The zIndex to apply 
		* @param x Number Set the page X position 
		* @param y Number Set the page Y position 
		*/
		position?( pos?:string, zIndex?:number, x?:number, y?:number ): void;

		/** [Method] Gets the previous sibling skipping text nodes 
		* @param selector String Find the previous sibling that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The previous sibling (Ext.dom.Element or HTMLElement if returnDom is true). Or null if no match is found. 
		*/
		prev?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Fades the element out while slowly expanding it in all directions  
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		puff?( options?:any ): Ext.dom.IElement;

		/** [Method] Removes all listeners for this object including the managed listeners */
		purgeAllListeners?(): void;

		/** [Method] Selects child nodes based on the passed CSS selector  
		* @param selector String The CSS selector. 
		* @param asDom Boolean false to return an array of Ext.dom.Element 
		* @returns HTMLElement[]/Ext.dom.Element[] An Array of elements ( HTMLElement or Ext.dom.Element if asDom is false) that match the selector. If there are no matches, an empty Array is returned. 
		*/
		query?( selector?:string, asDom?:boolean ): any;

		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings  
		* @param className String/String[] The CSS class to add, or an array of classes. 
		* @returns Ext.dom.Element this 
		*/
		radioCls?( className?:any ): Ext.dom.IElement;

		/** [Method] Destroys this element by removing it from the cache removing its DOM reference and removing all of its event listen  */
		remove?(): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		removeAllListeners?(): void;

		/** [Method] Removes the given CSS class es from this Element  
		* @param names String/String[] The CSS classes to remove separated by space, or an array of classes 
		* @param prefix String Prefix to prepend to each class. The separator - will be appended to the prefix. 
		* @param suffix String Suffix to append to each class. The separator - will be prepended to the suffix. return {Ext.dom.Element} this 
		*/
		removeCls?( names?:any, prefix?:string, suffix?:string ): void;

		/** [Method] Removes the specified element s 
		* @param el String/HTMLElement/Ext.dom.Element/Number The id of an element, the Element itself, the index of the element in this composite or an array of any of those. 
		* @param removeDom Boolean true to also remove the element from the document 
		* @returns Ext.dom.CompositeElementLite this 
		*/
		removeElement?( el?:any, removeDom?:boolean ): Ext.dom.ICompositeElementLite;

		/** [Method] Forces the browser to repaint this element  
		* @returns Ext.dom.Element this 
		*/
		repaint?(): Ext.dom.IElement;

		/** [Method] Replaces the passed element with this element 
		* @param el String/HTMLElement/Ext.dom.Element The element to replace. The id of the node, a DOM Node or an existing Element. 
		* @param destroy Boolean false to prevent destruction of the replaced element 
		* @returns Ext.dom.Element This element 
		*/
		replace?( el?:any, destroy?:boolean ): Ext.dom.IElement;

		/** [Method] Replaces a CSS class on the element with another  
		* @param oldName String The CSS class to replace. 
		* @param newName String The replacement CSS class. 
		* @param prefix String Prefix to prepend to each class to be replaced. 
		* @param suffix String Suffix to append to each class to be replaced. 
		* @returns Ext.dom.Element this 
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;

		/** [Method] Replaces the specified element with the passed element  
		* @param el String/HTMLElement/Ext.dom.Element/Number The id of an element, the Element itself, the index of the element in this composite to replace. 
		* @param replacement String/Ext.dom.Element The id of an element or the Element itself. 
		* @param domReplace Boolean true to remove and replace the element in the document too. 
		* @returns Ext.dom.CompositeElementLite this 
		*/
		replaceElement?( el?:any, replacement?:any, domReplace?:boolean ): Ext.dom.ICompositeElementLite;

		/** [Method] Replaces this element with the passed element 
		* @param el String/HTMLElement/Ext.dom.Element/Object The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create 
		* @returns Ext.dom.Element This element 
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;

		/** [Method] Animates the transition of an element s dimensions from a starting height width to an ending height width  
		* @param width Number The new width (pass undefined to keep the original width) 
		* @param height Number The new height (pass undefined to keep the original height) 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		scale?( width?:number, height?:number, options?:any ): Ext.dom.IElement;

		/** [Method] Scrolls this element the specified direction  
		* @param direction String Possible values are:  "l" (or "left") "r" (or "right") "t" (or "top", or "up") "b" (or "bottom", or "down")  
		* @param distance Number How far to scroll the element in pixels 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @returns Boolean Returns true if a scroll was triggered or false if the element was scrolled as far as it could go. 
		*/
		scroll?( direction?:string, distance?:number, animate?:any ): boolean;

		/** [Method] Scrolls this element by the passed delta values optionally animating  
		* @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties. 
		* @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object. 
		* @param animate Boolean/Object Animate flag/config object if the delta values were passed separately. 
		* @returns Ext.dom.Element this 
		*/
		scrollBy?( deltaX?:any, deltaY?:any, animate?:any ): Ext.dom.IElement;

		/** [Method] Scrolls this element into view within the passed container  
		* @param container String/HTMLElement/Ext.Element The container element to scroll. Should be a string (id), dom node, or Ext.Element. 
		* @param hscroll Boolean False to disable horizontal scroll. 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @param highlight Boolean true to highlight the element when it is in view. 
		* @returns Ext.dom.Element this 
		*/
		scrollIntoView?( container?:any, hscroll?:boolean, animate?:any, highlight?:boolean ): Ext.dom.IElement;

		/** [Method] Scrolls this element the specified scroll point  
		* @param side String Either "left" for scrollLeft values or "top" for scrollTop values. 
		* @param value Number The new scroll value 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		scrollTo?( side?:string, value?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Selects descendant elements of this element based on the passed CSS selector to enable Element methods to be applied 
		* @param selector String/HTMLElement[] The CSS selector or an array of elements 
		* @param composite Boolean Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false. 
		* @returns Ext.dom.CompositeElementLite/Ext.dom.CompositeElement 
		*/
		select?( selector?:any, composite?:boolean ): Ext.dom.ICompositeElementLite;

		/** [Method] Selects a single descendant element of this element using a CSS selector see query 
		* @param selector String The selector query 
		* @param asDom Boolean false to return an Ext.dom.Element 
		* @returns HTMLElement/Ext.dom.Element The DOM element (or Ext.dom.Element if asDom is false) which matched the selector. 
		*/
		selectNode?( selector?:string, asDom?:boolean ): any;

		/** [Method] Enable text selection for this element normalized across browsers  
		* @returns Ext.dom.Element this 
		*/
		selectable?(): Ext.dom.IElement;

		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function 
		* @param attributes Object The object with the attributes. 
		* @param useSet Boolean false to override the default setAttribute to use expandos. 
		* @returns Ext.dom.Element this 
		*/
		set?( attributes?:any, useSet?:boolean ): Ext.dom.IElement;

		/** [Method] Sets the element s CSS bottom style  
		* @param bottom Number/String Number of pixels or CSS string value to set as the bottom CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setBottom?( bottom?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s position and size in one shot  
		* @param x Number X value for new position (coordinates are page-based) 
		* @param y Number Y value for new position (coordinates are page-based) 
		* @param width Number/String The new width. This may be one of:  A Number specifying the new width in pixels A String used to set the CSS width style. Animation may not be used.  
		* @param height Number/String The new height. This may be one of:  A Number specifying the new height in pixels A String used to set the CSS height style. Animation may not be used.  
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		setBounds?( x?:number, y?:number, width?:any, height?:any, animate?:any ): Ext.dom.IElement;

		/** [Method] Sets the specified CSS class on this element s DOM node  
		* @param className String/Array The CSS class to set on this element. 
		*/
		setCls?( className?:any ): void;

		/** [Method] Sets the CSS display property  
		* @param value Boolean/String Boolean value to display the element using its default display, or a string to set the display directly. 
		* @returns Ext.dom.Element this 
		*/
		setDisplayed?( value?:any ): Ext.dom.IElement;

		/** [Method] Sets the innerHTML of this element  
		* @param html String The new HTML. 
		*/
		setHTML?( html?:string ): void;

		/** [Method] Set the height of this Element  
		* @param height Number/String The new height. 
		* @returns Ext.dom.Element this 
		*/
		setHeight?( height?:any ): Ext.dom.IElement;

		/** [Method] Sets the innerHTML of this element  
		* @param html String The new HTML. 
		*/
		setHtml?( html?:string ): void;

		/** [Method] Sets the element s left position directly using CSS style instead of setX 
		* @param left Number/String Number of pixels or CSS string value to set as the left CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setLeft?( left?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s left and top positions directly using CSS style 
		* @param left Number/String Number of pixels or CSS string value to set as the left CSS property value 
		* @param top Number/String Number of pixels or CSS string value to set as the top CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setLeftTop?( left?:any, top?:any ): Ext.dom.IElement;

		/** [Method] Sets the position of the element in page coordinates  
		* @param x Number X value for new position 
		* @param y Number Y value for new position 
		* @param animate Boolean/Object True for the default animation, or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		setLocation?( x?:number, y?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Set the maximum height of this Element  
		* @param height Number/String The new maximum height. 
		* @returns Ext.dom.Element this 
		*/
		setMaxHeight?( height?:any ): Ext.dom.IElement;

		/** [Method] Set the maximum width of this Element  
		* @param width Number/String The new maximum width. 
		* @returns Ext.dom.Element this 
		*/
		setMaxWidth?( width?:any ): Ext.dom.IElement;

		/** [Method] Set the minimum height of this Element  
		* @param height Number/String The new minimum height. 
		* @returns Ext.dom.Element this 
		*/
		setMinHeight?( height?:any ): Ext.dom.IElement;

		/** [Method] Set the minimum width of this Element  
		* @param width Number/String The new minimum width. 
		* @returns Ext.dom.Element this 
		*/
		setMinWidth?( width?:any ): Ext.dom.IElement;

		/** [Method] Set the opacity of the element 
		* @param opacity Number The new opacity. 0 = transparent, .5 = 50% visible, 1 = fully visible, etc 
		* @param animate Boolean/Object a standard Element animation config object or true for the default animation ({duration: 350, easing: 'ease-in'}) 
		* @returns Ext.dom.Element this 
		*/
		setOpacity?( opacity?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Set positioning with an object returned by getPositioning  
		* @param posCfg Object 
		* @returns Ext.dom.Element this 
		*/
		setPositioning?( posCfg?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s CSS right style  
		* @param right Number/String Number of pixels or CSS string value to set as the right CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setRight?( right?:any ): Ext.dom.IElement;

		/** [Method] Sets the left scroll position 
		* @param left Number The left scroll position 
		* @returns Ext.dom.Element this 
		*/
		setScrollLeft?( left?:number ): Ext.dom.IElement;

		/** [Method] Sets the top scroll position 
		* @param top Number The top scroll position 
		* @returns Ext.dom.Element this 
		*/
		setScrollTop?( top?:number ): Ext.dom.IElement;

		/** [Method] Set the size of this Element  
		* @param width Number/String The new width. This may be one of:  A Number specifying the new width in pixels. A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.  
		* @param height Number/String The new height. This may be one of:  A Number specifying the new height in pixels. A String used to set the CSS height style. Animation may not be used.  
		* @returns Ext.dom.Element this 
		*/
		setSize?( width?:any, height?:any ): Ext.dom.IElement;

		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles  
		* @param property String/Object The style property to be set, or an object of multiple styles. 
		* @param value String The value to apply to the given property, or null if an object was passed. 
		* @returns Ext.dom.Element this 
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;

		/** [Method] Sets the element s top position directly using CSS style instead of setY 
		* @param top Number/String Number of pixels or CSS string value to set as the top CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setTop?( top?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;

		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS  
		* @param dummy null mode The method by which the element will be hidden (you can also use the setVisible or toggle method to toggle element visibility). 
		* @returns Ext.dom.Element this 
		*/
		setVisibilityMode?( dummy?:any ): Ext.dom.IElement;

		/** [Method] Sets the visibility of the element based on the current visibility mode  
		* @param visible Boolean Whether the element is visible. 
		* @returns Ext.dom.Element this 
		*/
		setVisible?( visible?:boolean ): Ext.dom.IElement;

		/** [Method] Set the width of this Element  
		* @param width Number/String The new width. 
		* @returns Ext.dom.Element this 
		*/
		setWidth?( width?:any ): Ext.dom.IElement;

		/** [Method] Sets this Element s page level x coordinate 
		* @param x Number 
		* @returns Ext.dom.Element this 
		*/
		setX?( x?:number ): Ext.dom.IElement;

		/** [Method] Sets this Element s page level x and y coordinates 
		* @param xy Number[] 
		* @returns Ext.dom.Element this 
		*/
		setXY?( xy?:number[] ): Ext.dom.IElement;

		/** [Method] Sets this Element s page level y coordinate 
		* @param y Number 
		* @returns Ext.dom.Element this 
		*/
		setY?( y?:number ): Ext.dom.IElement;

		/** [Method] Sets the z index of this Element and synchronizes the z index of shadow and or shim if present  
		* @param zindex Number The new z-index to set 
		* @returns Ext.dom.Element this 
		*/
		setZIndex?( zindex?:number ): Ext.dom.IElement;

		/** [Method] Animates the transition of any combination of an element s dimensions xy position and or opacity  
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		shift?( options?:any ): Ext.dom.IElement;

		/** [Method] Show this element  Uses display mode to determine whether to use display visibility  or offsets 
		* @returns Ext.dom.Element this 
		*/
		show?(): Ext.dom.IElement;

		/** [Method] Gets a range nodes  
		* @param start Number The index of the first node in the range 
		* @param end Number The index of the last node in the range 
		* @returns HTMLElement[] An array of nodes 
		*/
		slice?( start?:number, end?:number ): HTMLElement[];

		/** [Method] Slides the element into view  
		* @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		slideIn?( anchor?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Slides the element out of view  
		* @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		slideOut?( anchor?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Stops the specified event s from bubbling and optionally prevents the default action var store  Ext create Ext da  
		* @param eventName String/String[] an event / array of events to stop from bubbling 
		* @param preventDefault Boolean true to prevent the default action too 
		* @returns Ext.dom.Element this 
		*/
		swallowEvent?( eventName?:any, preventDefault?:boolean ): Ext.dom.IElement;

		/** [Method] Blinks the element as if it was clicked and then collapses on its center similar to switching off a television 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		switchOff?( options?:any ): Ext.dom.IElement;

		/** [Method] Toggles the element s visibility depending on visibility mode  
		* @returns Ext.dom.Element this 
		*/
		toggle?(): Ext.dom.IElement;

		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it 
		* @param className String The CSS class to toggle. 
		* @returns Ext.dom.Element this 
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;

		/** [Method] Return clipping overflow to original clipping before clip was called 
		* @returns Ext.dom.Element this 
		*/
		unclip?(): Ext.dom.IElement;

		/** [Method] Hides a previously applied mask  */
		unmask?(): void;

		/** [Method] Disables text selection for this element normalized across browsers  
		* @returns Ext.dom.Element this 
		*/
		unselectable?(): Ext.dom.IElement;

		/** [Method]  Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param selector String The simple selector to test. See Ext.dom.Query for information about simple selectors. 
		* @param limit Number/String/HTMLElement/Ext.dom.Element The max depth to search as a number or an element which causes the upward traversal to stop and is not considered for inclusion as the result. (defaults to 50 || document.documentElement) 
		* @param returnDom Boolean True to return the DOM node instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The matching DOM node (or HTMLElement if returnDom is true). Or null if no match was found. 
		*/
		up?( selector?:string, limit?:any, returnDom?:boolean ): any;

		/** [Method] Sets the innerHTML of this element  
		* @param html String The new HTML. 
		*/
		update?( html?:string ): void;

		/** [Method] Updates the text value of this element  
		* @param text String The text to display in this Element. 
		*/
		updateText?( text?:string ): void;

		/** [Method] Creates and wraps this element with another element 
		* @param config Object DomHelper element config object for the wrapper element or null for an empty div 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @param selector String A CSS selector to select a descendant node within the created element to use as the wrapping element. 
		* @returns HTMLElement/Ext.dom.Element The newly created wrapper element 
		*/
		wrap?( config?:any, returnDom?:boolean, selector?:string ): any;

	}

}

declare module Ext.dom {
	export interface IElement extends Ext.IBase, Ext.util.IPositionable, Ext.mixin.IObservable {
		/** [Property] (Ext.Component) */
		component?: Ext.IComponent;

		/** [Property] (HTMLElement) */
		dom?: HTMLElement;

		/** [Property] (Object) */
		empty?: any;

		/** [Property] (String) */
		id?: string;

		/** [Property] (Number) */
		DISPLAY?: number;

		/** [Property] (Number) */
		OFFSETS?: number;

		/** [Property] (Number) */
		VISIBILITY?: number;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Adds the given CSS class es to this Element  
		* @param names String/String[] The CSS classes to add separated by space, or an array of classes 
		* @param prefix String Prefix to prepend to each class. The separator - will be appended to the prefix. 
		* @param suffix String Suffix to append to each class. The separator - will be prepended to the suffix. 
		* @returns Ext.dom.Element this 
		*/
		addCls?( names?:any, prefix?:string, suffix?:string ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to add and remove a css class when the mouse is down and then up on this element a click effect  
		* @param className String The class to add 
		* @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added. 
		* @param scope Object The scope to execute the testFn in. 
		* @returns Ext.dom.Element this 
		*/
		addClsOnClick?( className?:string, testFn?:any, scope?:any ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to add and remove a css class when this element has the focus 
		* @param className String The class to add 
		* @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added. 
		* @param scope Object The scope to execute the testFn in. 
		* @returns Ext.dom.Element this 
		*/
		addClsOnFocus?( className?:string, testFn?:any, scope?:any ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to add and remove a css class when the mouse is over this element 
		* @param className String The class to add 
		* @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added. 
		* @param scope Object The scope to execute the testFn in. 
		* @returns Ext.dom.Element this 
		*/
		addClsOnOver?( className?:string, testFn?:any, scope?:any ): Ext.dom.IElement;

		/** [Method] Convenience method for constructing a KeyMap 
		* @param key String/Number/Number[]/Object Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options: 
		* @param fn Function The function to call 
		* @param scope Object The scope (this reference) in which the specified function is executed. Defaults to this Element. 
		* @returns Ext.util.KeyMap The KeyMap created 
		*/
		addKeyListener?( key?:any, fn?:any, scope?:any ): Ext.util.IKeyMap;

		/** [Method] Creates a KeyMap for this element 
		* @param config Object The KeyMap config. See Ext.util.KeyMap for more details 
		* @returns Ext.util.KeyMap The KeyMap created 
		*/
		addKeyMap?( config?:any ): Ext.util.IKeyMap;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Aligns the element with another element relative to the specified anchor points  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] Element animation config object 
		* @returns Ext.util.Positionable this 
		*/
		alignTo?( element?:any, position?:string, offsets?:number[] ): Ext.util.IPositionable;

		/** [Method] Anchors an element to another element and realigns it when the window is resized  
		* @param anchorToEl Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param alignment String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @param monitorScroll Boolean/Number True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay in milliseconds. 
		* @param callback Function The function to call after the animation finishes 
		* @returns Ext.util.Positionable this 
		*/
		anchorTo?( anchorToEl?:any, alignment?:string, offsets?:number[], animate?:any, monitorScroll?:any, callback?:any ): Ext.util.IPositionable;

		/** [Method] Performs custom animation on this Element  
		* @param config Object Configuration for Ext.fx.Anim. Note that the to config is required. 
		* @returns Ext.dom.Element this 
		*/
		animate?( config?:any ): Ext.dom.IElement;

		/** [Method] Appends the passed element s to this element 
		* @param el String/HTMLElement/Ext.dom.Element/Object The id or element to insert or a DomHelper config 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The inserted Ext.dom.Element (or HTMLElement if returnDom is true). 
		*/
		appendChild?( el?:any, returnDom?:boolean ): any;

		/** [Method] Appends this element to the passed element  
		* @param el String/HTMLElement/Ext.dom.Element The new parent element. The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element This element. 
		*/
		appendTo?( el?:any ): Ext.dom.IElement;

		/** [Method] More flexible version of setStyle for setting style properties  
		* @param styles String/Object/Function A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification. 
		* @returns Ext.dom.Element this 
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;

		/** [Method] Tries to blur the element  
		* @returns Ext.dom.Element this 
		*/
		blur?(): Ext.dom.IElement;

		/** [Method] Wraps the specified element with a special 9 element markup CSS block that renders by default as a gray container wit  
		* @param class String A base CSS class to apply to the containing wrapper element. Note that there are a number of CSS rules that are dependent on this name to make the overall effect work, so if you supply an alternate base class, make sure you also supply all of the necessary rules. 
		* @returns Ext.dom.Element The outermost wrapping element of the created box structure. 
		*/
		boxWrap?( clazz?:string ): Ext.dom.IElement;

		/** [Method] When an element is moved around in the DOM or is hidden using display none it loses layout and therefore all scrol  
		* @returns Function A function which will restore all descendant elements of this Element to their scroll positions recorded when this function was executed. Be aware that the returned function is a closure which has captured the scope of cacheScrollValues, so take care to derefence it as soon as not needed - if is it is a var it will drop out of scope, and the reference will be freed. 
		*/
		cacheScrollValues?(): any;

		/** [Method] Centers the Element in either the viewport or another Element  
		* @param centerIn String/HTMLElement/Ext.dom.Element element in which to center the element. 
		* @returns Ext.dom.Element This element 
		*/
		center?( centerIn?:any ): Ext.dom.IElement;

		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector String The CSS selector. 
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element. 
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true) 
		*/
		child?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Removes Empty or whitespace filled text nodes  
		* @param forceReclean Boolean By default the element keeps track if it has been cleaned already so you can call this over and over. However, if you update the element and need to force a re-clean, you can pass true. 
		*/
		clean?( forceReclean?:boolean ): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Clears any opacity settings from this element  
		* @returns Ext.dom.Element this 
		*/
		clearOpacity?(): Ext.dom.IElement;

		/** [Method] Clears positioning back to the default when the document was loaded  
		* @param value String The value to use for the left, right, top, bottom. You could use 'auto'. 
		* @returns Ext.dom.Element this 
		*/
		clearPositioning?( value?:string ): Ext.dom.IElement;

		/** [Method] Store the current overflow setting and clip overflow on the element  use unclip to remove 
		* @returns Ext.dom.Element this 
		*/
		clip?(): Ext.dom.IElement;

		/** [Method] Returns true if this element is an ancestor of the passed element or is the element  
		* @param element HTMLElement/String The element to check. 
		* @returns Boolean True if this element is an ancestor of el or the el itself, else false 
		*/
		contains?( element?:any ): boolean;

		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e  
		* @param config Object DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes. 
		* @param insertBefore HTMLElement a child element of this element 
		* @param returnDom Boolean true to return the dom node instead of creating an Element 
		* @returns Ext.dom.Element/HTMLElement The new child element (or HTMLElement if returnDom is true) 
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:boolean ): any;

		/** [Method] Creates a proxy element of this element 
		* @param config String/Object The class name of the proxy element or a DomHelper config object 
		* @param renderTo String/HTMLElement The element or element id to render the proxy to. Defaults to: document.body. 
		* @param matchBox Boolean True to align and size the proxy to this element now. 
		* @returns Ext.dom.Element The new proxy element 
		*/
		createProxy?( config?:any, renderTo?:any, matchBox?:boolean ): Ext.dom.IElement;

		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;

		/** [Method] Destroys this element by removing it from the cache removing its DOM reference and removing all of its event listen  */
		destroy?(): void;

		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector String The CSS selector 
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element 
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true) 
		*/
		down?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Convenience method for setVisibilityMode Element DISPLAY 
		* @param display String What to set display to when visible 
		* @returns Ext.dom.Element this 
		*/
		enableDisplayMode?( display?:string ): Ext.dom.IElement;

		/** [Method] Fade an element in from transparent to opaque 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		fadeIn?( options?:any ): Ext.dom.IElement;

		/** [Method] Fade an element out from opaque to transparent 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		fadeOut?( options?:any ): Ext.dom.IElement;

		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector  
		* @param selector String The simple selector to test. See Ext.dom.Query for information about simple selectors. 
		* @param limit Number/String/HTMLElement/Ext.dom.Element The max depth to search as a number or an element which causes the upward traversal to stop and is not considered for inclusion as the result. (defaults to 50 || document.documentElement) 
		* @param returnEl Boolean True to return a Ext.dom.Element object instead of DOM node 
		* @returns HTMLElement/Ext.dom.Element The matching DOM node (or Ext.dom.Element if returnEl is true). Or null if no match was found. 
		*/
		findParent?( selector?:string, limit?:any, returnEl?:boolean ): any;

		/** [Method] Looks at parent nodes for a match of the passed simple selector  
		* @param selector String The simple selector to test. See Ext.dom.Query for information about simple selectors. 
		* @param limit Number/String/HTMLElement/Ext.dom.Element The max depth to search as a number or an element which causes the upward traversal to stop and is not&lt;/ considered for inclusion as the result. (defaults to 50 || document.documentElement) 
		* @param returnEl Boolean True to return a Ext.dom.Element object instead of DOM node 
		* @returns HTMLElement/Ext.dom.Element The matching DOM node (or Ext.dom.Element if returnEl is true). Or null if no match was found. 
		*/
		findParentNode?( selector?:string, limit?:any, returnEl?:boolean ): any;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Gets the first child skipping text nodes 
		* @param selector String Find the next sibling that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The first child or null 
		*/
		first?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Tries to focus the element  
		* @param defer Number Milliseconds to defer the focus 
		* @returns Ext.dom.Element this 
		*/
		focus?( defer?:number ): Ext.dom.IElement;

		/** [Method] Checks whether this element can be focused  
		* @returns Boolean True if the element is focusable 
		*/
		focusable?(): boolean;

		/** [Method] Shows a ripple of exploding attenuating borders to draw attention to an Element  
		* @param color String The hex color value for the border. 
		* @param count Number The number of ripples to display. 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		frame?( color?:string, count?:number, options?:any ): Ext.dom.IElement;

		/** [Method] Gets the x y coordinates to align this element with another element  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @returns Number[] [x, y] 
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:number[] ): number[];

		/** [Method] Gets the x y coordinates specified by the anchor position on the element  
		* @param anchor String The specified anchor position. See alignTo for details on supported anchor positions. 
		* @param local Boolean True to get the local (element top/left-relative) anchor position instead of page coordinates 
		* @param size Object An object containing the size to use for calculating anchor position {width: (target width), height: (target height)} (defaults to the element's current size) 
		* @returns Number[] [x, y] An array containing the element's x and y coordinates 
		*/
		getAnchorXY?( anchor?:string, local?:boolean, size?:any ): number[];

		/** [Method] Returns the value of an attribute from the element s underlying DOM node  
		* @param name String The attribute name. 
		* @param namespace String The namespace in which to look for the attribute. 
		* @returns String The attribute value. 
		*/
		getAttribute?( name?:string, namespace?:string ): string;

		/** [Method] Returns the value of a namespaced attribute from the element s underlying DOM node  
		* @param namespace String The namespace in which to look for the attribute 
		* @param name String The attribute name 
		* @returns String The attribute value 
		*/
		getAttributeNS?( namespace?:string, name?:string ): string;

		/** [Method] Returns an object containing a map of all attributes of this element s DOM node  
		* @returns Object Key/value pairs of attribute names and their values. 
		*/
		getAttributes?(): any;

		/** [Method] Gets the width of the border s for the specified side s  
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width. 
		* @returns Number The width of the sides passed added together 
		*/
		getBorderWidth?( side?:string ): number;

		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height  
		* @param local Boolean True to get the local css position instead of page coordinate 
		* @returns Number 
		*/
		getBottom?( local?:boolean ): number;

		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param contentBox Boolean If true a box for the content of the element is returned. 
		* @param local Boolean If true the element's left and top relative to its offsetParent are returned instead of page x/y. 
		* @returns Object An object in the format 
		*/
		getBox?( contentBox?:boolean, local?:boolean ): any;

		/** [Method] Returns a child element of this element given its id  
		* @param id String The id of the desired child element. 
		* @param asDom Boolean True to return the DOM element, false to return a wrapped Element object. 
		* @returns Ext.dom.Element/HTMLElement The child element (or HTMLElement if asDom is true). Or null if no match was found. 
		*/
		getById?( id?:string, asDom?:boolean ): any;

		/** [Method] Calculates the x y to center this element on the screen 
		* @returns Number[] The x, y values [x, y] 
		*/
		getCenterXY?(): number[];

		/** [Method] Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders when  
		* @returns Number 
		*/
		getComputedHeight?(): number;

		/** [Method] Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders when ne  
		* @returns Number 
		*/
		getComputedWidth?(): number;

		/** [Method] Returns the content region of this element for purposes of constraining floating children  */
		getConstrainRegion?(): void;

		/** [Method] Returns the X Y vector by which this Positionable s element must be translated to make a best attempt to constrain  
		* @param constrainTo Ext.util.Positionable/HTMLElement/String/Ext.util.Region The Positionable, HTMLElement, element id, or Region into which the element is to be constrained. 
		* @param proposedPosition Number[] A proposed [X, Y] position to test for validity and to produce a vector for instead of using the element's current position 
		* @param proposedSize Number[] A proposed [width, height] size to constrain instead of using the element's current size 
		* @returns Number[]/Boolean If the element needs to be translated, an [X, Y] vector by which this element must be translated. Otherwise, false. 
		*/
		getConstrainVector?( constrainTo?:any, proposedPosition?:number[], proposedSize?:number[] ): any;

		/** [Method] Returns the innerHTML of an Element or an empty string if the element s dom no longer exists  
		* @returns String 
		*/
		getHTML?(): string;

		/** [Method] Returns the offset height of the element  
		* @param contentHeight Boolean true to get the height minus borders and padding. 
		* @returns Number The element's height. 
		*/
		getHeight?( contentHeight?:boolean ): number;

		/** [Method] Returns the innerHTML of an Element or an empty string if the element s dom no longer exists  
		* @returns String 
		*/
		getHtml?(): string;

		/** [Method] Gets the left X coordinate 
		* @param local Boolean True to get the local css position instead of page coordinate 
		* @returns Number 
		*/
		getLeft?( local?:boolean ): number;

		/** [Method] Gets this element s ElementLoader 
		* @returns Ext.ElementLoader The loader 
		*/
		getLoader?(): Ext.IElementLoader;

		/** [Method] Returns the x coordinate of this element reletive to its offsetParent  
		* @returns Number The local x coordinate 
		*/
		getLocalX?(): number;

		/** [Method] Returns the x and y coordinates of this element relative to its offsetParent  
		* @returns Number[] The local XY position of the element 
		*/
		getLocalXY?(): number[];

		/** [Method] Returns the y coordinate of this element reletive to its offsetParent  
		* @returns Number The local y coordinate 
		*/
		getLocalY?(): number;

		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i  
		* @param sides String Any combination of 'l', 'r', 't', 'b' to get the sum of those sides. 
		* @returns Object/Number 
		*/
		getMargin?( sides?:string ): any;

		/** [Method] Returns the offsets of this element from the passed element  
		* @param offsetsTo Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or element id to get get the offsets from. 
		* @returns Number[] The XY page offsets (e.g. [100, -200]) 
		*/
		getOffsetsTo?( offsetsTo?:any ): number[];

		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;

		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;

		/** [Method] Gets the width of the padding s for the specified side s 
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right. 
		* @returns Number The padding of the sides passed added together. 
		*/
		getPadding?( side?:string ): number;

		/** [Method] Returns an object defining the area of this Element which can be passed to Ext util Positionable setBox to set anothe  
		* @param asRegion Boolean If true an Ext.util.Region will be returned 
		* @returns Object/Ext.util.Region box An object in the following format: {  left: &lt;Element's X position&gt;,  top: &lt;Element's Y position&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. So the result may also be used for setXY 
		*/
		getPageBox?( asRegion?:boolean ): any;

		/** [Method] Gets an object with all CSS positioning properties  
		* @param autoPx Boolean true to return pixel values for "auto" styles. 
		* @returns Object 
		*/
		getPositioning?( autoPx?:boolean ): any;

		/** [Method] Returns a region object that defines the area of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" properties. 
		*/
		getRegion?(): Ext.util.IRegion;

		/** [Method] Gets the right X coordinate of the element element X position  element width  
		* @param local Boolean True to get the local css position instead of page coordinates 
		* @returns Number 
		*/
		getRight?( local?:boolean ): number;

		/** [Method] Returns the current scroll position of the element  
		* @returns Object An object containing the scroll position in the format {left: (scrollLeft), top: (scrollTop)} 
		*/
		getScroll?(): any;

		/** [Method] Gets the left scroll position 
		* @returns Number The left scroll position 
		*/
		getScrollLeft?(): number;

		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;

		/** [Method] Gets the top scroll position 
		* @returns Number The top scroll position 
		*/
		getScrollTop?(): number;

		/** [Method] Returns the size of the element  
		* @param contentSize Boolean true to get the width/size minus borders and padding. 
		* @returns Object An object containing the element's size: 
		*/
		getSize?( contentSize?:boolean ): any;

		/** [Method] Returns a named style property based on computed currentStyle primary and inline style if primary is not available  
		* @param property String/String[] The style property (or multiple property names in an array) whose value is returned. 
		* @param inline Boolean if true only inline styles will be returned. 
		* @returns String/Object The current value of the style property for this element (or a hash of named style values if multiple property arguments are requested). 
		*/
		getStyle?( property?:any, inline?:boolean ): any;

		/** [Method] Returns the dimensions of the element available to lay content out in  
		* @returns Object Object describing width and height. 
		*/
		getStyleSize?(): any;

		/** [Method] Returns the width in pixels of the passed text or the width of the text in this Element  
		* @param text String The text to measure. Defaults to the innerHTML of the element. 
		* @param min Number The minumum value to return. 
		* @param max Number The maximum value to return. 
		* @returns Number The text width in pixels. 
		*/
		getTextWidth?( text?:string, min?:number, max?:number ): number;

		/** [Method] Gets the top Y coordinate 
		* @param local Boolean True to get the local css position instead of page coordinates 
		* @returns Number 
		*/
		getTop?( local?:boolean ): number;

		/** [Method] Returns the value of the value attribute  
		* @param asNumber Boolean true to parse the value as a number. 
		* @returns String/Number 
		*/
		getValue?( asNumber?:boolean ): any;

		/** [Method] Returns the content region of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" member data. 
		*/
		getViewRegion?(): Ext.util.IRegion;

		/** [Method] Returns the dimensions of the element available to lay content out in  
		* @returns Object Object describing width and height. 
		*/
		getViewSize?(): any;

		/** [Method] Returns the offset width of the element  
		* @param contentWidth Boolean true to get the width minus borders and padding. 
		* @returns Number The element's width. 
		*/
		getWidth?( contentWidth?:boolean ): number;

		/** [Method] Gets element X position in page coordinates 
		* @returns Number 
		*/
		getX?(): number;

		/** [Method] Gets element X and Y positions in page coordinates 
		* @returns Array [x, y] 
		*/
		getXY?(): any[];

		/** [Method] Gets element Y position in page coordinates 
		* @returns Number 
		*/
		getY?(): number;

		/** [Method] Returns this element s z index 
		* @returns Number 
		*/
		getZIndex?(): number;

		/** [Method] Slides the element while fading it out of view  
		* @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to bottom: 'b') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		ghost?( anchor?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Checks if the specified CSS class exists on this element s DOM node  
		* @param name String The CSS class to check for. 
		* @returns Boolean true if the class exists, else false. 
		*/
		hasCls?( name?:string ): boolean;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Hide this element  Uses display mode to determine whether to use display visibility  or offsets 
		* @returns Ext.dom.Element this 
		*/
		hide?(): Ext.dom.IElement;

		/** [Method] Highlights the Element by setting a color applies to the background color by default but can be changed using the  
		* @param color String The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		highlight?( color?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element  
		* @param overFn Function The function to call when the mouse enters the Element. 
		* @param outFn Function The function to call when the mouse leaves the Element. 
		* @param scope Object The scope (this reference) in which the functions are executed. Defaults to the Element's DOM element. 
		* @param options Object Options for the listener. See the options parameter. 
		* @returns Ext.dom.Element this 
		*/
		hover?( overFn?:any, outFn?:any, scope?:any, options?:any ): Ext.dom.IElement;

		/** [Method] Initializes a Ext dd DD drag drop object for this element  
		* @param group String The group the DD object is member of 
		* @param config Object The DD config object 
		* @param overrides Object An object containing methods to override/implement on the DD object 
		* @returns Ext.dd.DD The DD object 
		*/
		initDD?( group?:string, config?:any, overrides?:any ): Ext.dd.IDD;

		/** [Method] Initializes a Ext dd DDProxy object for this element  
		* @param group String The group the DDProxy object is member of 
		* @param config Object The DDProxy config object 
		* @param overrides Object An object containing methods to override/implement on the DDProxy object 
		* @returns Ext.dd.DDProxy The DDProxy object 
		*/
		initDDProxy?( group?:string, config?:any, overrides?:any ): Ext.dd.IDDProxy;

		/** [Method] Initializes a Ext dd DDTarget object for this element  
		* @param group String The group the DDTarget object is member of 
		* @param config Object The DDTarget config object 
		* @param overrides Object An object containing methods to override/implement on the DDTarget object 
		* @returns Ext.dd.DDTarget The DDTarget object 
		*/
		initDDTarget?( group?:string, config?:any, overrides?:any ): Ext.dd.IDDTarget;

		/** [Method] Inserts this element after the passed element in the DOM  
		* @param el String/HTMLElement/Ext.dom.Element The element to insert after. The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element This element. 
		*/
		insertAfter?( el?:any ): Ext.dom.IElement;

		/** [Method] Inserts this element before the passed element in the DOM  
		* @param el String/HTMLElement/Ext.dom.Element The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element This element. 
		*/
		insertBefore?( el?:any ): Ext.dom.IElement;

		/** [Method] Inserts or creates an element as the first child of this element 
		* @param el String/HTMLElement/Ext.dom.Element/Object The id or element to insert or a DomHelper config to create and insert 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The new child element (or HTMLElement if returnDom is true). 
		*/
		insertFirst?( el?:any, returnDom?:boolean ): any;

		/** [Method] Inserts an html fragment into this element 
		* @param where String Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd. See Ext.dom.Helper.insertHtml for details. 
		* @param html String The HTML fragment 
		* @param returnEl Boolean True to return an Ext.dom.Element 
		* @returns HTMLElement/Ext.dom.Element The inserted node (or nearest related if more than 1 inserted) 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:boolean ): any;

		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element 
		* @param el String/HTMLElement/Ext.dom.Element/Object/Array The id, element to insert or a DomHelper config to create and insert or an array of any of those. 
		* @param where String 'before' or 'after' 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The inserted Ext.dom.Element (or HTMLElement if returnDom is true). If an array is passed, the last inserted element is returned. 
		*/
		insertSibling?( el?:any, where?:string, returnDom?:boolean ): any;

		/** [Method] Returns true if this element matches the passed simple selector e g  
		* @param selector String/Function The simple selector to test or a function which is passed candidate nodes, and should return true for nodes which match. 
		* @returns Boolean true if this element matches the selector, else false. 
		*/
		is?( selector?:any ): boolean;

		/** [Method] Returns true if this element is an ancestor of the passed element 
		* @param el String/HTMLElement/Ext.dom.Element The element or id of the element to search for in this elements descendants. 
		* @returns Boolean 
		*/
		isAncestor?( el?:any ): boolean;

		/** [Method] Returns true if this element uses the border box sizing model  
		* @returns Boolean 
		*/
		isBorderBox?(): boolean;

		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;

		/** [Method] Returns true if display is not none  
		* @returns Boolean 
		*/
		isDisplayed?(): boolean;

		/** [Method] Checks whether this element can be focused programmatically or by clicking  
		* @returns Boolean True if the element is focusable 
		*/
		isFocusable?(): boolean;

		/** [Method] Returns true if this Element is an input field or is editable in any way  
		* @returns Boolean true if this Element is an input field, or is editable in any way. 
		*/
		isInputField?(): boolean;

		/** [Method] Returns true if this element is masked  
		* @param deep Boolean Go up the DOM hierarchy to determine if any parent element is masked. 
		* @returns Boolean 
		*/
		isMasked?( deep?:boolean ): boolean;

		/** [Method] Returns true if this element is scrollable  
		* @returns Boolean 
		*/
		isScrollable?(): boolean;

		/** [Method] Checks if the current value of a style is equal to a given value  
		* @param style String property whose value is returned. 
		* @param value String to check against. 
		* @returns Boolean true for when the current value equals the given value. 
		*/
		isStyle?( style?:string, value?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Checks whether this element participates in the sequential focus navigation and can be reached by using Tab key  
		* @returns Boolean True if the element is tabbable. 
		*/
		isTabbable?(): boolean;

		/** [Method] Returns true if the value of the given property is visually transparent  
		* @param prop String The style property whose value is to be tested. 
		* @returns Boolean true if the style property is visually transparent. 
		*/
		isTransparent?( prop?:string ): boolean;

		/** [Method] Checks whether the element is currently visible using both visibility and display properties  
		* @param deep Boolean True to walk the dom and see if parent elements are hidden. If false, the function only checks the visibility of the element itself and it may return true even though a parent is not visible. 
		* @returns Boolean true if the element is currently visible, else false 
		*/
		isVisible?( deep?:boolean ): boolean;

		/** [Method] Gets the last child skipping text nodes 
		* @param selector String Find the previous sibling that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The last child Ext.dom.Element (or HTMLElement if returnDom is true). Or null if no match is found. 
		*/
		last?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Direct access to the Ext ElementLoader Ext ElementLoader load method  
		* @param options Object a options object for Ext.ElementLoader Ext.ElementLoader.load 
		* @returns Ext.dom.Element this 
		*/
		load?( options?:any ): Ext.dom.IElement;

		/** [Method] Puts a mask over this element to disable user interaction  
		* @param msg String A message to display in the mask 
		* @param msgCls String A css class to apply to the msg element 
		* @returns Ext.dom.Element The mask element 
		*/
		mask?( msg?:string, msgCls?:string ): Ext.dom.IElement;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Monitors this Element for the mouse leaving  
		* @param delay Number The delay in milliseconds to wait for possible mouse re-entry before calling the handler function. 
		* @param handler Function The function to call if the mouse remains outside of this Element for the specified time. 
		* @param scope Object The scope (this reference) in which the handler function executes. Defaults to this Element. 
		* @returns Object The listeners object which was added to this element so that monitoring can be stopped. Example usage: // Hide the menu if the mouse moves out for 250ms or more this.mouseLeaveMonitor = this.menuEl.monitorMouseLeave(250, this.hideMenu, this); ... // Remove mouseleave monitor on menu destroy this.menuEl.un(this.mouseLeaveMonitor); 
		*/
		monitorMouseLeave?( delay?:number, handler?:any, scope?:any ): any;

		/** [Method] Move the element relative to its current position  
		* @param direction String Possible values are:  "l" (or "left") "r" (or "right") "t" (or "top", or "up") "b" (or "bottom", or "down")  
		* @param distance Number How far to move the element in pixels 
		*/
		move?( direction?:string, distance?:number ): void;

		/** [Method] Sets the position of the element in page coordinates  
		* @param x Number X value for new position (coordinates are page-based) 
		* @param y Number Y value for new position (coordinates are page-based) 
		* @param animate Boolean/Object True for the default animation, or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		moveTo?( x?:number, y?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the next sibling skipping text nodes 
		* @param selector String Find the next sibling that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean true to return a raw dom node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The next sibling Ext.dom.Element (or HTMLElement if asDom is true). Or null if no match is found. 
		*/
		next?( selector?:string, returnDom?:boolean ): any;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector 
		* @param selector String Find a parent node that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean True to return a raw dom node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The parent node (Ext.dom.Element or HTMLElement if returnDom is true). Or null if no match is found. 
		*/
		parent?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Creates a pause before any subsequent queued effects begin  
		* @param seconds Number The length of time to pause (in seconds) 
		* @returns Ext.dom.Element The Element 
		*/
		pause?( seconds?:number ): Ext.dom.IElement;

		/** [Method] Initializes positioning on this element  
		* @param pos String Positioning to use "relative", "absolute" or "fixed" 
		* @param zIndex Number The zIndex to apply 
		* @param x Number Set the page X position 
		* @param y Number Set the page Y position 
		*/
		position?( pos?:string, zIndex?:number, x?:number, y?:number ): void;

		/** [Method] Gets the previous sibling skipping text nodes 
		* @param selector String Find the previous sibling that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The previous sibling (Ext.dom.Element or HTMLElement if returnDom is true). Or null if no match is found. 
		*/
		prev?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Fades the element out while slowly expanding it in all directions  
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		puff?( options?:any ): Ext.dom.IElement;

		/** [Method] Removes all listeners for this object including the managed listeners */
		purgeAllListeners?(): void;

		/** [Method] Selects child nodes based on the passed CSS selector  
		* @param selector String The CSS selector. 
		* @param asDom Boolean false to return an array of Ext.dom.Element 
		* @returns HTMLElement[]/Ext.dom.Element[] An Array of elements ( HTMLElement or Ext.dom.Element if asDom is false) that match the selector. If there are no matches, an empty Array is returned. 
		*/
		query?( selector?:string, asDom?:boolean ): any;

		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings  
		* @param className String/String[] The CSS class to add, or an array of classes. 
		* @returns Ext.dom.Element this 
		*/
		radioCls?( className?:any ): Ext.dom.IElement;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Destroys this element by removing it from the cache removing its DOM reference and removing all of its event listen  */
		remove?(): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		removeAllListeners?(): void;

		/** [Method] Remove any anchor to this element  
		* @returns Ext.util.Positionable this 
		*/
		removeAnchor?(): Ext.util.IPositionable;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes the given CSS class es from this Element  
		* @param names String/String[] The CSS classes to remove separated by space, or an array of classes 
		* @param prefix String Prefix to prepend to each class. The separator - will be appended to the prefix. 
		* @param suffix String Suffix to append to each class. The separator - will be prepended to the suffix. return {Ext.dom.Element} this 
		*/
		removeCls?( names?:any, prefix?:string, suffix?:string ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Forces the browser to repaint this element  
		* @returns Ext.dom.Element this 
		*/
		repaint?(): Ext.dom.IElement;

		/** [Method] Replaces the passed element with this element 
		* @param el String/HTMLElement/Ext.dom.Element The element to replace. The id of the node, a DOM Node or an existing Element. 
		* @param destroy Boolean false to prevent destruction of the replaced element 
		* @returns Ext.dom.Element This element 
		*/
		replace?( el?:any, destroy?:boolean ): Ext.dom.IElement;

		/** [Method] Replaces a CSS class on the element with another  
		* @param oldName String The CSS class to replace. 
		* @param newName String The replacement CSS class. 
		* @param prefix String Prefix to prepend to each class to be replaced. 
		* @param suffix String Suffix to append to each class to be replaced. 
		* @returns Ext.dom.Element this 
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;

		/** [Method] Replaces this element with the passed element 
		* @param el String/HTMLElement/Ext.dom.Element/Object The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create 
		* @returns Ext.dom.Element This element 
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Animates the transition of an element s dimensions from a starting height width to an ending height width  
		* @param width Number The new width (pass undefined to keep the original width) 
		* @param height Number The new height (pass undefined to keep the original height) 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		scale?( width?:number, height?:number, options?:any ): Ext.dom.IElement;

		/** [Method] Scrolls this element the specified direction  
		* @param direction String Possible values are:  "l" (or "left") "r" (or "right") "t" (or "top", or "up") "b" (or "bottom", or "down")  
		* @param distance Number How far to scroll the element in pixels 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @returns Boolean Returns true if a scroll was triggered or false if the element was scrolled as far as it could go. 
		*/
		scroll?( direction?:string, distance?:number, animate?:any ): boolean;

		/** [Method] Scrolls this element by the passed delta values optionally animating  
		* @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties. 
		* @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object. 
		* @param animate Boolean/Object Animate flag/config object if the delta values were passed separately. 
		* @returns Ext.dom.Element this 
		*/
		scrollBy?( deltaX?:any, deltaY?:any, animate?:any ): Ext.dom.IElement;

		/** [Method] Scrolls this element into view within the passed container  
		* @param container String/HTMLElement/Ext.Element The container element to scroll. Should be a string (id), dom node, or Ext.Element. 
		* @param hscroll Boolean False to disable horizontal scroll. 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @param highlight Boolean true to highlight the element when it is in view. 
		* @returns Ext.dom.Element this 
		*/
		scrollIntoView?( container?:any, hscroll?:boolean, animate?:any, highlight?:boolean ): Ext.dom.IElement;

		/** [Method] Scrolls this element the specified scroll point  
		* @param side String Either "left" for scrollLeft values or "top" for scrollTop values. 
		* @param value Number The new scroll value 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		scrollTo?( side?:string, value?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Selects descendant elements of this element based on the passed CSS selector to enable Element methods to be applied 
		* @param selector String/HTMLElement[] The CSS selector or an array of elements 
		* @param composite Boolean Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false. 
		* @returns Ext.dom.CompositeElementLite/Ext.dom.CompositeElement 
		*/
		select?( selector?:any, composite?:boolean ): Ext.dom.ICompositeElementLite;

		/** [Method] Selects a single descendant element of this element using a CSS selector see query 
		* @param selector String The selector query 
		* @param asDom Boolean false to return an Ext.dom.Element 
		* @returns HTMLElement/Ext.dom.Element The DOM element (or Ext.dom.Element if asDom is false) which matched the selector. 
		*/
		selectNode?( selector?:string, asDom?:boolean ): any;

		/** [Method] Enable text selection for this element normalized across browsers  
		* @returns Ext.dom.Element this 
		*/
		selectable?(): Ext.dom.IElement;

		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function 
		* @param attributes Object The object with the attributes. 
		* @param useSet Boolean false to override the default setAttribute to use expandos. 
		* @returns Ext.dom.Element this 
		*/
		set?( attributes?:any, useSet?:boolean ): Ext.dom.IElement;

		/** [Method] Sets the element s CSS bottom style  
		* @param bottom Number/String Number of pixels or CSS string value to set as the bottom CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setBottom?( bottom?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s position and size in one shot  
		* @param x Number X value for new position (coordinates are page-based) 
		* @param y Number Y value for new position (coordinates are page-based) 
		* @param width Number/String The new width. This may be one of:  A Number specifying the new width in pixels A String used to set the CSS width style. Animation may not be used.  
		* @param height Number/String The new height. This may be one of:  A Number specifying the new height in pixels A String used to set the CSS height style. Animation may not be used.  
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		setBounds?( x?:number, y?:number, width?:any, height?:any, animate?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s box  
		* @param box Object The box to fill {x, y, width, height} 
		* @returns Ext.util.Positionable this 
		*/
		setBox?( box?:any ): Ext.util.IPositionable;

		/** [Method] Sets the specified CSS class on this element s DOM node  
		* @param className String/Array The CSS class to set on this element. 
		*/
		setCls?( className?:any ): void;

		/** [Method] Sets the CSS display property  
		* @param value Boolean/String Boolean value to display the element using its default display, or a string to set the display directly. 
		* @returns Ext.dom.Element this 
		*/
		setDisplayed?( value?:any ): Ext.dom.IElement;

		/** [Method] Sets the innerHTML of this element  
		* @param html String The new HTML. 
		*/
		setHTML?( html?:string ): void;

		/** [Method] Set the height of this Element  
		* @param height Number/String The new height. 
		* @returns Ext.dom.Element this 
		*/
		setHeight?( height?:any ): Ext.dom.IElement;

		/** [Method] Sets the innerHTML of this element  
		* @param html String The new HTML. 
		*/
		setHtml?( html?:string ): void;

		/** [Method] Sets the element s left position directly using CSS style instead of setX 
		* @param left Number/String Number of pixels or CSS string value to set as the left CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setLeft?( left?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s left and top positions directly using CSS style 
		* @param left Number/String Number of pixels or CSS string value to set as the left CSS property value 
		* @param top Number/String Number of pixels or CSS string value to set as the top CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setLeftTop?( left?:any, top?:any ): Ext.dom.IElement;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the local x coordinate of this element using CSS style  
		* @param x Number The x coordinate. A value of null sets the left style to 'auto'. 
		* @returns Ext.util.Positionable this 
		*/
		setLocalX?( x?:number ): Ext.util.IPositionable;

		/** [Method] Sets the local x and y coordinates of this element using CSS style  
		* @param x Number/Array The x coordinate or an array containing [x, y]. A value of null sets the left style to 'auto' 
		* @param y Number The y coordinate, required if x is not an array. A value of null sets the top style to 'auto' 
		* @returns Ext.util.Positionable this 
		*/
		setLocalXY?( x?:any, y?:number ): Ext.util.IPositionable;

		/** [Method] Sets the local y coordinate of this element using CSS style  
		* @param y Number The y coordinate. A value of null sets the top style to 'auto'. 
		* @returns Ext.util.Positionable this 
		*/
		setLocalY?( y?:number ): Ext.util.IPositionable;

		/** [Method] Sets the position of the element in page coordinates  
		* @param x Number X value for new position 
		* @param y Number Y value for new position 
		* @param animate Boolean/Object True for the default animation, or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		setLocation?( x?:number, y?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Set the maximum height of this Element  
		* @param height Number/String The new maximum height. 
		* @returns Ext.dom.Element this 
		*/
		setMaxHeight?( height?:any ): Ext.dom.IElement;

		/** [Method] Set the maximum width of this Element  
		* @param width Number/String The new maximum width. 
		* @returns Ext.dom.Element this 
		*/
		setMaxWidth?( width?:any ): Ext.dom.IElement;

		/** [Method] Set the minimum height of this Element  
		* @param height Number/String The new minimum height. 
		* @returns Ext.dom.Element this 
		*/
		setMinHeight?( height?:any ): Ext.dom.IElement;

		/** [Method] Set the minimum width of this Element  
		* @param width Number/String The new minimum width. 
		* @returns Ext.dom.Element this 
		*/
		setMinWidth?( width?:any ): Ext.dom.IElement;

		/** [Method] Set the opacity of the element 
		* @param opacity Number The new opacity. 0 = transparent, .5 = 50% visible, 1 = fully visible, etc 
		* @param animate Boolean/Object a standard Element animation config object or true for the default animation ({duration: 350, easing: 'ease-in'}) 
		* @returns Ext.dom.Element this 
		*/
		setOpacity?( opacity?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Set positioning with an object returned by getPositioning  
		* @param posCfg Object 
		* @returns Ext.dom.Element this 
		*/
		setPositioning?( posCfg?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s CSS right style  
		* @param right Number/String Number of pixels or CSS string value to set as the right CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setRight?( right?:any ): Ext.dom.IElement;

		/** [Method] Sets the left scroll position 
		* @param left Number The left scroll position 
		* @returns Ext.dom.Element this 
		*/
		setScrollLeft?( left?:number ): Ext.dom.IElement;

		/** [Method] Sets the top scroll position 
		* @param top Number The top scroll position 
		* @returns Ext.dom.Element this 
		*/
		setScrollTop?( top?:number ): Ext.dom.IElement;

		/** [Method] Set the size of this Element  
		* @param width Number/String The new width. This may be one of:  A Number specifying the new width in pixels. A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.  
		* @param height Number/String The new height. This may be one of:  A Number specifying the new height in pixels. A String used to set the CSS height style. Animation may not be used.  
		* @returns Ext.dom.Element this 
		*/
		setSize?( width?:any, height?:any ): Ext.dom.IElement;

		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles  
		* @param property String/Object The style property to be set, or an object of multiple styles. 
		* @param value String The value to apply to the given property, or null if an object was passed. 
		* @returns Ext.dom.Element this 
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;

		/** [Method] Sets the element s top position directly using CSS style instead of setY 
		* @param top Number/String Number of pixels or CSS string value to set as the top CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setTop?( top?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;

		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS  
		* @param dummy null mode The method by which the element will be hidden (you can also use the setVisible or toggle method to toggle element visibility). 
		* @returns Ext.dom.Element this 
		*/
		setVisibilityMode?( dummy?:any ): Ext.dom.IElement;

		/** [Method] Sets the visibility of the element based on the current visibility mode  
		* @param visible Boolean Whether the element is visible. 
		* @returns Ext.dom.Element this 
		*/
		setVisible?( visible?:boolean ): Ext.dom.IElement;

		/** [Method] Set the width of this Element  
		* @param width Number/String The new width. 
		* @returns Ext.dom.Element this 
		*/
		setWidth?( width?:any ): Ext.dom.IElement;

		/** [Method] Sets this Element s page level x coordinate 
		* @param x Number 
		* @returns Ext.dom.Element this 
		*/
		setX?( x?:number ): Ext.dom.IElement;

		/** [Method] Sets this Element s page level x and y coordinates 
		* @param xy Number[] 
		* @returns Ext.dom.Element this 
		*/
		setXY?( xy?:number[] ): Ext.dom.IElement;

		/** [Method] Sets this Element s page level y coordinate 
		* @param y Number 
		* @returns Ext.dom.Element this 
		*/
		setY?( y?:number ): Ext.dom.IElement;

		/** [Method] Sets the z index of this Element and synchronizes the z index of shadow and or shim if present  
		* @param zindex Number The new z-index to set 
		* @returns Ext.dom.Element this 
		*/
		setZIndex?( zindex?:number ): Ext.dom.IElement;

		/** [Method] Animates the transition of any combination of an element s dimensions xy position and or opacity  
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		shift?( options?:any ): Ext.dom.IElement;

		/** [Method] Show this element  Uses display mode to determine whether to use display visibility  or offsets 
		* @returns Ext.dom.Element this 
		*/
		show?(): Ext.dom.IElement;

		/** [Method] Slides the element into view  
		* @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		slideIn?( anchor?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Slides the element out of view  
		* @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		slideOut?( anchor?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Stops the specified event s from bubbling and optionally prevents the default action var store  Ext create Ext da  
		* @param eventName String/String[] an event / array of events to stop from bubbling 
		* @param preventDefault Boolean true to prevent the default action too 
		* @returns Ext.dom.Element this 
		*/
		swallowEvent?( eventName?:any, preventDefault?:boolean ): Ext.dom.IElement;

		/** [Method] Blinks the element as if it was clicked and then collapses on its center similar to switching off a television 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		switchOff?( options?:any ): Ext.dom.IElement;

		/** [Method] Toggles the element s visibility depending on visibility mode  
		* @returns Ext.dom.Element this 
		*/
		toggle?(): Ext.dom.IElement;

		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it 
		* @param className String The CSS class to toggle. 
		* @returns Ext.dom.Element this 
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;

		/** [Method] Translates the passed page coordinates into left top css values for the element 
		* @param x Number/Array The page x or an array containing [x, y] 
		* @param y Number The page y, required if x is not an array 
		* @returns Object An object with left and top properties. e.g. {left: (value), top: (value)} 
		*/
		translatePoints?( x?:any, y?:number ): any;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Return clipping overflow to original clipping before clip was called 
		* @returns Ext.dom.Element this 
		*/
		unclip?(): Ext.dom.IElement;

		/** [Method] Hides a previously applied mask  */
		unmask?(): void;

		/** [Method] Disables text selection for this element normalized across browsers  
		* @returns Ext.dom.Element this 
		*/
		unselectable?(): Ext.dom.IElement;

		/** [Method]  Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param selector String The simple selector to test. See Ext.dom.Query for information about simple selectors. 
		* @param limit Number/String/HTMLElement/Ext.dom.Element The max depth to search as a number or an element which causes the upward traversal to stop and is not considered for inclusion as the result. (defaults to 50 || document.documentElement) 
		* @param returnDom Boolean True to return the DOM node instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The matching DOM node (or HTMLElement if returnDom is true). Or null if no match was found. 
		*/
		up?( selector?:string, limit?:any, returnDom?:boolean ): any;

		/** [Method] Sets the innerHTML of this element  
		* @param html String The new HTML. 
		*/
		update?( html?:string ): void;

		/** [Method] Updates the text value of this element  
		* @param text String The text to display in this Element. 
		*/
		updateText?( text?:string ): void;

		/** [Method] Creates and wraps this element with another element 
		* @param config Object DomHelper element config object for the wrapper element or null for an empty div 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @param selector String A CSS selector to select a descendant node within the created element to use as the wrapping element. 
		* @returns HTMLElement/Ext.dom.Element The newly created wrapper element 
		*/
		wrap?( config?:any, returnDom?:boolean, selector?:string ): any;

	}
	export class Element {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Gets the globally shared flyweight Element with the passed node as the active element  
		* @param dom String/HTMLElement The DOM node or id. 
		* @param named String Allows for creation of named reusable flyweights to prevent conflicts (e.g. internally Ext uses "_global"). 
		* @returns Ext.dom.Element The shared Element object (or null if no matching element was found). 
		*/
		static fly( dom?:any, named?:string ): Ext.dom.IElement;

		/** [Method] Returns the top Element that is located at the passed coordinates 
		* @param x Number The x coordinate 
		* @param y Number The y coordinate 
		* @returns String The found Element 
		*/
		static fromPoint( x?:number, y?:number ): string;

		/** [Method] Retrieves Ext dom Element objects  
		* @param element String/HTMLElement/Ext.dom.Element The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element The Element object (or null if no matching element was found). 
		*/
		static get( element?:any ): Ext.dom.IElement;

		/** [Method] Returns the active element in the DOM  
		* @returns HTMLElement The active (focused) element in the document. 
		*/
		static getActiveElement(): HTMLElement;

		/** [Method] Returns the common ancestor of the two passed elements  
		* @param nodeA Ext.dom.Element/HTMLElement 
		* @param nodeB Ext.dom.Element/HTMLElement 
		* @param returnDom Boolean Pass true to return a DOM element. Otherwise An Element will be returned. 
		* @returns Ext.dom.Element/HTMLElement The common ancestor. 
		*/
		static getCommonAncestor( nodeA?:any, nodeB?:any, returnDom?:boolean ): any;

		/** [Method] Retrieves the document height 
		* @returns Number documentHeight 
		*/
		static getDocumentHeight(): number;

		/** [Method] Retrieves the document width 
		* @returns Number documentWidth 
		*/
		static getDocumentWidth(): number;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Retrieves the current orientation of the window  
		* @returns String Orientation of window: 'portrait' or 'landscape' 
		*/
		static getOrientation(): string;

		/** [Method] Retrieves the viewport size of the window  
		* @returns Object object containing width and height properties 
		*/
		static getViewSize(): any;

		/** [Method] Retrieves the viewport height of the window  
		* @returns Number viewportHeight 
		*/
		static getViewportHeight(): number;

		/** [Method] Retrieves the viewport width of the window  
		* @returns Number viewportWidth 
		*/
		static getViewportWidth(): number;

		/** [Method] Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax  
		* @param prop String The property to normalize 
		* @returns String The normalized string 
		*/
		static normalize( prop?:string ): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

		/** [Method] Parses a number or string representing margin sizes into an object  
		* @param box Number/String The encoded margins 
		* @returns Object An object with margin sizes for top, right, bottom and left containing the unit 
		*/
		static parseBox( box?:any ): any;

		/** [Method] Converts a CSS string into an object with a property for each style  
		* @param styles String A CSS string 
		* @returns Object styles 
		*/
		static parseStyles( styles?:string ): any;

		/** [Method] Selects child nodes of a given root based on the passed CSS selector  
		* @param selector String The CSS selector. 
		* @param asDom Boolean false to return an array of Ext.dom.Element 
		* @param root HTMLElement/String The root element of the query or id of the root 
		* @returns HTMLElement[]/Ext.dom.Element[] An Array of elements that match the selector. If there are no matches, an empty Array is returned. 
		*/
		static query( selector?:string, asDom?:boolean, root?:any ): any;

		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in  
		* @param selector String/HTMLElement[] The CSS selector or an array of elements 
		* @param composite Boolean Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false. 
		* @param root HTMLElement/String The root element of the query or id of the root 
		* @returns Ext.dom.CompositeElementLite/Ext.dom.CompositeElement 
		*/
		static select( selector?:any, composite?:boolean, root?:any ): Ext.dom.ICompositeElementLite;

		/** [Method] Serializes a DOM form into a url encoded string 
		* @param form Object The form 
		* @returns String The url encoded form 
		*/
		static serializeForm( form?:any ): string;

		/** [Method] Parses a number or string representing margin sizes into an object  
		* @param box Number/String/Object The encoded margins, or an object with top, right, 
		* @param units String The type of units to add 
		* @returns String An string with unitized (px if units is not specified) metrics for top, right, bottom and left 
		*/
		static unitizeBox( box?:any, units?:string ): string;

	}

}

declare module Ext {
	export interface IElement extends Ext.IBase, Ext.util.IPositionable, Ext.mixin.IObservable {
		/** [Property] (Ext.Component) */
		component?: Ext.IComponent;

		/** [Property] (HTMLElement) */
		dom?: HTMLElement;

		/** [Property] (Object) */
		empty?: any;

		/** [Property] (String) */
		id?: string;

		/** [Property] (Number) */
		DISPLAY?: number;

		/** [Property] (Number) */
		OFFSETS?: number;

		/** [Property] (Number) */
		VISIBILITY?: number;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Adds the given CSS class es to this Element  
		* @param names String/String[] The CSS classes to add separated by space, or an array of classes 
		* @param prefix String Prefix to prepend to each class. The separator - will be appended to the prefix. 
		* @param suffix String Suffix to append to each class. The separator - will be prepended to the suffix. 
		* @returns Ext.dom.Element this 
		*/
		addCls?( names?:any, prefix?:string, suffix?:string ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to add and remove a css class when the mouse is down and then up on this element a click effect  
		* @param className String The class to add 
		* @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added. 
		* @param scope Object The scope to execute the testFn in. 
		* @returns Ext.dom.Element this 
		*/
		addClsOnClick?( className?:string, testFn?:any, scope?:any ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to add and remove a css class when this element has the focus 
		* @param className String The class to add 
		* @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added. 
		* @param scope Object The scope to execute the testFn in. 
		* @returns Ext.dom.Element this 
		*/
		addClsOnFocus?( className?:string, testFn?:any, scope?:any ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to add and remove a css class when the mouse is over this element 
		* @param className String The class to add 
		* @param testFn Function A test function to execute before adding the class. The passed parameter will be the Element instance. If this functions returns false, the class will not be added. 
		* @param scope Object The scope to execute the testFn in. 
		* @returns Ext.dom.Element this 
		*/
		addClsOnOver?( className?:string, testFn?:any, scope?:any ): Ext.dom.IElement;

		/** [Method] Convenience method for constructing a KeyMap 
		* @param key String/Number/Number[]/Object Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options: 
		* @param fn Function The function to call 
		* @param scope Object The scope (this reference) in which the specified function is executed. Defaults to this Element. 
		* @returns Ext.util.KeyMap The KeyMap created 
		*/
		addKeyListener?( key?:any, fn?:any, scope?:any ): Ext.util.IKeyMap;

		/** [Method] Creates a KeyMap for this element 
		* @param config Object The KeyMap config. See Ext.util.KeyMap for more details 
		* @returns Ext.util.KeyMap The KeyMap created 
		*/
		addKeyMap?( config?:any ): Ext.util.IKeyMap;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Aligns the element with another element relative to the specified anchor points  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] Element animation config object 
		* @returns Ext.util.Positionable this 
		*/
		alignTo?( element?:any, position?:string, offsets?:number[] ): Ext.util.IPositionable;

		/** [Method] Anchors an element to another element and realigns it when the window is resized  
		* @param anchorToEl Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param alignment String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @param monitorScroll Boolean/Number True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay in milliseconds. 
		* @param callback Function The function to call after the animation finishes 
		* @returns Ext.util.Positionable this 
		*/
		anchorTo?( anchorToEl?:any, alignment?:string, offsets?:number[], animate?:any, monitorScroll?:any, callback?:any ): Ext.util.IPositionable;

		/** [Method] Performs custom animation on this Element  
		* @param config Object Configuration for Ext.fx.Anim. Note that the to config is required. 
		* @returns Ext.dom.Element this 
		*/
		animate?( config?:any ): Ext.dom.IElement;

		/** [Method] Appends the passed element s to this element 
		* @param el String/HTMLElement/Ext.dom.Element/Object The id or element to insert or a DomHelper config 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The inserted Ext.dom.Element (or HTMLElement if returnDom is true). 
		*/
		appendChild?( el?:any, returnDom?:boolean ): any;

		/** [Method] Appends this element to the passed element  
		* @param el String/HTMLElement/Ext.dom.Element The new parent element. The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element This element. 
		*/
		appendTo?( el?:any ): Ext.dom.IElement;

		/** [Method] More flexible version of setStyle for setting style properties  
		* @param styles String/Object/Function A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or a function which returns such a specification. 
		* @returns Ext.dom.Element this 
		*/
		applyStyles?( styles?:any ): Ext.dom.IElement;

		/** [Method] Tries to blur the element  
		* @returns Ext.dom.Element this 
		*/
		blur?(): Ext.dom.IElement;

		/** [Method] Wraps the specified element with a special 9 element markup CSS block that renders by default as a gray container wit  
		* @param class String A base CSS class to apply to the containing wrapper element. Note that there are a number of CSS rules that are dependent on this name to make the overall effect work, so if you supply an alternate base class, make sure you also supply all of the necessary rules. 
		* @returns Ext.dom.Element The outermost wrapping element of the created box structure. 
		*/
		boxWrap?( clazz?:string ): Ext.dom.IElement;

		/** [Method] When an element is moved around in the DOM or is hidden using display none it loses layout and therefore all scrol  
		* @returns Function A function which will restore all descendant elements of this Element to their scroll positions recorded when this function was executed. Be aware that the returned function is a closure which has captured the scope of cacheScrollValues, so take care to derefence it as soon as not needed - if is it is a var it will drop out of scope, and the reference will be freed. 
		*/
		cacheScrollValues?(): any;

		/** [Method] Centers the Element in either the viewport or another Element  
		* @param centerIn String/HTMLElement/Ext.dom.Element element in which to center the element. 
		* @returns Ext.dom.Element This element 
		*/
		center?( centerIn?:any ): Ext.dom.IElement;

		/** [Method] Selects a single direct child based on the passed CSS selector the selector should not contain an id 
		* @param selector String The CSS selector. 
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element. 
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true) 
		*/
		child?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Removes Empty or whitespace filled text nodes  
		* @param forceReclean Boolean By default the element keeps track if it has been cleaned already so you can call this over and over. However, if you update the element and need to force a re-clean, you can pass true. 
		*/
		clean?( forceReclean?:boolean ): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Clears any opacity settings from this element  
		* @returns Ext.dom.Element this 
		*/
		clearOpacity?(): Ext.dom.IElement;

		/** [Method] Clears positioning back to the default when the document was loaded  
		* @param value String The value to use for the left, right, top, bottom. You could use 'auto'. 
		* @returns Ext.dom.Element this 
		*/
		clearPositioning?( value?:string ): Ext.dom.IElement;

		/** [Method] Store the current overflow setting and clip overflow on the element  use unclip to remove 
		* @returns Ext.dom.Element this 
		*/
		clip?(): Ext.dom.IElement;

		/** [Method] Returns true if this element is an ancestor of the passed element or is the element  
		* @param element HTMLElement/String The element to check. 
		* @returns Boolean True if this element is an ancestor of el or the el itself, else false 
		*/
		contains?( element?:any ): boolean;

		/** [Method] Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child e  
		* @param config Object DomHelper element config object. If no tag is specified (e.g., {tag:'input'}) then a div will be automatically generated with the specified attributes. 
		* @param insertBefore HTMLElement a child element of this element 
		* @param returnDom Boolean true to return the dom node instead of creating an Element 
		* @returns Ext.dom.Element/HTMLElement The new child element (or HTMLElement if returnDom is true) 
		*/
		createChild?( config?:any, insertBefore?:HTMLElement, returnDom?:boolean ): any;

		/** [Method] Creates a proxy element of this element 
		* @param config String/Object The class name of the proxy element or a DomHelper config object 
		* @param renderTo String/HTMLElement The element or element id to render the proxy to. Defaults to: document.body. 
		* @param matchBox Boolean True to align and size the proxy to this element now. 
		* @returns Ext.dom.Element The new proxy element 
		*/
		createProxy?( config?:any, renderTo?:any, matchBox?:boolean ): Ext.dom.IElement;

		/** [Method] Translates an element using CSS 3 in 2D  */
		cssTranslate?(): void;

		/** [Method] Destroys this element by removing it from the cache removing its DOM reference and removing all of its event listen  */
		destroy?(): void;

		/** [Method] Selects a single child at any depth below this element based on the passed CSS selector the selector should not cont  
		* @param selector String The CSS selector 
		* @param returnDom Boolean true to return the DOM node instead of Ext.dom.Element 
		* @returns HTMLElement/Ext.dom.Element The child Ext.dom.Element (or DOM node if returnDom is true) 
		*/
		down?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Convenience method for setVisibilityMode Element DISPLAY 
		* @param display String What to set display to when visible 
		* @returns Ext.dom.Element this 
		*/
		enableDisplayMode?( display?:string ): Ext.dom.IElement;

		/** [Method] Fade an element in from transparent to opaque 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		fadeIn?( options?:any ): Ext.dom.IElement;

		/** [Method] Fade an element out from opaque to transparent 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		fadeOut?( options?:any ): Ext.dom.IElement;

		/** [Method] Looks at this node and then at parent nodes for a match of the passed simple selector  
		* @param selector String The simple selector to test. See Ext.dom.Query for information about simple selectors. 
		* @param limit Number/String/HTMLElement/Ext.dom.Element The max depth to search as a number or an element which causes the upward traversal to stop and is not considered for inclusion as the result. (defaults to 50 || document.documentElement) 
		* @param returnEl Boolean True to return a Ext.dom.Element object instead of DOM node 
		* @returns HTMLElement/Ext.dom.Element The matching DOM node (or Ext.dom.Element if returnEl is true). Or null if no match was found. 
		*/
		findParent?( selector?:string, limit?:any, returnEl?:boolean ): any;

		/** [Method] Looks at parent nodes for a match of the passed simple selector  
		* @param selector String The simple selector to test. See Ext.dom.Query for information about simple selectors. 
		* @param limit Number/String/HTMLElement/Ext.dom.Element The max depth to search as a number or an element which causes the upward traversal to stop and is not&lt;/ considered for inclusion as the result. (defaults to 50 || document.documentElement) 
		* @param returnEl Boolean True to return a Ext.dom.Element object instead of DOM node 
		* @returns HTMLElement/Ext.dom.Element The matching DOM node (or Ext.dom.Element if returnEl is true). Or null if no match was found. 
		*/
		findParentNode?( selector?:string, limit?:any, returnEl?:boolean ): any;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Gets the first child skipping text nodes 
		* @param selector String Find the next sibling that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The first child or null 
		*/
		first?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Tries to focus the element  
		* @param defer Number Milliseconds to defer the focus 
		* @returns Ext.dom.Element this 
		*/
		focus?( defer?:number ): Ext.dom.IElement;

		/** [Method] Checks whether this element can be focused  
		* @returns Boolean True if the element is focusable 
		*/
		focusable?(): boolean;

		/** [Method] Shows a ripple of exploding attenuating borders to draw attention to an Element  
		* @param color String The hex color value for the border. 
		* @param count Number The number of ripples to display. 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		frame?( color?:string, count?:number, options?:any ): Ext.dom.IElement;

		/** [Method] Gets the x y coordinates to align this element with another element  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @returns Number[] [x, y] 
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:number[] ): number[];

		/** [Method] Gets the x y coordinates specified by the anchor position on the element  
		* @param anchor String The specified anchor position. See alignTo for details on supported anchor positions. 
		* @param local Boolean True to get the local (element top/left-relative) anchor position instead of page coordinates 
		* @param size Object An object containing the size to use for calculating anchor position {width: (target width), height: (target height)} (defaults to the element's current size) 
		* @returns Number[] [x, y] An array containing the element's x and y coordinates 
		*/
		getAnchorXY?( anchor?:string, local?:boolean, size?:any ): number[];

		/** [Method] Returns the value of an attribute from the element s underlying DOM node  
		* @param name String The attribute name. 
		* @param namespace String The namespace in which to look for the attribute. 
		* @returns String The attribute value. 
		*/
		getAttribute?( name?:string, namespace?:string ): string;

		/** [Method] Returns the value of a namespaced attribute from the element s underlying DOM node  
		* @param namespace String The namespace in which to look for the attribute 
		* @param name String The attribute name 
		* @returns String The attribute value 
		*/
		getAttributeNS?( namespace?:string, name?:string ): string;

		/** [Method] Returns an object containing a map of all attributes of this element s DOM node  
		* @returns Object Key/value pairs of attribute names and their values. 
		*/
		getAttributes?(): any;

		/** [Method] Gets the width of the border s for the specified side s  
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the border left width + the border right width. 
		* @returns Number The width of the sides passed added together 
		*/
		getBorderWidth?( side?:string ): number;

		/** [Method] Gets the bottom Y coordinate of the element element Y position  element height  
		* @param local Boolean True to get the local css position instead of page coordinate 
		* @returns Number 
		*/
		getBottom?( local?:boolean ): number;

		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param contentBox Boolean If true a box for the content of the element is returned. 
		* @param local Boolean If true the element's left and top relative to its offsetParent are returned instead of page x/y. 
		* @returns Object An object in the format 
		*/
		getBox?( contentBox?:boolean, local?:boolean ): any;

		/** [Method] Returns a child element of this element given its id  
		* @param id String The id of the desired child element. 
		* @param asDom Boolean True to return the DOM element, false to return a wrapped Element object. 
		* @returns Ext.dom.Element/HTMLElement The child element (or HTMLElement if asDom is true). Or null if no match was found. 
		*/
		getById?( id?:string, asDom?:boolean ): any;

		/** [Method] Calculates the x y to center this element on the screen 
		* @returns Number[] The x, y values [x, y] 
		*/
		getCenterXY?(): number[];

		/** [Method] Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders when  
		* @returns Number 
		*/
		getComputedHeight?(): number;

		/** [Method] Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders when ne  
		* @returns Number 
		*/
		getComputedWidth?(): number;

		/** [Method] Returns the content region of this element for purposes of constraining floating children  */
		getConstrainRegion?(): void;

		/** [Method] Returns the X Y vector by which this Positionable s element must be translated to make a best attempt to constrain  
		* @param constrainTo Ext.util.Positionable/HTMLElement/String/Ext.util.Region The Positionable, HTMLElement, element id, or Region into which the element is to be constrained. 
		* @param proposedPosition Number[] A proposed [X, Y] position to test for validity and to produce a vector for instead of using the element's current position 
		* @param proposedSize Number[] A proposed [width, height] size to constrain instead of using the element's current size 
		* @returns Number[]/Boolean If the element needs to be translated, an [X, Y] vector by which this element must be translated. Otherwise, false. 
		*/
		getConstrainVector?( constrainTo?:any, proposedPosition?:number[], proposedSize?:number[] ): any;

		/** [Method] Returns the innerHTML of an Element or an empty string if the element s dom no longer exists  
		* @returns String 
		*/
		getHTML?(): string;

		/** [Method] Returns the offset height of the element  
		* @param contentHeight Boolean true to get the height minus borders and padding. 
		* @returns Number The element's height. 
		*/
		getHeight?( contentHeight?:boolean ): number;

		/** [Method] Returns the innerHTML of an Element or an empty string if the element s dom no longer exists  
		* @returns String 
		*/
		getHtml?(): string;

		/** [Method] Gets the left X coordinate 
		* @param local Boolean True to get the local css position instead of page coordinate 
		* @returns Number 
		*/
		getLeft?( local?:boolean ): number;

		/** [Method] Gets this element s ElementLoader 
		* @returns Ext.ElementLoader The loader 
		*/
		getLoader?(): Ext.IElementLoader;

		/** [Method] Returns the x coordinate of this element reletive to its offsetParent  
		* @returns Number The local x coordinate 
		*/
		getLocalX?(): number;

		/** [Method] Returns the x and y coordinates of this element relative to its offsetParent  
		* @returns Number[] The local XY position of the element 
		*/
		getLocalXY?(): number[];

		/** [Method] Returns the y coordinate of this element reletive to its offsetParent  
		* @returns Number The local y coordinate 
		*/
		getLocalY?(): number;

		/** [Method] Returns an object with properties top left right and bottom representing the margins of this element unless sides i  
		* @param sides String Any combination of 'l', 'r', 't', 'b' to get the sum of those sides. 
		* @returns Object/Number 
		*/
		getMargin?( sides?:string ): any;

		/** [Method] Returns the offsets of this element from the passed element  
		* @param offsetsTo Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or element id to get get the offsets from. 
		* @returns Number[] The XY page offsets (e.g. [100, -200]) 
		*/
		getOffsetsTo?( offsetsTo?:any ): number[];

		/** [Method] Retrieves the height of the element account for the top and bottom margins  */
		getOuterHeight?(): void;

		/** [Method] Retrieves the width of the element accounting for the left and right margins  */
		getOuterWidth?(): void;

		/** [Method] Gets the width of the padding s for the specified side s 
		* @param side String Can be t, l, r, b or any combination of those to add multiple values. For example, passing 'lr' would get the padding left + the padding right. 
		* @returns Number The padding of the sides passed added together. 
		*/
		getPadding?( side?:string ): number;

		/** [Method] Returns an object defining the area of this Element which can be passed to Ext util Positionable setBox to set anothe  
		* @param asRegion Boolean If true an Ext.util.Region will be returned 
		* @returns Object/Ext.util.Region box An object in the following format: {  left: &lt;Element's X position&gt;,  top: &lt;Element's Y position&gt;,  width: &lt;Element's width&gt;,  height: &lt;Element's height&gt;,  bottom: &lt;Element's lower bound&gt;,  right: &lt;Element's rightmost bound&gt; }  The returned object may also be addressed as an Array where index 0 contains the X position and index 1 contains the Y position. So the result may also be used for setXY 
		*/
		getPageBox?( asRegion?:boolean ): any;

		/** [Method] Gets an object with all CSS positioning properties  
		* @param autoPx Boolean true to return pixel values for "auto" styles. 
		* @returns Object 
		*/
		getPositioning?( autoPx?:boolean ): any;

		/** [Method] Returns a region object that defines the area of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" properties. 
		*/
		getRegion?(): Ext.util.IRegion;

		/** [Method] Gets the right X coordinate of the element element X position  element width  
		* @param local Boolean True to get the local css position instead of page coordinates 
		* @returns Number 
		*/
		getRight?( local?:boolean ): number;

		/** [Method] Returns the current scroll position of the element  
		* @returns Object An object containing the scroll position in the format {left: (scrollLeft), top: (scrollTop)} 
		*/
		getScroll?(): any;

		/** [Method] Gets the left scroll position 
		* @returns Number The left scroll position 
		*/
		getScrollLeft?(): number;

		/** [Method] Gets the Scroller instance of the first parent that has one  */
		getScrollParent?(): void;

		/** [Method] Gets the top scroll position 
		* @returns Number The top scroll position 
		*/
		getScrollTop?(): number;

		/** [Method] Returns the size of the element  
		* @param contentSize Boolean true to get the width/size minus borders and padding. 
		* @returns Object An object containing the element's size: 
		*/
		getSize?( contentSize?:boolean ): any;

		/** [Method] Returns a named style property based on computed currentStyle primary and inline style if primary is not available  
		* @param property String/String[] The style property (or multiple property names in an array) whose value is returned. 
		* @param inline Boolean if true only inline styles will be returned. 
		* @returns String/Object The current value of the style property for this element (or a hash of named style values if multiple property arguments are requested). 
		*/
		getStyle?( property?:any, inline?:boolean ): any;

		/** [Method] Returns the dimensions of the element available to lay content out in  
		* @returns Object Object describing width and height. 
		*/
		getStyleSize?(): any;

		/** [Method] Returns the width in pixels of the passed text or the width of the text in this Element  
		* @param text String The text to measure. Defaults to the innerHTML of the element. 
		* @param min Number The minumum value to return. 
		* @param max Number The maximum value to return. 
		* @returns Number The text width in pixels. 
		*/
		getTextWidth?( text?:string, min?:number, max?:number ): number;

		/** [Method] Gets the top Y coordinate 
		* @param local Boolean True to get the local css position instead of page coordinates 
		* @returns Number 
		*/
		getTop?( local?:boolean ): number;

		/** [Method] Returns the value of the value attribute  
		* @param asNumber Boolean true to parse the value as a number. 
		* @returns String/Number 
		*/
		getValue?( asNumber?:boolean ): any;

		/** [Method] Returns the content region of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" member data. 
		*/
		getViewRegion?(): Ext.util.IRegion;

		/** [Method] Returns the dimensions of the element available to lay content out in  
		* @returns Object Object describing width and height. 
		*/
		getViewSize?(): any;

		/** [Method] Returns the offset width of the element  
		* @param contentWidth Boolean true to get the width minus borders and padding. 
		* @returns Number The element's width. 
		*/
		getWidth?( contentWidth?:boolean ): number;

		/** [Method] Gets element X position in page coordinates 
		* @returns Number 
		*/
		getX?(): number;

		/** [Method] Gets element X and Y positions in page coordinates 
		* @returns Array [x, y] 
		*/
		getXY?(): any[];

		/** [Method] Gets element Y position in page coordinates 
		* @returns Number 
		*/
		getY?(): number;

		/** [Method] Returns this element s z index 
		* @returns Number 
		*/
		getZIndex?(): number;

		/** [Method] Slides the element while fading it out of view  
		* @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to bottom: 'b') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		ghost?( anchor?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Checks if the specified CSS class exists on this element s DOM node  
		* @param name String The CSS class to check for. 
		* @returns Boolean true if the class exists, else false. 
		*/
		hasCls?( name?:string ): boolean;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Hide this element  Uses display mode to determine whether to use display visibility  or offsets 
		* @returns Ext.dom.Element this 
		*/
		hide?(): Ext.dom.IElement;

		/** [Method] Highlights the Element by setting a color applies to the background color by default but can be changed using the  
		* @param color String The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		highlight?( color?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element  
		* @param overFn Function The function to call when the mouse enters the Element. 
		* @param outFn Function The function to call when the mouse leaves the Element. 
		* @param scope Object The scope (this reference) in which the functions are executed. Defaults to the Element's DOM element. 
		* @param options Object Options for the listener. See the options parameter. 
		* @returns Ext.dom.Element this 
		*/
		hover?( overFn?:any, outFn?:any, scope?:any, options?:any ): Ext.dom.IElement;

		/** [Method] Initializes a Ext dd DD drag drop object for this element  
		* @param group String The group the DD object is member of 
		* @param config Object The DD config object 
		* @param overrides Object An object containing methods to override/implement on the DD object 
		* @returns Ext.dd.DD The DD object 
		*/
		initDD?( group?:string, config?:any, overrides?:any ): Ext.dd.IDD;

		/** [Method] Initializes a Ext dd DDProxy object for this element  
		* @param group String The group the DDProxy object is member of 
		* @param config Object The DDProxy config object 
		* @param overrides Object An object containing methods to override/implement on the DDProxy object 
		* @returns Ext.dd.DDProxy The DDProxy object 
		*/
		initDDProxy?( group?:string, config?:any, overrides?:any ): Ext.dd.IDDProxy;

		/** [Method] Initializes a Ext dd DDTarget object for this element  
		* @param group String The group the DDTarget object is member of 
		* @param config Object The DDTarget config object 
		* @param overrides Object An object containing methods to override/implement on the DDTarget object 
		* @returns Ext.dd.DDTarget The DDTarget object 
		*/
		initDDTarget?( group?:string, config?:any, overrides?:any ): Ext.dd.IDDTarget;

		/** [Method] Inserts this element after the passed element in the DOM  
		* @param el String/HTMLElement/Ext.dom.Element The element to insert after. The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element This element. 
		*/
		insertAfter?( el?:any ): Ext.dom.IElement;

		/** [Method] Inserts this element before the passed element in the DOM  
		* @param el String/HTMLElement/Ext.dom.Element The element before which this element will be inserted. The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element This element. 
		*/
		insertBefore?( el?:any ): Ext.dom.IElement;

		/** [Method] Inserts or creates an element as the first child of this element 
		* @param el String/HTMLElement/Ext.dom.Element/Object The id or element to insert or a DomHelper config to create and insert 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The new child element (or HTMLElement if returnDom is true). 
		*/
		insertFirst?( el?:any, returnDom?:boolean ): any;

		/** [Method] Inserts an html fragment into this element 
		* @param where String Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd. See Ext.dom.Helper.insertHtml for details. 
		* @param html String The HTML fragment 
		* @param returnEl Boolean True to return an Ext.dom.Element 
		* @returns HTMLElement/Ext.dom.Element The inserted node (or nearest related if more than 1 inserted) 
		*/
		insertHtml?( where?:string, html?:string, returnEl?:boolean ): any;

		/** [Method] Inserts or creates the passed element or DomHelper config as a sibling of this element 
		* @param el String/HTMLElement/Ext.dom.Element/Object/Array The id, element to insert or a DomHelper config to create and insert or an array of any of those. 
		* @param where String 'before' or 'after' 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The inserted Ext.dom.Element (or HTMLElement if returnDom is true). If an array is passed, the last inserted element is returned. 
		*/
		insertSibling?( el?:any, where?:string, returnDom?:boolean ): any;

		/** [Method] Returns true if this element matches the passed simple selector e g  
		* @param selector String/Function The simple selector to test or a function which is passed candidate nodes, and should return true for nodes which match. 
		* @returns Boolean true if this element matches the selector, else false. 
		*/
		is?( selector?:any ): boolean;

		/** [Method] Returns true if this element is an ancestor of the passed element 
		* @param el String/HTMLElement/Ext.dom.Element The element or id of the element to search for in this elements descendants. 
		* @returns Boolean 
		*/
		isAncestor?( el?:any ): boolean;

		/** [Method] Returns true if this element uses the border box sizing model  
		* @returns Boolean 
		*/
		isBorderBox?(): boolean;

		/** [Method] Determines if this element is a descendant of the passed in Element  */
		isDescendent?(): void;

		/** [Method] Returns true if display is not none  
		* @returns Boolean 
		*/
		isDisplayed?(): boolean;

		/** [Method] Checks whether this element can be focused programmatically or by clicking  
		* @returns Boolean True if the element is focusable 
		*/
		isFocusable?(): boolean;

		/** [Method] Returns true if this Element is an input field or is editable in any way  
		* @returns Boolean true if this Element is an input field, or is editable in any way. 
		*/
		isInputField?(): boolean;

		/** [Method] Returns true if this element is masked  
		* @param deep Boolean Go up the DOM hierarchy to determine if any parent element is masked. 
		* @returns Boolean 
		*/
		isMasked?( deep?:boolean ): boolean;

		/** [Method] Returns true if this element is scrollable  
		* @returns Boolean 
		*/
		isScrollable?(): boolean;

		/** [Method] Checks if the current value of a style is equal to a given value  
		* @param style String property whose value is returned. 
		* @param value String to check against. 
		* @returns Boolean true for when the current value equals the given value. 
		*/
		isStyle?( style?:string, value?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Checks whether this element participates in the sequential focus navigation and can be reached by using Tab key  
		* @returns Boolean True if the element is tabbable. 
		*/
		isTabbable?(): boolean;

		/** [Method] Returns true if the value of the given property is visually transparent  
		* @param prop String The style property whose value is to be tested. 
		* @returns Boolean true if the style property is visually transparent. 
		*/
		isTransparent?( prop?:string ): boolean;

		/** [Method] Checks whether the element is currently visible using both visibility and display properties  
		* @param deep Boolean True to walk the dom and see if parent elements are hidden. If false, the function only checks the visibility of the element itself and it may return true even though a parent is not visible. 
		* @returns Boolean true if the element is currently visible, else false 
		*/
		isVisible?( deep?:boolean ): boolean;

		/** [Method] Gets the last child skipping text nodes 
		* @param selector String Find the previous sibling that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The last child Ext.dom.Element (or HTMLElement if returnDom is true). Or null if no match is found. 
		*/
		last?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Direct access to the Ext ElementLoader Ext ElementLoader load method  
		* @param options Object a options object for Ext.ElementLoader Ext.ElementLoader.load 
		* @returns Ext.dom.Element this 
		*/
		load?( options?:any ): Ext.dom.IElement;

		/** [Method] Puts a mask over this element to disable user interaction  
		* @param msg String A message to display in the mask 
		* @param msgCls String A css class to apply to the msg element 
		* @returns Ext.dom.Element The mask element 
		*/
		mask?( msg?:string, msgCls?:string ): Ext.dom.IElement;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Monitors this Element for the mouse leaving  
		* @param delay Number The delay in milliseconds to wait for possible mouse re-entry before calling the handler function. 
		* @param handler Function The function to call if the mouse remains outside of this Element for the specified time. 
		* @param scope Object The scope (this reference) in which the handler function executes. Defaults to this Element. 
		* @returns Object The listeners object which was added to this element so that monitoring can be stopped. Example usage: // Hide the menu if the mouse moves out for 250ms or more this.mouseLeaveMonitor = this.menuEl.monitorMouseLeave(250, this.hideMenu, this); ... // Remove mouseleave monitor on menu destroy this.menuEl.un(this.mouseLeaveMonitor); 
		*/
		monitorMouseLeave?( delay?:number, handler?:any, scope?:any ): any;

		/** [Method] Move the element relative to its current position  
		* @param direction String Possible values are:  "l" (or "left") "r" (or "right") "t" (or "top", or "up") "b" (or "bottom", or "down")  
		* @param distance Number How far to move the element in pixels 
		*/
		move?( direction?:string, distance?:number ): void;

		/** [Method] Sets the position of the element in page coordinates  
		* @param x Number X value for new position (coordinates are page-based) 
		* @param y Number Y value for new position (coordinates are page-based) 
		* @param animate Boolean/Object True for the default animation, or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		moveTo?( x?:number, y?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the next sibling skipping text nodes 
		* @param selector String Find the next sibling that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean true to return a raw dom node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The next sibling Ext.dom.Element (or HTMLElement if asDom is true). Or null if no match is found. 
		*/
		next?( selector?:string, returnDom?:boolean ): any;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Gets the parent node for this element optionally chaining up trying to match a selector 
		* @param selector String Find a parent node that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean True to return a raw dom node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The parent node (Ext.dom.Element or HTMLElement if returnDom is true). Or null if no match is found. 
		*/
		parent?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Creates a pause before any subsequent queued effects begin  
		* @param seconds Number The length of time to pause (in seconds) 
		* @returns Ext.dom.Element The Element 
		*/
		pause?( seconds?:number ): Ext.dom.IElement;

		/** [Method] Initializes positioning on this element  
		* @param pos String Positioning to use "relative", "absolute" or "fixed" 
		* @param zIndex Number The zIndex to apply 
		* @param x Number Set the page X position 
		* @param y Number Set the page Y position 
		*/
		position?( pos?:string, zIndex?:number, x?:number, y?:number ): void;

		/** [Method] Gets the previous sibling skipping text nodes 
		* @param selector String Find the previous sibling that matches the passed simple selector. See Ext.dom.Query for information about simple selectors. 
		* @param returnDom Boolean true to return a raw DOM node instead of an Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The previous sibling (Ext.dom.Element or HTMLElement if returnDom is true). Or null if no match is found. 
		*/
		prev?( selector?:string, returnDom?:boolean ): any;

		/** [Method] Fades the element out while slowly expanding it in all directions  
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		puff?( options?:any ): Ext.dom.IElement;

		/** [Method] Removes all listeners for this object including the managed listeners */
		purgeAllListeners?(): void;

		/** [Method] Selects child nodes based on the passed CSS selector  
		* @param selector String The CSS selector. 
		* @param asDom Boolean false to return an array of Ext.dom.Element 
		* @returns HTMLElement[]/Ext.dom.Element[] An Array of elements ( HTMLElement or Ext.dom.Element if asDom is false) that match the selector. If there are no matches, an empty Array is returned. 
		*/
		query?( selector?:string, asDom?:boolean ): any;

		/** [Method] Adds one or more CSS classes to this element and removes the same class es from all siblings  
		* @param className String/String[] The CSS class to add, or an array of classes. 
		* @returns Ext.dom.Element this 
		*/
		radioCls?( className?:any ): Ext.dom.IElement;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Destroys this element by removing it from the cache removing its DOM reference and removing all of its event listen  */
		remove?(): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		removeAllListeners?(): void;

		/** [Method] Remove any anchor to this element  
		* @returns Ext.util.Positionable this 
		*/
		removeAnchor?(): Ext.util.IPositionable;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes the given CSS class es from this Element  
		* @param names String/String[] The CSS classes to remove separated by space, or an array of classes 
		* @param prefix String Prefix to prepend to each class. The separator - will be appended to the prefix. 
		* @param suffix String Suffix to append to each class. The separator - will be prepended to the suffix. return {Ext.dom.Element} this 
		*/
		removeCls?( names?:any, prefix?:string, suffix?:string ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Forces the browser to repaint this element  
		* @returns Ext.dom.Element this 
		*/
		repaint?(): Ext.dom.IElement;

		/** [Method] Replaces the passed element with this element 
		* @param el String/HTMLElement/Ext.dom.Element The element to replace. The id of the node, a DOM Node or an existing Element. 
		* @param destroy Boolean false to prevent destruction of the replaced element 
		* @returns Ext.dom.Element This element 
		*/
		replace?( el?:any, destroy?:boolean ): Ext.dom.IElement;

		/** [Method] Replaces a CSS class on the element with another  
		* @param oldName String The CSS class to replace. 
		* @param newName String The replacement CSS class. 
		* @param prefix String Prefix to prepend to each class to be replaced. 
		* @param suffix String Suffix to append to each class to be replaced. 
		* @returns Ext.dom.Element this 
		*/
		replaceCls?( oldName?:string, newName?:string, prefix?:string, suffix?:string ): Ext.dom.IElement;

		/** [Method] Replaces this element with the passed element 
		* @param el String/HTMLElement/Ext.dom.Element/Object The new element (id of the node, a DOM Node or an existing Element) or a DomHelper config of an element to create 
		* @returns Ext.dom.Element This element 
		*/
		replaceWith?( el?:any ): Ext.dom.IElement;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Animates the transition of an element s dimensions from a starting height width to an ending height width  
		* @param width Number The new width (pass undefined to keep the original width) 
		* @param height Number The new height (pass undefined to keep the original height) 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		scale?( width?:number, height?:number, options?:any ): Ext.dom.IElement;

		/** [Method] Scrolls this element the specified direction  
		* @param direction String Possible values are:  "l" (or "left") "r" (or "right") "t" (or "top", or "up") "b" (or "bottom", or "down")  
		* @param distance Number How far to scroll the element in pixels 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @returns Boolean Returns true if a scroll was triggered or false if the element was scrolled as far as it could go. 
		*/
		scroll?( direction?:string, distance?:number, animate?:any ): boolean;

		/** [Method] Scrolls this element by the passed delta values optionally animating  
		* @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties. 
		* @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object. 
		* @param animate Boolean/Object Animate flag/config object if the delta values were passed separately. 
		* @returns Ext.dom.Element this 
		*/
		scrollBy?( deltaX?:any, deltaY?:any, animate?:any ): Ext.dom.IElement;

		/** [Method] Scrolls this element into view within the passed container  
		* @param container String/HTMLElement/Ext.Element The container element to scroll. Should be a string (id), dom node, or Ext.Element. 
		* @param hscroll Boolean False to disable horizontal scroll. 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @param highlight Boolean true to highlight the element when it is in view. 
		* @returns Ext.dom.Element this 
		*/
		scrollIntoView?( container?:any, hscroll?:boolean, animate?:any, highlight?:boolean ): Ext.dom.IElement;

		/** [Method] Scrolls this element the specified scroll point  
		* @param side String Either "left" for scrollLeft values or "top" for scrollTop values. 
		* @param value Number The new scroll value 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		scrollTo?( side?:string, value?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Selects descendant elements of this element based on the passed CSS selector to enable Element methods to be applied 
		* @param selector String/HTMLElement[] The CSS selector or an array of elements 
		* @param composite Boolean Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false. 
		* @returns Ext.dom.CompositeElementLite/Ext.dom.CompositeElement 
		*/
		select?( selector?:any, composite?:boolean ): Ext.dom.ICompositeElementLite;

		/** [Method] Selects a single descendant element of this element using a CSS selector see query 
		* @param selector String The selector query 
		* @param asDom Boolean false to return an Ext.dom.Element 
		* @returns HTMLElement/Ext.dom.Element The DOM element (or Ext.dom.Element if asDom is false) which matched the selector. 
		*/
		selectNode?( selector?:string, asDom?:boolean ): any;

		/** [Method] Enable text selection for this element normalized across browsers  
		* @returns Ext.dom.Element this 
		*/
		selectable?(): Ext.dom.IElement;

		/** [Method] Sets the passed attributes as attributes of this element a style attribute can be a string object or function 
		* @param attributes Object The object with the attributes. 
		* @param useSet Boolean false to override the default setAttribute to use expandos. 
		* @returns Ext.dom.Element this 
		*/
		set?( attributes?:any, useSet?:boolean ): Ext.dom.IElement;

		/** [Method] Sets the element s CSS bottom style  
		* @param bottom Number/String Number of pixels or CSS string value to set as the bottom CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setBottom?( bottom?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s position and size in one shot  
		* @param x Number X value for new position (coordinates are page-based) 
		* @param y Number Y value for new position (coordinates are page-based) 
		* @param width Number/String The new width. This may be one of:  A Number specifying the new width in pixels A String used to set the CSS width style. Animation may not be used.  
		* @param height Number/String The new height. This may be one of:  A Number specifying the new height in pixels A String used to set the CSS height style. Animation may not be used.  
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		setBounds?( x?:number, y?:number, width?:any, height?:any, animate?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s box  
		* @param box Object The box to fill {x, y, width, height} 
		* @returns Ext.util.Positionable this 
		*/
		setBox?( box?:any ): Ext.util.IPositionable;

		/** [Method] Sets the specified CSS class on this element s DOM node  
		* @param className String/Array The CSS class to set on this element. 
		*/
		setCls?( className?:any ): void;

		/** [Method] Sets the CSS display property  
		* @param value Boolean/String Boolean value to display the element using its default display, or a string to set the display directly. 
		* @returns Ext.dom.Element this 
		*/
		setDisplayed?( value?:any ): Ext.dom.IElement;

		/** [Method] Sets the innerHTML of this element  
		* @param html String The new HTML. 
		*/
		setHTML?( html?:string ): void;

		/** [Method] Set the height of this Element  
		* @param height Number/String The new height. 
		* @returns Ext.dom.Element this 
		*/
		setHeight?( height?:any ): Ext.dom.IElement;

		/** [Method] Sets the innerHTML of this element  
		* @param html String The new HTML. 
		*/
		setHtml?( html?:string ): void;

		/** [Method] Sets the element s left position directly using CSS style instead of setX 
		* @param left Number/String Number of pixels or CSS string value to set as the left CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setLeft?( left?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s left and top positions directly using CSS style 
		* @param left Number/String Number of pixels or CSS string value to set as the left CSS property value 
		* @param top Number/String Number of pixels or CSS string value to set as the top CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setLeftTop?( left?:any, top?:any ): Ext.dom.IElement;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the local x coordinate of this element using CSS style  
		* @param x Number The x coordinate. A value of null sets the left style to 'auto'. 
		* @returns Ext.util.Positionable this 
		*/
		setLocalX?( x?:number ): Ext.util.IPositionable;

		/** [Method] Sets the local x and y coordinates of this element using CSS style  
		* @param x Number/Array The x coordinate or an array containing [x, y]. A value of null sets the left style to 'auto' 
		* @param y Number The y coordinate, required if x is not an array. A value of null sets the top style to 'auto' 
		* @returns Ext.util.Positionable this 
		*/
		setLocalXY?( x?:any, y?:number ): Ext.util.IPositionable;

		/** [Method] Sets the local y coordinate of this element using CSS style  
		* @param y Number The y coordinate. A value of null sets the top style to 'auto'. 
		* @returns Ext.util.Positionable this 
		*/
		setLocalY?( y?:number ): Ext.util.IPositionable;

		/** [Method] Sets the position of the element in page coordinates  
		* @param x Number X value for new position 
		* @param y Number Y value for new position 
		* @param animate Boolean/Object True for the default animation, or a standard Element animation config object 
		* @returns Ext.dom.Element this 
		*/
		setLocation?( x?:number, y?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Set the maximum height of this Element  
		* @param height Number/String The new maximum height. 
		* @returns Ext.dom.Element this 
		*/
		setMaxHeight?( height?:any ): Ext.dom.IElement;

		/** [Method] Set the maximum width of this Element  
		* @param width Number/String The new maximum width. 
		* @returns Ext.dom.Element this 
		*/
		setMaxWidth?( width?:any ): Ext.dom.IElement;

		/** [Method] Set the minimum height of this Element  
		* @param height Number/String The new minimum height. 
		* @returns Ext.dom.Element this 
		*/
		setMinHeight?( height?:any ): Ext.dom.IElement;

		/** [Method] Set the minimum width of this Element  
		* @param width Number/String The new minimum width. 
		* @returns Ext.dom.Element this 
		*/
		setMinWidth?( width?:any ): Ext.dom.IElement;

		/** [Method] Set the opacity of the element 
		* @param opacity Number The new opacity. 0 = transparent, .5 = 50% visible, 1 = fully visible, etc 
		* @param animate Boolean/Object a standard Element animation config object or true for the default animation ({duration: 350, easing: 'ease-in'}) 
		* @returns Ext.dom.Element this 
		*/
		setOpacity?( opacity?:number, animate?:any ): Ext.dom.IElement;

		/** [Method] Set positioning with an object returned by getPositioning  
		* @param posCfg Object 
		* @returns Ext.dom.Element this 
		*/
		setPositioning?( posCfg?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s CSS right style  
		* @param right Number/String Number of pixels or CSS string value to set as the right CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setRight?( right?:any ): Ext.dom.IElement;

		/** [Method] Sets the left scroll position 
		* @param left Number The left scroll position 
		* @returns Ext.dom.Element this 
		*/
		setScrollLeft?( left?:number ): Ext.dom.IElement;

		/** [Method] Sets the top scroll position 
		* @param top Number The top scroll position 
		* @returns Ext.dom.Element this 
		*/
		setScrollTop?( top?:number ): Ext.dom.IElement;

		/** [Method] Set the size of this Element  
		* @param width Number/String The new width. This may be one of:  A Number specifying the new width in pixels. A String used to set the CSS width style. Animation may not be used. A size object in the format {width: widthValue, height: heightValue}.  
		* @param height Number/String The new height. This may be one of:  A Number specifying the new height in pixels. A String used to set the CSS height style. Animation may not be used.  
		* @returns Ext.dom.Element this 
		*/
		setSize?( width?:any, height?:any ): Ext.dom.IElement;

		/** [Method] Wrapper for setting style properties also takes single object parameter of multiple styles  
		* @param property String/Object The style property to be set, or an object of multiple styles. 
		* @param value String The value to apply to the given property, or null if an object was passed. 
		* @returns Ext.dom.Element this 
		*/
		setStyle?( property?:any, value?:string ): Ext.dom.IElement;

		/** [Method] Sets the element s top position directly using CSS style instead of setY 
		* @param top Number/String Number of pixels or CSS string value to set as the top CSS property value 
		* @returns Ext.dom.Element this 
		*/
		setTop?( top?:any ): Ext.dom.IElement;

		/** [Method] Sets the element s top and left positions directly using CSS style  */
		setTopLeft?(): void;

		/** [Method] Use this to change the visibility mode between VISIBILITY DISPLAY or OFFSETS  
		* @param dummy null mode The method by which the element will be hidden (you can also use the setVisible or toggle method to toggle element visibility). 
		* @returns Ext.dom.Element this 
		*/
		setVisibilityMode?( dummy?:any ): Ext.dom.IElement;

		/** [Method] Sets the visibility of the element based on the current visibility mode  
		* @param visible Boolean Whether the element is visible. 
		* @returns Ext.dom.Element this 
		*/
		setVisible?( visible?:boolean ): Ext.dom.IElement;

		/** [Method] Set the width of this Element  
		* @param width Number/String The new width. 
		* @returns Ext.dom.Element this 
		*/
		setWidth?( width?:any ): Ext.dom.IElement;

		/** [Method] Sets this Element s page level x coordinate 
		* @param x Number 
		* @returns Ext.dom.Element this 
		*/
		setX?( x?:number ): Ext.dom.IElement;

		/** [Method] Sets this Element s page level x and y coordinates 
		* @param xy Number[] 
		* @returns Ext.dom.Element this 
		*/
		setXY?( xy?:number[] ): Ext.dom.IElement;

		/** [Method] Sets this Element s page level y coordinate 
		* @param y Number 
		* @returns Ext.dom.Element this 
		*/
		setY?( y?:number ): Ext.dom.IElement;

		/** [Method] Sets the z index of this Element and synchronizes the z index of shadow and or shim if present  
		* @param zindex Number The new z-index to set 
		* @returns Ext.dom.Element this 
		*/
		setZIndex?( zindex?:number ): Ext.dom.IElement;

		/** [Method] Animates the transition of any combination of an element s dimensions xy position and or opacity  
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		shift?( options?:any ): Ext.dom.IElement;

		/** [Method] Show this element  Uses display mode to determine whether to use display visibility  or offsets 
		* @returns Ext.dom.Element this 
		*/
		show?(): Ext.dom.IElement;

		/** [Method] Slides the element into view  
		* @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		slideIn?( anchor?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Slides the element out of view  
		* @param anchor String One of the valid Ext.fx.Anim anchor positions (defaults to top: 't') 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		slideOut?( anchor?:string, options?:any ): Ext.dom.IElement;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Stops the specified event s from bubbling and optionally prevents the default action var store  Ext create Ext da  
		* @param eventName String/String[] an event / array of events to stop from bubbling 
		* @param preventDefault Boolean true to prevent the default action too 
		* @returns Ext.dom.Element this 
		*/
		swallowEvent?( eventName?:any, preventDefault?:boolean ): Ext.dom.IElement;

		/** [Method] Blinks the element as if it was clicked and then collapses on its center similar to switching off a television 
		* @param options Object Object literal with any of the Ext.fx.Anim config options 
		* @returns Ext.dom.Element The Element 
		*/
		switchOff?( options?:any ): Ext.dom.IElement;

		/** [Method] Toggles the element s visibility depending on visibility mode  
		* @returns Ext.dom.Element this 
		*/
		toggle?(): Ext.dom.IElement;

		/** [Method] Toggles the specified CSS class on this element removes it if it already exists otherwise adds it 
		* @param className String The CSS class to toggle. 
		* @returns Ext.dom.Element this 
		*/
		toggleCls?( className?:string ): Ext.dom.IElement;

		/** [Method] Translates the passed page coordinates into left top css values for the element 
		* @param x Number/Array The page x or an array containing [x, y] 
		* @param y Number The page y, required if x is not an array 
		* @returns Object An object with left and top properties. e.g. {left: (value), top: (value)} 
		*/
		translatePoints?( x?:any, y?:number ): any;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Return clipping overflow to original clipping before clip was called 
		* @returns Ext.dom.Element this 
		*/
		unclip?(): Ext.dom.IElement;

		/** [Method] Hides a previously applied mask  */
		unmask?(): void;

		/** [Method] Disables text selection for this element normalized across browsers  
		* @returns Ext.dom.Element this 
		*/
		unselectable?(): Ext.dom.IElement;

		/** [Method]  Walks up the dom looking for a parent node that matches the passed simple selector e g  
		* @param selector String The simple selector to test. See Ext.dom.Query for information about simple selectors. 
		* @param limit Number/String/HTMLElement/Ext.dom.Element The max depth to search as a number or an element which causes the upward traversal to stop and is not considered for inclusion as the result. (defaults to 50 || document.documentElement) 
		* @param returnDom Boolean True to return the DOM node instead of Ext.dom.Element 
		* @returns Ext.dom.Element/HTMLElement The matching DOM node (or HTMLElement if returnDom is true). Or null if no match was found. 
		*/
		up?( selector?:string, limit?:any, returnDom?:boolean ): any;

		/** [Method] Sets the innerHTML of this element  
		* @param html String The new HTML. 
		*/
		update?( html?:string ): void;

		/** [Method] Updates the text value of this element  
		* @param text String The text to display in this Element. 
		*/
		updateText?( text?:string ): void;

		/** [Method] Creates and wraps this element with another element 
		* @param config Object DomHelper element config object for the wrapper element or null for an empty div 
		* @param returnDom Boolean True to return the raw DOM element instead of Ext.dom.Element 
		* @param selector String A CSS selector to select a descendant node within the created element to use as the wrapping element. 
		* @returns HTMLElement/Ext.dom.Element The newly created wrapper element 
		*/
		wrap?( config?:any, returnDom?:boolean, selector?:string ): any;

	}
	export class Element {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Gets the globally shared flyweight Element with the passed node as the active element  
		* @param dom String/HTMLElement The DOM node or id. 
		* @param named String Allows for creation of named reusable flyweights to prevent conflicts (e.g. internally Ext uses "_global"). 
		* @returns Ext.dom.Element The shared Element object (or null if no matching element was found). 
		*/
		static fly( dom?:any, named?:string ): Ext.dom.IElement;

		/** [Method] Returns the top Element that is located at the passed coordinates 
		* @param x Number The x coordinate 
		* @param y Number The y coordinate 
		* @returns String The found Element 
		*/
		static fromPoint( x?:number, y?:number ): string;

		/** [Method] Retrieves Ext dom Element objects  
		* @param element String/HTMLElement/Ext.dom.Element The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element The Element object (or null if no matching element was found). 
		*/
		static get( element?:any ): Ext.dom.IElement;

		/** [Method] Returns the active element in the DOM  
		* @returns HTMLElement The active (focused) element in the document. 
		*/
		static getActiveElement(): HTMLElement;

		/** [Method] Returns the common ancestor of the two passed elements  
		* @param nodeA Ext.dom.Element/HTMLElement 
		* @param nodeB Ext.dom.Element/HTMLElement 
		* @param returnDom Boolean Pass true to return a DOM element. Otherwise An Element will be returned. 
		* @returns Ext.dom.Element/HTMLElement The common ancestor. 
		*/
		static getCommonAncestor( nodeA?:any, nodeB?:any, returnDom?:boolean ): any;

		/** [Method] Retrieves the document height 
		* @returns Number documentHeight 
		*/
		static getDocumentHeight(): number;

		/** [Method] Retrieves the document width 
		* @returns Number documentWidth 
		*/
		static getDocumentWidth(): number;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Retrieves the current orientation of the window  
		* @returns String Orientation of window: 'portrait' or 'landscape' 
		*/
		static getOrientation(): string;

		/** [Method] Retrieves the viewport size of the window  
		* @returns Object object containing width and height properties 
		*/
		static getViewSize(): any;

		/** [Method] Retrieves the viewport height of the window  
		* @returns Number viewportHeight 
		*/
		static getViewportHeight(): number;

		/** [Method] Retrieves the viewport width of the window  
		* @returns Number viewportWidth 
		*/
		static getViewportWidth(): number;

		/** [Method] Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax  
		* @param prop String The property to normalize 
		* @returns String The normalized string 
		*/
		static normalize( prop?:string ): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

		/** [Method] Parses a number or string representing margin sizes into an object  
		* @param box Number/String The encoded margins 
		* @returns Object An object with margin sizes for top, right, bottom and left containing the unit 
		*/
		static parseBox( box?:any ): any;

		/** [Method] Converts a CSS string into an object with a property for each style  
		* @param styles String A CSS string 
		* @returns Object styles 
		*/
		static parseStyles( styles?:string ): any;

		/** [Method] Selects child nodes of a given root based on the passed CSS selector  
		* @param selector String The CSS selector. 
		* @param asDom Boolean false to return an array of Ext.dom.Element 
		* @param root HTMLElement/String The root element of the query or id of the root 
		* @returns HTMLElement[]/Ext.dom.Element[] An Array of elements that match the selector. If there are no matches, an empty Array is returned. 
		*/
		static query( selector?:string, asDom?:boolean, root?:any ): any;

		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in  
		* @param selector String/HTMLElement[] The CSS selector or an array of elements 
		* @param composite Boolean Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false. 
		* @param root HTMLElement/String The root element of the query or id of the root 
		* @returns Ext.dom.CompositeElementLite/Ext.dom.CompositeElement 
		*/
		static select( selector?:any, composite?:boolean, root?:any ): Ext.dom.ICompositeElementLite;

		/** [Method] Serializes a DOM form into a url encoded string 
		* @param form Object The form 
		* @returns String The url encoded form 
		*/
		static serializeForm( form?:any ): string;

		/** [Method] Parses a number or string representing margin sizes into an object  
		* @param box Number/String/Object The encoded margins, or an object with top, right, 
		* @param units String The type of units to add 
		* @returns String An string with unitized (px if units is not specified) metrics for top, right, bottom and left 
		*/
		static unitizeBox( box?:any, units?:string ): string;

	}

}

declare module Ext.dom {
	export interface IElementEvent extends Ext.util.IEvent {
	}

}

declare module Ext.dom {
	export interface IFly extends Ext.dom.IElement {
		/** [Property] (Boolean) */
		isFly?: boolean;

	}

}

declare module Ext.dom.element {
	export interface IFly extends Ext.dom.IElement {
		/** [Property] (Boolean) */
		isFly?: boolean;

	}

}

declare module Ext.dom {
	export interface IGarbageCollector extends Ext.IBase {
	}
	export class GarbageCollector {
		/** [Property] (Number) */
		static interval: number;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Collects orphaned Ext dom Elements by removing their listeners and evicting them from the cache  
		* @returns String[] An array containing the IDs of the elements that were garbage collected, prefixed by their tag names. Only applies in dev mode. Returns nothing in a production build. 
		*/
		static collect(): string[];

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Pauses the timer and stops garbage collection */
		static pause(): void;

		/** [Method] Resumes garbage collection at the specified interval */
		static resume(): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.dom {
	export interface IHelper extends Ext.IBase {
	}
	export class Helper {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Creates new DOM element s and appends them to el  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param o Object/String The DOM object spec (and children) or raw HTML blob 
		* @param returnElement Boolean true to return a Ext.Element 
		* @returns HTMLElement/Ext.dom.Element The new node 
		*/
		static append( el?:any, o?:any, returnElement?:boolean ): any;

		/** [Method] Applies a style specification to an element  
		* @param el String/HTMLElement The element to apply styles to 
		* @param styles String/Object/Function A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or a function which returns such a specification. 
		*/
		static applyStyles( el?:any, styles?:any ): void;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Creates new DOM element s without inserting them to the document  
		* @param o Object/String The DOM object spec (and children) or raw HTML blob 
		* @returns HTMLElement The new uninserted node 
		*/
		static createDom( o?:any ): HTMLElement;

		/** [Method] Alias for markup  
		* @param spec Object 
		*/
		static createHtml( spec?:any ): void;

		/** [Method] Creates a new Ext Template from the DOM object spec  
		* @param o Object The DOM object spec (and children) 
		* @returns Ext.Template The new template 
		*/
		static createTemplate( o?:any ): Ext.ITemplate;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Converts the styles from the given object to text  
		* @param styles Object The object describing the styles. 
		* @param buffer String[] The output buffer. 
		* @param encode Boolean true to Ext.String.htmlEncode property values if they are going to be inserted as HTML attributes. 
		* @returns String/String[] If buffer is passed, it is returned. Otherwise the style string is returned. 
		*/
		static generateStyles( styles?:any, buffer?:string[], encode?:boolean ): any;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Creates new DOM element s and inserts them after el  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param o Object The DOM object spec (and children) 
		* @param returnElement Boolean true to return a Ext.Element 
		* @returns HTMLElement/Ext.dom.Element The new node 
		*/
		static insertAfter( el?:any, o?:any, returnElement?:boolean ): any;

		/** [Method] Creates new DOM element s and inserts them before el  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param o Object/String The DOM object spec (and children) or raw HTML blob 
		* @param returnElement Boolean true to return a Ext.Element 
		* @returns HTMLElement/Ext.dom.Element The new node 
		*/
		static insertBefore( el?:any, o?:any, returnElement?:boolean ): any;

		/** [Method] Creates new DOM element s and inserts them as the first child of el  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param o Object/String The DOM object spec (and children) or raw HTML blob 
		* @param returnElement Boolean true to return a Ext.Element 
		* @returns HTMLElement/Ext.dom.Element The new node 
		*/
		static insertFirst( el?:any, o?:any, returnElement?:boolean ): any;

		/** [Method] Inserts an HTML fragment into the DOM  
		* @param where String Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd. For example take the following HTML: &lt;div&gt;Contents&lt;/div&gt; Using different where values inserts element to the following places:  beforeBegin: &lt;HERE&gt;&lt;div&gt;Contents&lt;/div&gt; afterBegin: &lt;div&gt;&lt;HERE&gt;Contents&lt;/div&gt; beforeEnd: &lt;div&gt;Contents&lt;HERE&gt;&lt;/div&gt; afterEnd: &lt;div&gt;Contents&lt;/div&gt;&lt;HERE&gt;  
		* @param el HTMLElement/TextNode The context element 
		* @param html String The HTML fragment 
		* @returns HTMLElement The new node 
		*/
		static insertHtml( where?:string, el?:any, html?:string ): HTMLElement;

		/** [Method] Returns the markup for the passed Element s config  
		* @param spec Object The DOM object spec (and children). 
		* @returns String 
		*/
		static markup( spec?:any ): string;

		/** [Method] Creates new DOM element s and overwrites the contents of el with them  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param o Object/String The DOM object spec (and children) or raw HTML blob 
		* @param returnElement Boolean true to return an Ext.Element 
		* @returns HTMLElement/Ext.dom.Element The new node 
		*/
		static overwrite( el?:any, o?:any, returnElement?:boolean ): any;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext {
	export interface IDomHelper extends Ext.IBase {
	}
	export class DomHelper {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Creates new DOM element s and appends them to el  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param o Object/String The DOM object spec (and children) or raw HTML blob 
		* @param returnElement Boolean true to return a Ext.Element 
		* @returns HTMLElement/Ext.dom.Element The new node 
		*/
		static append( el?:any, o?:any, returnElement?:boolean ): any;

		/** [Method] Applies a style specification to an element  
		* @param el String/HTMLElement The element to apply styles to 
		* @param styles String/Object/Function A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or a function which returns such a specification. 
		*/
		static applyStyles( el?:any, styles?:any ): void;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Creates new DOM element s without inserting them to the document  
		* @param o Object/String The DOM object spec (and children) or raw HTML blob 
		* @returns HTMLElement The new uninserted node 
		*/
		static createDom( o?:any ): HTMLElement;

		/** [Method] Alias for markup  
		* @param spec Object 
		*/
		static createHtml( spec?:any ): void;

		/** [Method] Creates a new Ext Template from the DOM object spec  
		* @param o Object The DOM object spec (and children) 
		* @returns Ext.Template The new template 
		*/
		static createTemplate( o?:any ): Ext.ITemplate;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Converts the styles from the given object to text  
		* @param styles Object The object describing the styles. 
		* @param buffer String[] The output buffer. 
		* @param encode Boolean true to Ext.String.htmlEncode property values if they are going to be inserted as HTML attributes. 
		* @returns String/String[] If buffer is passed, it is returned. Otherwise the style string is returned. 
		*/
		static generateStyles( styles?:any, buffer?:string[], encode?:boolean ): any;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Creates new DOM element s and inserts them after el  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param o Object The DOM object spec (and children) 
		* @param returnElement Boolean true to return a Ext.Element 
		* @returns HTMLElement/Ext.dom.Element The new node 
		*/
		static insertAfter( el?:any, o?:any, returnElement?:boolean ): any;

		/** [Method] Creates new DOM element s and inserts them before el  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param o Object/String The DOM object spec (and children) or raw HTML blob 
		* @param returnElement Boolean true to return a Ext.Element 
		* @returns HTMLElement/Ext.dom.Element The new node 
		*/
		static insertBefore( el?:any, o?:any, returnElement?:boolean ): any;

		/** [Method] Creates new DOM element s and inserts them as the first child of el  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param o Object/String The DOM object spec (and children) or raw HTML blob 
		* @param returnElement Boolean true to return a Ext.Element 
		* @returns HTMLElement/Ext.dom.Element The new node 
		*/
		static insertFirst( el?:any, o?:any, returnElement?:boolean ): any;

		/** [Method] Inserts an HTML fragment into the DOM  
		* @param where String Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd. For example take the following HTML: &lt;div&gt;Contents&lt;/div&gt; Using different where values inserts element to the following places:  beforeBegin: &lt;HERE&gt;&lt;div&gt;Contents&lt;/div&gt; afterBegin: &lt;div&gt;&lt;HERE&gt;Contents&lt;/div&gt; beforeEnd: &lt;div&gt;Contents&lt;HERE&gt;&lt;/div&gt; afterEnd: &lt;div&gt;Contents&lt;/div&gt;&lt;HERE&gt;  
		* @param el HTMLElement/TextNode The context element 
		* @param html String The HTML fragment 
		* @returns HTMLElement The new node 
		*/
		static insertHtml( where?:string, el?:any, html?:string ): HTMLElement;

		/** [Method] Returns the markup for the passed Element s config  
		* @param spec Object The DOM object spec (and children). 
		* @returns String 
		*/
		static markup( spec?:any ): string;

		/** [Method] Creates new DOM element s and overwrites the contents of el with them  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param o Object/String The DOM object spec (and children) or raw HTML blob 
		* @param returnElement Boolean true to return an Ext.Element 
		* @returns HTMLElement/Ext.dom.Element The new node 
		*/
		static overwrite( el?:any, o?:any, returnElement?:boolean ): any;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.dom {
	export interface ILayer extends Ext.IElement {
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Object) */
		dh?: any;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (String/Boolean) */
		shadow?: any;
		/** [Config Option] (Number) */
		shadowOffset?: number;
		/** [Config Option] (String/Boolean) */
		shim?: any;
		/** [Config Option] (Boolean) */
		useDisplay?: boolean;
		/** [Config Option] (String) */
		visibilityCls?: string;
		/** [Config Option] (Number) */
		zindex?: number;
	}

}

declare module Ext {
	export interface ILayer extends Ext.IElement {
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Object) */
		dh?: any;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (String/Boolean) */
		shadow?: any;
		/** [Config Option] (Number) */
		shadowOffset?: number;
		/** [Config Option] (String/Boolean) */
		shim?: any;
		/** [Config Option] (Boolean) */
		useDisplay?: boolean;
		/** [Config Option] (String) */
		visibilityCls?: string;
		/** [Config Option] (Number) */
		zindex?: number;
	}

}

declare module Ext.dom {
	export interface IQuery extends Ext.IBase {
	}
	export class Query {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Object) */
		static matchers: any;

		/** [Property] (Object) */
		static operators: any;

		/** [Property] (Object) */
		static pseudos: any;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Compiles a selector xpath query into a reusable function  
		* @param selector String The selector/xpath query 
		* @param type String Either "select" or "simple" for a simple selector match 
		* @returns Function 
		*/
		static compile( selector?:string, type?:string ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Filters an array of elements to only include matches of a simple selector 
		* @param el HTMLElement[] An array of elements to filter 
		* @param selector String The simple selector to test 
		* @param nonMatches Boolean If true, it returns the elements that DON'T match the selector instead of the ones that match 
		* @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned. 
		*/
		static filter( el?:HTMLElement[], selector?:string, nonMatches?:boolean ): HTMLElement[];

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Get the text value for a node optionally replacing null with the defaultValue  
		* @param The Object node 
		* @param defaultValue String When specified, this is return as empty value. 
		* @returns String The value 
		*/
		static getNodeValue( The?:any, defaultValue?:string ): string;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Returns true if the passed element s match the passed simple selector 
		* @param el String/HTMLElement/HTMLElement[] An element id, element or array of elements 
		* @param selector String The simple selector to test 
		* @returns Boolean 
		*/
		static is( el?:any, selector?:string ): boolean;

		/** [Method] Selects an array of DOM nodes using JavaScript only implementation  
		* @param selector String The selector/xpath query (can be a comma separated list of selectors) 
		* @param root HTMLElement/String The start of the query. 
		* @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned. 
		*/
		static jsSelect( selector?:string, root?:any ): HTMLElement[];

		/** [Method] Selects an array of DOM nodes by CSS XPath selector  
		* @param path String The selector/xpath query 
		* @param root HTMLElement The start of the query. 
		* @param type String Either "select" or "simple" for a simple selector match (only valid when used when the call is deferred to the jsSelect method) 
		* @param single Boolean Pass true to select only the first matching node using document.querySelector (where available) 
		* @returns HTMLElement[] An array of DOM elements (not a NodeList as returned by querySelectorAll). 
		*/
		static select( path?:string, root?:HTMLElement, type?:string, single?:boolean ): HTMLElement[];

		/** [Method] Selects a single element  
		* @param selector String The selector/xpath query 
		* @param root HTMLElement The start of the query. 
		* @returns HTMLElement The DOM element which matched the selector. 
		*/
		static selectNode( selector?:string, root?:HTMLElement ): HTMLElement;

		/** [Method] Selects the value of a node parsing integers and floats  
		* @param selector String The selector/xpath query 
		* @param root HTMLElement The start of the query. 
		* @param defaultValue Number When specified, this is return as empty value. 
		* @returns Number 
		*/
		static selectNumber( selector?:string, root?:HTMLElement, defaultValue?:number ): number;

		/** [Method] Selects the value of a node optionally replacing null with the defaultValue  
		* @param selector String The selector/xpath query 
		* @param root HTMLElement The start of the query. 
		* @param defaultValue String When specified, this is return as empty value. 
		* @returns String 
		*/
		static selectValue( selector?:string, root?:HTMLElement, defaultValue?:string ): string;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext {
	export interface IDomQuery extends Ext.IBase {
	}
	export class DomQuery {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Object) */
		static matchers: any;

		/** [Property] (Object) */
		static operators: any;

		/** [Property] (Object) */
		static pseudos: any;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Compiles a selector xpath query into a reusable function  
		* @param selector String The selector/xpath query 
		* @param type String Either "select" or "simple" for a simple selector match 
		* @returns Function 
		*/
		static compile( selector?:string, type?:string ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Filters an array of elements to only include matches of a simple selector 
		* @param el HTMLElement[] An array of elements to filter 
		* @param selector String The simple selector to test 
		* @param nonMatches Boolean If true, it returns the elements that DON'T match the selector instead of the ones that match 
		* @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned. 
		*/
		static filter( el?:HTMLElement[], selector?:string, nonMatches?:boolean ): HTMLElement[];

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Get the text value for a node optionally replacing null with the defaultValue  
		* @param The Object node 
		* @param defaultValue String When specified, this is return as empty value. 
		* @returns String The value 
		*/
		static getNodeValue( The?:any, defaultValue?:string ): string;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Returns true if the passed element s match the passed simple selector 
		* @param el String/HTMLElement/HTMLElement[] An element id, element or array of elements 
		* @param selector String The simple selector to test 
		* @returns Boolean 
		*/
		static is( el?:any, selector?:string ): boolean;

		/** [Method] Selects an array of DOM nodes using JavaScript only implementation  
		* @param selector String The selector/xpath query (can be a comma separated list of selectors) 
		* @param root HTMLElement/String The start of the query. 
		* @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned. 
		*/
		static jsSelect( selector?:string, root?:any ): HTMLElement[];

		/** [Method] Selects an array of DOM nodes by CSS XPath selector  
		* @param path String The selector/xpath query 
		* @param root HTMLElement The start of the query. 
		* @param type String Either "select" or "simple" for a simple selector match (only valid when used when the call is deferred to the jsSelect method) 
		* @param single Boolean Pass true to select only the first matching node using document.querySelector (where available) 
		* @returns HTMLElement[] An array of DOM elements (not a NodeList as returned by querySelectorAll). 
		*/
		static select( path?:string, root?:HTMLElement, type?:string, single?:boolean ): HTMLElement[];

		/** [Method] Selects a single element  
		* @param selector String The selector/xpath query 
		* @param root HTMLElement The start of the query. 
		* @returns HTMLElement The DOM element which matched the selector. 
		*/
		static selectNode( selector?:string, root?:HTMLElement ): HTMLElement;

		/** [Method] Selects the value of a node parsing integers and floats  
		* @param selector String The selector/xpath query 
		* @param root HTMLElement The start of the query. 
		* @param defaultValue Number When specified, this is return as empty value. 
		* @returns Number 
		*/
		static selectNumber( selector?:string, root?:HTMLElement, defaultValue?:number ): number;

		/** [Method] Selects the value of a node optionally replacing null with the defaultValue  
		* @param selector String The selector/xpath query 
		* @param root HTMLElement The start of the query. 
		* @param defaultValue String When specified, this is return as empty value. 
		* @returns String 
		*/
		static selectValue( selector?:string, root?:HTMLElement, defaultValue?:string ): string;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.core {
	export interface IDomQuery extends Ext.IBase {
	}
	export class DomQuery {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Object) */
		static matchers: any;

		/** [Property] (Object) */
		static operators: any;

		/** [Property] (Object) */
		static pseudos: any;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Compiles a selector xpath query into a reusable function  
		* @param selector String The selector/xpath query 
		* @param type String Either "select" or "simple" for a simple selector match 
		* @returns Function 
		*/
		static compile( selector?:string, type?:string ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Filters an array of elements to only include matches of a simple selector 
		* @param el HTMLElement[] An array of elements to filter 
		* @param selector String The simple selector to test 
		* @param nonMatches Boolean If true, it returns the elements that DON'T match the selector instead of the ones that match 
		* @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned. 
		*/
		static filter( el?:HTMLElement[], selector?:string, nonMatches?:boolean ): HTMLElement[];

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Get the text value for a node optionally replacing null with the defaultValue  
		* @param The Object node 
		* @param defaultValue String When specified, this is return as empty value. 
		* @returns String The value 
		*/
		static getNodeValue( The?:any, defaultValue?:string ): string;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Returns true if the passed element s match the passed simple selector 
		* @param el String/HTMLElement/HTMLElement[] An element id, element or array of elements 
		* @param selector String The simple selector to test 
		* @returns Boolean 
		*/
		static is( el?:any, selector?:string ): boolean;

		/** [Method] Selects an array of DOM nodes using JavaScript only implementation  
		* @param selector String The selector/xpath query (can be a comma separated list of selectors) 
		* @param root HTMLElement/String The start of the query. 
		* @returns HTMLElement[] An Array of DOM elements which match the selector. If there are no matches, and empty Array is returned. 
		*/
		static jsSelect( selector?:string, root?:any ): HTMLElement[];

		/** [Method] Selects an array of DOM nodes by CSS XPath selector  
		* @param path String The selector/xpath query 
		* @param root HTMLElement The start of the query. 
		* @param type String Either "select" or "simple" for a simple selector match (only valid when used when the call is deferred to the jsSelect method) 
		* @param single Boolean Pass true to select only the first matching node using document.querySelector (where available) 
		* @returns HTMLElement[] An array of DOM elements (not a NodeList as returned by querySelectorAll). 
		*/
		static select( path?:string, root?:HTMLElement, type?:string, single?:boolean ): HTMLElement[];

		/** [Method] Selects a single element  
		* @param selector String The selector/xpath query 
		* @param root HTMLElement The start of the query. 
		* @returns HTMLElement The DOM element which matched the selector. 
		*/
		static selectNode( selector?:string, root?:HTMLElement ): HTMLElement;

		/** [Method] Selects the value of a node parsing integers and floats  
		* @param selector String The selector/xpath query 
		* @param root HTMLElement The start of the query. 
		* @param defaultValue Number When specified, this is return as empty value. 
		* @returns Number 
		*/
		static selectNumber( selector?:string, root?:HTMLElement, defaultValue?:number ): number;

		/** [Method] Selects the value of a node optionally replacing null with the defaultValue  
		* @param selector String The selector/xpath query 
		* @param root HTMLElement The start of the query. 
		* @param defaultValue String When specified, this is return as empty value. 
		* @returns String 
		*/
		static selectValue( selector?:string, root?:HTMLElement, defaultValue?:string ): string;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.dom {
	export interface IShadow extends Ext.dom.IUnderlay {
		/** [Config Option] (String) */
		mode?: string;
		/** [Config Option] (Number) */
		offset?: number;
		/** [Property] (Object) */
		offsets?: any;

		/** [Property] (Object) */
		outerOffsets?: any;

		/** [Method] Called before the underlay is shown immediately after its element is retrieved from the pool */
		beforeShow?(): void;

		/** [Method] Sets the opacity of the shadow 
		* @param opacity Number The opacity 
		*/
		setOpacity?( opacity?:number ): void;

	}

}

declare module Ext {
	export interface IShadow extends Ext.dom.IUnderlay {
		/** [Config Option] (String) */
		mode?: string;
		/** [Config Option] (Number) */
		offset?: number;
		/** [Property] (Object) */
		offsets?: any;

		/** [Property] (Object) */
		outerOffsets?: any;

		/** [Method] Called before the underlay is shown immediately after its element is retrieved from the pool */
		beforeShow?(): void;

		/** [Method] Sets the opacity of the shadow 
		* @param opacity Number The opacity 
		*/
		setOpacity?( opacity?:number ): void;

	}

}

declare module Ext.dom {
	export interface IShim extends Ext.dom.IUnderlay {
		/** [Method] Returns the dom element that this underlay should be inserted before  
		* @returns Ext.dom.Element 
		*/
		getInsertionTarget?(): Ext.dom.IElement;

	}

}

declare module Ext.dom {
	export interface IUnderlay extends Ext.IBase {
		/** [Config Option] (Ext.dom.Element) */
		target?: Ext.dom.IElement;
		/** [Config Option] (Number) */
		zIndex?: number;
		/** [Method] Called before the underlay is shown immediately after its element is retrieved from the pool */
		beforeShow?(): void;

		/** [Method] Returns the dom element that this underlay should be inserted before  
		* @returns Ext.dom.Element 
		*/
		getInsertionTarget?(): Ext.dom.IElement;

		/** [Method]  
		* @returns Ext.dom.UnderlayPool 
		*/
		getPool?(): Ext.dom.IUnderlayPool;

		/** [Method] Hides the underlay */
		hide?(): void;

		/** [Method] Aligns the underlay to its target element 
		* @param x Number The x position of the target element. If not provided, the x position will be read from the DOM. 
		* @param y Number The y position of the target element. If not provided, the y position will be read from the DOM. 
		* @param width Number The width of the target element. If not provided, the width will be read from the DOM. 
		* @param height Number The height of the target element. If not provided, the height will be read from the DOM. 
		*/
		realign?( x?:number, y?:number, width?:number, height?:number ): void;

		/** [Method] Adjust the z index of this underlay 
		* @param zIndex Number The new z-index 
		*/
		setZIndex?( zIndex?:number ): void;

		/** [Method] Shows the underlay */
		show?(): void;

	}

}

declare module Ext.dom {
	export interface IUnderlayPool extends Ext.IBase {
		/** [Method] Checks an element back into the pool for future reuse 
		* @param el Ext.dom.Element 
		*/
		checkIn?( el?:Ext.dom.IElement ): void;

		/** [Method] Checks an element out of the pool  
		* @returns Ext.dom.Element 
		*/
		checkOut?(): Ext.dom.IElement;

		/** [Method] Reset the pool by emptying the cache and destroying all its elements */
		reset?(): void;

	}

}

declare module Ext.draw {
	export interface IAnimator extends Ext.IBase {
	}
	export class Animator {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Adds an animated object to the animation pool  
		* @param animation Object The animation descriptor to add to the pool. 
		*/
		static add( animation?:any ): void;

		/** [Method] Register a recursive callback that will be called at every frame  
		* @param callback Function 
		* @param scope Object 
		* @returns String 
		*/
		static addFrameCallback( callback?:any, scope?:any ): string;

		/** [Method] Cross platform animationTime implementation  
		* @returns Number 
		*/
		static animationTime(): number;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Cancel a registered one time callback 
		* @param id String 
		*/
		static cancel( id?:string ): void;

		/** [Method] Returns true or false whether it contains the given animation or not  
		* @param animation Object The animation to check for. 
		* @returns Boolean 
		*/
		static contains( animation?:any ): boolean;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns true or false whether the pool is empty or not  
		* @returns Boolean 
		*/
		static empty(): boolean;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Removes an animation from the pool  
		* @param animation Object The animation to remove from the pool. 
		*/
		static remove( animation?:any ): void;

		/** [Method] Unregister a recursive callback  
		* @param id String 
		*/
		static removeFrameCallback( id?:string ): void;

		/** [Method] Register a one time callback that will be called at the next frame  
		* @param callback Function/String 
		* @param scope Object 
		* @returns String The ID of the scheduled callback. 
		*/
		static schedule( callback?:any, scope?:any ): string;

		/** [Method] Register a one time callback that will be called at the next frame if that callback with a matching function and sc  
		* @param callback Function/String 
		* @param scope Object 
		* @returns String/null The ID of the scheduled callback or null, if that callback has already been scheduled. 
		*/
		static scheduleIf( callback?:any, scope?:any ): any;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Given a frame time it will filter out finished animations from the pool  
		* @param frameTime Number The frame's start time, in milliseconds. 
		*/
		static step( frameTime?:number ): void;

	}

}

declare module Ext.draw {
	export interface IColor extends Ext.IBase {
		/** [Config Option] (Number) */
		lightnessFactor?: number;
		/** [Method] Returns a new color that is darker than this color in the HSL color space  
		* @param factor Number Darker factor (0..1). 
		* @returns Ext.draw.Color 
		*/
		createDarker?( factor?:number ): Ext.draw.IColor;

		/** [Method] Returns a new color that is lighter than this color in the HSL color space  
		* @param factor Number Lighter factor (0..1). 
		* @returns Ext.draw.Color 
		*/
		createLighter?( factor?:number ): Ext.draw.IColor;

		/** [Method] Returns the gray value 0 to 255 of the color  
		* @returns Number 
		*/
		getGrayscale?(): number;

		/** [Method] Get the equivalent HSL components of the color  
		* @returns Number[] 
		*/
		getHSL?(): number[];

		/** [Method] Get the equivalent HSV components of the color  
		* @returns Number[] 
		*/
		getHSV?(): number[];

		/** [Method] Parse the string and set the current color  
		* @param Color String Color as string. 
		* @returns Object this 
		*/
		setFromString?( Color?:string ): any;

		/** [Method] Set current color based on the specified HSL values  
		* @param h Number Hue component [0..360) 
		* @param s Number Saturation component [0..1] 
		* @param l Number Lightness component [0..1] 
		* @returns Ext.draw.Color 
		*/
		setHSL?( h?:number, s?:number, l?:number ): Ext.draw.IColor;

		/** [Method] Set current color based on the specified HSV values  
		* @param h Number Hue component [0..360) 
		* @param s Number Saturation component [0..1] 
		* @param v Number Value component [0..1] 
		* @returns Ext.draw.Color 
		*/
		setHSV?( h?:number, s?:number, v?:number ): Ext.draw.IColor;

		/** [Method] Convert a color to hexadecimal format  
		* @param color String/Array The color value (i.e 'rgb(255, 255, 255)', 'color: #ffffff'). Can also be an Array, in this case the function handles the first member. 
		* @returns String The color in hexadecimal format. 
		*/
		toHex?( color?:any ): string;

		/** [Method] toString  returns a color in hex format rrggbb  if the alpha is 1  
		* @returns String 
		*/
		toString?(): string;

	}
	export class Color {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Convenience method for creating a color  
		* @param red Ext.draw.Color/String/Number[]/Number Red component (0..255), CSS color string or array of all components. 
		* @param green Number Green component (0..255) 
		* @param blue Number Blue component (0..255) 
		* @param alpha Number Alpha component (0..1) 
		* @returns Ext.draw.Color 
		*/
		static create( red?:any, green?:number, blue?:number, alpha?:number ): Ext.draw.IColor;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Returns a flyweight instance of Ext draw Color  
		* @param red Number/String Red component (0..255) or CSS color string. 
		* @param green Number Green component (0..255) 
		* @param blue Number Blue component (0..255) 
		* @param alpha Number Alpha component (0..1) 
		* @returns Ext.draw.Color 
		*/
		static fly( red?:any, green?:number, blue?:number, alpha?:number ): Ext.draw.IColor;

		/** [Method] Create a new color based on the specified HSL values  
		* @param h Number Hue component [0..360) 
		* @param s Number Saturation component [0..1] 
		* @param l Number Lightness component [0..1] 
		* @returns Ext.draw.Color 
		*/
		static fromHSL( h?:number, s?:number, l?:number ): Ext.draw.IColor;

		/** [Method] Create a new color based on the specified HSV values  
		* @param h Number Hue component [0..360) 
		* @param s Number Saturation component [0..1] 
		* @param l Number Value component [0..1] 
		* @returns Ext.draw.Color 
		*/
		static fromHSV( h?:number, s?:number, l?:number ): Ext.draw.IColor;

		/** [Method] Parse the string and create a new color  
		* @param Color String Color as string. 
		* @returns Ext.draw.Color 
		*/
		static fromString( Color?:string ): Ext.draw.IColor;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.draw {
	export interface IContainer extends Ext.draw.IContainerBase {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		engine?: string;
		/** [Config Option] (Object[]) */
		gradients?: any[];
		/** [Config Option] (Function) */
		resizeHandler?: any;
		/** [Config Option] (Object[]) */
		sprites?: any[];
		/** [Property] (String) */
		defaultDownloadServerUrl?: string;

		/** [Method] Downloads an image or PDF of the chart or opens it in a separate browser tab window if the download can t be triggered  
		* @param config Object The following config options are supported: 
		* @returns Boolean True if request was successfully sent to the server. 
		*/
		download?( config?:any ): boolean;

		/** [Method] Returns the value of cls  
		* @returns String 
		*/
		getCls?(): string;

		/** [Method] Returns the value of gradients  
		* @returns Object[] 
		*/
		getGradients?(): any[];

		/** [Method] Produces an image of the chart  
		* @param format String Possible options are 'image' (the method will return an Image object) and 'stream' (the method will return the image as a byte stream). If missing, the DataURL of the chart's image will be returned. 
		* @returns Object 
		*/
		getImage?( format?:string ): any;

		/** [Method] Returns the value of resizeHandler  
		* @returns Function 
		*/
		getResizeHandler?(): any;

		/** [Method] Returns the value of sprites  
		* @returns Object[] 
		*/
		getSprites?(): any[];

		/** [Method] Get a surface by the given id or create one if it doesn t exist  
		* @param id String 
		* @returns Ext.draw.Surface 
		*/
		getSurface?( id?:string ): Ext.draw.ISurface;

		/** [Method] Place watermark after resize  
		* @param width Number 
		* @param height Number 
		*/
		onPlaceWatermark?( width?:number, height?:number ): void;

		/** [Method] Displays an image of a Ext draw Container on screen  */
		preview?(): void;

		/** [Method] Render all the surfaces in the container  */
		renderFrame?(): void;

		/** [Method] Sets the value of cls  
		* @param cls String The new value. 
		*/
		setCls?( cls?:string ): void;

		/** [Method] Sets the value of gradients  
		* @param gradients Object[] The new value. 
		*/
		setGradients?( gradients?:any[] ): void;

		/** [Method] Sets the value of resizeHandler  
		* @param resizeHandler Function The new value. 
		*/
		setResizeHandler?( resizeHandler?:any ): void;

		/** [Method] Sets the value of sprites  
		* @param sprites Object[] The new value. 
		*/
		setSprites?( sprites?:any[] ): void;

	}

}

declare module Ext.draw {
	export interface IComponent extends Ext.draw.IContainerBase {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		engine?: string;
		/** [Config Option] (Object[]) */
		gradients?: any[];
		/** [Config Option] (Function) */
		resizeHandler?: any;
		/** [Config Option] (Object[]) */
		sprites?: any[];
		/** [Property] (String) */
		defaultDownloadServerUrl?: string;

		/** [Method] Downloads an image or PDF of the chart or opens it in a separate browser tab window if the download can t be triggered  
		* @param config Object The following config options are supported: 
		* @returns Boolean True if request was successfully sent to the server. 
		*/
		download?( config?:any ): boolean;

		/** [Method] Returns the value of cls  
		* @returns String 
		*/
		getCls?(): string;

		/** [Method] Returns the value of gradients  
		* @returns Object[] 
		*/
		getGradients?(): any[];

		/** [Method] Produces an image of the chart  
		* @param format String Possible options are 'image' (the method will return an Image object) and 'stream' (the method will return the image as a byte stream). If missing, the DataURL of the chart's image will be returned. 
		* @returns Object 
		*/
		getImage?( format?:string ): any;

		/** [Method] Returns the value of resizeHandler  
		* @returns Function 
		*/
		getResizeHandler?(): any;

		/** [Method] Returns the value of sprites  
		* @returns Object[] 
		*/
		getSprites?(): any[];

		/** [Method] Get a surface by the given id or create one if it doesn t exist  
		* @param id String 
		* @returns Ext.draw.Surface 
		*/
		getSurface?( id?:string ): Ext.draw.ISurface;

		/** [Method] Place watermark after resize  
		* @param width Number 
		* @param height Number 
		*/
		onPlaceWatermark?( width?:number, height?:number ): void;

		/** [Method] Displays an image of a Ext draw Container on screen  */
		preview?(): void;

		/** [Method] Render all the surfaces in the container  */
		renderFrame?(): void;

		/** [Method] Sets the value of cls  
		* @param cls String The new value. 
		*/
		setCls?( cls?:string ): void;

		/** [Method] Sets the value of gradients  
		* @param gradients Object[] The new value. 
		*/
		setGradients?( gradients?:any[] ): void;

		/** [Method] Sets the value of resizeHandler  
		* @param resizeHandler Function The new value. 
		*/
		setResizeHandler?( resizeHandler?:any ): void;

		/** [Method] Sets the value of sprites  
		* @param sprites Object[] The new value. 
		*/
		setSprites?( sprites?:any[] ): void;

	}

}

declare module Ext.draw {
	export interface IContainerBase extends Ext.panel.IPanel {
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

		/** [Method] Called when the component is resized  
		* @param width Object 
		* @param height Object 
		* @param oldWidth Object 
		* @param oldHeight Object 
		*/
		onResize?( width?:any, height?:any, oldWidth?:any, oldHeight?:any ): void;

	}

}

declare module Ext.draw {
	export interface IDraw extends Ext.IBase {
	}
	export class Draw {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Converting radians to degrees  
		* @param radian Number 
		* @returns Number 
		*/
		static degrees( radian?:number ): number;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method]  
		* @param bbox1 Object 
		* @param bbox2 Object 
		* @param padding Number 
		* @returns Boolean 
		*/
		static isBBoxIntersect( bbox1?:any, bbox2?:any, padding?:number ): boolean;

		/** [Method] Checks if a point is within a bounding box  
		* @param x Object 
		* @param y Object 
		* @param bbox Object 
		* @returns Boolean 
		*/
		static isPointInBBox( x?:any, y?:any, bbox?:any ): boolean;

		/** [Method] Converting degrees to radians  
		* @param degrees Number 
		* @returns Number 
		*/
		static rad( degrees?:number ): number;

		/** [Method]  
		* @param a Mixed 
		* @returns Mixed 
		*/
		static reflectFn( a?:any ): any;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Given coordinates of the points calculates coordinates of a Bezier curve that goes through them  
		* @param dataX Object x-coordinates of the points. 
		* @param dataY Object y-coordinates of the points. 
		* @param value Object A value to control the smoothness of the curve. 
		* @returns Object Object holding two arrays, for x and y coordinates of the curve. 
		*/
		static smooth( dataX?:any, dataY?:any, value?:any ): any;

		/** [Method] Natural cubic spline interpolation  
		* @param points Array Array of numbers. 
		*/
		static spline( points?:any[] ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.draw.engine {
	export interface ICanvas extends Ext.draw.ISurface {
		/** [Config Option] (Boolean) */
		highPrecision?: boolean;
		/** [Property] (Object) */
		element?: any;

		/** [Method] Empty the surface content without touching the sprites */
		clear?(): void;

		/** [Method] Clears the current transformation state on the surface  */
		clearTransform?(): void;

		/** [Method] Destroys the Canvas element and prepares it for Garbage Collection  */
		destroy?(): void;

		/** [Method] Flattens the given drawing surfaces into a single image and returns an object containing the data in the DataURL for  
		* @param size Object 
		* @param surfaces Object 
		* @returns Object 
		*/
		flatten?( size?:any, surfaces?:any ): any;

		/** [Method] Returns the value of highPrecision  
		* @returns Boolean 
		*/
		getHighPrecision?(): boolean;

		/** [Method] Sets the value of highPrecision  
		* @param highPrecision Boolean The new value. 
		*/
		setHighPrecision?( highPrecision?:boolean ): void;

		/** [Method] 2D Canvas context in IE up to IE10 inclusive doesn t support the setLineDash method and the lineDashOffset property  
		* @param dashList Object An even number of non-negative numbers specifying a dash list. 
		*/
		setLineDash?( dashList?:any ): void;

	}

}

declare module Ext.draw.engine {
	export interface IExcanvas {
		/** [Method] Binds a function to an object  
		* @param f Function The function to bind the object to 
		* @param obj Object The object that should act as this when the function  is called 
		* @param var_args * Rest arguments that will be used as the initial  arguments when the function is called 
		* @returns Function A new function that has bound this 
		*/
		bind?( f?:any, obj?:any, var_args?:any ): any;

		/** [Method] This funtion is assigned to the elements as element getContext  
		* @returns CanvasRenderingContext2D 
		*/
		getContext?(): CanvasRenderingContext2D;

		/** [Method] Public initializes a canvas element so that it can be used as canvas element from now on  
		* @param el HTMLElement The canvas element to initialize. 
		* @returns HTMLElement the element that was created. 
		*/
		initElement?( el?:HTMLElement ): HTMLElement;

	}

}

declare module Ext.draw.engine {
	export interface ISvg extends Ext.draw.ISurface {
		/** [Config Option] (Boolean) */
		highPrecision?: boolean;
		/** [Method] Empty the surface content without touching the sprites */
		clear?(): void;

		/** [Method] Clears the current transformation state on the surface  */
		clearTransform?(): void;

		/** [Method] Creates a DOM element under the SVG namespace of the given type  
		* @param type String The type of the SVG DOM element. 
		* @returns * The created element. 
		*/
		createSvgNode?( type?:string ): any;

		/** [Method] Destroys the Canvas element and prepares it for Garbage Collection  
		* @param path Object 
		* @param matrix Object 
		* @param band Object 
		*/
		destroy?( path?:any, matrix?:any, band?:any ): void;

		/** [Method] Flattens the given drawing surfaces into a single image and returns an object containing the data in the DataURL for  
		* @param size Object 
		* @param surfaces Object 
		* @returns Object 
		*/
		flatten?( size?:any, surfaces?:any ): any;

		/** [Method] A template method for modifying the element config before it is processed  
		* @returns Object the element config object 
		*/
		getElementConfig?(): any;

		/** [Method] Returns the value of highPrecision  
		* @returns Boolean 
		*/
		getHighPrecision?(): boolean;

		/** [Method] Remove a given sprite from the surface optionally destroying the sprite in the process  
		* @param sprite Object 
		* @param destroySprite Object 
		*/
		remove?( sprite?:any, destroySprite?:any ): void;

		/** [Method] Renders a single sprite into the surface  
		* @param sprite Ext.draw.sprite.Sprite The Sprite to be rendered. 
		* @returns Boolean returns false to stop the rendering to continue. 
		*/
		renderSprite?( sprite?:Ext.draw.sprite.ISprite ): boolean;

		/** [Method] Sets the value of highPrecision  
		* @param highPrecision Boolean The new value. 
		*/
		setHighPrecision?( highPrecision?:boolean ): void;

	}

}

declare module Ext.draw.engine.svgcontext {
	export interface IGradient extends Ext.IBase {
		/** [Method] Adds a color stop with the given color to the gradient at the given offset  
		* @param offset Number 
		* @param color String 
		*/
		addColorStop?( offset?:number, color?:string ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.draw.engine {
	export interface ISvgContext extends Ext.IBase {
		/** [Method] Adds points to the subpath such that the arc described by the circumference of the circle described by the arguments 
		* @param x Number 
		* @param y Number 
		* @param radius Number 
		* @param startAngle Number 
		* @param endAngle Number 
		* @param anticlockwise Number 
		*/
		arc?( x?:number, y?:number, radius?:number, startAngle?:number, endAngle?:number, anticlockwise?:number ): void;

		/** [Method] Arc command using svg parameters  
		* @param r1 Number 
		* @param r2 Number 
		* @param rotation Number 
		* @param large Number 
		* @param swipe Number 
		* @param x2 Number 
		* @param y2 Number 
		*/
		arcSvg?( r1?:number, r2?:number, rotation?:number, large?:number, swipe?:number, x2?:number, y2?:number ): void;

		/** [Method] Adds an arc with the given control points and radius to the current subpath connected to the previous point by a str  
		* @param x1 Number 
		* @param y1 Number 
		* @param x2 Number 
		* @param y2 Number 
		* @param radiusX Number 
		* @param radiusY Number 
		* @param rotation Number 
		*/
		arcTo?( x1?:number, y1?:number, x2?:number, y2?:number, radiusX?:number, radiusY?:number, rotation?:number ): void;

		/** [Method] Resets the current default path  */
		beginPath?(): void;

		/** [Method] Adds the given point to the current subpath connected to the previous one by a cubic B zier curve with the given con  
		* @param x1 Number 
		* @param y1 Number 
		* @param x2 Number 
		* @param y2 Number 
		* @param x3 Number 
		* @param y3 Number 
		*/
		bezierCurveTo?( x1?:number, y1?:number, x2?:number, y2?:number, x3?:number, y3?:number ): void;

		/** [Method] Clears the context  */
		clear?(): void;

		/** [Method] Marks the current subpath as closed and starts a new subpath with a point the same as the start and end of the newly  */
		closePath?(): void;

		/** [Method] Returns an object that represents a linear gradient that paints along the line given by the coordinates represented b  
		* @param x0 Number 
		* @param y0 Number 
		* @param x1 Number 
		* @param y1 Number 
		* @returns Ext.draw.engine.SvgContext.Gradient 
		*/
		createLinearGradient?( x0?:number, y0?:number, x1?:number, y1?:number ): Ext.draw.engine.svgcontext.IGradient;

		/** [Method] Returns a CanvasGradient object that represents a radial gradient that paints along the cone given by the circles rep  
		* @param x0 Number 
		* @param y0 Number 
		* @param r0 Number 
		* @param x1 Number 
		* @param y1 Number 
		* @param r1 Number 
		* @returns Ext.draw.engine.SvgContext.Gradient 
		*/
		createRadialGradient?( x0?:number, y0?:number, r0?:number, x1?:number, y1?:number, r1?:number ): Ext.draw.engine.svgcontext.IGradient;

		/** [Method] Draws the given image onto the canvas  
		* @param image HTMLElement 
		* @param sx Number 
		* @param sy Number 
		* @param sw Number 
		* @param sh Number 
		* @param dx Number 
		* @param dy Number 
		* @param dw Number 
		* @param dh Number 
		*/
		drawImage?( image?:HTMLElement, sx?:number, sy?:number, sw?:number, sh?:number, dx?:number, dy?:number, dw?:number, dh?:number ): void;

		/** [Method] Adds points to the subpath such that the arc described by the circumference of the ellipse described by the arguments  
		* @param x Number 
		* @param y Number 
		* @param radiusX Number 
		* @param radiusY Number 
		* @param rotation Number 
		* @param startAngle Number 
		* @param endAngle Number 
		* @param anticlockwise Number 
		*/
		ellipse?( x?:number, y?:number, radiusX?:number, radiusY?:number, rotation?:number, startAngle?:number, endAngle?:number, anticlockwise?:number ): void;

		/** [Method] Fills the subpaths of the current default path or the given path with the current fill style  */
		fill?(): void;

		/** [Method] Paints the given rectangle onto the canvas using the current fill style  
		* @param x Number 
		* @param y Number 
		* @param width Number 
		* @param height Number 
		*/
		fillRect?( x?:number, y?:number, width?:number, height?:number ): void;

		/** [Method] Note After the method guarantees the transform matrix will be inverted  
		* @param attr Object The attribute object 
		* @param transformFillStroke Boolean Indicate whether to transform fill and stroke. If this is not given, then uses attr.transformFillStroke instead. 
		*/
		fillStroke?( attr?:any, transformFillStroke?:boolean ): void;

		/** [Method] Fills the given text at the given position  
		* @param text String 
		* @param x Number 
		* @param y Number 
		*/
		fillText?( text?:string, x?:number, y?:number ): void;

		/** [Method] Adds the given point to the current subpath connected to the previous one by a straight line  
		* @param x Number 
		* @param y Number 
		*/
		lineTo?( x?:number, y?:number ): void;

		/** [Method] Creates a new subpath with the given point  
		* @param x Number 
		* @param y Number 
		*/
		moveTo?( x?:number, y?:number ): void;

		/** [Method] Adds a new closed subpath to the path representing the given rectangle  
		* @param x Number 
		* @param y Number 
		* @param width Number 
		* @param height Number 
		*/
		rect?( x?:number, y?:number, width?:number, height?:number ): void;

		/** [Method] Pops the state stack and restores the state  */
		restore?(): void;

		/** [Method] Rotates the current context coordinates that is a transformation matrix 
		* @param angle Number The rotation angle, in radians. 
		*/
		rotate?( angle?:number ): void;

		/** [Method] Pushes the context state to the state stack  */
		save?(): void;

		/** [Method] Scales the current context by the specified horizontal x and vertical y factors  
		* @param x Number The horizontal scaling factor, where 1 equals unity or 100% scale. 
		* @param y Number The vertical scaling factor. 
		*/
		scale?( x?:number, y?:number ): void;

		/** [Method] Changes the transformation matrix to the matrix given by the arguments as described below  
		* @param xx Number 
		* @param yx Number 
		* @param xy Number 
		* @param yy Number 
		* @param dx Number 
		* @param dy Number 
		*/
		setTransform?( xx?:number, yx?:number, xy?:number, yy?:number, dx?:number, dy?:number ): void;

		/** [Method] Strokes the subpaths of the current default path or the given path with the current stroke style  */
		stroke?(): void;

		/** [Method] Paints the box that outlines the given rectangle onto the canvas using the current stroke style  
		* @param x Number 
		* @param y Number 
		* @param width Number 
		* @param height Number 
		*/
		strokeRect?( x?:number, y?:number, width?:number, height?:number ): void;

		/** [Method] Strokes the given text at the given position  
		* @param text String 
		* @param x Number 
		* @param y Number 
		*/
		strokeText?( text?:string, x?:number, y?:number ): void;

		/** [Method] Changes the transformation matrix to apply the matrix given by the arguments as described below  
		* @param xx Number 
		* @param yx Number 
		* @param xy Number 
		* @param yy Number 
		* @param dx Number 
		* @param dy Number 
		*/
		transform?( xx?:number, yx?:number, xy?:number, yy?:number, dx?:number, dy?:number ): void;

		/** [Method] Specifies values to move the origin point in a canvas  
		* @param x Number The value to add to horizontal (or x) coordinates. 
		* @param y Number The value to add to vertical (or y) coordinates. 
		*/
		translate?( x?:number, y?:number ): void;

	}

}

declare module Ext.draw.gradient {
	export interface IGradient extends Ext.IBase {
		/** [Config Option] (Array) */
		stops?: any[];
		/** [Method] Generates the gradient for the given context  
		* @param ctx Ext.draw.engine.SvgContext The context. 
		* @param bbox Object 
		* @returns Object 
		*/
		generateGradient?( ctx?:Ext.draw.engine.ISvgContext, bbox?:any ): any;

		/** [Method] Returns the value of stops  
		* @returns Array 
		*/
		getStops?(): any[];

		/** [Method] Sets the value of stops  
		* @param stops Array The new value. 
		*/
		setStops?( stops?:any[] ): void;

	}

}

declare module Ext.draw.gradient {
	export interface IGradientDefinition extends Ext.IBase {
	}
	export class GradientDefinition {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.draw.gradient {
	export interface ILinear extends Ext.draw.gradient.IGradient {
		/** [Config Option] (Number) */
		degrees?: number;
		/** [Config Option] (Number) */
		radians?: number;
		/** [Method] Generates the gradient for the given context  
		* @param ctx Ext.draw.engine.SvgContext The context. 
		* @param bbox Object 
		* @returns Object 
		*/
		generateGradient?( ctx?:Ext.draw.engine.ISvgContext, bbox?:any ): any;

		/** [Method] Returns the value of degrees  
		* @returns Number 
		*/
		getDegrees?(): number;

		/** [Method] Returns the value of radians  
		* @returns Number 
		*/
		getRadians?(): number;

		/** [Method] Sets the value of degrees  
		* @param degrees Number The new value. 
		*/
		setDegrees?( degrees?:number ): void;

		/** [Method] Sets the value of radians  
		* @param radians Number The new value. 
		*/
		setRadians?( radians?:number ): void;

	}

}

declare module Ext.draw.gradient {
	export interface IRadial extends Ext.draw.gradient.IGradient {
		/** [Config Option] (Object) */
		end?: any;
		/** [Config Option] (Object) */
		start?: any;
		/** [Method] Generates the gradient for the given context  
		* @param ctx Ext.draw.engine.SvgContext The context. 
		* @param bbox Object 
		* @returns Object 
		*/
		generateGradient?( ctx?:Ext.draw.engine.ISvgContext, bbox?:any ): any;

		/** [Method] Returns the value of end  
		* @returns Object 
		*/
		getEnd?(): any;

		/** [Method] Returns the value of start  
		* @returns Object 
		*/
		getStart?(): any;

		/** [Method] Sets the value of end  
		* @param end Object The new value. 
		*/
		setEnd?( end?:any ): void;

		/** [Method] Sets the value of start  
		* @param start Object The new value. 
		*/
		setStart?( start?:any ): void;

	}

}

declare module Ext.draw {
	export interface ILimitedCache extends Ext.IBase {
		/** [Config Option] (Function) */
		feeder?: any;
		/** [Config Option] (Number) */
		limit?: number;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Method] Clear all the objects  */
		clear?(): void;

		/** [Method] Get a cached object  
		* @param id String 
		* @param args Mixed... Arguments appended to feeder. 
		* @returns Object 
		*/
		get?( id:string, ...args:any[] ): any;

		/** [Method] Returns the value of feeder  
		* @returns Function 
		*/
		getFeeder?(): any;

		/** [Method] Returns the value of limit  
		* @returns Number 
		*/
		getLimit?(): number;

		/** [Method] Returns the value of scope  
		* @returns Object 
		*/
		getScope?(): any;

		/** [Method] Sets the value of feeder  
		* @param feeder Function The new value. 
		* @returns Number 
		*/
		setFeeder?( feeder?:any ): number;

		/** [Method] Sets the value of limit  
		* @param limit Number The new value. 
		*/
		setLimit?( limit?:number ): void;

		/** [Method] Sets the value of scope  
		* @param scope Object The new value. 
		*/
		setScope?( scope?:any ): void;

	}

}

declare module Ext.draw {
	export interface IMatrix extends Ext.IBase {
		/** [Property] (Number) */
		a?: number;

		/** [Method] Postpend a matrix onto the current  
		* @param xx Number Coefficient from x to x. 
		* @param xy Number Coefficient from x to y. 
		* @param yx Number Coefficient from y to x. 
		* @param yy Number Coefficient from y to y. 
		* @param dx Number Offset of x. 
		* @param dy Number Offset of y. 
		* @returns Ext.draw.Matrix this 
		*/
		append?( xx?:number, xy?:number, yx?:number, yy?:number, dx?:number, dy?:number ): Ext.draw.IMatrix;

		/** [Method] Postpend a matrix onto the current  
		* @param matrix Ext.draw.Matrix 
		* @returns Ext.draw.Matrix this 
		*/
		appendMatrix?( matrix?:Ext.draw.IMatrix ): Ext.draw.IMatrix;

		/** [Method] Clone this matrix  
		* @returns Ext.draw.Matrix 
		*/
		clone?(): Ext.draw.IMatrix;

		/** [Method] Determines if this matrix has the same values as another matrix  
		* @param matrix Ext.draw.Matrix 
		* @returns Boolean 
		*/
		equals?( matrix?:Ext.draw.IMatrix ): boolean;

		/** [Method] Horizontally flip the matrix 
		* @returns Ext.draw.Matrix this 
		*/
		flipX?(): Ext.draw.IMatrix;

		/** [Method] Vertically flip the matrix 
		* @returns Ext.draw.Matrix this 
		*/
		flipY?(): Ext.draw.IMatrix;

		/** [Method] Get offset x component of the matrix  
		* @returns Number 
		*/
		getDX?(): number;

		/** [Method] Get offset y component of the matrix  
		* @returns Number 
		*/
		getDY?(): number;

		/** [Method] Get the x scale of the matrix  
		* @returns Number 
		*/
		getScaleX?(): number;

		/** [Method] Get the y scale of the matrix  
		* @returns Number 
		*/
		getScaleY?(): number;

		/** [Method] Get x to x component of the matrix 
		* @returns Number 
		*/
		getXX?(): number;

		/** [Method] Get x to y component of the matrix  
		* @returns Number 
		*/
		getXY?(): number;

		/** [Method] Get y to x component of the matrix  
		* @returns Number 
		*/
		getYX?(): number;

		/** [Method] Get y to y component of the matrix  
		* @returns Number 
		*/
		getYY?(): number;

		/** [Method] Return a new matrix represents the opposite transformation of the current one  
		* @param target Ext.draw.Matrix A target matrix. If present, it will receive the result of inversion to avoid creating a new object. 
		* @returns Ext.draw.Matrix 
		*/
		inverse?( target?:Ext.draw.IMatrix ): Ext.draw.IMatrix;

		/** [Method] Determines whether this matrix is an identity matrix no transform 
		* @returns Boolean 
		*/
		isIdentity?(): boolean;

		/** [Method] Performs matrix multiplication  
		* @param matrix Ext.draw.Matrix 
		* @returns Ext.draw.Matrix this 
		*/
		multiply?( matrix?:Ext.draw.IMatrix ): Ext.draw.IMatrix;

		/** [Method] Prepend a matrix onto the current  
		* @param xx Number Coefficient from x to x. 
		* @param xy Number Coefficient from x to y. 
		* @param yx Number Coefficient from y to x. 
		* @param yy Number Coefficient from y to y. 
		* @param dx Number Offset of x. 
		* @param dy Number Offset of y. 
		* @returns Ext.draw.Matrix this 
		*/
		prepend?( xx?:number, xy?:number, yx?:number, yy?:number, dx?:number, dy?:number ): Ext.draw.IMatrix;

		/** [Method] Prepend a matrix onto the current  
		* @param matrix Ext.draw.Matrix 
		* @returns Ext.draw.Matrix this 
		*/
		prependMatrix?( matrix?:Ext.draw.IMatrix ): Ext.draw.IMatrix;

		/** [Method] Reset the matrix to identical  
		* @returns Ext.draw.Matrix this 
		*/
		reset?(): Ext.draw.IMatrix;

		/** [Method] Rotate the matrix  
		* @param angle Number Radians to rotate 
		* @param rcx Number|null Center of rotation. 
		* @param rcy Number|null Center of rotation. 
		* @param prepend Boolean If true, this will transformation be prepended to the matrix. 
		* @returns Ext.draw.Matrix this 
		*/
		rotate?( angle?:number, rcx?:any, rcy?:any, prepend?:boolean ): Ext.draw.IMatrix;

		/** [Method] Rotate the matrix by the angle of a vector  
		* @param x Number 
		* @param y Number 
		* @param prepend Boolean If true, this will transformation be prepended to the matrix. 
		* @returns Ext.draw.Matrix this 
		*/
		rotateFromVector?( x?:number, y?:number, prepend?:boolean ): Ext.draw.IMatrix;

		/** [Method] Scale the matrix  
		* @param sx Number 
		* @param sy Number 
		* @param scx Number 
		* @param scy Number 
		* @param prepend Boolean If true, this will transformation be prepended to the matrix. 
		* @returns Ext.draw.Matrix this 
		*/
		scale?( sx?:number, sy?:number, scx?:number, scy?:number, prepend?:boolean ): Ext.draw.IMatrix;

		/** [Method] Set the elements of a Matrix 
		* @param xx Number 
		* @param xy Number 
		* @param yx Number 
		* @param yy Number 
		* @param dx Number 
		* @param dy Number 
		* @returns Ext.draw.Matrix this 
		*/
		set?( xx?:number, xy?:number, yx?:number, yy?:number, dx?:number, dy?:number ): Ext.draw.IMatrix;

		/** [Method] Skew the matrix 
		* @param angle Number 
		* @returns Ext.draw.Matrix this 
		*/
		skewX?( angle?:number ): Ext.draw.IMatrix;

		/** [Method] Skew the matrix 
		* @param angle Number 
		* @returns Ext.draw.Matrix this 
		*/
		skewY?( angle?:number ): Ext.draw.IMatrix;

		/** [Method] Split a transformation matrix into Scale Rotate Translate components  
		* @returns Object 
		*/
		split?(): any;

		/** [Method] Create an array of elements by horizontal order xx yx dx yx yy dy 
		* @returns Array 
		*/
		toArray?(): any[];

		/** [Method] Apply the matrix to a drawing context  
		* @param ctx Object 
		* @returns Ext.draw.Matrix this 
		*/
		toContext?( ctx?:any ): Ext.draw.IMatrix;

		/** [Method] Get an array of elements  
		* @returns Array 
		*/
		toString?(): any[];

		/** [Method] Return a string that can be used as transform attribute in SVG  
		* @returns String 
		*/
		toSvg?(): string;

		/** [Method] Create an array of elements by vertical order xx xy yx yy dx dy 
		* @returns Array|String 
		*/
		toVerticalArray?(): any;

		/** [Method]  
		* @param bbox Object Given as {x: Number, y: Number, width: Number, height: Number}. 
		* @param radius Number 
		* @param target Object Optional target object to recieve the result. Recommended to use it for better gc. 
		* @returns Object Object with x, y, width and height. 
		*/
		transformBBox?( bbox?:any, radius?:number, target?:any ): any;

		/** [Method] Transform a list for points  
		* @param list Array 
		* @returns Array list 
		*/
		transformList?( list?:any[] ): any[];

		/** [Method] Transform a point to a new array  
		* @param point Array 
		* @returns Array 
		*/
		transformPoint?( point?:any[] ): any[];

		/** [Method] Translate the matrix  
		* @param x Number 
		* @param y Number 
		* @param prepend Boolean If true, this will transformation be prepended to the matrix. 
		* @returns Ext.draw.Matrix this 
		*/
		translate?( x?:number, y?:number, prepend?:boolean ): Ext.draw.IMatrix;

		/** [Method] Transform point returning the x component of the result  
		* @param x Number 
		* @param y Number 
		* @returns Number x component of the result. 
		*/
		x?( x?:number, y?:number ): number;

		/** [Method] Transform point returning the y component of the result  
		* @param x Number 
		* @param y Number 
		* @returns Number y component of the result. 
		*/
		y?( x?:number, y?:number ): number;

	}
	export class Matrix {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a matrix from mat  
		* @param mat Mixed 
		* @returns Ext.draw.Matrix 
		*/
		static create( mat?:any ): Ext.draw.IMatrix;

		/** [Method] Return the affine matrix that transform two points x0 y0 and x1 y1 to x0p y0p and x1p y1p  
		* @param x0 Number 
		* @param y0 Number 
		* @param x1 Number 
		* @param y1 Number 
		* @param x0p Number 
		* @param y0p Number 
		* @param x1p Number 
		* @param y1p Number 
		*/
		static createAffineMatrixFromTwoPair( x0?:number, y0?:number, x1?:number, y1?:number, x0p?:number, y0p?:number, x1p?:number, y1p?:number ): void;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Return the affine matrix that transform two points x0 y0 and x1 y1 to x0p y0p and x1p y1p  
		* @param x0 Number 
		* @param y0 Number 
		* @param x1 Number 
		* @param y1 Number 
		* @param x0p Number 
		* @param y0p Number 
		* @param x1p Number 
		* @param y1p Number 
		*/
		static createPanZoomFromTwoPair( x0?:number, y0?:number, x1?:number, y1?:number, x0p?:number, y0p?:number, x1p?:number, y1p?:number ): void;

		/** [Method] Create a flyweight to wrap the given array  
		* @param elements Array 
		* @returns Ext.draw.Matrix 
		*/
		static fly( elements?:any[] ): Ext.draw.IMatrix;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.draw.modifier {
	export interface IAnimation extends Ext.draw.modifier.IModifier {
		/** [Config Option] (Object) */
		customDuration?: any;
		/** [Config Option] (Object) */
		customDurations?: any;
		/** [Config Option] (Object) */
		customEasings?: any;
		/** [Config Option] (Number) */
		duration?: number;
		/** [Config Option] (Function) */
		easing?: any;
		/** [Method] Remove special easings on the given attributes  
		* @param attrs Object The source attributes. 
		*/
		clearDurationOn?( attrs?:any ): void;

		/** [Method] Remove special easings on the given attributes  
		* @param attrs String/Array The source attribute(s). 
		*/
		clearEasingOn?( attrs?:any ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of customDuration  
		* @returns Object 
		*/
		getCustomDuration?(): any;

		/** [Method] Returns the value of customDurations  
		* @returns Object 
		*/
		getCustomDurations?(): any;

		/** [Method] Returns the value of customEasings  
		* @returns Object 
		*/
		getCustomEasings?(): any;

		/** [Method] Returns the value of duration  
		* @returns Number 
		*/
		getDuration?(): number;

		/** [Method] Returns the value of easing  
		* @returns Function 
		*/
		getEasing?(): any;

		/** [Method] Invoked when changes need to be popped up to the top  
		* @param attributes Object The source attributes. 
		* @param changes Object The changes to be popped up. 
		*/
		popUp?( attributes?:any, changes?:any ): void;

		/** [Method] Validate attribute set before use  
		* @param attr Object The attribute to be validated. Note that it may be already initialized, so do not override properties that have already been used. 
		*/
		prepareAttributes?( attr?:any ): void;

		/** [Method] Invoked when changes need to be pushed down to the sprite  
		* @param attr Object The source attributes. 
		* @param changes Object The changes to make. This object might be changed unexpectedly inside the method. 
		* @returns Mixed 
		*/
		pushDown?( attr?:any, changes?:any ): any;

		/** [Method] Sets the value of customDuration  
		* @param customDuration Object The new value. 
		*/
		setCustomDuration?( customDuration?:any ): void;

		/** [Method] Sets the value of customDurations  
		* @param customDurations Object The new value. 
		*/
		setCustomDurations?( customDurations?:any ): void;

		/** [Method] Sets the value of customEasings  
		* @param customEasings Object The new value. 
		*/
		setCustomEasings?( customEasings?:any ): void;

		/** [Method] Sets the value of duration  
		* @param duration Number The new value. 
		*/
		setDuration?( duration?:number ): void;

		/** [Method] Set special duration on the given attributes  
		* @param attrs String/Array The source attributes. 
		* @param duration Number The special duration. 
		*/
		setDurationOn?( attrs?:any, duration?:number ): void;

		/** [Method] Sets the value of easing  
		* @param easing Function The new value. 
		*/
		setEasing?( easing?:any ): void;

		/** [Method] Set special easings on the given attributes  
		* @param attrs String/Array The source attribute(s). 
		* @param easing String The special easings. 
		*/
		setEasingOn?( attrs?:any, easing?:string ): void;

		/** [Method] Stop all animations affected by this modifier  */
		stop?(): void;

	}

}

declare module Ext.draw.modifier {
	export interface IHighlight extends Ext.draw.modifier.IModifier {
		/** [Config Option] (Boolean) */
		enabled?: boolean;
		/** [Config Option] (Object) */
		highlightStyle?: any;
		/** [Method] Filter out modifier changes that override highlightStyle or source attributes  
		* @param attr Object The source attributes. 
		* @param changes Object The modifier changes. 
		* @returns * The filtered changes. 
		*/
		filterChanges?( attr?:any, changes?:any ): any;

		/** [Method] Returns the value of enabled  
		* @returns Boolean 
		*/
		getEnabled?(): boolean;

		/** [Method] Returns the value of highlightStyle  
		* @returns Object 
		*/
		getHighlightStyle?(): any;

		/** [Method] Invoked when changes need to be popped up to the top  
		* @param attributes Object The source attributes. 
		* @param changes Object The changes to be popped up. 
		*/
		popUp?( attributes?:any, changes?:any ): void;

		/** [Method] Validate attribute set before use  
		* @param attr Object The attribute to be validated. Note that it may be already initialized, so do not override properties that have already been used. 
		*/
		prepareAttributes?( attr?:any ): void;

		/** [Method] Invoked when changes need to be pushed down to the sprite  
		* @param attr Object The source attributes. 
		* @param changes Object The changes to make. This object might be changed unexpectedly inside the method. 
		* @returns Mixed 
		*/
		pushDown?( attr?:any, changes?:any ): any;

		/** [Method] Sets the value of enabled  
		* @param enabled Boolean The new value. 
		*/
		setEnabled?( enabled?:boolean ): void;

		/** [Method] Sets the value of highlightStyle  
		* @param highlightStyle Object The new value. 
		*/
		setHighlightStyle?( highlightStyle?:any ): void;

	}

}

declare module Ext.draw.modifier {
	export interface IModifier extends Ext.IBase, Ext.mixin.IObservable {
		/** [Config Option] (Ext.draw.modifier.Modifier) */
		next?: Ext.draw.modifier.IModifier;
		/** [Config Option] (Ext.draw.modifier.Modifier) */
		previous?: Ext.draw.modifier.IModifier;
		/** [Config Option] (Ext.draw.sprite.Sprite) */
		sprite?: Ext.draw.sprite.ISprite;
		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the value of next  
		* @returns Ext.draw.modifier.Modifier 
		*/
		getNext?(): Ext.draw.modifier.IModifier;

		/** [Method] Returns the value of previous  
		* @returns Ext.draw.modifier.Modifier 
		*/
		getPrevious?(): Ext.draw.modifier.IModifier;

		/** [Method] Returns the value of sprite  
		* @returns Ext.draw.sprite.Sprite 
		*/
		getSprite?(): Ext.draw.sprite.ISprite;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Invoked when changes need to be popped up to the top  
		* @param attributes Object The source attributes. 
		* @param changes Object The changes to be popped up. 
		*/
		popUp?( attributes?:any, changes?:any ): void;

		/** [Method] Validate attribute set before use  
		* @param attr Object The attribute to be validated. Note that it may be already initialized, so do not override properties that have already been used. 
		*/
		prepareAttributes?( attr?:any ): void;

		/** [Method] Invoked when changes need to be pushed down to the sprite  
		* @param attr Object The source attributes. 
		* @param changes Object The changes to make. This object might be changed unexpectedly inside the method. 
		* @returns Mixed 
		*/
		pushDown?( attr?:any, changes?:any ): any;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of next  
		* @param next Ext.draw.modifier.Modifier The new value. 
		*/
		setNext?( next?:Ext.draw.modifier.IModifier ): void;

		/** [Method] Sets the value of previous  
		* @param previous Ext.draw.modifier.Modifier The new value. 
		*/
		setPrevious?( previous?:Ext.draw.modifier.IModifier ): void;

		/** [Method] Sets the value of sprite  
		* @param sprite Ext.draw.sprite.Sprite The new value. 
		*/
		setSprite?( sprite?:Ext.draw.sprite.ISprite ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.draw.modifier {
	export interface ITarget extends Ext.draw.modifier.IModifier {
		/** [Method] Invoked when changes need to be popped up to the top  
		* @param attributes Object The source attributes. 
		* @param changes Object The changes to be popped up. 
		*/
		popUp?( attributes?:any, changes?:any ): void;

		/** [Method] Validate attribute set before use  
		* @param attr Object The attribute to be validated. Note that it may be already initialized, so do not override properties that have already been used. 
		*/
		prepareAttributes?( attr?:any ): void;

		/** [Method] Invoked when changes need to be pushed down to the sprite  
		* @param attr Object The source attributes. 
		* @param changes Object The changes to make. This object might be changed unexpectedly inside the method. 
		* @returns Mixed 
		*/
		pushDown?( attr?:any, changes?:any ): any;

	}

}

declare module Ext.draw {
	export interface IPath extends Ext.IBase {
		/** [Method] Create an circular arc  
		* @param x Number 
		* @param y Number 
		* @param radius Number 
		* @param startAngle Number 
		* @param endAngle Number 
		* @param anticlockwise Number 
		*/
		arc?( x?:number, y?:number, radius?:number, startAngle?:number, endAngle?:number, anticlockwise?:number ): void;

		/** [Method] http  www w3 org TR SVG implnote html ArcImplementationNotes 
		* @param rx Number 
		* @param ry Number 
		* @param rotation Number Differ from svg spec, this is radian. 
		* @param fA Number 
		* @param fS Number 
		* @param x2 Number 
		* @param y2 Number 
		*/
		arcSvg?( rx?:number, ry?:number, rotation?:number, fA?:number, fS?:number, x2?:number, y2?:number ): void;

		/** [Method] Create a elliptic arc curve compatible with SVG s arc to instruction  
		* @param x1 Number 
		* @param y1 Number 
		* @param x2 Number 
		* @param y2 Number 
		* @param rx Number 
		* @param ry Number 
		* @param rotation Number 
		*/
		arcTo?( x1?:number, y1?:number, x2?:number, y2?:number, rx?:number, ry?:number, rotation?:number ): void;

		/** [Method] A cubic bezier curve to a position  
		* @param cx1 Number 
		* @param cy1 Number 
		* @param cx2 Number 
		* @param cy2 Number 
		* @param x Number 
		* @param y Number 
		*/
		bezierCurveTo?( cx1?:number, cy1?:number, cx2?:number, cy2?:number, x?:number, y?:number ): void;

		/** [Method] Clear the path  */
		clear?(): void;

		/** [Method] Clone this path  
		* @returns Ext.draw.Path 
		*/
		clone?(): Ext.draw.IPath;

		/** [Method] Close this path with a straight line  */
		closePath?(): void;

		/** [Method] Create an elliptic arc  
		* @param cx Number 
		* @param cy Number 
		* @param radiusX Number 
		* @param radiusY Number 
		* @param rotation Number 
		* @param startAngle Number 
		* @param endAngle Number 
		* @param anticlockwise Number 
		*/
		ellipse?( cx?:number, cy?:number, radiusX?:number, radiusY?:number, rotation?:number, startAngle?:number, endAngle?:number, anticlockwise?:number ): void;

		/** [Method] Reconstruct path from cubic bezier curve stripes  
		* @param stripes Array 
		*/
		fromStripes?( stripes?:any[] ): void;

		/** [Method] Feed the path from svg path string  
		* @param pathString String 
		*/
		fromSvgString?( pathString?:string ): void;

		/** [Method] Get the bounding box of this matrix  
		* @param target Object Optional object to receive the result. 
		* @returns Object Object with x, y, width and height 
		*/
		getDimension?( target?:any ): any;

		/** [Method] Get the bounding box as if the path is transformed by a matrix  
		* @param matrix Ext.draw.Matrix 
		* @param target Object Optional object to receive the result. 
		* @returns Object An object with x, y, width and height. 
		*/
		getDimensionWithTransform?( matrix?:Ext.draw.IMatrix, target?:any ): any;

		/** [Method] Calculates the points where the given segment intersects the path  
		* @param x1 Object 
		* @param y1 Object 
		* @param x2 Object 
		* @param y2 Object 
		* @param x3 Object 
		* @param y3 Object 
		* @param x4 Object 
		* @param y4 Object 
		* @returns Array 
		*/
		getSegmentIntersections?( x1?:any, y1?:any, x2?:any, y2?:any, x3?:any, y3?:any, x4?:any, y4?:any ): any[];

		/** [Method] Tests whether the given point is inside the path  
		* @param x Number 
		* @param y Number 
		* @returns Boolean 
		*/
		isPointInPath?( x?:number, y?:number ): boolean;

		/** [Method] Tests whether the given point is on the path  
		* @param x Number 
		* @param y Number 
		* @returns Boolean 
		*/
		isPointOnPath?( x?:number, y?:number ): boolean;

		/** [Method] A straight line to a position  
		* @param x Number 
		* @param y Number 
		*/
		lineTo?( x?:number, y?:number ): void;

		/** [Method] Move to a position  
		* @param x Number 
		* @param y Number 
		*/
		moveTo?( x?:number, y?:number ): void;

		/** [Method] A quadratic bezier curve to a position  
		* @param cx Number 
		* @param cy Number 
		* @param x Number 
		* @param y Number 
		*/
		quadraticCurveTo?( cx?:number, cy?:number, x?:number, y?:number ): void;

		/** [Method] Draw a rectangle and close it  
		* @param x Number 
		* @param y Number 
		* @param width Number 
		* @param height Number 
		*/
		rect?( x?:number, y?:number, width?:number, height?:number ): void;

		/** [Method] Return an svg path string for this path  
		* @returns String 
		*/
		toString?(): string;

		/** [Method] Convert path to bezier curve stripes  
		* @param target Array The optional array to receive the result. 
		* @returns Array 
		*/
		toStripes?( target?:any[] ): any[];

		/** [Method] Transform the current path by a matrix  
		* @param matrix Ext.draw.Matrix 
		*/
		transform?( matrix?:Ext.draw.IMatrix ): void;

	}

}

declare module Ext.draw {
	export interface IPathUtil extends Ext.IBase {
	}

}

declare module Ext.draw.plugin {
	export interface ISpriteEvents extends Ext.plugin.IAbstract {
		/** [Method] The init method is invoked after initComponent method has been run for the client Component  
		* @param drawContainer Object 
		*/
		init?( drawContainer?:any ): void;

	}

}

declare module Ext.draw {
	export interface ISegmentTree extends Ext.IBase {
		/** [Method] Returns the minimum range of data that fits the given range and step size  
		* @param min Number 
		* @param max Number 
		* @param estStep Number 
		* @returns Object The aggregation information. 
		*/
		getAggregation?( min?:number, max?:number, estStep?:number ): any;

		/** [Method] Returns the value of strategy  
		* @returns String 
		*/
		getStrategy?(): string;

		/** [Method] Sets the data of the segment tree  
		* @param dataX Number 
		* @param dataOpen Number 
		* @param dataHigh Number 
		* @param dataLow Number 
		* @param dataClose Number 
		*/
		setData?( dataX?:number, dataOpen?:number, dataHigh?:number, dataLow?:number, dataClose?:number ): void;

		/** [Method] Sets the value of strategy  
		* @param strategy String The new value. 
		*/
		setStrategy?( strategy?:string ): void;

	}

}

declare module Ext.draw.sprite {
	export interface IAnimationParser extends Ext.IBase {
	}

}

declare module Ext.draw.sprite {
	export interface IArc extends Ext.draw.sprite.ICircle {
		/** [Config Option] (Boolean) */
		anticlockwise?: boolean;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Method] Update the path  
		* @param path Object 
		* @param attr Object 
		*/
		updatePath?( path?:any, attr?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface IArrow extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		size?: number;
		/** [Method] Update the path  
		* @param path Object 
		* @param attr Object 
		*/
		updatePath?( path?:any, attr?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface IAttributeDefinition extends Ext.IBase {
		/** [Config Option] (Object) */
		aliases?: any;
		/** [Config Option] (Object) */
		animationProcessors?: any;
		/** [Config Option] (Object) */
		defaults?: any;
		/** [Config Option] (Object) */
		dirtyTriggers?: any;
		/** [Config Option] (Object) */
		processors?: any;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Config Option] (Object) */
		updaters?: any;
		/** [Method] Returns the value of aliases  
		* @returns Object 
		*/
		getAliases?(): any;

		/** [Method] Returns the value of animationProcessors  
		* @returns Object 
		*/
		getAnimationProcessors?(): any;

		/** [Method] Returns the value of defaults  
		* @returns Object 
		*/
		getDefaults?(): any;

		/** [Method] Returns the value of dirtyTriggers  
		* @returns Object 
		*/
		getDirtyTriggers?(): any;

		/** [Method] Returns the value of processors  
		* @returns Object 
		*/
		getProcessors?(): any;

		/** [Method] Returns the value of triggers  
		* @returns Object 
		*/
		getTriggers?(): any;

		/** [Method] Returns the value of updaters  
		* @returns Object 
		*/
		getUpdaters?(): any;

		/** [Method] Normalizes the changes given via their processors before they are applied as attributes  
		* @param changes Object The changes given. 
		* @param keepUnrecognized Boolean If 'true', unknown attributes will be passed through as normalized values. 
		* @returns Object The normalized values. 
		*/
		normalize?( changes?:any, keepUnrecognized?:boolean ): any;

		/** [Method] Sets the value of aliases  
		* @param aliases Object The new value. 
		*/
		setAliases?( aliases?:any ): void;

		/** [Method] Sets the value of animationProcessors  
		* @param animationProcessors Object The new value. 
		*/
		setAnimationProcessors?( animationProcessors?:any ): void;

		/** [Method] Sets the value of defaults  
		* @param defaults Object The new value. 
		*/
		setDefaults?( defaults?:any ): void;

		/** [Method] Sets the value of dirtyTriggers  
		* @param dirtyTriggers Object The new value. 
		*/
		setDirtyTriggers?( dirtyTriggers?:any ): void;

		/** [Method] Sets the value of processors  
		* @param processors Object The new value. 
		*/
		setProcessors?( processors?:any ): void;

		/** [Method] Sets the value of triggers  
		* @param triggers Object The new value. 
		*/
		setTriggers?( triggers?:any ): void;

		/** [Method] Sets the value of updaters  
		* @param updaters Object The new value. 
		*/
		setUpdaters?( updaters?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface IAttributeParser extends Ext.IBase {
	}
	export class AttributeParser {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Generates a function that checks if a value matches one of the given attributes  
		* @returns Function 
		*/
		static enums(): any;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.draw.sprite {
	export interface ICircle extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		cx?: number;
		/** [Config Option] (Number) */
		cy?: number;
		/** [Config Option] (Number) */
		r?: number;
		/** [Method] Update the path  
		* @param path Object 
		* @param attr Object 
		*/
		updatePath?( path?:any, attr?:any ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain Object 
		*/
		updatePlainBBox?( plain?:any ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite  
		* @param transform Object 
		*/
		updateTransformedBBox?( transform?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface IComposite extends Ext.draw.sprite.ISprite {
		/** [Method] Adds a sprite to the composite  
		* @param sprite Ext.draw.sprite.Sprite|Object 
		*/
		add?( sprite?:any ): void;

		/** [Method] Adds a list of sprites to the composite  
		* @param sprites Ext.draw.sprite.Sprite[]|Object[]|Ext.draw.sprite.Sprite|Object 
		*/
		addAll?( sprites?:any ): void;

		/** [Method] Returns the value of sprites  
		* @returns Array 
		*/
		getSprites?(): any[];

		/** [Method] Renders all sprites contained in the composite to the surface  
		* @param surface Object 
		* @param ctx Object 
		* @param rect Object 
		*/
		render?( surface?:any, ctx?:any, rect?:any ): void;

		/** [Method] Sets the value of sprites  
		* @param sprites Array The new value. 
		*/
		setSprites?( sprites?:any[] ): void;

		/** [Method] Updates the bounding box of the composite which contains the bounding box of all sprites in the composite  
		* @param plain Object 
		*/
		updatePlainBBox?( plain?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface ICross extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		size?: number;
		/** [Method] Update the path  
		* @param path Object 
		* @param attr Object 
		*/
		updatePath?( path?:any, attr?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface IDiamond extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		size?: number;
		/** [Method] Update the path  
		* @param path Object 
		* @param attr Object 
		*/
		updatePath?( path?:any, attr?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface IEllipse extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		axisRotation?: number;
		/** [Config Option] (Number) */
		cx?: number;
		/** [Config Option] (Number) */
		cy?: number;
		/** [Config Option] (Number) */
		rx?: number;
		/** [Config Option] (Number) */
		ry?: number;
		/** [Method] Update the path  
		* @param path Object 
		* @param attr Object 
		*/
		updatePath?( path?:any, attr?:any ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain Object 
		*/
		updatePlainBBox?( plain?:any ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite  
		* @param transform Object 
		*/
		updateTransformedBBox?( transform?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface IEllipticalArc extends Ext.draw.sprite.IEllipse {
		/** [Config Option] (Boolean) */
		anticlockwise?: boolean;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Method] Update the path  
		* @param path Object 
		* @param attr Object 
		*/
		updatePath?( path?:any, attr?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface IImage extends Ext.draw.sprite.IRect {
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (String) */
		src?: string;
		/** [Config Option] (Number) */
		width?: number;
		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any ): any;

	}

}

declare module Ext.draw.sprite {
	export interface IInstancing extends Ext.draw.sprite.ISprite {
		/** [Config Option] (Object) */
		template?: any;
		/** [Method] Creates a new sprite instance  
		* @param config Object The configuration of the instance. 
		* @param bypassNormalization Boolean 'true' to bypass attribute normalization. 
		* @param avoidCopy Boolean 'true' to avoid copying the config object. 
		* @returns Object The attributes of the instance. 
		*/
		createInstance?( config?:any, bypassNormalization?:boolean, avoidCopy?:boolean ): any;

		/** [Method] Removes the sprite and clears all listeners  */
		destroy?(): void;

		/** [Method] Not supported  
		* @returns null 
		*/
		getBBox?(): any;

		/** [Method] Returns the bounding box for the instance at the given index  
		* @param index Number The index of the instance. 
		* @param isWithoutTransform Boolean 'true' to not apply sprite transforms to the bounding box. 
		* @returns Object The bounding box for the instance. 
		*/
		getBBoxFor?( index?:number, isWithoutTransform?:boolean ): any;

		/** [Method] Returns the value of template  
		* @returns Object 
		*/
		getTemplate?(): any;

		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @param clipRect Object 
		* @param rect Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any, clipRect?:any, rect?:any ): any;

		/** [Method] Sets the attributes for the instance at the given index  
		* @param index Number the index of the instance 
		* @param changes Object the attributes to change 
		* @param bypassNormalization Boolean 'true' to avoid attribute normalization 
		*/
		setAttributesFor?( index?:number, changes?:any, bypassNormalization?:boolean ): void;

		/** [Method] Sets the value of template  
		* @param template Object The new value. 
		*/
		setTemplate?( template?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface ILine extends Ext.draw.sprite.ISprite {
		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any ): any;

		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain Object 
		*/
		updatePlainBBox?( plain?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface IPath extends Ext.draw.sprite.ISprite {
		/** [Config Option] (String) */
		path?: string;
		/** [Property] (Boolean) */
		debug?: boolean;

		/** [Method] Returns all points where this sprite intersects the given sprite  
		* @param path Object 
		* @returns Array 
		*/
		getIntersections?( path?:any ): any[];

		/** [Method] Defined in override Ext draw overrides sprite Path  
		* @param point Array A two-item array containing x and y coordinates of the point. 
		* @param options Object Hit testing options. 
		* @returns Object A hit result object that contains more information about what exactly was hit or null if nothing was hit. 
		*/
		hitTest?( point?:any[], options?:any ): any;

		/** [Method] Tests whether the given point is inside the path  
		* @param x Object 
		* @param y Object 
		* @returns Boolean 
		*/
		isPointInPath?( x?:any, y?:any ): boolean;

		/** [Method] Tests whether the given point is on the path  
		* @param x Object 
		* @param y Object 
		* @returns Boolean 
		*/
		isPointOnPath?( x?:any, y?:any ): boolean;

		/** [Method] Render method  
		* @param surface Object 
		* @param ctx Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any ): any;

		/** [Method] Update the path  
		* @param path Ext.draw.Path An empty path to draw on using path API. 
		* @param attr Object The attribute object. Note: DO NOT use the sprite.attr instead of this if you want to work with instancing. 
		*/
		updatePath?( path?:Ext.draw.IPath, attr?:any ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain Object 
		*/
		updatePlainBBox?( plain?:any ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite  
		* @param transform Object 
		*/
		updateTransformedBBox?( transform?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface IPlus extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		size?: number;
		/** [Method] Update the path  
		* @param path Object 
		* @param attr Object 
		*/
		updatePath?( path?:any, attr?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface IRect extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (Number) */
		radius?: number;
		/** [Config Option] (Number) */
		width?: number;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
		/** [Method] Update the path  
		* @param path Object 
		* @param attr Object 
		*/
		updatePath?( path?:any, attr?:any ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain Object 
		*/
		updatePlainBBox?( plain?:any ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite  
		* @param transform Object 
		* @param plain Object 
		*/
		updateTransformedBBox?( transform?:any, plain?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface ISector extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		endRho?: number;
		/** [Config Option] (Number) */
		margin?: number;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Config Option] (Number) */
		startRho?: number;
		/** [Method] Update the path  
		* @param path Object 
		* @param attr Object 
		*/
		updatePath?( path?:any, attr?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface ISprite extends Ext.IBase, Ext.mixin.IObservable {
		/** [Config Option] (Number) */
		fillOpacity?: number;
		/** [Config Option] (String) */
		fillStyle?: string;
		/** [Config Option] (Number) */
		globalAlpha?: number;
		/** [Config Option] (String) */
		globalCompositeOperation?: string;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		lineCap?: string;
		/** [Config Option] (Array) */
		lineDash?: any[];
		/** [Config Option] (Number) */
		lineDashOffset?: number;
		/** [Config Option] (String) */
		lineJoin?: string;
		/** [Config Option] (Number) */
		lineWidth?: number;
		/** [Config Option] (Number) */
		miterLimit?: number;
		/** [Config Option] (Number) */
		rotationCenterX?: number;
		/** [Config Option] (Number) */
		rotationCenterY?: number;
		/** [Config Option] (Number) */
		rotationRads?: number;
		/** [Config Option] (Number) */
		scalingCenterX?: number;
		/** [Config Option] (Number) */
		scalingCenterY?: number;
		/** [Config Option] (Number) */
		scalingX?: number;
		/** [Config Option] (Number) */
		scalingY?: number;
		/** [Config Option] (Number) */
		shadowBlur?: number;
		/** [Config Option] (String) */
		shadowColor?: string;
		/** [Config Option] (Number) */
		shadowOffsetX?: number;
		/** [Config Option] (Number) */
		shadowOffsetY?: number;
		/** [Config Option] (Number) */
		strokeOpacity?: number;
		/** [Config Option] (String) */
		strokeStyle?: string;
		/** [Config Option] (Ext.draw.Surface) */
		surface?: Ext.draw.ISurface;
		/** [Config Option] (Boolean) */
		transformFillStroke?: boolean;
		/** [Config Option] (Number) */
		translationX?: number;
		/** [Config Option] (Number) */
		translationY?: number;
		/** [Config Option] (Number) */
		zIndex?: number;
		/** [Property] (Object) */
		attr?: any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Removes the sprite and clears all listeners  */
		destroy?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the bounding box for the given Sprite as calculated with the Canvas engine  
		* @param isWithoutTransform Boolean Whether to calculate the bounding box with the current transforms or not. 
		*/
		getBBox?( isWithoutTransform?:boolean ): void;

		/** [Method] Subclass can rewrite this function to gain better performance  
		* @param isWithoutTransform Boolean 
		* @returns Array 
		*/
		getBBoxCenter?( isWithoutTransform?:boolean ): any[];

		/** [Method] Returns the value of parent  
		* @returns Object 
		*/
		getParent?(): any;

		/** [Method] Returns the value of surface  
		* @returns Ext.draw.Surface 
		*/
		getSurface?(): Ext.draw.ISurface;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Hide the sprite  
		* @returns Ext.draw.sprite.Sprite this 
		*/
		hide?(): Ext.draw.sprite.ISprite;

		/** [Method] Performs a hit test on the sprite  
		* @param point Array A two-item array containing x and y coordinates of the point. 
		* @param options Object Hit testing options. 
		* @returns Object A hit result object that contains more information about what exactly was hit or null if nothing was hit. 
		*/
		hitTest?( point?:any[], options?:any ): any;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Called before rendering  */
		preRender?(): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Render method  
		* @param surface Ext.draw.Surface The surface. 
		* @param ctx Object A context object compatible with CanvasRenderingContext2D. 
		* @param rect Array The clip rect (or called dirty rect) of the current rendering. Not to be confused with surface.getRect(). 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:Ext.draw.ISurface, ctx?:any, rect?:any[] ): any;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Set attributes of the sprite  
		* @param changes Object The content of the change. 
		* @param bypassNormalization Boolean true to avoid normalization of the given changes. 
		* @param avoidCopy Boolean true to avoid copying the changes object. The content of object may be destroyed. 
		*/
		setAttributes?( changes?:any, bypassNormalization?:boolean, avoidCopy?:boolean ): void;

		/** [Method] Set attributes of the sprite assuming the names and values have already been normalized  
		* @param changes Object The content of the change. 
		* @param avoidCopy Boolean true to avoid copying the changes object. The content of object may be destroyed. 
		*/
		setAttributesBypassingNormalization?( changes?:any, avoidCopy?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of parent  
		* @param parent Object The new value. 
		*/
		setParent?( parent?:any ): void;

		/** [Method] Sets the value of surface  
		* @param surface Ext.draw.Surface The new value. 
		*/
		setSurface?( surface?:Ext.draw.ISurface ): void;

		/** [Method] Show the sprite  
		* @returns Ext.draw.sprite.Sprite this 
		*/
		show?(): Ext.draw.sprite.ISprite;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain Object Target object. 
		*/
		updatePlainBBox?( plain?:any ): void;

		/** [Method] Subclass will fill the plain object with x y width height information of the transformed bounding box of this sprite  
		* @param transform Object Target object. 
		* @param plain Object Auxiliary object providing information of plain object. 
		*/
		updateTransformedBBox?( transform?:any, plain?:any ): void;

		/** [Method] Applies sprite s attributes to the given context  
		* @param ctx Object Context to apply sprite's attributes to. 
		* @param rect Array The rect of the context to be affected by gradients. 
		*/
		useAttributes?( ctx?:any, rect?:any[] ): void;

	}

}

declare module Ext.draw.sprite {
	export interface ISquare extends Ext.draw.sprite.IRect {
		/** [Config Option] (Number) */
		size?: number;
	}

}

declare module Ext.draw.sprite {
	export interface IText extends Ext.draw.sprite.ISprite {
		/** [Config Option] (String) */
		font?: string;
		/** [Config Option] (String) */
		fontFamily?: string;
		/** [Config Option] (String/Number) */
		fontSize?: any;
		/** [Config Option] (String) */
		fontStyle?: string;
		/** [Config Option] (String) */
		fontVariant?: string;
		/** [Config Option] (String) */
		fontWeight?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		textAlign?: string;
		/** [Config Option] (String) */
		textBaseline?: string;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
		/** [Property] (Boolean) */
		debug?: boolean;

		/** [Method] Overriding the getBBox method of the abstract sprite here to always recalculate the bounding box of the text in flipp  
		* @param isWithoutTransform Object 
		*/
		getBBox?( isWithoutTransform?:any ): void;

		/** [Method]  
		* @param surface Object 
		* @param ctx Object 
		* @param rect Object 
		* @returns * returns false to stop rendering in this frame. All the sprites that haven't been rendered will have their dirty flag untouched. 
		*/
		render?( surface?:any, ctx?:any, rect?:any ): any;

		/** [Method] Subclass will fill the plain object with x y width height information of the plain bounding box of this sprite  
		* @param plain Object 
		* @param useOldSize Object 
		*/
		updatePlainBBox?( plain?:any, useOldSize?:any ): void;

	}

}

declare module Ext.draw.sprite {
	export interface ITick extends Ext.draw.sprite.ILine {
		/** [Config Option] (Number) */
		size?: number;
		/** [Config Option] (Object) */
		x?: any;
		/** [Config Option] (Object) */
		y?: any;
	}

}

declare module Ext.draw.sprite {
	export interface ITriangle extends Ext.draw.sprite.IPath {
		/** [Config Option] (Number) */
		size?: number;
		/** [Method] Update the path  
		* @param path Object 
		* @param attr Object 
		*/
		updatePath?( path?:any, attr?:any ): void;

	}

}

declare module Ext.draw {
	export interface ISurface extends Ext.draw.ISurfaceBase {
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Boolean) */
		dirty?: boolean;
		/** [Config Option] (Boolean) */
		flipRtlText?: boolean;
		/** [Config Option] (Array) */
		items?: any[];
		/** [Config Option] (Array) */
		rect?: any[];
		/** [Property] (Object) */
		devicePixelRatio?: any;

		/** [Method] Add a Sprite to the surface  */
		add?(): void;

		/** [Method] Empty the surface content without touching the sprites */
		clear?(): void;

		/** [Method] Destroys the surface  */
		destroy?(): void;

		/** [Method] Flattens the given drawing surfaces into a single image and returns an object containing the data in the DataURL for  
		* @param size Object The size of the final image. 
		* @param surfaces Ext.draw.Surface[] The surfaces to flatten. 
		* @returns Object 
		*/
		flatten?( size?:any, surfaces?:Ext.draw.ISurface[] ): any;

		/** [Method] Get the sprite by id or index  
		* @param id String|Number 
		* @returns Ext.draw.sprite.Sprite 
		*/
		get?( id?:any ): Ext.draw.sprite.ISprite;

		/** [Method] Return the minimal bounding box that contains all the sprites bounding boxes in the given list of sprites  
		* @param sprites Ext.draw.sprite.Sprite[]|Ext.draw.sprite.Sprite 
		* @param isWithoutTransform Boolean 
		* @returns {x: Number, y: Number, width: number, height: number} 
		*/
		getBBox?( sprites?:any, isWithoutTransform?:boolean ): {x: Number, y: Number, width: number, height: number};

		/** [Method] Returns the value of background  
		* @returns Object 
		*/
		getBackground?(): any;

		/** [Method] Returns the value of cls  
		* @returns String 
		*/
		getCls?(): string;

		/** [Method] Returns true if the surface is dirty  
		* @returns Boolean 'true' if the surface is dirty 
		*/
		getDirty?(): boolean;

		/** [Method] Returns the value of flipRtlText  
		* @returns Boolean 
		*/
		getFlipRtlText?(): boolean;

		/** [Method] Returns the value of items  
		* @returns Array 
		*/
		getItems?(): any[];

		/** [Method] Returns the value of rect  
		* @returns Array 
		*/
		getRect?(): any[];

		/** [Method] Performs a hit test on all sprites in the surface returning the first matching one  
		* @param point Array A two-item array containing x and y coordinates of the point. 
		* @param options Object Hit testing options. 
		* @returns Object A hit result object that contains more information about what exactly was hit or null if nothing was hit. 
		*/
		hitTest?( point?:any[], options?:any ): any;

		/** [Method] Performs a hit test on all sprites in the surface returning the first matching one  
		* @param point Array An event object. 
		* @param options Object Hit testing options. 
		* @returns Object A hit result object that contains more information about what exactly was hit or null if nothing was hit. 
		*/
		hitTestEvent?( point?:any[], options?:any ): any;

		/** [Method] Invoked when a sprite is added to the surface  
		* @param sprite Ext.draw.sprite.Sprite The sprite to be added. 
		*/
		onAdd?( sprite?:Ext.draw.sprite.ISprite ): void;

		/** [Method] Remove a given sprite from the surface optionally destroying the sprite in the process  
		* @param sprite Ext.draw.sprite.Sprite 
		* @param destroySprite Boolean 
		*/
		remove?( sprite?:Ext.draw.sprite.ISprite, destroySprite?:boolean ): void;

		/** [Method] Remove all sprites from the surface optionally destroying the sprites in the process  
		* @param destroySprites Boolean 
		*/
		removeAll?( destroySprites?:boolean ): void;

		/** [Method] Triggers the re rendering of the canvas  */
		renderFrame?(): void;

		/** [Method] Force the element to redraw  */
		repaint?(): void;

		/** [Method] Reset the matrix of the surface  */
		resetTransform?(): void;

		/** [Method] Round the number to align to the pixels on device  
		* @param num Number The number to align. 
		* @returns Number The resultant alignment. 
		*/
		roundPixel?( num?:number ): number;

		/** [Method] Sets the value of background  
		* @param background Object The new value. 
		*/
		setBackground?( background?:any ): void;

		/** [Method] Sets the value of cls  
		* @param cls String The new value. 
		*/
		setCls?( cls?:string ): void;

		/** [Method] Sets the value of flipRtlText  
		* @param flipRtlText Boolean The new value. 
		*/
		setFlipRtlText?( flipRtlText?:boolean ): void;

		/** [Method] Sets the value of items  
		* @param items Array The new value. 
		*/
		setItems?( items?:any[] ): void;

		/** [Method] Sets the value of rect  
		* @param rect Array The new value. 
		*/
		setRect?( rect?:any[] ): void;

		/** [Method]  
		* @param list Array 
		* @returns Array Sorted array. 
		*/
		stableSort?( list?:any[] ): any[];

		/** [Method] Mark the surface to render after another surface is updated  
		* @param surface Ext.draw.Surface The surface to wait for. 
		*/
		waitFor?( surface?:Ext.draw.ISurface ): void;

	}

}

declare module Ext.draw {
	export interface ISurfaceBase extends Ext.IWidget {
	}

}

declare module Ext.draw {
	export interface ITextMeasurer extends Ext.IBase {
	}
	export class TextMeasurer {
		/** [Config Option] (Boolean) */
		static precise: boolean;
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Measure a text with specific font  
		* @param text String 
		* @param font String 
		* @returns Object An object with width, height and sizes properties. 
		*/
		static measureText( text?:string, font?:string ): any;

		/** [Method] Measure a single line text with specific font  
		* @param text String 
		* @param font String 
		* @returns Object An object with width and height properties. 
		*/
		static measureTextSingleLine( text?:string, font?:string ): any;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.draw {
	export interface ITimingFunctions extends Ext.IBase {
	}
	export class TimingFunctions {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext {
	export interface IEditor extends Ext.container.IContainer {
		/** [Config Option] (String) */
		alignment?: string;
		/** [Config Option] (Boolean) */
		allowBlur?: boolean;
		/** [Config Option] (Boolean/Object) */
		autoSize?: any;
		/** [Config Option] (Boolean) */
		cancelOnEsc?: boolean;
		/** [Config Option] (Boolean) */
		completeOnEnter?: boolean;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Ext.form.field.Field) */
		field?: Ext.form.field.IField;
		/** [Config Option] (Boolean) */
		focusOnToFront?: boolean;
		/** [Config Option] (Boolean) */
		hideEl?: boolean;
		/** [Config Option] (Boolean) */
		ignoreNoChange?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number[]) */
		offsets?: number[];
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		parentEl?: any;
		/** [Config Option] (Boolean) */
		revertInvalid?: boolean;
		/** [Config Option] (Boolean/String) */
		shadow?: any;
		/** [Config Option] (Boolean) */
		swallowKeys?: boolean;
		/** [Config Option] (Boolean) */
		updateEl?: boolean;
		/** [Config Option] (Object) */
		value?: any;
		/** [Property] (Boolean) */
		editing?: boolean;

		/** [Method] private 
		* @param ct Object 
		* @param position Object 
		*/
		afterRender?( ct?:any, position?:any ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Cancels the editing process and hides the editor without persisting any changes  
		* @param remainVisible Boolean Override the default behavior and keep the editor visible after cancel 
		*/
		cancelEdit?( remainVisible?:boolean ): void;

		/** [Method] Ends the editing process persists the changed value to the underlying field and hides the editor  
		* @param remainVisible Boolean Override the default behavior and keep the editor visible after edit 
		*/
		completeEdit?( remainVisible?:boolean ): void;

		/** [Method] Gets the data value of the editor 
		* @returns Object The data value 
		*/
		getValue?(): any;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  
		* @param container Object 
		*/
		onAdded?( container?:any ): void;

		/** [Method] private 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] private */
		onHide?(): void;

		/** [Method] private */
		onShow?(): void;

		/** [Method] Realigns the editor to the bound field based on the current alignment config value  
		* @param autoSize Boolean True to size the field to the dimensions of the bound element. 
		*/
		realign?( autoSize?:boolean ): void;

		/** [Method] Sets the data value of the editor 
		* @param value Object Any valid value supported by the underlying field 
		*/
		setValue?( value?:any ): void;

		/** [Method] Starts the editing process and shows the editor  
		* @param el String/HTMLElement/Ext.dom.Element The element to edit 
		* @param value String A value to initialize the editor with. If a value is not provided, it defaults to the innerHTML of el. 
		*/
		startEdit?( el?:any, value?:string ): void;

	}

}

declare module Ext {
	export interface IElementLoader extends Ext.IBase, Ext.util.IObservable {
		/** [Config Option] (Object) */
		ajaxOptions?: any;
		/** [Config Option] (Boolean/Object) */
		autoLoad?: any;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Function/String) */
		callback?: any;
		/** [Config Option] (Function/String) */
		failure?: any;
		/** [Config Option] (Boolean/String) */
		loadMask?: any;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object) */
		rendererScope?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		scripts?: boolean;
		/** [Config Option] (Function/String) */
		success?: any;
		/** [Config Option] (HTMLElement/Ext.dom.Element/String) */
		target?: any;
		/** [Config Option] (String) */
		url?: string;
		/** [Property] (Boolean) */
		isLoader?: boolean;

		/** [Method] Aborts the active load request */
		abort?(): void;

		/** [Method] Destroys the loader  */
		destroy?(): void;

		/** [Method] Returns the target of this loader  
		* @returns Ext.Component The target or null if none exists. 
		*/
		getTarget?(): Ext.IComponent;

		/** [Method] Checks whether the loader is automatically refreshing  
		* @returns Boolean True if the loader is automatically refreshing 
		*/
		isAutoRefreshing?(): boolean;

		/** [Method] Loads new data from the server  
		* @param options Object The options for the request. They can be any configuration option that can be specified for the class, with the exception of the target option. Note that any options passed to the method will override any class defaults. 
		*/
		load?( options?:any ): void;

		/** [Method] Sets an Ext dom Element as the target of this loader  
		* @param target String/HTMLElement/Ext.dom.Element The element or its ID. 
		*/
		setTarget?( target?:any ): void;

		/** [Method] Automatically refreshes the content over a specified period  
		* @param interval Number The interval to refresh in ms. 
		* @param options Object The options to pass to the load method. See load 
		*/
		startAutoRefresh?( interval?:number, options?:any ): void;

		/** [Method] Clears any auto refresh  */
		stopAutoRefresh?(): void;

	}

}

declare module Ext.enums {
	export interface IFeature {
		/** [Property] (String) */
		abstractsummary?: string;

		/** [Property] (String) */
		feature?: string;

		/** [Property] (String) */
		grouping?: string;

		/** [Property] (String) */
		groupingsummary?: string;

		/** [Property] (String) */
		rowbody?: string;

		/** [Property] (String) */
		summary?: string;

	}

}

declare module Ext.enums {
	export interface ILayout {
		/** [Property] (String) */
		absolute?: string;

		/** [Property] (String) */
		accordion?: string;

		/** [Property] (String) */
		anchor?: string;

		/** [Property] (String) */
		auto?: string;

		/** [Property] (String) */
		autocomponent?: string;

		/** [Property] (String) */
		autocontainer?: string;

		/** [Property] (String) */
		border?: string;

		/** [Property] (String) */
		box?: string;

		/** [Property] (String) */
		card?: string;

		/** [Property] (String) */
		center?: string;

		/** [Property] (String) */
		checkboxgroup?: string;

		/** [Property] (String) */
		column?: string;

		/** [Property] (String) */
		container?: string;

		/** [Property] (String) */
		fit?: string;

		/** [Property] (String) */
		form?: string;

		/** [Property] (String) */
		hbox?: string;

		/** [Property] (String) */
		table?: string;

		/** [Property] (String) */
		vbox?: string;

	}

}

declare module Ext.enums {
	export interface IPlugin {
		/** [Property] (String) */
		cellediting?: string;

		/** [Property] (String) */
		chartitemevents?: string;

		/** [Property] (String) */
		clipboard?: string;

		/** [Property] (String) */
		gridfilters?: string;

		/** [Property] (String) */
		gridheaderresizer?: string;

		/** [Property] (String) */
		gridviewdragdrop?: string;

		/** [Property] (String) */
		lazyitems?: string;

		/** [Property] (String) */
		responsive?: string;

		/** [Property] (String) */
		rowediting?: string;

		/** [Property] (String) */
		rowexpander?: string;

		/** [Property] (String) */
		spriteevents?: string;

		/** [Property] (String) */
		treeviewdragdrop?: string;

		/** [Property] (String) */
		viewport?: string;

	}

}

declare module Ext.enums {
	export interface IWidget {
		/** [Property] (String) */
		actioncolumn?: string;

		/** [Property] (String) */
		axis?: string;

		/** [Property] (String) */
		axis3d?: string;

		/** [Property] (String) */
		booleancolumn?: string;

		/** [Property] (String) */
		boundlist?: string;

		/** [Property] (String) */
		box?: string;

		/** [Property] (String) */
		breadcrumb?: string;

		/** [Property] (String) */
		button?: string;

		/** [Property] (String) */
		buttongroup?: string;

		/** [Property] (String) */
		cartesian?: string;

		/** [Property] (String) */
		checkbox?: string;

		/** [Property] (String) */
		checkboxfield?: string;

		/** [Property] (String) */
		checkboxgroup?: string;

		/** [Property] (String) */
		checkcolumn?: string;

		/** [Property] (String) */
		colorbutton?: string;

		/** [Property] (String) */
		colorfield?: string;

		/** [Property] (String) */
		colormenu?: string;

		/** [Property] (String) */
		colorpicker?: string;

		/** [Property] (String) */
		colorpickercolorpreview?: string;

		/** [Property] (String) */
		colorselector?: string;

		/** [Property] (String) */
		columnsplitter?: string;

		/** [Property] (String) */
		combo?: string;

		/** [Property] (String) */
		combobox?: string;

		/** [Property] (String) */
		component?: string;

		/** [Property] (String) */
		container?: string;

		/** [Property] (String) */
		cycle?: string;

		/** [Property] (String) */
		dashboard?: string;

		/** [Property] (String) */
		dashboardcolumn?: string;

		/** [Property] (String) */
		dashboardpanel?: string;

		/** [Property] (String) */
		dataview?: string;

		/** [Property] (String) */
		datecolumn?: string;

		/** [Property] (String) */
		datefield?: string;

		/** [Property] (String) */
		datemenu?: string;

		/** [Property] (String) */
		datepicker?: string;

		/** [Property] (String) */
		displayfield?: string;

		/** [Property] (String) */
		draw?: string;

		/** [Property] (String) */
		editor?: string;

		/** [Property] (String) */
		field?: string;

		/** [Property] (String) */
		fieldcontainer?: string;

		/** [Property] (String) */
		fieldset?: string;

		/** [Property] (String) */
		filebutton?: string;

		/** [Property] (String) */
		filefield?: string;

		/** [Property] (String) */
		fileuploadfield?: string;

		/** [Property] (String) */
		flash?: string;

		/** [Property] (String) */
		form?: string;

		/** [Property] (String) */
		grid?: string;

		/** [Property] (String) */
		gridcolumn?: string;

		/** [Property] (String) */
		gridpanel?: string;

		/** [Property] (String) */
		gridview?: string;

		/** [Property] (String) */
		header?: string;

		/** [Property] (String) */
		headercontainer?: string;

		/** [Property] (String) */
		hidden?: string;

		/** [Property] (String) */
		hiddenfield?: string;

		/** [Property] (String) */
		htmleditor?: string;

		/** [Property] (String) */
		image?: string;

		/** [Property] (String) */
		imagecomponent?: string;

		/** [Property] (String) */
		interaction?: string;

		/** [Property] (String) */
		jsonpstore?: string;

		/** [Property] (String) */
		label?: string;

		/** [Property] (String) */
		legend?: string;

		/** [Property] (String) */
		loadmask?: string;

		/** [Property] (String) */
		menu?: string;

		/** [Property] (String) */
		menucheckitem?: string;

		/** [Property] (String) */
		menuitem?: string;

		/** [Property] (String) */
		menuseparator?: string;

		/** [Property] (String) */
		messagebox?: string;

		/** [Property] (String) */
		monthpicker?: string;

		/** [Property] (String) */
		multiselector?: string;

		/** [Property] (String) */
		multiselectorsearch?: string;

		/** [Property] (String) */
		multislider?: string;

		/** [Property] (String) */
		numbercolumn?: string;

		/** [Property] (String) */
		numberfield?: string;

		/** [Property] (String) */
		pagingtoolbar?: string;

		/** [Property] (String) */
		panel?: string;

		/** [Property] (String) */
		pickerfield?: string;

		/** [Property] (String) */
		polar?: string;

		/** [Property] (String) */
		progressbar?: string;

		/** [Property] (String) */
		progressbarwidget?: string;

		/** [Property] (String) */
		propertygrid?: string;

		/** [Property] (String) */
		quicktip?: string;

		/** [Property] (String) */
		radio?: string;

		/** [Property] (String) */
		radiofield?: string;

		/** [Property] (String) */
		radiogroup?: string;

		/** [Property] (String) */
		rating?: string;

		/** [Property] (String) */
		rownumberer?: string;

		/** [Property] (String) */
		scrollindicator?: string;

		/** [Property] (String) */
		segmentedbutton?: string;

		/** [Property] (String) */
		slider?: string;

		/** [Property] (String) */
		sliderfield?: string;

		/** [Property] (String) */
		slidertip?: string;

		/** [Property] (String) */
		sliderwidget?: string;

		/** [Property] (String) */
		spacefilling?: string;

		/** [Property] (String) */
		sparklinebar?: string;

		/** [Property] (String) */
		sparklinebox?: string;

		/** [Property] (String) */
		sparklinebullet?: string;

		/** [Property] (String) */
		sparklinediscrete?: string;

		/** [Property] (String) */
		sparklineline?: string;

		/** [Property] (String) */
		sparklinepie?: string;

		/** [Property] (String) */
		sparklinetristate?: string;

		/** [Property] (String) */
		spinnerfield?: string;

		/** [Property] (String) */
		splitbutton?: string;

		/** [Property] (String) */
		splitter?: string;

		/** [Property] (String) */
		surface?: string;

		/** [Property] (String) */
		tab?: string;

		/** [Property] (String) */
		tabbar?: string;

		/** [Property] (String) */
		tablepanel?: string;

		/** [Property] (String) */
		tableview?: string;

		/** [Property] (String) */
		tabpanel?: string;

		/** [Property] (String) */
		tagfield?: string;

		/** [Property] (String) */
		tbfill?: string;

		/** [Property] (String) */
		tbitem?: string;

		/** [Property] (String) */
		tbseparator?: string;

		/** [Property] (String) */
		tbspacer?: string;

		/** [Property] (String) */
		tbtext?: string;

		/** [Property] (String) */
		templatecolumn?: string;

		/** [Property] (String) */
		textarea?: string;

		/** [Property] (String) */
		textareafield?: string;

		/** [Property] (String) */
		textfield?: string;

		/** [Property] (String) */
		timefield?: string;

		/** [Property] (String) */
		timepicker?: string;

		/** [Property] (String) */
		tip?: string;

		/** [Property] (String) */
		title?: string;

		/** [Property] (String) */
		toast?: string;

		/** [Property] (String) */
		tool?: string;

		/** [Property] (String) */
		toolbar?: string;

		/** [Property] (String) */
		tooltip?: string;

		/** [Property] (String) */
		treecolumn?: string;

		/** [Property] (String) */
		treepanel?: string;

		/** [Property] (String) */
		treeview?: string;

		/** [Property] (String) */
		trigger?: string;

		/** [Property] (String) */
		triggerfield?: string;

		/** [Property] (String) */
		viewport?: string;

		/** [Property] (String) */
		widget?: string;

		/** [Property] (String) */
		widgetcolumn?: string;

		/** [Property] (String) */
		window?: string;

	}

}

declare module Ext.env {
	export interface IBrowser {
		/** [Property] (String) */
		engineName?: string;

		/** [Property] (Ext.Version) */
		engineVersion?: Ext.IVersion;

		/** [Property] (Boolean) */
		isSecure?: boolean;

		/** [Property] (Boolean) */
		isStrict?: boolean;

		/** [Property] (String) */
		name?: string;

		/** [Property] (String) */
		userAgent?: string;

		/** [Property] (Ext.Version) */
		version?: Ext.IVersion;

		/** [Method] A hybrid property can be either accessed as a method call for example  if Ext browser is IE 
		* @param name String The OS name to check. 
		* @returns Boolean 
		*/
		is?( name?:string ): boolean;

	}

}

declare module Ext.env {
	export interface IOS {
		/** [Property] (String) */
		name?: string;

		/** [Property] (Ext.Version) */
		version?: Ext.IVersion;

		/** [Method] A hybrid property can be either accessed as a method call i e  if Ext os is Android 
		* @param name String The OS name to check. 
		* @returns Boolean 
		*/
		is?( name?:string ): boolean;

	}

}

declare module Ext.env {
	export interface IReady {
	}
	export class Ready {
		/** [Method] This method invokes the given listener instance based on its options  
		* @param listener Object 
		*/
		static invoke( listener?:any ): void;

		/** [Method] Invokes as many listeners as are appropriate given the current state  */
		static invokeAll(): void;

	}

}

declare module Ext {
	export interface IError {
		/** [Property] (Boolean) */
		ignore?: boolean;

	}
	export class Error {
		/** [Method] Globally handle any Ext errors that may be raised optionally providing custom logic to handle different errors indiv  
		* @param err Object The error being raised. It will contain any attributes that were originally raised with it, plus properties about the method and class from which the error originated (if raised from a class that uses the Class System). 
		*/
		static handle( err?:any ): void;

		/** [Method] Raise an error that can include additional data and supports automatic console logging if available  
		* @param err String/Object The error message string, or an object containing the attribute "msg" that will be used as the error message. Any other data included in the object will also be logged to the browser console, if available. 
		*/
		static raise( err?:any ): void;

	}

}

declare module Ext.event {
	export interface IEvent extends Ext.IBase {
		/** [Property] (Number) */
		A?: number;

		/** [Property] (Number) */
		ALT?: number;

		/** [Property] (Number) */
		B?: number;

		/** [Property] (Number) */
		BACKSPACE?: number;

		/** [Property] (Number) */
		C?: number;

		/** [Property] (Number) */
		CAPS_LOCK?: number;

		/** [Property] (Number) */
		CONTEXT_MENU?: number;

		/** [Property] (Number) */
		CTRL?: number;

		/** [Property] (Number) */
		D?: number;

		/** [Property] (Number) */
		DELETE?: number;

		/** [Property] (Number) */
		DOWN?: number;

		/** [Property] (Number) */
		E?: number;

		/** [Property] (Number) */
		EIGHT?: number;

		/** [Property] (Number) */
		END?: number;

		/** [Property] (Number) */
		ENTER?: number;

		/** [Property] (Number) */
		ESC?: number;

		/** [Property] (Number) */
		F?: number;

		/** [Property] (Number) */
		F1?: number;

		/** [Property] (Number) */
		F10?: number;

		/** [Property] (Number) */
		F11?: number;

		/** [Property] (Number) */
		F12?: number;

		/** [Property] (Number) */
		F2?: number;

		/** [Property] (Number) */
		F3?: number;

		/** [Property] (Number) */
		F4?: number;

		/** [Property] (Number) */
		F5?: number;

		/** [Property] (Number) */
		F6?: number;

		/** [Property] (Number) */
		F7?: number;

		/** [Property] (Number) */
		F8?: number;

		/** [Property] (Number) */
		F9?: number;

		/** [Property] (Number) */
		FIVE?: number;

		/** [Property] (Number) */
		FOUR?: number;

		/** [Property] (Number) */
		G?: number;

		/** [Property] (Number) */
		H?: number;

		/** [Property] (Number) */
		HOME?: number;

		/** [Property] (Number) */
		I?: number;

		/** [Property] (Number) */
		INSERT?: number;

		/** [Property] (Number) */
		J?: number;

		/** [Property] (Number) */
		K?: number;

		/** [Property] (Number) */
		L?: number;

		/** [Property] (Number) */
		LEFT?: number;

		/** [Property] (Number) */
		M?: number;

		/** [Property] (Number) */
		N?: number;

		/** [Property] (Number) */
		NINE?: number;

		/** [Property] (Number) */
		NUM_CENTER?: number;

		/** [Property] (Number) */
		NUM_DIVISION?: number;

		/** [Property] (Number) */
		NUM_EIGHT?: number;

		/** [Property] (Number) */
		NUM_FIVE?: number;

		/** [Property] (Number) */
		NUM_FOUR?: number;

		/** [Property] (Number) */
		NUM_MINUS?: number;

		/** [Property] (Number) */
		NUM_MULTIPLY?: number;

		/** [Property] (Number) */
		NUM_NINE?: number;

		/** [Property] (Number) */
		NUM_ONE?: number;

		/** [Property] (Number) */
		NUM_PERIOD?: number;

		/** [Property] (Number) */
		NUM_PLUS?: number;

		/** [Property] (Number) */
		NUM_SEVEN?: number;

		/** [Property] (Number) */
		NUM_SIX?: number;

		/** [Property] (Number) */
		NUM_THREE?: number;

		/** [Property] (Number) */
		NUM_TWO?: number;

		/** [Property] (Number) */
		NUM_ZERO?: number;

		/** [Property] (Number) */
		O?: number;

		/** [Property] (Number) */
		ONE?: number;

		/** [Property] (Number) */
		P?: number;

		/** [Property] (Number) */
		PAGE_DOWN?: number;

		/** [Property] (Number) */
		PAGE_UP?: number;

		/** [Property] (Number) */
		PAUSE?: number;

		/** [Property] (Number) */
		PRINT_SCREEN?: number;

		/** [Property] (Number) */
		Q?: number;

		/** [Property] (Number) */
		R?: number;

		/** [Property] (Number) */
		RETURN?: number;

		/** [Property] (Number) */
		RIGHT?: number;

		/** [Property] (Number) */
		S?: number;

		/** [Property] (Number) */
		SEVEN?: number;

		/** [Property] (Number) */
		SHIFT?: number;

		/** [Property] (Number) */
		SIX?: number;

		/** [Property] (Number) */
		SPACE?: number;

		/** [Property] (Number) */
		T?: number;

		/** [Property] (Number) */
		TAB?: number;

		/** [Property] (Number) */
		THREE?: number;

		/** [Property] (Number) */
		TWO?: number;

		/** [Property] (Number) */
		U?: number;

		/** [Property] (Number) */
		UP?: number;

		/** [Property] (Number) */
		V?: number;

		/** [Property] (Number) */
		W?: number;

		/** [Property] (Number) */
		WHEEL_SCALE?: number;

		/** [Property] (Number) */
		X?: number;

		/** [Property] (Number) */
		Y?: number;

		/** [Property] (Number) */
		Z?: number;

		/** [Property] (Number) */
		ZERO?: number;

		/** [Property] (Boolean) */
		altKey?: boolean;

		/** [Property] (Number) */
		angle?: number;

		/** [Property] (Event) */
		browserEvent?: Event;

		/** [Property] (Number) */
		button?: number;

		/** [Property] (Boolean) */
		ctrlKey?: boolean;

		/** [Property] (HTMLElement) */
		currentTarget?: HTMLElement;

		/** [Property] (Boolean) */
		defaultPrevented?: boolean;

		/** [Property] (HTMLElement) */
		delegatedTarget?: HTMLElement;

		/** [Property] (Number) */
		direction?: number;

		/** [Property] (Number) */
		distance?: number;

		/** [Property] (Number) */
		duration?: number;

		/** [Property] (Number) */
		pageX?: number;

		/** [Property] (Number) */
		pageY?: number;

		/** [Property] (Number) */
		rotation?: number;

		/** [Property] (Number) */
		scale?: number;

		/** [Property] (Boolean) */
		shiftKey?: boolean;

		/** [Property] (HTMLElement) */
		target?: HTMLElement;

		/** [Method] Clones this event  
		* @returns Ext.event.Event The cloned copy 
		*/
		clone?(): Ext.event.IEvent;

		/** [Method] Gets the character code for the event  
		* @returns Number 
		*/
		getCharCode?(): number;

		/** [Method] Returns a normalized keyCode for the event  
		* @returns Number The key code 
		*/
		getKey?(): number;

		/** [Method] Gets the x coordinate of the event  
		* @returns Number 
		*/
		getPageX?(): number;

		/** [Method] Gets the y coordinate of the event  
		* @returns Number 
		*/
		getPageY?(): number;

		/** [Method] Returns a point object that consists of the object coordinates  
		* @returns Ext.util.Point point 
		*/
		getPoint?(): Ext.util.IPoint;

		/** [Method] Gets the related target  
		* @param selector String A simple selector to filter the target or look for an ancestor of the target. See Ext.dom.Query for information about simple selectors. 
		* @param maxDepth Number/HTMLElement The max depth to search as a number or element (defaults to 10 || document.body). 
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node. 
		* @returns HTMLElement 
		*/
		getRelatedTarget?( selector?:string, maxDepth?:any, returnEl?:boolean ): HTMLElement;

		/** [Method] Gets the target for the event  
		* @param selector String A simple selector to filter the target or look for an ancestor of the target 
		* @param maxDepth Number/Mixed The max depth to search as a number or element (defaults to 10 || document.body) 
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node. 
		* @returns HTMLElement 
		*/
		getTarget?( selector?:string, maxDepth?:any, returnEl?:boolean ): HTMLElement;

		/** [Method] Returns the time of the event  
		* @returns Date 
		*/
		getTime?(): any;

		/** [Method] Normalizes mouse wheel y delta across browsers  
		* @returns Number The mouse wheel y-delta 
		*/
		getWheelDelta?(): number;

		/** [Method] Returns the mouse wheel deltas for this event  
		* @returns Object An object with "x" and "y" properties holding the mouse wheel deltas. 
		*/
		getWheelDeltas?(): any;

		/** [Method] Gets the x coordinate of the event  
		* @returns Number 
		*/
		getX?(): number;

		/** [Method] Gets the X and Y coordinates of the event  
		* @returns Number[] The xy values like [x, y] 
		*/
		getXY?(): number[];

		/** [Method] Gets the y coordinate of the event  
		* @returns Number 
		*/
		getY?(): number;

		/** [Method] Returns true if the control meta shift or alt key was pressed during this event  
		* @returns Boolean 
		*/
		hasModifier?(): boolean;

		/** [Method] Injects a DOM event using the data in this object and optionally a new target  
		* @param target Ext.Element/HTMLElement If specified, the target for the event. This is likely to be used when relaying a DOM event. If not specified, getTarget is used to determine the target. 
		*/
		injectEvent?( target?:any ): void;

		/** [Method] Checks if the key pressed was a navigation key  
		* @param scrollableOnly Boolean Only check navigation keys that can cause element scrolling by their default action. 
		* @returns Boolean true if the press is a navigation keypress 
		*/
		isNavKeyPress?( scrollableOnly?:boolean ): boolean;

		/** [Method] Checks if the key pressed was a special key  
		* @returns Boolean true if the press is a special keypress 
		*/
		isSpecialKey?(): boolean;

		/** [Method] Prevents the browsers default handling of the event  
		* @returns Ext.event.Event this 
		*/
		preventDefault?(): Ext.event.IEvent;

		/** [Method] Stop the event preventDefault and stopPropagation 
		* @returns Ext.event.Event this 
		*/
		stopEvent?(): Ext.event.IEvent;

		/** [Method] Cancels bubbling of the event  
		* @returns Ext.event.Event this 
		*/
		stopPropagation?(): Ext.event.IEvent;

		/** [Method] Returns true if the target of this event is a child of el  
		* @param el String/HTMLElement/Ext.dom.Element The id, DOM element or Ext.Element to check 
		* @param related Boolean true to test if the related target is within el instead of the target 
		* @param allowEl Boolean true to also check if the passed element is the target or related target 
		* @returns Boolean 
		*/
		within?( el?:any, related?:boolean, allowEl?:boolean ): boolean;

	}

}

declare module Ext {
	export interface IEventObjectImpl extends Ext.IBase {
		/** [Property] (Number) */
		A?: number;

		/** [Property] (Number) */
		ALT?: number;

		/** [Property] (Number) */
		B?: number;

		/** [Property] (Number) */
		BACKSPACE?: number;

		/** [Property] (Number) */
		C?: number;

		/** [Property] (Number) */
		CAPS_LOCK?: number;

		/** [Property] (Number) */
		CONTEXT_MENU?: number;

		/** [Property] (Number) */
		CTRL?: number;

		/** [Property] (Number) */
		D?: number;

		/** [Property] (Number) */
		DELETE?: number;

		/** [Property] (Number) */
		DOWN?: number;

		/** [Property] (Number) */
		E?: number;

		/** [Property] (Number) */
		EIGHT?: number;

		/** [Property] (Number) */
		END?: number;

		/** [Property] (Number) */
		ENTER?: number;

		/** [Property] (Number) */
		ESC?: number;

		/** [Property] (Number) */
		F?: number;

		/** [Property] (Number) */
		F1?: number;

		/** [Property] (Number) */
		F10?: number;

		/** [Property] (Number) */
		F11?: number;

		/** [Property] (Number) */
		F12?: number;

		/** [Property] (Number) */
		F2?: number;

		/** [Property] (Number) */
		F3?: number;

		/** [Property] (Number) */
		F4?: number;

		/** [Property] (Number) */
		F5?: number;

		/** [Property] (Number) */
		F6?: number;

		/** [Property] (Number) */
		F7?: number;

		/** [Property] (Number) */
		F8?: number;

		/** [Property] (Number) */
		F9?: number;

		/** [Property] (Number) */
		FIVE?: number;

		/** [Property] (Number) */
		FOUR?: number;

		/** [Property] (Number) */
		G?: number;

		/** [Property] (Number) */
		H?: number;

		/** [Property] (Number) */
		HOME?: number;

		/** [Property] (Number) */
		I?: number;

		/** [Property] (Number) */
		INSERT?: number;

		/** [Property] (Number) */
		J?: number;

		/** [Property] (Number) */
		K?: number;

		/** [Property] (Number) */
		L?: number;

		/** [Property] (Number) */
		LEFT?: number;

		/** [Property] (Number) */
		M?: number;

		/** [Property] (Number) */
		N?: number;

		/** [Property] (Number) */
		NINE?: number;

		/** [Property] (Number) */
		NUM_CENTER?: number;

		/** [Property] (Number) */
		NUM_DIVISION?: number;

		/** [Property] (Number) */
		NUM_EIGHT?: number;

		/** [Property] (Number) */
		NUM_FIVE?: number;

		/** [Property] (Number) */
		NUM_FOUR?: number;

		/** [Property] (Number) */
		NUM_MINUS?: number;

		/** [Property] (Number) */
		NUM_MULTIPLY?: number;

		/** [Property] (Number) */
		NUM_NINE?: number;

		/** [Property] (Number) */
		NUM_ONE?: number;

		/** [Property] (Number) */
		NUM_PERIOD?: number;

		/** [Property] (Number) */
		NUM_PLUS?: number;

		/** [Property] (Number) */
		NUM_SEVEN?: number;

		/** [Property] (Number) */
		NUM_SIX?: number;

		/** [Property] (Number) */
		NUM_THREE?: number;

		/** [Property] (Number) */
		NUM_TWO?: number;

		/** [Property] (Number) */
		NUM_ZERO?: number;

		/** [Property] (Number) */
		O?: number;

		/** [Property] (Number) */
		ONE?: number;

		/** [Property] (Number) */
		P?: number;

		/** [Property] (Number) */
		PAGE_DOWN?: number;

		/** [Property] (Number) */
		PAGE_UP?: number;

		/** [Property] (Number) */
		PAUSE?: number;

		/** [Property] (Number) */
		PRINT_SCREEN?: number;

		/** [Property] (Number) */
		Q?: number;

		/** [Property] (Number) */
		R?: number;

		/** [Property] (Number) */
		RETURN?: number;

		/** [Property] (Number) */
		RIGHT?: number;

		/** [Property] (Number) */
		S?: number;

		/** [Property] (Number) */
		SEVEN?: number;

		/** [Property] (Number) */
		SHIFT?: number;

		/** [Property] (Number) */
		SIX?: number;

		/** [Property] (Number) */
		SPACE?: number;

		/** [Property] (Number) */
		T?: number;

		/** [Property] (Number) */
		TAB?: number;

		/** [Property] (Number) */
		THREE?: number;

		/** [Property] (Number) */
		TWO?: number;

		/** [Property] (Number) */
		U?: number;

		/** [Property] (Number) */
		UP?: number;

		/** [Property] (Number) */
		V?: number;

		/** [Property] (Number) */
		W?: number;

		/** [Property] (Number) */
		WHEEL_SCALE?: number;

		/** [Property] (Number) */
		X?: number;

		/** [Property] (Number) */
		Y?: number;

		/** [Property] (Number) */
		Z?: number;

		/** [Property] (Number) */
		ZERO?: number;

		/** [Property] (Boolean) */
		altKey?: boolean;

		/** [Property] (Number) */
		angle?: number;

		/** [Property] (Event) */
		browserEvent?: Event;

		/** [Property] (Number) */
		button?: number;

		/** [Property] (Boolean) */
		ctrlKey?: boolean;

		/** [Property] (HTMLElement) */
		currentTarget?: HTMLElement;

		/** [Property] (Boolean) */
		defaultPrevented?: boolean;

		/** [Property] (HTMLElement) */
		delegatedTarget?: HTMLElement;

		/** [Property] (Number) */
		direction?: number;

		/** [Property] (Number) */
		distance?: number;

		/** [Property] (Number) */
		duration?: number;

		/** [Property] (Number) */
		pageX?: number;

		/** [Property] (Number) */
		pageY?: number;

		/** [Property] (Number) */
		rotation?: number;

		/** [Property] (Number) */
		scale?: number;

		/** [Property] (Boolean) */
		shiftKey?: boolean;

		/** [Property] (HTMLElement) */
		target?: HTMLElement;

		/** [Method] Clones this event  
		* @returns Ext.event.Event The cloned copy 
		*/
		clone?(): Ext.event.IEvent;

		/** [Method] Gets the character code for the event  
		* @returns Number 
		*/
		getCharCode?(): number;

		/** [Method] Returns a normalized keyCode for the event  
		* @returns Number The key code 
		*/
		getKey?(): number;

		/** [Method] Gets the x coordinate of the event  
		* @returns Number 
		*/
		getPageX?(): number;

		/** [Method] Gets the y coordinate of the event  
		* @returns Number 
		*/
		getPageY?(): number;

		/** [Method] Returns a point object that consists of the object coordinates  
		* @returns Ext.util.Point point 
		*/
		getPoint?(): Ext.util.IPoint;

		/** [Method] Gets the related target  
		* @param selector String A simple selector to filter the target or look for an ancestor of the target. See Ext.dom.Query for information about simple selectors. 
		* @param maxDepth Number/HTMLElement The max depth to search as a number or element (defaults to 10 || document.body). 
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node. 
		* @returns HTMLElement 
		*/
		getRelatedTarget?( selector?:string, maxDepth?:any, returnEl?:boolean ): HTMLElement;

		/** [Method] Gets the target for the event  
		* @param selector String A simple selector to filter the target or look for an ancestor of the target 
		* @param maxDepth Number/Mixed The max depth to search as a number or element (defaults to 10 || document.body) 
		* @param returnEl Boolean true to return a Ext.Element object instead of DOM node. 
		* @returns HTMLElement 
		*/
		getTarget?( selector?:string, maxDepth?:any, returnEl?:boolean ): HTMLElement;

		/** [Method] Returns the time of the event  
		* @returns Date 
		*/
		getTime?(): any;

		/** [Method] Normalizes mouse wheel y delta across browsers  
		* @returns Number The mouse wheel y-delta 
		*/
		getWheelDelta?(): number;

		/** [Method] Returns the mouse wheel deltas for this event  
		* @returns Object An object with "x" and "y" properties holding the mouse wheel deltas. 
		*/
		getWheelDeltas?(): any;

		/** [Method] Gets the x coordinate of the event  
		* @returns Number 
		*/
		getX?(): number;

		/** [Method] Gets the X and Y coordinates of the event  
		* @returns Number[] The xy values like [x, y] 
		*/
		getXY?(): number[];

		/** [Method] Gets the y coordinate of the event  
		* @returns Number 
		*/
		getY?(): number;

		/** [Method] Returns true if the control meta shift or alt key was pressed during this event  
		* @returns Boolean 
		*/
		hasModifier?(): boolean;

		/** [Method] Injects a DOM event using the data in this object and optionally a new target  
		* @param target Ext.Element/HTMLElement If specified, the target for the event. This is likely to be used when relaying a DOM event. If not specified, getTarget is used to determine the target. 
		*/
		injectEvent?( target?:any ): void;

		/** [Method] Checks if the key pressed was a navigation key  
		* @param scrollableOnly Boolean Only check navigation keys that can cause element scrolling by their default action. 
		* @returns Boolean true if the press is a navigation keypress 
		*/
		isNavKeyPress?( scrollableOnly?:boolean ): boolean;

		/** [Method] Checks if the key pressed was a special key  
		* @returns Boolean true if the press is a special keypress 
		*/
		isSpecialKey?(): boolean;

		/** [Method] Prevents the browsers default handling of the event  
		* @returns Ext.event.Event this 
		*/
		preventDefault?(): Ext.event.IEvent;

		/** [Method] Stop the event preventDefault and stopPropagation 
		* @returns Ext.event.Event this 
		*/
		stopEvent?(): Ext.event.IEvent;

		/** [Method] Cancels bubbling of the event  
		* @returns Ext.event.Event this 
		*/
		stopPropagation?(): Ext.event.IEvent;

		/** [Method] Returns true if the target of this event is a child of el  
		* @param el String/HTMLElement/Ext.dom.Element The id, DOM element or Ext.Element to check 
		* @param related Boolean true to test if the related target is within el instead of the target 
		* @param allowEl Boolean true to also check if the passed element is the target or related target 
		* @returns Boolean 
		*/
		within?( el?:any, related?:boolean, allowEl?:boolean ): boolean;

	}

}

declare module Ext.event.gesture {
	export interface IDoubleTap extends Ext.event.gesture.ISingleTouch {
		/** [Config Option] (Number) */
		moveDistance?: number;
		/** [Config Option] (Number) */
		tapDistance?: number;
		/** [Property] (Number) */
		priority?: number;

		/** [Method] Returns the value of maxDuration  
		* @returns Number 
		*/
		getMaxDuration?(): number;

		/** [Method] Returns the value of moveDistance  
		* @returns Number 
		*/
		getMoveDistance?(): number;

		/** [Method] Returns the value of tapDistance  
		* @returns Number 
		*/
		getTapDistance?(): number;

		/** [Method] Sets the value of maxDuration  
		* @param maxDuration Number The new value. 
		*/
		setMaxDuration?( maxDuration?:number ): void;

		/** [Method] Sets the value of moveDistance  
		* @param moveDistance Number The new value. 
		*/
		setMoveDistance?( moveDistance?:number ): void;

		/** [Method] Sets the value of tapDistance  
		* @param tapDistance Number The new value. 
		*/
		setTapDistance?( tapDistance?:number ): void;

	}

}

declare module Ext.event.gesture {
	export interface IDrag extends Ext.event.gesture.ISingleTouch {
		/** [Config Option] (Number) */
		minDistance?: number;
		/** [Property] (Number) */
		priority?: number;

		/** [Method] Returns the value of minDistance  
		* @returns Number 
		*/
		getMinDistance?(): number;

		/** [Method] Sets the value of minDistance  
		* @param minDistance Number The new value. 
		*/
		setMinDistance?( minDistance?:number ): void;

	}

}

declare module Ext.event.gesture {
	export interface IEdgeSwipe extends Ext.event.gesture.ISwipe {
		/** [Property] (Number) */
		priority?: number;

		/** [Method] Returns the value of minDistance  
		* @returns Number 
		*/
		getMinDistance?(): number;

		/** [Method] Sets the value of minDistance  
		* @param minDistance Number The new value. 
		*/
		setMinDistance?( minDistance?:number ): void;

	}

}

declare module Ext.event.gesture {
	export interface ILongPress extends Ext.event.gesture.ISingleTouch {
		/** [Property] (Number) */
		priority?: number;

		/** [Method] Returns the value of minDuration  
		* @returns Number 
		*/
		getMinDuration?(): number;

		/** [Method] Returns the value of moveDistance  
		* @returns Number 
		*/
		getMoveDistance?(): number;

		/** [Method] Sets the value of minDuration  
		* @param minDuration Number The new value. 
		*/
		setMinDuration?( minDuration?:number ): void;

		/** [Method] Sets the value of moveDistance  
		* @param moveDistance Number The new value. 
		*/
		setMoveDistance?( moveDistance?:number ): void;

	}

}

declare module Ext.event.gesture {
	export interface IMultiTouch extends Ext.event.gesture.IRecognizer {
	}

}

declare module Ext.event.gesture {
	export interface IPinch extends Ext.event.gesture.IMultiTouch {
		/** [Property] (Number) */
		priority?: number;

	}

}

declare module Ext.event.gesture {
	export interface IRecognizer extends Ext.IBase, Ext.mixin.IIdentifiable {
		/** [Property] (Number) */
		priority?: number;

		/** [Method] Returns the value of callbackScope  
		* @returns Object 
		*/
		getCallbackScope?(): any;

		/** [Method] Retrieves the id of this component  
		* @returns String id 
		*/
		getId?(): string;

		/** [Method] Returns the value of onRecognized  
		* @returns Object 
		*/
		getOnRecognized?(): any;

		/** [Method] Sets the value of callbackScope  
		* @param callbackScope Object The new value. 
		*/
		setCallbackScope?( callbackScope?:any ): void;

		/** [Method] Sets the value of onRecognized  
		* @param onRecognized Object The new value. 
		*/
		setOnRecognized?( onRecognized?:any ): void;

	}

}

declare module Ext.event.gesture {
	export interface IRotate extends Ext.event.gesture.IMultiTouch {
		/** [Property] (Number) */
		priority?: number;

	}

}

declare module Ext.event.gesture {
	export interface ISingleTouch extends Ext.event.gesture.IRecognizer {
	}

}

declare module Ext.event.gesture {
	export interface ISwipe extends Ext.event.gesture.ISingleTouch {
		/** [Property] (Number) */
		priority?: number;

		/** [Method] Returns the value of maxDuration  
		* @returns Number 
		*/
		getMaxDuration?(): number;

		/** [Method] Returns the value of maxOffset  
		* @returns Number 
		*/
		getMaxOffset?(): number;

		/** [Method] Returns the value of minDistance  
		* @returns Number 
		*/
		getMinDistance?(): number;

		/** [Method] Sets the value of maxDuration  
		* @param maxDuration Number The new value. 
		*/
		setMaxDuration?( maxDuration?:number ): void;

		/** [Method] Sets the value of maxOffset  
		* @param maxOffset Number The new value. 
		*/
		setMaxOffset?( maxOffset?:number ): void;

		/** [Method] Sets the value of minDistance  
		* @param minDistance Number The new value. 
		*/
		setMinDistance?( minDistance?:number ): void;

	}

}

declare module Ext.event.gesture {
	export interface ITap extends Ext.event.gesture.ISingleTouch {
		/** [Config Option] (Number) */
		moveDistance?: number;
		/** [Property] (Number) */
		priority?: number;

		/** [Method] Returns the value of moveDistance  
		* @returns Number 
		*/
		getMoveDistance?(): number;

		/** [Method] Sets the value of moveDistance  
		* @param moveDistance Number The new value. 
		*/
		setMoveDistance?( moveDistance?:number ): void;

	}

}

declare module Ext.event.publisher {
	export interface IDom extends Ext.event.publisher.IPublisher {
		/** [Property] (Array) */
		handledDomEvents?: any[];

		/** [Method]  */
		destroy?(): void;

		/** [Method] Registers all handledEvents in the Ext event publisher Publisher publishersByEvent map  */
		registerEvents?(): void;

		/** [Method] Resets the internal state of the Dom publisher  */
		reset?(): void;

	}

}

declare module Ext.event.publisher {
	export interface IElementPaint extends Ext.event.publisher.IPublisher {
		/** [Property] (Array) */
		handledEvents?: any[];

	}

}

declare module Ext.event.publisher {
	export interface IElementSize extends Ext.event.publisher.IPublisher {
		/** [Property] (Array) */
		handledEvents?: any[];

	}

}

declare module Ext.event.publisher {
	export interface IFocus extends Ext.event.publisher.IDom {
		/** [Property] (Array) */
		handledDomEvents?: any[];

		/** [Property] (Array) */
		handledEvents?: any[];

	}

}

declare module Ext.event.publisher {
	export interface IGesture extends Ext.event.publisher.IDom {
		/** [Property] (Array) */
		handledDomEvents?: any[];

		/** [Property] (Array) */
		handledEvents?: any[];

		/** [Method] Resets the internal state of the Gesture publisher and all of its recognizers  */
		reset?(): void;

	}

}

declare module Ext.event.publisher {
	export interface IMouseEnterLeave extends Ext.event.publisher.IDom {
	}

}

declare module Ext.event.publisher {
	export interface IPublisher extends Ext.IBase {
		/** [Property] (Array) */
		handledEvents?: any[];

		/** [Property] (Object) */
		publishers?: any;

		/** [Property] (Object) */
		publishersByEvent?: any;

		/** [Method]  */
		destroy?(): void;

		/** [Method] Registers all handledEvents in the publishersByEvent map  
		* @param events String[] optional events to register instead of handledEvents. 
		*/
		registerEvents?( events?:string[] ): void;

	}

}

declare module Ext {
	export interface IEvented extends Ext.IBase, Ext.mixin.IObservable {
		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext {
	export interface IEventedBase extends Ext.IBase, Ext.mixin.IObservable {
		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext {
	export interface IEventManager extends Ext.IBase {
	}
	export class EventManager {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Appends an event handler to an element  
		* @param el String/Ext.dom.Element/HTMLElement/Window The html element or id to assign the event handler to. 
		* @param eventName String The name of the event to listen for. May also be an object who's property names are event names. 
		* @param handler Function/String The handler function the event invokes. A String parameter is assumed to be method name in scope object, or Element object if no scope is provided. 
		* @param scope Object The scope (this reference) in which the handler function is executed. Defaults to the Element. 
		* @param options Object An object containing handler configuration properties. This may contain any of the following properties (See Ext.dom.Element.addListener for examples of how to use these options.): 
		*/
		static addListener( el?:any, eventName?:string, handler?:any, scope?:any, options?:any ): void;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Get the id of the element  
		* @param element HTMLElement/Ext.dom.Element The element to get the id for. 
		* @returns String id 
		*/
		static getId( element?:any ): string;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Gets the x coordinate from the event 
		* @param event Object The event 
		* @returns Number The x coordinate 
		*/
		static getPageX( event?:any ): number;

		/** [Method] Gets the x amp y coordinate from the event 
		* @param event Object The event 
		* @returns Number[] The x/y coordinate 
		*/
		static getPageXY( event?:any ): number[];

		/** [Method] Gets the y coordinate from the event 
		* @param event Object The event 
		* @returns Number The y coordinate 
		*/
		static getPageY( event?:any ): number;

		/** [Method] Gets the related target from the event  
		* @param event Object The event 
		* @returns HTMLElement The related target. 
		*/
		static getRelatedTarget( event?:any ): HTMLElement;

		/** [Method] Gets the target of the event  
		* @param event Object The event 
		* @returns HTMLElement target 
		*/
		static getTarget( event?:any ): HTMLElement;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Appends an event handler to an element  
		* @param el String/Ext.dom.Element/HTMLElement/Window The html element or id to assign the event handler to. 
		* @param eventName String The name of the event to listen for. May also be an object who's property names are event names. 
		* @param handler Function/String The handler function the event invokes. A String parameter is assumed to be method name in scope object, or Element object if no scope is provided. 
		* @param scope Object The scope (this reference) in which the handler function is executed. Defaults to the Element. 
		* @param options Object An object containing handler configuration properties. This may contain any of the following properties (See Ext.dom.Element.addListener for examples of how to use these options.): 
		*/
		static on( el?:any, eventName?:string, handler?:any, scope?:any, options?:any ): void;

		/** [Method] Adds a listener to be notified when the browser window is resized and provides resize event buffering 100 millisecon  
		* @param fn Function The handler function the window resize event invokes. 
		* @param scope Object The scope (this reference) in which the handler function executes. Defaults to the browser window. 
		* @param options Boolean Options object as passed to Ext.dom.Element.addListener 
		*/
		static onWindowResize( fn?:any, scope?:any, options?:boolean ): void;

		/** [Method] Adds a listener to be notified when the browser window is unloaded  
		* @param fn Function The handler function the window unload event invokes. 
		* @param scope Object The scope (this reference) in which the handler function executes. Defaults to the browser window. 
		* @param options Boolean Options object as passed to Ext.dom.Element.addListener 
		*/
		static onWindowUnload( fn?:any, scope?:any, options?:boolean ): void;

		/** [Method] Prevents the browsers default handling of the event  
		* @param event Event The event to prevent the default 
		*/
		static preventDefault( event?:Event ): void;

		/** [Method] Recursively removes all previous added listeners from an element and its children  
		* @param el String/Ext.dom.Element/HTMLElement/Window The id or html element from which to remove all event handlers. 
		* @param eventName String The name of the event. 
		*/
		static purgeElement( el?:any, eventName?:string ): void;

		/** [Method] Removes all event handers from an element  
		* @param el String/Ext.dom.Element/HTMLElement/Window The id or html element from which to remove all event handlers. 
		*/
		static removeAll( el?:any ): void;

		/** [Method] Removes an event handler from an element  
		* @param el String/Ext.dom.Element/HTMLElement/Window The id or html element from which to remove the listener. 
		* @param eventName String The name of the event. 
		* @param fn Function The handler function to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object If a scope (this reference) was specified when the listener was added, then this must refer to the same object. 
		*/
		static removeListener( el?:any, eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes the passed window resize listener  
		* @param fn Function The method the event invokes 
		* @param scope Object The scope of handler 
		*/
		static removeResizeListener( fn?:any, scope?:any ): void;

		/** [Method] Removes the passed window unload listener  
		* @param fn Function The method the event invokes 
		* @param scope Object The scope of handler 
		*/
		static removeUnloadListener( fn?:any, scope?:any ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Stop the event preventDefault and stopPropagation  
		* @param event Event The event to stop 
		*/
		static stopEvent( event?:Event ): void;

		/** [Method] Cancels bubbling of the event  
		* @param event Event The event to stop bubbling. 
		*/
		static stopPropagation( event?:Event ): void;

		/** [Method] Removes an event handler from an element  
		* @param el String/Ext.dom.Element/HTMLElement/Window The id or html element from which to remove the listener. 
		* @param eventName String The name of the event. 
		* @param fn Function The handler function to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object If a scope (this reference) was specified when the listener was added, then this must refer to the same object. 
		*/
		static un( el?:any, eventName?:string, fn?:any, scope?:any ): void;

	}

}

declare module Ext {
	export interface IFactory {
		/** [Config Option] (String) */
		aliasPrefix?: string;
		/** [Config Option] (String) */
		defaultProperty?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		instanceProp?: string;
		/** [Config Option] (String) */
		xclass?: string;
		/** [Method] Creates an instance of this class family given configuration options  
		* @param config Object/String The configuration or instance (if an Object) or just the type (if a String) describing the instance to create. 
		* @param defaultType String The type to create if no type is contained in the config. 
		* @returns Object The newly created instance. 
		*/
		create?( config?:any, defaultType?:string ): any;

		/** [Method] Returns an instance of an ID generator based on the ID you pass in  
		* @param id string 
		* @returns Object Ext.data.identifier.* The data identifier 
		*/
		dataIdentifier?( id?:string ): any;

		/** [Method] For example the layout alias family could be defined like this Ext Factory define layout defaultType 
		* @param type String The alias prefix for type (e.g., "layout."). 
		* @param config Object/String An object specifying the config for the Ext.Factory to be created. If a string is passed it is treated as the defaultType. 
		* @returns Function 
		*/
		define?( type?:string, config?:any ): any;

	}

}

declare module Ext {
	export interface IFeature {
	}
	export class Feature {
		/** [Method] Verifies if a browser feature exists or not on the current device  
		* @param name String The feature name to check. 
		* @returns Boolean 
		*/
		static has( name?:string ): boolean;

	}

}

declare module Ext.flash {
	export interface IComponent extends Ext.IComponent {
		/** [Config Option] (String) */
		backgroundColor?: string;
		/** [Config Option] (Boolean) */
		expressInstall?: boolean;
		/** [Config Option] (Object) */
		flashAttributes?: any;
		/** [Config Option] (Object) */
		flashParams?: any;
		/** [Config Option] (Object) */
		flashVars?: any;
		/** [Config Option] (String) */
		flashVersion?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String/Number) */
		swfHeight?: any;
		/** [Config Option] (String/Number) */
		swfWidth?: any;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String) */
		wmode?: string;
		/** [Property] (Ext.dom.Element) */
		swf?: Ext.dom.IElement;

		/** [Property] (String) */
		EXPRESS_INSTALL_URL?: string;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Retrieves the id of the SWF object embed element  */
		getSwfId?(): void;

	}

}

declare module Ext {
	export interface IFlashComponent extends Ext.IComponent {
		/** [Config Option] (String) */
		backgroundColor?: string;
		/** [Config Option] (Boolean) */
		expressInstall?: boolean;
		/** [Config Option] (Object) */
		flashAttributes?: any;
		/** [Config Option] (Object) */
		flashParams?: any;
		/** [Config Option] (Object) */
		flashVars?: any;
		/** [Config Option] (String) */
		flashVersion?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String/Number) */
		swfHeight?: any;
		/** [Config Option] (String/Number) */
		swfWidth?: any;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String) */
		wmode?: string;
		/** [Property] (Ext.dom.Element) */
		swf?: Ext.dom.IElement;

		/** [Property] (String) */
		EXPRESS_INSTALL_URL?: string;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Retrieves the id of the SWF object embed element  */
		getSwfId?(): void;

	}

}

declare module Ext {
	export interface IFocusManager extends Ext.IBase {
	}
	export class FocusManager {
		/** [Property] (Boolean) */
		static enabled: boolean;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext {
	export interface IFocusMgr extends Ext.IBase {
	}
	export class FocusMgr {
		/** [Property] (Boolean) */
		static enabled: boolean;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.form.action {
	export interface IAction extends Ext.IBase {
		/** [Config Option] (Function/String) */
		failure?: any;
		/** [Config Option] (Ext.form.Basic) */
		form?: Ext.form.IBasic;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Object/String) */
		params?: any;
		/** [Config Option] (Boolean) */
		reset?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		submitEmptyText?: boolean;
		/** [Config Option] (Function/String) */
		success?: any;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String) */
		waitMsg?: string;
		/** [Config Option] (String) */
		waitTitle?: string;
		/** [Property] (String) */
		failureType?: string;

		/** [Property] (Object) */
		response?: any;

		/** [Property] (Object) */
		result?: any;

		/** [Property] (String) */
		type?: string;

		/** [Property] (String) */
		CLIENT_INVALID?: string;

		/** [Property] (String) */
		CONNECT_FAILURE?: string;

		/** [Property] (String) */
		LOAD_FAILURE?: string;

		/** [Property] (String) */
		SERVER_INVALID?: string;

		/** [Method] Invokes this action using the current configuration  */
		run?(): void;

	}

}

declare module Ext.form {
	export interface IAction extends Ext.IBase {
		/** [Config Option] (Function/String) */
		failure?: any;
		/** [Config Option] (Ext.form.Basic) */
		form?: Ext.form.IBasic;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Object/String) */
		params?: any;
		/** [Config Option] (Boolean) */
		reset?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		submitEmptyText?: boolean;
		/** [Config Option] (Function/String) */
		success?: any;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String) */
		waitMsg?: string;
		/** [Config Option] (String) */
		waitTitle?: string;
		/** [Property] (String) */
		failureType?: string;

		/** [Property] (Object) */
		response?: any;

		/** [Property] (Object) */
		result?: any;

		/** [Property] (String) */
		type?: string;

		/** [Property] (String) */
		CLIENT_INVALID?: string;

		/** [Property] (String) */
		CONNECT_FAILURE?: string;

		/** [Property] (String) */
		LOAD_FAILURE?: string;

		/** [Property] (String) */
		SERVER_INVALID?: string;

		/** [Method] Invokes this action using the current configuration  */
		run?(): void;

	}

}

declare module Ext.form.action {
	export interface IDirectAction extends Ext.IMixin {
	}

}

declare module Ext.form.action {
	export interface IDirectLoad extends Ext.form.action.ILoad, Ext.form.action.IDirectAction {
		/** [Property] (String) */
		type?: string;

	}

}

declare module Ext.form.action {
	export interface IDirectSubmit extends Ext.form.action.ISubmit, Ext.form.action.IDirectAction {
		/** [Property] (String) */
		type?: string;

	}

}

declare module Ext.form.action {
	export interface ILoad extends Ext.form.action.IAction {
		/** [Property] (String) */
		type?: string;

	}

}

declare module Ext.form.action {
	export interface IStandardSubmit extends Ext.form.action.ISubmit {
		/** [Config Option] (String) */
		target?: string;
	}

}

declare module Ext.form.action {
	export interface ISubmit extends Ext.form.action.IAction {
		/** [Config Option] (Boolean) */
		clientValidation?: boolean;
		/** [Property] (String) */
		type?: string;

		/** [Method] inherit docs */
		run?(): void;

	}

}

declare module Ext.form {
	export interface IBasic extends Ext.util.IObservable {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		errorReader?: any;
		/** [Config Option] (Boolean) */
		jsonSubmit?: boolean;
		/** [Config Option] (Object/Array) */
		metadata?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: boolean;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		waitMsgTarget?: any;
		/** [Config Option] (String) */
		waitTitle?: string;
		/** [Property] (Ext.container.Container) */
		owner?: Ext.container.IContainer;

		/** [Method] Calls Ext applyIf for all field in this form with the passed object  
		* @param obj Object The object to be applied 
		* @returns Ext.form.Basic this 
		*/
		applyIfToFields?( obj?:any ): Ext.form.IBasic;

		/** [Method] Calls Ext apply for all fields in this form with the passed object  
		* @param obj Object The object to be applied 
		* @returns Ext.form.Basic this 
		*/
		applyToFields?( obj?:any ): Ext.form.IBasic;

		/** [Method] Check whether the dirty state of the entire form has changed since it was last checked and if so fire the dirtychang  */
		checkDirty?(): void;

		/** [Method] Check whether the validity of the entire form has changed since it was last checked and if so fire the validitychang  */
		checkValidity?(): void;

		/** [Method] Clears all invalid field messages in this form  
		* @returns Ext.form.Basic this 
		*/
		clearInvalid?(): Ext.form.IBasic;

		/** [Method] Destroys this object  */
		destroy?(): void;

		/** [Method] Performs a predefined action an implementation of Ext form action Action to perform application specific processing  
		* @param action String/Ext.form.action.Action The name of the predefined action type, or instance of Ext.form.action.Action to perform. 
		* @param options Object The options to pass to the Ext.form.action.Action that will get created, if the action argument is a String. All of the config options listed below are supported by both the submit and load actions unless otherwise noted (custom actions could also accept other config options): 
		* @returns Ext.form.Basic this 
		*/
		doAction?( action?:any, options?:any ): Ext.form.IBasic;

		/** [Method] Find a specific Ext form field Field in this form by id or name  
		* @param id String The value to search for (specify either a id or name or hiddenName). 
		* @returns Ext.form.field.Field The first matching field, or null if none was found. 
		*/
		findField?( id?:string ): Ext.form.field.IField;

		/** [Method] Retrieves the fields in the form as a set of key value pairs using their getModelData  method to collect the values  
		* @param dirtyOnly Boolean If true, only fields that are dirty will be included in the result. 
		* @returns Object 
		*/
		getFieldValues?( dirtyOnly?:boolean ): any;

		/** [Method] Return all the Ext form field Field components in the owner container  
		* @returns Ext.util.MixedCollection Collection of the Field objects 
		*/
		getFields?(): Ext.util.IMixedCollection;

		/** [Method] Returns the last Ext data Model instance that was loaded via loadRecord 
		* @returns Ext.data.Model The record 
		*/
		getRecord?(): Ext.data.IModel;

		/** [Method] Retrieves the fields in the form as a set of key value pairs using their getSubmitData  method to collect the values  
		* @param asString Boolean If true, will return the key/value collection as a single URL-encoded param string. 
		* @param dirtyOnly Boolean If true, only fields that are dirty will be included in the result. 
		* @param includeEmptyText Boolean If true, the configured emptyText of empty fields will be used. 
		* @param useDataValues Boolean If true, the getModelData method is used to retrieve values from fields, otherwise the getSubmitData method is used. 
		* @returns String/Object 
		*/
		getValues?( asString?:boolean, dirtyOnly?:boolean, includeEmptyText?:boolean, useDataValues?:boolean ): any;

		/** [Method] Returns true if the form contains any invalid fields  */
		hasInvalidField?(): void;

		/** [Method] Returns true if the form contains a file upload field  
		* @returns Boolean 
		*/
		hasUpload?(): boolean;

		/** [Method] Returns true if any fields in this form have changed from their original values  
		* @returns Boolean 
		*/
		isDirty?(): boolean;

		/** [Method] Returns true if client side validation on the form is successful  
		* @returns Boolean 
		*/
		isValid?(): boolean;

		/** [Method] Shortcut to do a load action  
		* @param options Object The options to pass to the action (see doAction for details) 
		* @returns Ext.form.Basic this 
		*/
		load?( options?:any ): Ext.form.IBasic;

		/** [Method] Loads an Ext data Model into this form by calling setValues with the record data  
		* @param record Ext.data.Model The record to load 
		* @returns Ext.form.Basic this 
		*/
		loadRecord?( record?:Ext.data.IModel ): Ext.form.IBasic;

		/** [Method] This method allows you to mark one or more fields in a form as invalid along with one or more invalid messages per fi  
		* @param errors Object/Object[] The errors param may be in one of two forms: Object[] or Object  Array: An array of Objects with the following keys:  field (String): The name or id of the form field to receive the error message message (String/String[]): The error message or an array of messages Example Array syntax: form.markInvalid([{  field: 'email', // the field name  message: 'Error message' }]); Object: An Object hash with key/value pairs where the key is the field name or field ID and the value is the message or array of messages to display. Example Object syntax: form.markInvalid({  name: 'Err. message',  emailId: ['Error1', 'Error 2'] }); 
		* @returns Ext.form.Basic basicForm The Ext.form.Basic instance 
		*/
		markInvalid?( errors?:any ): Ext.form.IBasic;

		/** [Method] Resets all fields in this form  
		* @param resetRecord Boolean True to unbind any record set by loadRecord 
		* @returns Ext.form.Basic this 
		*/
		reset?( resetRecord?:boolean ): Ext.form.IBasic;

		/** [Method] Set values for fields in this form in bulk  
		* @param values Object/Object[] Either an array in the form: [{id:'clientName', value:'Fred. Olsen Lines'}, {id:'portOfLoading', value:'FXT'}, {id:'portOfDischarge', value:'OSL'} ]  or an object hash of the form: {  clientName: 'Fred. Olsen Lines',  portOfLoading: 'FXT',  portOfDischarge: 'OSL' } 
		* @returns Ext.form.Basic this 
		*/
		setValues?( values?:any ): Ext.form.IBasic;

		/** [Method] Shortcut to do a submit action  
		* @param options Object The options to pass to the action (see doAction for details). 
		* @returns Ext.form.Basic this 
		*/
		submit?( options?:any ): Ext.form.IBasic;

		/** [Method] Persists the values in this form into the passed Ext data Model object in a beginEdit endEdit block  
		* @param record Ext.data.Model The record to edit 
		* @returns Ext.form.Basic this 
		*/
		updateRecord?( record?:Ext.data.IModel ): Ext.form.IBasic;

	}

}

declare module Ext.form {
	export interface IBasicForm extends Ext.util.IObservable {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		errorReader?: any;
		/** [Config Option] (Boolean) */
		jsonSubmit?: boolean;
		/** [Config Option] (Object/Array) */
		metadata?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: boolean;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		waitMsgTarget?: any;
		/** [Config Option] (String) */
		waitTitle?: string;
		/** [Property] (Ext.container.Container) */
		owner?: Ext.container.IContainer;

		/** [Method] Calls Ext applyIf for all field in this form with the passed object  
		* @param obj Object The object to be applied 
		* @returns Ext.form.Basic this 
		*/
		applyIfToFields?( obj?:any ): Ext.form.IBasic;

		/** [Method] Calls Ext apply for all fields in this form with the passed object  
		* @param obj Object The object to be applied 
		* @returns Ext.form.Basic this 
		*/
		applyToFields?( obj?:any ): Ext.form.IBasic;

		/** [Method] Check whether the dirty state of the entire form has changed since it was last checked and if so fire the dirtychang  */
		checkDirty?(): void;

		/** [Method] Check whether the validity of the entire form has changed since it was last checked and if so fire the validitychang  */
		checkValidity?(): void;

		/** [Method] Clears all invalid field messages in this form  
		* @returns Ext.form.Basic this 
		*/
		clearInvalid?(): Ext.form.IBasic;

		/** [Method] Destroys this object  */
		destroy?(): void;

		/** [Method] Performs a predefined action an implementation of Ext form action Action to perform application specific processing  
		* @param action String/Ext.form.action.Action The name of the predefined action type, or instance of Ext.form.action.Action to perform. 
		* @param options Object The options to pass to the Ext.form.action.Action that will get created, if the action argument is a String. All of the config options listed below are supported by both the submit and load actions unless otherwise noted (custom actions could also accept other config options): 
		* @returns Ext.form.Basic this 
		*/
		doAction?( action?:any, options?:any ): Ext.form.IBasic;

		/** [Method] Find a specific Ext form field Field in this form by id or name  
		* @param id String The value to search for (specify either a id or name or hiddenName). 
		* @returns Ext.form.field.Field The first matching field, or null if none was found. 
		*/
		findField?( id?:string ): Ext.form.field.IField;

		/** [Method] Retrieves the fields in the form as a set of key value pairs using their getModelData  method to collect the values  
		* @param dirtyOnly Boolean If true, only fields that are dirty will be included in the result. 
		* @returns Object 
		*/
		getFieldValues?( dirtyOnly?:boolean ): any;

		/** [Method] Return all the Ext form field Field components in the owner container  
		* @returns Ext.util.MixedCollection Collection of the Field objects 
		*/
		getFields?(): Ext.util.IMixedCollection;

		/** [Method] Returns the last Ext data Model instance that was loaded via loadRecord 
		* @returns Ext.data.Model The record 
		*/
		getRecord?(): Ext.data.IModel;

		/** [Method] Retrieves the fields in the form as a set of key value pairs using their getSubmitData  method to collect the values  
		* @param asString Boolean If true, will return the key/value collection as a single URL-encoded param string. 
		* @param dirtyOnly Boolean If true, only fields that are dirty will be included in the result. 
		* @param includeEmptyText Boolean If true, the configured emptyText of empty fields will be used. 
		* @param useDataValues Boolean If true, the getModelData method is used to retrieve values from fields, otherwise the getSubmitData method is used. 
		* @returns String/Object 
		*/
		getValues?( asString?:boolean, dirtyOnly?:boolean, includeEmptyText?:boolean, useDataValues?:boolean ): any;

		/** [Method] Returns true if the form contains any invalid fields  */
		hasInvalidField?(): void;

		/** [Method] Returns true if the form contains a file upload field  
		* @returns Boolean 
		*/
		hasUpload?(): boolean;

		/** [Method] Returns true if any fields in this form have changed from their original values  
		* @returns Boolean 
		*/
		isDirty?(): boolean;

		/** [Method] Returns true if client side validation on the form is successful  
		* @returns Boolean 
		*/
		isValid?(): boolean;

		/** [Method] Shortcut to do a load action  
		* @param options Object The options to pass to the action (see doAction for details) 
		* @returns Ext.form.Basic this 
		*/
		load?( options?:any ): Ext.form.IBasic;

		/** [Method] Loads an Ext data Model into this form by calling setValues with the record data  
		* @param record Ext.data.Model The record to load 
		* @returns Ext.form.Basic this 
		*/
		loadRecord?( record?:Ext.data.IModel ): Ext.form.IBasic;

		/** [Method] This method allows you to mark one or more fields in a form as invalid along with one or more invalid messages per fi  
		* @param errors Object/Object[] The errors param may be in one of two forms: Object[] or Object  Array: An array of Objects with the following keys:  field (String): The name or id of the form field to receive the error message message (String/String[]): The error message or an array of messages Example Array syntax: form.markInvalid([{  field: 'email', // the field name  message: 'Error message' }]); Object: An Object hash with key/value pairs where the key is the field name or field ID and the value is the message or array of messages to display. Example Object syntax: form.markInvalid({  name: 'Err. message',  emailId: ['Error1', 'Error 2'] }); 
		* @returns Ext.form.Basic basicForm The Ext.form.Basic instance 
		*/
		markInvalid?( errors?:any ): Ext.form.IBasic;

		/** [Method] Resets all fields in this form  
		* @param resetRecord Boolean True to unbind any record set by loadRecord 
		* @returns Ext.form.Basic this 
		*/
		reset?( resetRecord?:boolean ): Ext.form.IBasic;

		/** [Method] Set values for fields in this form in bulk  
		* @param values Object/Object[] Either an array in the form: [{id:'clientName', value:'Fred. Olsen Lines'}, {id:'portOfLoading', value:'FXT'}, {id:'portOfDischarge', value:'OSL'} ]  or an object hash of the form: {  clientName: 'Fred. Olsen Lines',  portOfLoading: 'FXT',  portOfDischarge: 'OSL' } 
		* @returns Ext.form.Basic this 
		*/
		setValues?( values?:any ): Ext.form.IBasic;

		/** [Method] Shortcut to do a submit action  
		* @param options Object The options to pass to the action (see doAction for details). 
		* @returns Ext.form.Basic this 
		*/
		submit?( options?:any ): Ext.form.IBasic;

		/** [Method] Persists the values in this form into the passed Ext data Model object in a beginEdit endEdit block  
		* @param record Ext.data.Model The record to edit 
		* @returns Ext.form.Basic this 
		*/
		updateRecord?( record?:Ext.data.IModel ): Ext.form.IBasic;

	}

}

declare module Ext.form {
	export interface ICheckboxGroup extends Ext.form.IFieldContainer, Ext.form.field.IField {
		/** [Config Option] (Boolean) */
		allowBlank?: boolean;
		/** [Config Option] (String) */
		blankText?: string;
		/** [Config Option] (String/Number/Number[]) */
		columns?: any;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Ext.form.field.Checkbox[]/Object[]) */
		items?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
		/** [Method] A utility for grouping a set of modifications which may trigger value changes into a single transaction to prevent e  
		* @param fn Function The function to call with change checks suspended. 
		*/
		batchChanges?( fn?:any ): void;

		/** [Method] Template method before a field is reset  */
		beforeReset?(): void;

		/** [Method] Checks whether the value of the field has changed since the last time it was checked  */
		checkChange?(): void;

		/** [Method] Checks the isDirty state of the field and if it has changed since the last time it was checked fires the dirtychange  */
		checkDirty?(): void;

		/** [Method] Clear any invalid styles messages for this field  */
		clearInvalid?(): void;

		/** [Method] Only relevant if the instance s isFileUpload method returns true  
		* @returns HTMLElement 
		*/
		extractFileInput?(): HTMLElement;

		/** [Method] Returns an Array of all checkboxes in the container which are currently checked 
		* @returns Ext.form.field.Checkbox[] Array of Ext.form.field.Checkbox components 
		*/
		getChecked?(): Ext.form.field.ICheckbox[];

		/** [Method] Runs CheckboxGroup s validations and returns an array of any errors  
		* @returns String[] Array of all validation errors 
		*/
		getErrors?(): string[];

		/** [Method] Don t return any data for the model the form will get the info from the individual checkboxes themselves  
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getModelData?(): any;

		/** [Method] Returns the name attribute of the field  
		* @returns String name The field name 
		*/
		getName?(): string;

		/** [Method] Don t return any data for submit the form will get the info from the individual checkboxes themselves  
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getSubmitData?(): any;

		/** [Method] Returns the value of validation  
		* @returns Boolean/String 
		*/
		getValidation?(): any;

		/** [Method] Returns an object containing the values of all checked checkboxes within the group  */
		getValue?(): void;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Initializes this Field mixin on the current instance  */
		initField?(): void;

		/** [Method] Initializes the field s value based on the initial config  */
		initValue?(): void;

		/** [Method] private override 
		* @returns Boolean True if this field has been changed from its original value (and is not disabled), false otherwise. 
		*/
		isDirty?(): boolean;

		/** [Method] private override  the group value is a complex object compare using object serialization 
		* @param value1 Object 
		* @param value2 Object 
		* @returns Boolean True if the values are equal, false if inequal. 
		*/
		isEqual?( value1?:any, value2?:any ): boolean;

		/** [Method] Returns whether this Field is a file upload field if it returns true forms will use special techniques for submitti  
		* @returns Boolean 
		*/
		isFileUpload?(): boolean;

		/** [Method] Returns whether or not the field value is currently valid by validating the field s current value  
		* @returns Boolean True if the value is valid, else false 
		*/
		isValid?(): boolean;

		/** [Method] Display one or more error messages associated with this field using msgTarget to determine how to display the messag  
		* @param errors String/String[] The validation message(s) to display. 
		*/
		markInvalid?( errors?:any ): void;

		/** [Method] When a checkbox is added to the group monitor it for changes 
		* @param field Object The field being added 
		*/
		onAdd?( field?:any ): void;

		/** [Method] Called when a Ext form Labelable instance is removed from the container s subtree  
		* @param item Object 
		*/
		onRemove?( item?:any ): void;

		/** [Method] Resets the checked state of all checkboxes in the group to their originally loaded values and clears any validation m  */
		reset?(): void;

		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;

		/** [Method] Sets the value of validation  
		* @param validation Boolean/String The new value. 
		*/
		setValidation?( validation?:any ): void;

		/** [Method] Sets the value s of all checkboxes in the group  
		* @param value Object The mapping of checkbox names to values. 
		* @returns Ext.form.CheckboxGroup this 
		*/
		setValue?( value?:any ): Ext.form.ICheckboxGroup;

		/** [Method] Returns whether or not the field value is currently valid by validating the field s current value and fires the vali  
		* @returns Boolean True if the value is valid, else false 
		*/
		validate?(): boolean;

	}

}

declare module Ext.form {
	export interface ICheckboxManager extends Ext.util.IMixedCollection {
	}
	export class CheckboxManager {
		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isMixedCollection: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Boolean) */
		static isSortable: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Adds an item to the collection  
		* @param key String/Object The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter. 
		* @param obj Object The item to add. Note that when adding a value that is iterable, it must be wrapped in brackets, i.e.: c.add([[1, 2]]);  This will be needed for any value that is iterable, i.e., an array, arguments object, HTML collections, etc. 
		* @returns Object The item added. 
		*/
		static add( key?:any, obj?:any ): any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Adds all elements of an Array or an Object to the collection  
		* @param objs Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if allowFunctions has been set to true. 
		*/
		static addAll( objs?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all items from the collection  */
		static clear(): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] Creates a shallow copy of this collection 
		* @returns Ext.util.MixedCollection 
		*/
		static clone(): Ext.util.IMixedCollection;

		/** [Method] Collects unique values of a particular property in this MixedCollection 
		* @param property String The property to collect on 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param allowBlank Boolean Pass true to allow null, undefined or empty string values 
		* @returns Array The unique values 
		*/
		static collect( property?:string, root?:string, allowBlank?:boolean ): any[];

		/** [Method] Returns true if the collection contains the passed Object as an item  
		* @param o Object The Object to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as an item. 
		*/
		static contains( o?:any ): boolean;

		/** [Method] Returns true if the collection contains the passed Object as a key  
		* @param key String The key to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as a key. 
		*/
		static containsKey( key?:string ): boolean;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Executes the specified function once for every item in the collection  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration. 
		*/
		static each( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		static eachKey( fn?:any, scope?:any ): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Filters the objects in this collection by a set of Filters or by a single property value pair with optional paramete  
		* @param property Ext.util.Filter[]/String A property on your objects, or an array of Filter objects 
		* @param value String/RegExp Either string that the property values should start with or a RegExp to test against the property 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		static filter( property?:any, value?:any, anyMatch?:boolean, caseSensitive?:boolean ): Ext.util.IMixedCollection;

		/** [Method] Filter by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		static filterBy( fn?:any, scope?:any ): Ext.util.IMixedCollection;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  */
		static find(): void;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  
		* @param fn Function The selection function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		* @returns Object The first item in the collection which returned true from the selection function, or null if none was found. 
		*/
		static findBy( fn?:any, scope?:any ): any;

		/** [Method] Finds the index of the first matching object in this collection by a specific property value  
		* @param property String The name of a property on your objects. 
		* @param value String/RegExp A string that the property values should start with or a RegExp to test against the property. 
		* @param start Number The index to start searching at. 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Number The matched index or -1 
		*/
		static findIndex( property?:string, value?:any, start?:number, anyMatch?:boolean, caseSensitive?:boolean ): number;

		/** [Method] Find the index of the first matching object in this collection by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @param start Number The index to start searching at. 
		* @returns Number The matched index or -1 
		*/
		static findIndexBy( fn?:any, scope?:any, start?:number ): number;

		/** [Method] Calculates the insertion index of the new item based upon the comparison function passed or the current sort order  
		* @param newItem Object The new object to find the insertion position of. 
		* @param sorterFn Function The function to sort by. This is the same as the sorting function passed to sortBy. It accepts 2 items from this MixedCollection, and returns -1 0, or 1 depending on the relative sort positions of the 2 compared items. If omitted, a function generated from the currently defined set of sorters will be used. 
		* @returns Number The insertion point to add the new item into this MixedCollection at using insert 
		*/
		static findInsertionIndex( newItem?:any, sorterFn?:any ): number;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the first item in the collection  
		* @returns Object the first item in the collection.. 
		*/
		static first(): any;

		/** [Method] Returns a comparator function which compares two items and returns 1 0 or 1 depending on the currently defined set  */
		static generateComparator(): void;

		/** [Method] Returns the item associated with the passed key OR index  
		* @param key String/Number The key or index of the item. 
		* @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null. 
		*/
		static get( key?:any ): any;

		/** [Method] Returns the item at the specified index  
		* @param index Number The index of the item. 
		* @returns Object The item at the specified index. 
		*/
		static getAt( index?:number ): any;

		/** [Method] Returns the item associated with the passed key  
		* @param key String/Number The key of the item. 
		* @returns Object The item associated with the passed key. 
		*/
		static getByKey( key?:any ): any;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the number of items in the collection  
		* @returns Number the number of items in the collection. 
		*/
		static getCount(): number;

		/** [Method] Gets the first sorter from the sorters collection excluding any groupers that may be in place 
		* @returns Ext.util.Sorter The sorter, null if none exist 
		*/
		static getFirstSorter(): Ext.util.ISorter;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] A function which will be called passing a newly added object when the object is added without a separate id  
		* @param item Object The item for which to find the key. 
		* @returns Object The key for the passed item. 
		*/
		static getKey( item?:any ): any;

		/** [Method] Returns a range of items in this collection 
		* @param startIndex Number The starting index. Defaults to 0. 
		* @param endIndex Number The ending index. Defaults to the last item. 
		* @returns Array An array of items 
		*/
		static getRange( startIndex?:number, endIndex?:number ): any[];

		/** [Method] Returns the number of Sorters which apply to this Sortable  */
		static getSorterCount(): void;

		/** [Method] Returns the value of sorters  
		* @returns Ext.util.Sorter[]/Object[] 
		*/
		static getSorters(): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Returns index within the collection of the passed Object  
		* @param o Object The item to find the index of. 
		* @returns Number index of the item. Returns -1 if not found. 
		*/
		static indexOf( o?:any ): number;

		/** [Method] Returns index within the collection of the passed key  
		* @param key String The key to find the index of. 
		* @returns Number index of the key. 
		*/
		static indexOfKey( key?:string ): number;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Inserts an item at the specified index in the collection  
		* @param index Number The index to insert the item at. 
		* @param key String/Object/String[]/Object[] The key to associate with the new item, or the item itself. May also be an array of either to insert multiple items at once. 
		* @param o Object/Object[] If the second parameter was a key, the new item. May also be an array to insert multiple items at once. 
		* @returns Object The item inserted or an array of items inserted. 
		*/
		static insert( index?:number, key?:any, o?:any ): any;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Returns the last item in the collection  
		* @returns Object the last item in the collection.. 
		*/
		static last(): any;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Remove an item from the collection  
		* @param o Object The item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		static remove( o?:any ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Remove all items in the collection  
		* @param items Array An array of items to be removed. 
		* @returns Ext.util.MixedCollection this object 
		*/
		static removeAll( items?:any[] ): Ext.util.IMixedCollection;

		/** [Method] Remove an item from a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		static removeAt( index?:number ): any;

		/** [Method] Removes an item associated with the passed key fom the collection  
		* @param key String The key of the item to remove. If null is passed, all objects which yielded no key from the configured getKey function are removed. 
		* @returns Object Only returned if removing at a specified key. The item removed or false if no item was removed. 
		*/
		static removeAtKey( key?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Remove a range of items starting at a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @param removeCount Number The nuber of items to remove beginning at the specified index. 
		* @returns Object The last item removed or false if no item was removed. 
		*/
		static removeRange( index?:number, removeCount?:number ): any;

		/** [Method] Reorders each of the items based on a mapping from old index to new index  
		* @param mapping Object Mapping from old item index to new item index 
		*/
		static reorder( mapping?:any ): void;

		/** [Method] Replaces an item in the collection  
		* @param key String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter. 
		* @param o Object {Object} o (optional) If the first parameter passed was a key, the item to associate with that key. 
		* @returns Object The new item. 
		*/
		static replace( key?:string, o?:any ): any;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Sets the value of sorters  
		* @param sorters Ext.util.Sorter[]/Object[] The new value. 
		*/
		static setSorters( sorters?:any ): void;

		/** [Method] Updates the sorters collection and triggers sorting of this Sortable  
		* @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations. 
		* @param direction String The overall direction to sort the data by. 
		* @param insertionPosition String Where to put the new sorter in the collection of sorters. This may take the following values:  replace : This means that the new sorter(s) becomes the sole sorter set for this Sortable. This is the most useful call mode  to programatically sort by multiple fields. prepend : This means that the new sorters are inserted as the primary sorters, unchanged, and the sorter list length must be controlled by the developer. multi : This is mainly useful for implementing intuitive "Sort by this" user interfaces such as the GridPanel's column sorting UI. This mode is only supported when passing a property name and a direction. This means that the new sorter is becomes the primary sorter. If the sorter was already the primary sorter, the direction  of sort is toggled if no direction parameter is specified. The number of sorters maintained is limited by the multiSortLimit configuration. append : This means that the new sorter becomes the last sorter.  
		* @returns Ext.util.Sorter[] The new sorters. 
		*/
		static sort( sorters?:any, direction?:string, insertionPosition?:string ): Ext.util.ISorter[];

		/** [Method] Sorts the collection by a single sorter function 
		* @param sorterFn Function The function to sort by 
		*/
		static sortBy( sorterFn?:any ): void;

		/** [Method] Sorts this collection by keys  
		* @param direction String 'ASC' or 'DESC'. Defaults to 'ASC'. 
		* @param fn Function Comparison function that defines the sort order. Defaults to sorting by case insensitive string. 
		*/
		static sortByKey( direction?:string, fn?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Collects all of the values of the given property and returns their sum 
		* @param property String The property to sum by 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param start Number The record index to start at 
		* @param end Number The record index to end at 
		* @returns Number The total 
		*/
		static sum( property?:string, root?:string, start?:number, end?:number ): number;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Change the key for an existing item in the collection  
		* @param oldKey Object The old key 
		* @param newKey Object The new key 
		*/
		static updateKey( oldKey?:any, newKey?:any ): void;

	}

}

declare module Ext.form.field {
	export interface IBase extends Ext.IComponent, Ext.form.ILabelable, Ext.form.field.IField {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number) */
		checkChangeBuffer?: number;
		/** [Config Option] (String[]) */
		checkChangeEvents?: string[];
		/** [Config Option] (String) */
		dirtyCls?: string;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		fieldStyle?: string;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		inputAttrTpl?: any;
		/** [Config Option] (String) */
		inputId?: string;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (String) */
		readOnlyCls?: string;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Boolean) */
		validateOnBlur?: boolean;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (Ext.dom.Element) */
		inputEl?: Ext.dom.IElement;

		/** [Property] (Boolean) */
		maskOnDisable?: boolean;

		/** [Method] A utility for grouping a set of modifications which may trigger value changes into a single transaction to prevent e  
		* @param fn Function The function to call with change checks suspended. 
		*/
		batchChanges?( fn?:any ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Template method before a field is reset  */
		beforeReset?(): void;

		/** [Method] Checks whether the value of the field has changed since the last time it was checked  */
		checkChange?(): void;

		/** [Method] Checks the isDirty state of the field and if it has changed since the last time it was checked fires the dirtychange  */
		checkDirty?(): void;

		/** [Method] Clear any invalid styles messages for this field  */
		clearInvalid?(): void;

		/** [Method] Called when focus leaves this input field  */
		completeEdit?(): void;

		/** [Method] Only relevant if the instance s isFileUpload method returns true  
		* @returns HTMLElement 
		*/
		extractFileInput?(): HTMLElement;

		/** [Method] Gets the active error message for this component if any  
		* @returns String The active error message on the component; if there is no error, an empty string is returned. 
		*/
		getActiveError?(): string;

		/** [Method] Gets an Array of any active error messages currently applied to the field  
		* @returns String[] The active error messages on the component; if there are no errors, an empty Array is returned. 
		*/
		getActiveErrors?(): string[];

		/** [Method] Returns the value of childEls  
		* @returns Array 
		*/
		getChildEls?(): any[];

		/** [Method] Runs this field s validators and returns an array of error messages for any validation failures  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All error messages for this field; an empty Array if none. 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the label for the field  
		* @returns String The configured field label, or empty string if not defined 
		*/
		getFieldLabel?(): string;

		/** [Method] Returns the input id for this field  
		* @returns string 
		*/
		getInputId?(): string;

		/** [Method] Generates the arguments for the field decorations rendering template  
		* @param data Object optional object to use as the base data object. If provided, this method will add properties to the base object instead of creating a new one. 
		* @returns Object The template arguments 
		*/
		getLabelableRenderData?( data?:any ): any;

		/** [Method] Returns the value s that should be saved to the Ext data Model instance for this field when Ext form Basic updateRe  
		* @param includeEmptyText Object 
		* @param isSubmitting Object 
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getModelData?( includeEmptyText?:any, isSubmitting?:any ): any;

		/** [Method] Returns the name attribute of the field  
		* @returns String name The field name 
		*/
		getName?(): string;

		/** [Method] Returns the raw value of the field without performing any normalization conversion or validation  
		* @returns String value The raw String value of the field 
		*/
		getRawValue?(): string;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Gets the markup to be inserted into the outer template s bodyEl  
		* @param fieldData Object 
		* @returns string 
		*/
		getSubTplMarkup?( fieldData?:any ): string;

		/** [Method] private override to use getSubmitValue  as a convenience 
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getSubmitData?(): any;

		/** [Method] Returns the value that would be included in a standard form submit for this field  
		* @returns String The value to be submitted, or null. 
		*/
		getSubmitValue?(): string;

		/** [Method] Returns the value of validation  
		* @returns Boolean/String 
		*/
		getValidation?(): any;

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] Tells whether the field currently has an active error message  
		* @returns Boolean 
		*/
		hasActiveError?(): boolean;

		/** [Method] Checks if the field has a visible label 
		* @returns Boolean True if the field has a visible label 
		*/
		hasVisibleLabel?(): boolean;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] Initializes this Field mixin on the current instance  */
		initField?(): void;

		/** [Method] Performs initialization of this mixin  */
		initLabelable?(): void;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] Initializes the field s value based on the initial config  */
		initValue?(): void;

		/** [Method] Returns true if the value of this Field has been changed from its originalValue  
		* @returns Boolean True if this field has been changed from its original value (and is not disabled), false otherwise. 
		*/
		isDirty?(): boolean;

		/** [Method] Returns whether two field values are logically equal  
		* @param value1 Object The first value to compare 
		* @param value2 Object The second value to compare 
		* @returns Boolean True if the values are equal, false if inequal. 
		*/
		isEqual?( value1?:any, value2?:any ): boolean;

		/** [Method] Returns whether this Field is a file upload field if it returns true forms will use special techniques for submitti  
		* @returns Boolean 
		*/
		isFileUpload?(): boolean;

		/** [Method] Returns whether or not the field value is currently valid by validating the processed raw value of the field  
		* @returns Boolean True if the value is valid, else false 
		*/
		isValid?(): boolean;

		/** [Method] Display one or more error messages associated with this field using msgTarget to determine how to display the messag  
		* @param errors String/String[] The validation message(s) to display. 
		*/
		markInvalid?( errors?:any ): void;

		/** [Method] Invoked when this component has first achieved size  */
		onBoxReady?(): void;

		/** [Method] private */
		onDisable?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] private */
		onRender?(): void;

		/** [Method] Performs any necessary manipulation of a raw field value to prepare it for conversion and or validation for instance  
		* @param value Object The unprocessed string value 
		* @returns Object The processed string value 
		*/
		processRawValue?( value?:any ): any;

		/** [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type  
		* @param rawValue Object 
		* @returns Object The converted value. 
		*/
		rawToValue?( rawValue?:any ): any;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;

		/** [Method] Sets the active error message to the given string  
		* @param msg String The error message 
		*/
		setActiveError?( msg?:string ): void;

		/** [Method] Set the active error message to an Array of error messages  
		* @param errors String[] The error messages 
		*/
		setActiveErrors?( errors?:string[] ): void;

		/** [Method] Sets the value of childEls  
		* @param childEls Array The new value. 
		*/
		setChildEls?( childEls?:any[] ): void;

		/** [Method] Applies a set of default configuration values to this Labelable instance  
		* @param defaults Object The defaults to apply to the object. 
		*/
		setFieldDefaults?( defaults?:any ): void;

		/** [Method] Set the label of this field  
		* @param label String The new label. The labelSeparator will be automatically appended to the label string. 
		*/
		setFieldLabel?( label?:string ): void;

		/** [Method] Set the CSS style of the field input element  
		* @param style String/Object/Function The style(s) to apply. Should be a valid argument to Ext.dom.Element.applyStyles. 
		*/
		setFieldStyle?( style?:any ): void;

		/** [Method] Sets the field s raw value directly bypassing value conversion change detection and validation  
		* @param value Object The value to set 
		* @returns Object value The field value that is set 
		*/
		setRawValue?( value?:any ): any;

		/** [Method] Sets the read only state of this field  
		* @param readOnly Boolean Whether the field should be read only. 
		*/
		setReadOnly?( readOnly?:boolean ): void;

		/** [Method] Sets the value of validation  
		* @param validation Boolean/String The new value. 
		*/
		setValidation?( validation?:any ): void;

		/** [Method] Sets a data value into the field and runs the change detection and validation  
		* @param value Object The value to set 
		* @returns Ext.form.field.Field this 
		*/
		setValue?( value?:any ): Ext.form.field.IField;

		/** [Method] Transform the raw value before it is set 
		* @param value Object The value 
		* @returns Object The value to set 
		*/
		transformRawValue?( value?:any ): any;

		/** [Method] Returns the trimmed label by slicing off the label separator character  
		* @returns String The trimmed field label, or empty string if not defined 
		*/
		trimLabelSeparator?(): string;

		/** [Method] Clears the active error message s */
		unsetActiveError?(): void;

		/** [Method] Returns whether or not the field value is currently valid by validating the field s current value and fires the vali  
		* @returns Boolean True if the value is valid, else false 
		*/
		validate?(): boolean;

		/** [Method] Uses getErrors to build an array of validation errors  
		* @param value Object The value to validate 
		* @returns Boolean True if all validations passed, false if one or more failed 
		*/
		validateValue?( value?:any ): boolean;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object The mixed-type value to convert to the raw representation. 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form {
	export interface IField extends Ext.IComponent, Ext.form.ILabelable, Ext.form.field.IField {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number) */
		checkChangeBuffer?: number;
		/** [Config Option] (String[]) */
		checkChangeEvents?: string[];
		/** [Config Option] (String) */
		dirtyCls?: string;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		fieldStyle?: string;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		inputAttrTpl?: any;
		/** [Config Option] (String) */
		inputId?: string;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (String) */
		readOnlyCls?: string;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Boolean) */
		validateOnBlur?: boolean;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (Ext.dom.Element) */
		inputEl?: Ext.dom.IElement;

		/** [Property] (Boolean) */
		maskOnDisable?: boolean;

		/** [Method] A utility for grouping a set of modifications which may trigger value changes into a single transaction to prevent e  
		* @param fn Function The function to call with change checks suspended. 
		*/
		batchChanges?( fn?:any ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Template method before a field is reset  */
		beforeReset?(): void;

		/** [Method] Checks whether the value of the field has changed since the last time it was checked  */
		checkChange?(): void;

		/** [Method] Checks the isDirty state of the field and if it has changed since the last time it was checked fires the dirtychange  */
		checkDirty?(): void;

		/** [Method] Clear any invalid styles messages for this field  */
		clearInvalid?(): void;

		/** [Method] Called when focus leaves this input field  */
		completeEdit?(): void;

		/** [Method] Only relevant if the instance s isFileUpload method returns true  
		* @returns HTMLElement 
		*/
		extractFileInput?(): HTMLElement;

		/** [Method] Gets the active error message for this component if any  
		* @returns String The active error message on the component; if there is no error, an empty string is returned. 
		*/
		getActiveError?(): string;

		/** [Method] Gets an Array of any active error messages currently applied to the field  
		* @returns String[] The active error messages on the component; if there are no errors, an empty Array is returned. 
		*/
		getActiveErrors?(): string[];

		/** [Method] Returns the value of childEls  
		* @returns Array 
		*/
		getChildEls?(): any[];

		/** [Method] Runs this field s validators and returns an array of error messages for any validation failures  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All error messages for this field; an empty Array if none. 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the label for the field  
		* @returns String The configured field label, or empty string if not defined 
		*/
		getFieldLabel?(): string;

		/** [Method] Returns the input id for this field  
		* @returns string 
		*/
		getInputId?(): string;

		/** [Method] Generates the arguments for the field decorations rendering template  
		* @param data Object optional object to use as the base data object. If provided, this method will add properties to the base object instead of creating a new one. 
		* @returns Object The template arguments 
		*/
		getLabelableRenderData?( data?:any ): any;

		/** [Method] Returns the value s that should be saved to the Ext data Model instance for this field when Ext form Basic updateRe  
		* @param includeEmptyText Object 
		* @param isSubmitting Object 
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getModelData?( includeEmptyText?:any, isSubmitting?:any ): any;

		/** [Method] Returns the name attribute of the field  
		* @returns String name The field name 
		*/
		getName?(): string;

		/** [Method] Returns the raw value of the field without performing any normalization conversion or validation  
		* @returns String value The raw String value of the field 
		*/
		getRawValue?(): string;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Gets the markup to be inserted into the outer template s bodyEl  
		* @param fieldData Object 
		* @returns string 
		*/
		getSubTplMarkup?( fieldData?:any ): string;

		/** [Method] private override to use getSubmitValue  as a convenience 
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getSubmitData?(): any;

		/** [Method] Returns the value that would be included in a standard form submit for this field  
		* @returns String The value to be submitted, or null. 
		*/
		getSubmitValue?(): string;

		/** [Method] Returns the value of validation  
		* @returns Boolean/String 
		*/
		getValidation?(): any;

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] Tells whether the field currently has an active error message  
		* @returns Boolean 
		*/
		hasActiveError?(): boolean;

		/** [Method] Checks if the field has a visible label 
		* @returns Boolean True if the field has a visible label 
		*/
		hasVisibleLabel?(): boolean;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] Initializes this Field mixin on the current instance  */
		initField?(): void;

		/** [Method] Performs initialization of this mixin  */
		initLabelable?(): void;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] Initializes the field s value based on the initial config  */
		initValue?(): void;

		/** [Method] Returns true if the value of this Field has been changed from its originalValue  
		* @returns Boolean True if this field has been changed from its original value (and is not disabled), false otherwise. 
		*/
		isDirty?(): boolean;

		/** [Method] Returns whether two field values are logically equal  
		* @param value1 Object The first value to compare 
		* @param value2 Object The second value to compare 
		* @returns Boolean True if the values are equal, false if inequal. 
		*/
		isEqual?( value1?:any, value2?:any ): boolean;

		/** [Method] Returns whether this Field is a file upload field if it returns true forms will use special techniques for submitti  
		* @returns Boolean 
		*/
		isFileUpload?(): boolean;

		/** [Method] Returns whether or not the field value is currently valid by validating the processed raw value of the field  
		* @returns Boolean True if the value is valid, else false 
		*/
		isValid?(): boolean;

		/** [Method] Display one or more error messages associated with this field using msgTarget to determine how to display the messag  
		* @param errors String/String[] The validation message(s) to display. 
		*/
		markInvalid?( errors?:any ): void;

		/** [Method] Invoked when this component has first achieved size  */
		onBoxReady?(): void;

		/** [Method] private */
		onDisable?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] private */
		onRender?(): void;

		/** [Method] Performs any necessary manipulation of a raw field value to prepare it for conversion and or validation for instance  
		* @param value Object The unprocessed string value 
		* @returns Object The processed string value 
		*/
		processRawValue?( value?:any ): any;

		/** [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type  
		* @param rawValue Object 
		* @returns Object The converted value. 
		*/
		rawToValue?( rawValue?:any ): any;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;

		/** [Method] Sets the active error message to the given string  
		* @param msg String The error message 
		*/
		setActiveError?( msg?:string ): void;

		/** [Method] Set the active error message to an Array of error messages  
		* @param errors String[] The error messages 
		*/
		setActiveErrors?( errors?:string[] ): void;

		/** [Method] Sets the value of childEls  
		* @param childEls Array The new value. 
		*/
		setChildEls?( childEls?:any[] ): void;

		/** [Method] Applies a set of default configuration values to this Labelable instance  
		* @param defaults Object The defaults to apply to the object. 
		*/
		setFieldDefaults?( defaults?:any ): void;

		/** [Method] Set the label of this field  
		* @param label String The new label. The labelSeparator will be automatically appended to the label string. 
		*/
		setFieldLabel?( label?:string ): void;

		/** [Method] Set the CSS style of the field input element  
		* @param style String/Object/Function The style(s) to apply. Should be a valid argument to Ext.dom.Element.applyStyles. 
		*/
		setFieldStyle?( style?:any ): void;

		/** [Method] Sets the field s raw value directly bypassing value conversion change detection and validation  
		* @param value Object The value to set 
		* @returns Object value The field value that is set 
		*/
		setRawValue?( value?:any ): any;

		/** [Method] Sets the read only state of this field  
		* @param readOnly Boolean Whether the field should be read only. 
		*/
		setReadOnly?( readOnly?:boolean ): void;

		/** [Method] Sets the value of validation  
		* @param validation Boolean/String The new value. 
		*/
		setValidation?( validation?:any ): void;

		/** [Method] Sets a data value into the field and runs the change detection and validation  
		* @param value Object The value to set 
		* @returns Ext.form.field.Field this 
		*/
		setValue?( value?:any ): Ext.form.field.IField;

		/** [Method] Transform the raw value before it is set 
		* @param value Object The value 
		* @returns Object The value to set 
		*/
		transformRawValue?( value?:any ): any;

		/** [Method] Returns the trimmed label by slicing off the label separator character  
		* @returns String The trimmed field label, or empty string if not defined 
		*/
		trimLabelSeparator?(): string;

		/** [Method] Clears the active error message s */
		unsetActiveError?(): void;

		/** [Method] Returns whether or not the field value is currently valid by validating the field s current value and fires the vali  
		* @returns Boolean True if the value is valid, else false 
		*/
		validate?(): boolean;

		/** [Method] Uses getErrors to build an array of validation errors  
		* @param value Object The value to validate 
		* @returns Boolean True if all validations passed, false if one or more failed 
		*/
		validateValue?( value?:any ): boolean;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object The mixed-type value to convert to the raw representation. 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form {
	export interface IBaseField extends Ext.IComponent, Ext.form.ILabelable, Ext.form.field.IField {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number) */
		checkChangeBuffer?: number;
		/** [Config Option] (String[]) */
		checkChangeEvents?: string[];
		/** [Config Option] (String) */
		dirtyCls?: string;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		fieldStyle?: string;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		inputAttrTpl?: any;
		/** [Config Option] (String) */
		inputId?: string;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (String) */
		readOnlyCls?: string;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Boolean) */
		validateOnBlur?: boolean;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (Ext.dom.Element) */
		inputEl?: Ext.dom.IElement;

		/** [Property] (Boolean) */
		maskOnDisable?: boolean;

		/** [Method] A utility for grouping a set of modifications which may trigger value changes into a single transaction to prevent e  
		* @param fn Function The function to call with change checks suspended. 
		*/
		batchChanges?( fn?:any ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Template method before a field is reset  */
		beforeReset?(): void;

		/** [Method] Checks whether the value of the field has changed since the last time it was checked  */
		checkChange?(): void;

		/** [Method] Checks the isDirty state of the field and if it has changed since the last time it was checked fires the dirtychange  */
		checkDirty?(): void;

		/** [Method] Clear any invalid styles messages for this field  */
		clearInvalid?(): void;

		/** [Method] Called when focus leaves this input field  */
		completeEdit?(): void;

		/** [Method] Only relevant if the instance s isFileUpload method returns true  
		* @returns HTMLElement 
		*/
		extractFileInput?(): HTMLElement;

		/** [Method] Gets the active error message for this component if any  
		* @returns String The active error message on the component; if there is no error, an empty string is returned. 
		*/
		getActiveError?(): string;

		/** [Method] Gets an Array of any active error messages currently applied to the field  
		* @returns String[] The active error messages on the component; if there are no errors, an empty Array is returned. 
		*/
		getActiveErrors?(): string[];

		/** [Method] Returns the value of childEls  
		* @returns Array 
		*/
		getChildEls?(): any[];

		/** [Method] Runs this field s validators and returns an array of error messages for any validation failures  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All error messages for this field; an empty Array if none. 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the label for the field  
		* @returns String The configured field label, or empty string if not defined 
		*/
		getFieldLabel?(): string;

		/** [Method] Returns the input id for this field  
		* @returns string 
		*/
		getInputId?(): string;

		/** [Method] Generates the arguments for the field decorations rendering template  
		* @param data Object optional object to use as the base data object. If provided, this method will add properties to the base object instead of creating a new one. 
		* @returns Object The template arguments 
		*/
		getLabelableRenderData?( data?:any ): any;

		/** [Method] Returns the value s that should be saved to the Ext data Model instance for this field when Ext form Basic updateRe  
		* @param includeEmptyText Object 
		* @param isSubmitting Object 
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getModelData?( includeEmptyText?:any, isSubmitting?:any ): any;

		/** [Method] Returns the name attribute of the field  
		* @returns String name The field name 
		*/
		getName?(): string;

		/** [Method] Returns the raw value of the field without performing any normalization conversion or validation  
		* @returns String value The raw String value of the field 
		*/
		getRawValue?(): string;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Gets the markup to be inserted into the outer template s bodyEl  
		* @param fieldData Object 
		* @returns string 
		*/
		getSubTplMarkup?( fieldData?:any ): string;

		/** [Method] private override to use getSubmitValue  as a convenience 
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getSubmitData?(): any;

		/** [Method] Returns the value that would be included in a standard form submit for this field  
		* @returns String The value to be submitted, or null. 
		*/
		getSubmitValue?(): string;

		/** [Method] Returns the value of validation  
		* @returns Boolean/String 
		*/
		getValidation?(): any;

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] Tells whether the field currently has an active error message  
		* @returns Boolean 
		*/
		hasActiveError?(): boolean;

		/** [Method] Checks if the field has a visible label 
		* @returns Boolean True if the field has a visible label 
		*/
		hasVisibleLabel?(): boolean;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] Initializes this Field mixin on the current instance  */
		initField?(): void;

		/** [Method] Performs initialization of this mixin  */
		initLabelable?(): void;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] Initializes the field s value based on the initial config  */
		initValue?(): void;

		/** [Method] Returns true if the value of this Field has been changed from its originalValue  
		* @returns Boolean True if this field has been changed from its original value (and is not disabled), false otherwise. 
		*/
		isDirty?(): boolean;

		/** [Method] Returns whether two field values are logically equal  
		* @param value1 Object The first value to compare 
		* @param value2 Object The second value to compare 
		* @returns Boolean True if the values are equal, false if inequal. 
		*/
		isEqual?( value1?:any, value2?:any ): boolean;

		/** [Method] Returns whether this Field is a file upload field if it returns true forms will use special techniques for submitti  
		* @returns Boolean 
		*/
		isFileUpload?(): boolean;

		/** [Method] Returns whether or not the field value is currently valid by validating the processed raw value of the field  
		* @returns Boolean True if the value is valid, else false 
		*/
		isValid?(): boolean;

		/** [Method] Display one or more error messages associated with this field using msgTarget to determine how to display the messag  
		* @param errors String/String[] The validation message(s) to display. 
		*/
		markInvalid?( errors?:any ): void;

		/** [Method] Invoked when this component has first achieved size  */
		onBoxReady?(): void;

		/** [Method] private */
		onDisable?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] private */
		onRender?(): void;

		/** [Method] Performs any necessary manipulation of a raw field value to prepare it for conversion and or validation for instance  
		* @param value Object The unprocessed string value 
		* @returns Object The processed string value 
		*/
		processRawValue?( value?:any ): any;

		/** [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type  
		* @param rawValue Object 
		* @returns Object The converted value. 
		*/
		rawToValue?( rawValue?:any ): any;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;

		/** [Method] Sets the active error message to the given string  
		* @param msg String The error message 
		*/
		setActiveError?( msg?:string ): void;

		/** [Method] Set the active error message to an Array of error messages  
		* @param errors String[] The error messages 
		*/
		setActiveErrors?( errors?:string[] ): void;

		/** [Method] Sets the value of childEls  
		* @param childEls Array The new value. 
		*/
		setChildEls?( childEls?:any[] ): void;

		/** [Method] Applies a set of default configuration values to this Labelable instance  
		* @param defaults Object The defaults to apply to the object. 
		*/
		setFieldDefaults?( defaults?:any ): void;

		/** [Method] Set the label of this field  
		* @param label String The new label. The labelSeparator will be automatically appended to the label string. 
		*/
		setFieldLabel?( label?:string ): void;

		/** [Method] Set the CSS style of the field input element  
		* @param style String/Object/Function The style(s) to apply. Should be a valid argument to Ext.dom.Element.applyStyles. 
		*/
		setFieldStyle?( style?:any ): void;

		/** [Method] Sets the field s raw value directly bypassing value conversion change detection and validation  
		* @param value Object The value to set 
		* @returns Object value The field value that is set 
		*/
		setRawValue?( value?:any ): any;

		/** [Method] Sets the read only state of this field  
		* @param readOnly Boolean Whether the field should be read only. 
		*/
		setReadOnly?( readOnly?:boolean ): void;

		/** [Method] Sets the value of validation  
		* @param validation Boolean/String The new value. 
		*/
		setValidation?( validation?:any ): void;

		/** [Method] Sets a data value into the field and runs the change detection and validation  
		* @param value Object The value to set 
		* @returns Ext.form.field.Field this 
		*/
		setValue?( value?:any ): Ext.form.field.IField;

		/** [Method] Transform the raw value before it is set 
		* @param value Object The value 
		* @returns Object The value to set 
		*/
		transformRawValue?( value?:any ): any;

		/** [Method] Returns the trimmed label by slicing off the label separator character  
		* @returns String The trimmed field label, or empty string if not defined 
		*/
		trimLabelSeparator?(): string;

		/** [Method] Clears the active error message s */
		unsetActiveError?(): void;

		/** [Method] Returns whether or not the field value is currently valid by validating the field s current value and fires the vali  
		* @returns Boolean True if the value is valid, else false 
		*/
		validate?(): boolean;

		/** [Method] Uses getErrors to build an array of validation errors  
		* @param value Object The value to validate 
		* @returns Boolean True if all validations passed, false if one or more failed 
		*/
		validateValue?( value?:any ): boolean;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object The mixed-type value to convert to the raw representation. 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form.field {
	export interface ICheckbox extends Ext.form.field.IBase {
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterBoxLabelTextTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterBoxLabelTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeBoxLabelTextTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeBoxLabelTpl?: any;
		/** [Config Option] (String) */
		boxLabel?: string;
		/** [Config Option] (String) */
		boxLabelAlign?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		boxLabelAttrTpl?: any;
		/** [Config Option] (String) */
		boxLabelCls?: string;
		/** [Config Option] (String[]) */
		checkChangeEvents?: string[];
		/** [Config Option] (Boolean) */
		checked?: boolean;
		/** [Config Option] (String) */
		checkedCls?: string;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		inputValue?: string;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		uncheckedValue?: string;
		/** [Property] (Ext.dom.Element) */
		boxLabelEl?: Ext.dom.IElement;

		/** [Property] (Object) */
		originalValue?: any;

		/** [Method] inherit docs */
		beforeDestroy?(): void;

		/** [Method] Returns the checked state of the checkbox  
		* @returns string True if checked, else false 
		*/
		getRawValue?(): string;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms  
		* @returns String If checked the inputValue is returned; otherwise the uncheckedValue (or null if the latter is not configured). 
		*/
		getSubmitValue?(): string;

		/** [Method] Returns the checked state of the checkbox  
		* @returns Boolean True if checked, else false 
		*/
		getValue?(): boolean;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] Initializes the field s value based on the initial config  */
		initValue?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] Resets the field s originalValue property so it matches the current value  
		* @param fromBoxInGroup Object 
		*/
		resetOriginalValue?( fromBoxInGroup?:any ): void;

		/** [Method] Sets the boxLabel for this checkbox  
		* @param boxLabel String The new label 
		*/
		setBoxLabel?( boxLabel?:string ): void;

		/** [Method] Sets the checked state of the checkbox  
		* @param value Boolean/String/Number The following values will check the checkbox: true, 'true', '1', 1, or 'on', as well as a String that matches the inputValue. Any other value will un-check the checkbox. 
		* @returns Boolean the new checked state of the checkbox 
		*/
		setRawValue?( value?:any ): boolean;

		/** [Method] Sets the read only state of this field  
		* @param readOnly Object 
		*/
		setReadOnly?( readOnly?:any ): void;

		/** [Method] Sets the checked state of the checkbox and invokes change detection  
		* @param checked Array/Boolean/String The following values will check the checkbox: true, 'true', '1', or 'on', as well as a String that matches the inputValue. Any other value will un-check the checkbox. You may also pass an array of string values. If an array of strings is passed, all checkboxes in the group with a matched name will be checked. The checkbox will be unchecked if a corresponding value is not found in the array. 
		* @returns Ext.form.field.Checkbox this 
		*/
		setValue?( checked?:any ): Ext.form.field.ICheckbox;

	}

}

declare module Ext.form {
	export interface ICheckbox extends Ext.form.field.IBase {
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterBoxLabelTextTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterBoxLabelTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeBoxLabelTextTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeBoxLabelTpl?: any;
		/** [Config Option] (String) */
		boxLabel?: string;
		/** [Config Option] (String) */
		boxLabelAlign?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		boxLabelAttrTpl?: any;
		/** [Config Option] (String) */
		boxLabelCls?: string;
		/** [Config Option] (String[]) */
		checkChangeEvents?: string[];
		/** [Config Option] (Boolean) */
		checked?: boolean;
		/** [Config Option] (String) */
		checkedCls?: string;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		inputValue?: string;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		uncheckedValue?: string;
		/** [Property] (Ext.dom.Element) */
		boxLabelEl?: Ext.dom.IElement;

		/** [Property] (Object) */
		originalValue?: any;

		/** [Method] inherit docs */
		beforeDestroy?(): void;

		/** [Method] Returns the checked state of the checkbox  
		* @returns string True if checked, else false 
		*/
		getRawValue?(): string;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms  
		* @returns String If checked the inputValue is returned; otherwise the uncheckedValue (or null if the latter is not configured). 
		*/
		getSubmitValue?(): string;

		/** [Method] Returns the checked state of the checkbox  
		* @returns Boolean True if checked, else false 
		*/
		getValue?(): boolean;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] Initializes the field s value based on the initial config  */
		initValue?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] Resets the field s originalValue property so it matches the current value  
		* @param fromBoxInGroup Object 
		*/
		resetOriginalValue?( fromBoxInGroup?:any ): void;

		/** [Method] Sets the boxLabel for this checkbox  
		* @param boxLabel String The new label 
		*/
		setBoxLabel?( boxLabel?:string ): void;

		/** [Method] Sets the checked state of the checkbox  
		* @param value Boolean/String/Number The following values will check the checkbox: true, 'true', '1', 1, or 'on', as well as a String that matches the inputValue. Any other value will un-check the checkbox. 
		* @returns Boolean the new checked state of the checkbox 
		*/
		setRawValue?( value?:any ): boolean;

		/** [Method] Sets the read only state of this field  
		* @param readOnly Object 
		*/
		setReadOnly?( readOnly?:any ): void;

		/** [Method] Sets the checked state of the checkbox and invokes change detection  
		* @param checked Array/Boolean/String The following values will check the checkbox: true, 'true', '1', or 'on', as well as a String that matches the inputValue. Any other value will un-check the checkbox. You may also pass an array of string values. If an array of strings is passed, all checkboxes in the group with a matched name will be checked. The checkbox will be unchecked if a corresponding value is not found in the array. 
		* @returns Ext.form.field.Checkbox this 
		*/
		setValue?( checked?:any ): Ext.form.field.ICheckbox;

	}

}

declare module Ext.form.field {
	export interface IComboBox extends Ext.form.field.IPicker, Ext.util.IStoreHolder {
		/** [Config Option] (String) */
		allQuery?: string;
		/** [Config Option] (Boolean) */
		anyMatch?: boolean;
		/** [Config Option] (Boolean) */
		autoLoadOnValue?: boolean;
		/** [Config Option] (Boolean) */
		autoSelect?: boolean;
		/** [Config Option] (Boolean) */
		caseSensitive?: boolean;
		/** [Config Option] (Boolean) */
		clearFilterOnBlur?: boolean;
		/** [Config Option] (Boolean) */
		collapseOnSelect?: boolean;
		/** [Config Option] (Object) */
		defaultListConfig?: any;
		/** [Config Option] (String) */
		delimiter?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		displayTpl?: any;
		/** [Config Option] (Boolean) */
		enableRegEx?: boolean;
		/** [Config Option] (Boolean) */
		forceSelection?: boolean;
		/** [Config Option] (Boolean) */
		growToLongestValue?: boolean;
		/** [Config Option] (String) */
		hiddenName?: string;
		/** [Config Option] (Object) */
		listConfig?: any;
		/** [Config Option] (Number) */
		minChars?: number;
		/** [Config Option] (Boolean) */
		multiSelect?: boolean;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (Boolean) */
		pinList?: boolean;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Boolean) */
		queryCaching?: boolean;
		/** [Config Option] (Number) */
		queryDelay?: number;
		/** [Config Option] (String) */
		queryMode?: string;
		/** [Config Option] (String) */
		queryParam?: string;
		/** [Config Option] (Boolean) */
		selectOnTab?: boolean;
		/** [Config Option] (Ext.data.Model) */
		selection?: Ext.data.IModel;
		/** [Config Option] (Ext.data.Store/String/Array/Object) */
		store?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		transform?: any;
		/** [Config Option] (Boolean) */
		transformInPlace?: boolean;
		/** [Config Option] (String) */
		triggerAction?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Boolean) */
		typeAhead?: boolean;
		/** [Config Option] (Number) */
		typeAheadDelay?: number;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Config Option] (String) */
		valueNotFoundText?: string;
		/** [Property] (String) */
		lastQuery?: string;

		/** [Method] Adds a value or values to the current value of the field 
		* @param value Mixed The value or values to add to the current value, see setValue 
		*/
		addValue?( value?:any ): void;

		/** [Method] A method called when the filtering caused by the doQuery call is complete and the store has been either filtered loca  
		* @param queryPlan Object An object containing details about the query was executed. 
		*/
		afterQuery?( queryPlan?:any ): void;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] A method which may modify aspects of how the store is to be filtered if queryMode is local  of loaded if queryMod  
		* @param queryPlan Object An object containing details about the query to be executed. 
		*/
		beforeQuery?( queryPlan?:any ): void;

		/** [Method] Template method before a field is reset  */
		beforeReset?(): void;

		/** [Method] Binds a store to this instance  
		* @param store Ext.data.AbstractStore/String The store to bind or ID of the store. When no store given (or when null or undefined passed), unbinds the existing store. 
		* @param preventFilter Boolean true to prevent any active filter from being activated on the newly bound store. This is only valid when used with queryMode 'local'. 
		*/
		bindStore?( store?:any, preventFilter?:boolean ): void;

		/** [Method] Binds listeners for this component to the store  
		* @param store Ext.data.AbstractStore The store to bind to 
		*/
		bindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

		/** [Method] Clears any value currently set in the ComboBox  */
		clearValue?(): void;

		/** [Method] Called when focus leaves this input field  
		* @param e Object 
		*/
		completeEdit?( e?:any ): void;

		/** [Method] Creates and returns the component to be used as this field s picker  */
		createPicker?(): void;

		/** [Method] Executes a query to filter the dropdown list  
		* @param queryString String The string to use to filter available items by matching against the configured valueField. 
		* @param forceAll Boolean true to force the query to execute even if there are currently fewer characters in the field than the minimum specified by the minChars config option. It also clears any filter previously saved in the current store. 
		* @param rawQuery Boolean Pass as true if the raw typed value is being used as the query string. This causes the resulting store load to leave the raw value undisturbed. 
		* @returns Boolean true if the query was permitted to run, false if it was cancelled by a beforequery handler. 
		*/
		doQuery?( queryString?:string, forceAll?:boolean, rawQuery?:boolean ): boolean;

		/** [Method] Finds the record by searching for a specific field value combination  
		* @param field String The name of the field to test. 
		* @param value Object The value to match the field against. 
		* @returns Ext.data.Model The matched record or false. 
		*/
		findRecord?( field?:string, value?:any ): Ext.data.IModel;

		/** [Method] Finds the record by searching values in the displayField  
		* @param value Object The value to match the field against. 
		* @returns Ext.data.Model The matched record or false. 
		*/
		findRecordByDisplay?( value?:any ): Ext.data.IModel;

		/** [Method] Finds the record by searching values in the valueField  
		* @param value Object The value to match the field against. 
		* @returns Ext.data.Model The matched record or false. 
		*/
		findRecordByValue?( value?:any ): Ext.data.IModel;

		/** [Method] Returns the value of delimiter  
		* @returns String 
		*/
		getDelimiter?(): string;

		/** [Method] Returns the value of displayField  
		* @returns String 
		*/
		getDisplayField?(): string;

		/** [Method] Returns the value of displayTpl  
		* @returns String/String[]/Ext.XTemplate 
		*/
		getDisplayTpl?(): any;

		/** [Method] Returns the Ext util FilterCollection  
		* @param autoCreate Object Pass false to disable auto-creation of the collection. 
		* @returns Ext.util.FilterCollection The collection of filters. 
		*/
		getFilters?( autoCreate?:any ): Ext.util.IFilterCollection;

		/** [Method] Gets data for each record to be used for constructing the display value with the displayTpl  
		* @param record Ext.data.Model The record. 
		* @returns Object The data to be passed for each record to the displayTpl. 
		*/
		getRecordDisplayData?( record?:Ext.data.IModel ): any;

		/** [Method] Returns the combobox s selection  
		* @returns Ext.data.Model The selected record 
		*/
		getSelection?(): Ext.data.IModel;

		/** [Method] Gets the current store instance  
		* @returns Ext.data.AbstractStore The store, null if one does not exist. 
		*/
		getStore?(): Ext.data.IAbstractStore;

		/** [Method] Gets the listeners to bind to a new store  
		* @param store Object 
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?( store?:any ): any;

		/** [Method] Gets the markup to be inserted into the outer template s bodyEl  
		* @param fieldData Object 
		* @returns string 
		*/
		getSubTplMarkup?( fieldData?:any ): string;

		/** [Method] Returns the value that would be included in a standard form submit for this field  
		* @returns String The value to be submitted, or null. 
		*/
		getSubmitValue?(): string;

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] Returns the value of valueNotFoundText  
		* @returns String 
		*/
		getValueNotFoundText?(): string;

		/** [Method] The picker the dropdown must have its zIndex managed by the same ZIndexManager which is providing the zIndex of our  */
		onAdded?(): void;

		/** [Method] Template method it is called when a new store is bound to the current instance  
		* @param store Object 
		* @param initial Object 
		*/
		onBindStore?( store?:any, initial?:any ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Handles the trigger click by default toggles between expanding and collapsing the picker component  */
		onTriggerClick?(): void;

		/** [Method] Template method it is called when an existing store is unbound from the current instance  */
		onUnbindStore?(): void;

		/** [Method] Selects an item by a Model or by a key value  
		* @param r Object 
		*/
		select?( r?:any ): void;

		/** [Method] Sets the value of delimiter  
		* @param delimiter String The new value. 
		*/
		setDelimiter?( delimiter?:string ): void;

		/** [Method] Sets the value of displayField  
		* @param displayField String The new value. 
		*/
		setDisplayField?( displayField?:string ): void;

		/** [Method] Sets the value of displayTpl  
		* @param displayTpl String/String[]/Ext.XTemplate The new value. 
		*/
		setDisplayTpl?( displayTpl?:any ): void;

		/** [Method] Sets the value of filters  
		* @param filters Object The new value. 
		*/
		setFilters?( filters?:any ): void;

		/** [Method] Sets the field s raw value directly bypassing value conversion change detection and validation  
		* @param rawValue Object 
		* @returns Object value The field value that is set 
		*/
		setRawValue?( rawValue?:any ): any;

		/** [Method] Sets the value of selection  
		* @param selection Ext.data.Model The new value. 
		*/
		setSelection?( selection?:Ext.data.IModel ): void;

		/** [Method] Sets the store to the specified store  
		* @param store Object 
		*/
		setStore?( store?:any ): void;

		/** [Method] Sets the specified value s into the field  
		* @param value String/String[] The value(s) to be set. Can be either a single String or Ext.data.Model, or an Array of Strings or Models. 
		* @returns Ext.form.field.Field this 
		*/
		setValue?( value?:any ): Ext.form.field.IField;

		/** [Method] Sets the value of valueNotFoundText  
		* @param valueNotFoundText String The new value. 
		*/
		setValueNotFoundText?( valueNotFoundText?:string ): void;

		/** [Method] Unbinds listeners from this component to the store  
		* @param store Ext.data.AbstractStore The store to unbind from 
		*/
		unbindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

	}

}

declare module Ext.form {
	export interface IComboBox extends Ext.form.field.IPicker, Ext.util.IStoreHolder {
		/** [Config Option] (String) */
		allQuery?: string;
		/** [Config Option] (Boolean) */
		anyMatch?: boolean;
		/** [Config Option] (Boolean) */
		autoLoadOnValue?: boolean;
		/** [Config Option] (Boolean) */
		autoSelect?: boolean;
		/** [Config Option] (Boolean) */
		caseSensitive?: boolean;
		/** [Config Option] (Boolean) */
		clearFilterOnBlur?: boolean;
		/** [Config Option] (Boolean) */
		collapseOnSelect?: boolean;
		/** [Config Option] (Object) */
		defaultListConfig?: any;
		/** [Config Option] (String) */
		delimiter?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		displayTpl?: any;
		/** [Config Option] (Boolean) */
		enableRegEx?: boolean;
		/** [Config Option] (Boolean) */
		forceSelection?: boolean;
		/** [Config Option] (Boolean) */
		growToLongestValue?: boolean;
		/** [Config Option] (String) */
		hiddenName?: string;
		/** [Config Option] (Object) */
		listConfig?: any;
		/** [Config Option] (Number) */
		minChars?: number;
		/** [Config Option] (Boolean) */
		multiSelect?: boolean;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (Boolean) */
		pinList?: boolean;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Boolean) */
		queryCaching?: boolean;
		/** [Config Option] (Number) */
		queryDelay?: number;
		/** [Config Option] (String) */
		queryMode?: string;
		/** [Config Option] (String) */
		queryParam?: string;
		/** [Config Option] (Boolean) */
		selectOnTab?: boolean;
		/** [Config Option] (Ext.data.Model) */
		selection?: Ext.data.IModel;
		/** [Config Option] (Ext.data.Store/String/Array/Object) */
		store?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		transform?: any;
		/** [Config Option] (Boolean) */
		transformInPlace?: boolean;
		/** [Config Option] (String) */
		triggerAction?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Boolean) */
		typeAhead?: boolean;
		/** [Config Option] (Number) */
		typeAheadDelay?: number;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Config Option] (String) */
		valueNotFoundText?: string;
		/** [Property] (String) */
		lastQuery?: string;

		/** [Method] Adds a value or values to the current value of the field 
		* @param value Mixed The value or values to add to the current value, see setValue 
		*/
		addValue?( value?:any ): void;

		/** [Method] A method called when the filtering caused by the doQuery call is complete and the store has been either filtered loca  
		* @param queryPlan Object An object containing details about the query was executed. 
		*/
		afterQuery?( queryPlan?:any ): void;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] A method which may modify aspects of how the store is to be filtered if queryMode is local  of loaded if queryMod  
		* @param queryPlan Object An object containing details about the query to be executed. 
		*/
		beforeQuery?( queryPlan?:any ): void;

		/** [Method] Template method before a field is reset  */
		beforeReset?(): void;

		/** [Method] Binds a store to this instance  
		* @param store Ext.data.AbstractStore/String The store to bind or ID of the store. When no store given (or when null or undefined passed), unbinds the existing store. 
		* @param preventFilter Boolean true to prevent any active filter from being activated on the newly bound store. This is only valid when used with queryMode 'local'. 
		*/
		bindStore?( store?:any, preventFilter?:boolean ): void;

		/** [Method] Binds listeners for this component to the store  
		* @param store Ext.data.AbstractStore The store to bind to 
		*/
		bindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

		/** [Method] Clears any value currently set in the ComboBox  */
		clearValue?(): void;

		/** [Method] Called when focus leaves this input field  
		* @param e Object 
		*/
		completeEdit?( e?:any ): void;

		/** [Method] Creates and returns the component to be used as this field s picker  */
		createPicker?(): void;

		/** [Method] Executes a query to filter the dropdown list  
		* @param queryString String The string to use to filter available items by matching against the configured valueField. 
		* @param forceAll Boolean true to force the query to execute even if there are currently fewer characters in the field than the minimum specified by the minChars config option. It also clears any filter previously saved in the current store. 
		* @param rawQuery Boolean Pass as true if the raw typed value is being used as the query string. This causes the resulting store load to leave the raw value undisturbed. 
		* @returns Boolean true if the query was permitted to run, false if it was cancelled by a beforequery handler. 
		*/
		doQuery?( queryString?:string, forceAll?:boolean, rawQuery?:boolean ): boolean;

		/** [Method] Finds the record by searching for a specific field value combination  
		* @param field String The name of the field to test. 
		* @param value Object The value to match the field against. 
		* @returns Ext.data.Model The matched record or false. 
		*/
		findRecord?( field?:string, value?:any ): Ext.data.IModel;

		/** [Method] Finds the record by searching values in the displayField  
		* @param value Object The value to match the field against. 
		* @returns Ext.data.Model The matched record or false. 
		*/
		findRecordByDisplay?( value?:any ): Ext.data.IModel;

		/** [Method] Finds the record by searching values in the valueField  
		* @param value Object The value to match the field against. 
		* @returns Ext.data.Model The matched record or false. 
		*/
		findRecordByValue?( value?:any ): Ext.data.IModel;

		/** [Method] Returns the value of delimiter  
		* @returns String 
		*/
		getDelimiter?(): string;

		/** [Method] Returns the value of displayField  
		* @returns String 
		*/
		getDisplayField?(): string;

		/** [Method] Returns the value of displayTpl  
		* @returns String/String[]/Ext.XTemplate 
		*/
		getDisplayTpl?(): any;

		/** [Method] Returns the Ext util FilterCollection  
		* @param autoCreate Object Pass false to disable auto-creation of the collection. 
		* @returns Ext.util.FilterCollection The collection of filters. 
		*/
		getFilters?( autoCreate?:any ): Ext.util.IFilterCollection;

		/** [Method] Gets data for each record to be used for constructing the display value with the displayTpl  
		* @param record Ext.data.Model The record. 
		* @returns Object The data to be passed for each record to the displayTpl. 
		*/
		getRecordDisplayData?( record?:Ext.data.IModel ): any;

		/** [Method] Returns the combobox s selection  
		* @returns Ext.data.Model The selected record 
		*/
		getSelection?(): Ext.data.IModel;

		/** [Method] Gets the current store instance  
		* @returns Ext.data.AbstractStore The store, null if one does not exist. 
		*/
		getStore?(): Ext.data.IAbstractStore;

		/** [Method] Gets the listeners to bind to a new store  
		* @param store Object 
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?( store?:any ): any;

		/** [Method] Gets the markup to be inserted into the outer template s bodyEl  
		* @param fieldData Object 
		* @returns string 
		*/
		getSubTplMarkup?( fieldData?:any ): string;

		/** [Method] Returns the value that would be included in a standard form submit for this field  
		* @returns String The value to be submitted, or null. 
		*/
		getSubmitValue?(): string;

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] Returns the value of valueNotFoundText  
		* @returns String 
		*/
		getValueNotFoundText?(): string;

		/** [Method] The picker the dropdown must have its zIndex managed by the same ZIndexManager which is providing the zIndex of our  */
		onAdded?(): void;

		/** [Method] Template method it is called when a new store is bound to the current instance  
		* @param store Object 
		* @param initial Object 
		*/
		onBindStore?( store?:any, initial?:any ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Handles the trigger click by default toggles between expanding and collapsing the picker component  */
		onTriggerClick?(): void;

		/** [Method] Template method it is called when an existing store is unbound from the current instance  */
		onUnbindStore?(): void;

		/** [Method] Selects an item by a Model or by a key value  
		* @param r Object 
		*/
		select?( r?:any ): void;

		/** [Method] Sets the value of delimiter  
		* @param delimiter String The new value. 
		*/
		setDelimiter?( delimiter?:string ): void;

		/** [Method] Sets the value of displayField  
		* @param displayField String The new value. 
		*/
		setDisplayField?( displayField?:string ): void;

		/** [Method] Sets the value of displayTpl  
		* @param displayTpl String/String[]/Ext.XTemplate The new value. 
		*/
		setDisplayTpl?( displayTpl?:any ): void;

		/** [Method] Sets the value of filters  
		* @param filters Object The new value. 
		*/
		setFilters?( filters?:any ): void;

		/** [Method] Sets the field s raw value directly bypassing value conversion change detection and validation  
		* @param rawValue Object 
		* @returns Object value The field value that is set 
		*/
		setRawValue?( rawValue?:any ): any;

		/** [Method] Sets the value of selection  
		* @param selection Ext.data.Model The new value. 
		*/
		setSelection?( selection?:Ext.data.IModel ): void;

		/** [Method] Sets the store to the specified store  
		* @param store Object 
		*/
		setStore?( store?:any ): void;

		/** [Method] Sets the specified value s into the field  
		* @param value String/String[] The value(s) to be set. Can be either a single String or Ext.data.Model, or an Array of Strings or Models. 
		* @returns Ext.form.field.Field this 
		*/
		setValue?( value?:any ): Ext.form.field.IField;

		/** [Method] Sets the value of valueNotFoundText  
		* @param valueNotFoundText String The new value. 
		*/
		setValueNotFoundText?( valueNotFoundText?:string ): void;

		/** [Method] Unbinds listeners from this component to the store  
		* @param store Ext.data.AbstractStore The store to unbind from 
		*/
		unbindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

	}

}

declare module Ext.form.field {
	export interface IDate extends Ext.form.field.IPicker {
		/** [Config Option] (String) */
		altFormats?: string;
		/** [Config Option] (String[]) */
		disabledDates?: string[];
		/** [Config Option] (String) */
		disabledDatesText?: string;
		/** [Config Option] (Number[]) */
		disabledDays?: number[];
		/** [Config Option] (String) */
		disabledDaysText?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (Boolean) */
		matchFieldWidth?: boolean;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date/String) */
		maxValue?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Date/String) */
		minValue?: any;
		/** [Config Option] (Boolean) */
		showToday?: boolean;
		/** [Config Option] (Number) */
		startDay?: number;
		/** [Config Option] (String) */
		submitFormat?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (Boolean) */
		useStrict?: boolean;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
		/** [Method] Creates and returns the component to be used as this field s picker  */
		createPicker?(): void;

		/** [Method] Runs all of Date s validations and returns an array of any errors  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All validation errors for this field 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] private */
		initComponent?(): void;

		/** [Method] Initializes the field s value based on the initial config  */
		initValue?(): void;

		/** [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type  
		* @param rawValue Object 
		* @returns Object The converted value. 
		*/
		rawToValue?( rawValue?:any ): any;

		/** [Method] Attempts to parse a given string value using a given date format  
		* @param value String The value to attempt to parse 
		* @param format String A valid date format (see Ext.Date.parse) 
		* @returns Date The parsed Date object, or null if the value could not be successfully parsed. 
		*/
		safeParse?( value?:string, format?:string ): any;

		/** [Method] Replaces any existing disabled dates with new values and refreshes the Date picker  
		* @param disabledDates String[] An array of date strings (see the disabledDates config for details on supported values) used to disable a pattern of dates. 
		*/
		setDisabledDates?( disabledDates?:string[] ): void;

		/** [Method] Replaces any existing disabled days by index 0 6 with new values and refreshes the Date picker  
		* @param disabledDays Number[] An array of disabled day indexes. See the disabledDays config for details on supported values. 
		*/
		setDisabledDays?( disabledDays?:number[] ): void;

		/** [Method] Replaces any existing maxValue with the new value and refreshes the Date picker  
		* @param value Date The maximum date that can be selected 
		*/
		setMaxValue?( value?:any ): void;

		/** [Method] Replaces any existing minValue with the new value and refreshes the Date picker  
		* @param value Date The minimum date that can be selected 
		*/
		setMinValue?( value?:any ): void;

		/** [Method] Sets the value of the date field  
		* @param date String/Date The date or valid date string 
		* @returns Ext.form.field.Date this 
		*/
		setValue?( date?:any ): Ext.form.field.IDate;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form {
	export interface IDateField extends Ext.form.field.IPicker {
		/** [Config Option] (String) */
		altFormats?: string;
		/** [Config Option] (String[]) */
		disabledDates?: string[];
		/** [Config Option] (String) */
		disabledDatesText?: string;
		/** [Config Option] (Number[]) */
		disabledDays?: number[];
		/** [Config Option] (String) */
		disabledDaysText?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (Boolean) */
		matchFieldWidth?: boolean;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date/String) */
		maxValue?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Date/String) */
		minValue?: any;
		/** [Config Option] (Boolean) */
		showToday?: boolean;
		/** [Config Option] (Number) */
		startDay?: number;
		/** [Config Option] (String) */
		submitFormat?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (Boolean) */
		useStrict?: boolean;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
		/** [Method] Creates and returns the component to be used as this field s picker  */
		createPicker?(): void;

		/** [Method] Runs all of Date s validations and returns an array of any errors  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All validation errors for this field 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] private */
		initComponent?(): void;

		/** [Method] Initializes the field s value based on the initial config  */
		initValue?(): void;

		/** [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type  
		* @param rawValue Object 
		* @returns Object The converted value. 
		*/
		rawToValue?( rawValue?:any ): any;

		/** [Method] Attempts to parse a given string value using a given date format  
		* @param value String The value to attempt to parse 
		* @param format String A valid date format (see Ext.Date.parse) 
		* @returns Date The parsed Date object, or null if the value could not be successfully parsed. 
		*/
		safeParse?( value?:string, format?:string ): any;

		/** [Method] Replaces any existing disabled dates with new values and refreshes the Date picker  
		* @param disabledDates String[] An array of date strings (see the disabledDates config for details on supported values) used to disable a pattern of dates. 
		*/
		setDisabledDates?( disabledDates?:string[] ): void;

		/** [Method] Replaces any existing disabled days by index 0 6 with new values and refreshes the Date picker  
		* @param disabledDays Number[] An array of disabled day indexes. See the disabledDays config for details on supported values. 
		*/
		setDisabledDays?( disabledDays?:number[] ): void;

		/** [Method] Replaces any existing maxValue with the new value and refreshes the Date picker  
		* @param value Date The maximum date that can be selected 
		*/
		setMaxValue?( value?:any ): void;

		/** [Method] Replaces any existing minValue with the new value and refreshes the Date picker  
		* @param value Date The minimum date that can be selected 
		*/
		setMinValue?( value?:any ): void;

		/** [Method] Sets the value of the date field  
		* @param date String/Date The date or valid date string 
		* @returns Ext.form.field.Date this 
		*/
		setValue?( date?:any ): Ext.form.field.IDate;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form {
	export interface IDate extends Ext.form.field.IPicker {
		/** [Config Option] (String) */
		altFormats?: string;
		/** [Config Option] (String[]) */
		disabledDates?: string[];
		/** [Config Option] (String) */
		disabledDatesText?: string;
		/** [Config Option] (Number[]) */
		disabledDays?: number[];
		/** [Config Option] (String) */
		disabledDaysText?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (Boolean) */
		matchFieldWidth?: boolean;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date/String) */
		maxValue?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Date/String) */
		minValue?: any;
		/** [Config Option] (Boolean) */
		showToday?: boolean;
		/** [Config Option] (Number) */
		startDay?: number;
		/** [Config Option] (String) */
		submitFormat?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (Boolean) */
		useStrict?: boolean;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
		/** [Method] Creates and returns the component to be used as this field s picker  */
		createPicker?(): void;

		/** [Method] Runs all of Date s validations and returns an array of any errors  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All validation errors for this field 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] private */
		initComponent?(): void;

		/** [Method] Initializes the field s value based on the initial config  */
		initValue?(): void;

		/** [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type  
		* @param rawValue Object 
		* @returns Object The converted value. 
		*/
		rawToValue?( rawValue?:any ): any;

		/** [Method] Attempts to parse a given string value using a given date format  
		* @param value String The value to attempt to parse 
		* @param format String A valid date format (see Ext.Date.parse) 
		* @returns Date The parsed Date object, or null if the value could not be successfully parsed. 
		*/
		safeParse?( value?:string, format?:string ): any;

		/** [Method] Replaces any existing disabled dates with new values and refreshes the Date picker  
		* @param disabledDates String[] An array of date strings (see the disabledDates config for details on supported values) used to disable a pattern of dates. 
		*/
		setDisabledDates?( disabledDates?:string[] ): void;

		/** [Method] Replaces any existing disabled days by index 0 6 with new values and refreshes the Date picker  
		* @param disabledDays Number[] An array of disabled day indexes. See the disabledDays config for details on supported values. 
		*/
		setDisabledDays?( disabledDays?:number[] ): void;

		/** [Method] Replaces any existing maxValue with the new value and refreshes the Date picker  
		* @param value Date The maximum date that can be selected 
		*/
		setMaxValue?( value?:any ): void;

		/** [Method] Replaces any existing minValue with the new value and refreshes the Date picker  
		* @param value Date The minimum date that can be selected 
		*/
		setMinValue?( value?:any ): void;

		/** [Method] Sets the value of the date field  
		* @param date String/Date The date or valid date string 
		* @returns Ext.form.field.Date this 
		*/
		setValue?( date?:any ): Ext.form.field.IDate;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form.field {
	export interface IDisplay extends Ext.form.field.IBase {
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (Boolean) */
		htmlEncode?: boolean;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Method] Returns the raw value of the field without performing any normalization conversion or validation  
		* @returns String value The raw String value of the field 
		*/
		getRawValue?(): string;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] Returns true if the value of this Field has been changed from its originalValue  
		* @returns Boolean True if this field has been changed from its original value (and is not disabled), false otherwise. 
		*/
		isDirty?(): boolean;

		/** [Method] Sets the field s raw value directly bypassing value conversion change detection and validation  
		* @param value Object 
		* @returns Object value The field value that is set 
		*/
		setRawValue?( value?:any ): any;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form {
	export interface IDisplayField extends Ext.form.field.IBase {
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (Boolean) */
		htmlEncode?: boolean;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Method] Returns the raw value of the field without performing any normalization conversion or validation  
		* @returns String value The raw String value of the field 
		*/
		getRawValue?(): string;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] Returns true if the value of this Field has been changed from its originalValue  
		* @returns Boolean True if this field has been changed from its original value (and is not disabled), false otherwise. 
		*/
		isDirty?(): boolean;

		/** [Method] Sets the field s raw value directly bypassing value conversion change detection and validation  
		* @param value Object 
		* @returns Object value The field value that is set 
		*/
		setRawValue?( value?:any ): any;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form {
	export interface IDisplay extends Ext.form.field.IBase {
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (Boolean) */
		htmlEncode?: boolean;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Method] Returns the raw value of the field without performing any normalization conversion or validation  
		* @returns String value The raw String value of the field 
		*/
		getRawValue?(): string;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] Returns true if the value of this Field has been changed from its originalValue  
		* @returns Boolean True if this field has been changed from its original value (and is not disabled), false otherwise. 
		*/
		isDirty?(): boolean;

		/** [Method] Sets the field s raw value directly bypassing value conversion change detection and validation  
		* @param value Object 
		* @returns Object value The field value that is set 
		*/
		setRawValue?( value?:any ): any;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form.field {
	export interface IField extends Ext.IBase {
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
		/** [Config Option] (Boolean) */
		validateOnChange?: boolean;
		/** [Config Option] (Boolean/String) */
		validation?: any;
		/** [Config Option] (Object) */
		value?: any;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
		/** [Property] (Boolean) */
		isFormField?: boolean;

		/** [Property] (Object) */
		originalValue?: any;

		/** [Method] A utility for grouping a set of modifications which may trigger value changes into a single transaction to prevent e  
		* @param fn Function The function to call with change checks suspended. 
		*/
		batchChanges?( fn?:any ): void;

		/** [Method] Template method before a field is reset  */
		beforeReset?(): void;

		/** [Method] Checks whether the value of the field has changed since the last time it was checked  */
		checkChange?(): void;

		/** [Method] Checks the isDirty state of the field and if it has changed since the last time it was checked fires the dirtychange  */
		checkDirty?(): void;

		/** [Method] Clear any invalid styles messages for this field  */
		clearInvalid?(): void;

		/** [Method] Only relevant if the instance s isFileUpload method returns true  
		* @returns HTMLElement 
		*/
		extractFileInput?(): HTMLElement;

		/** [Method] Runs this field s validators and returns an array of error messages for any validation failures  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All error messages for this field; an empty Array if none. 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the value s that should be saved to the Ext data Model instance for this field when Ext form Basic updateRe  
		* @param includeEmptyText Object 
		* @param isSubmitting Object 
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getModelData?( includeEmptyText?:any, isSubmitting?:any ): any;

		/** [Method] Returns the name attribute of the field  
		* @returns String name The field name 
		*/
		getName?(): string;

		/** [Method] Returns the parameter s that would be included in a standard form submit for this field  
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getSubmitData?(): any;

		/** [Method] Returns the value of validation  
		* @returns Boolean/String 
		*/
		getValidation?(): any;

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] Initializes this Field mixin on the current instance  */
		initField?(): void;

		/** [Method] Initializes the field s value based on the initial config  */
		initValue?(): void;

		/** [Method] Returns true if the value of this Field has been changed from its originalValue  
		* @returns Boolean True if this field has been changed from its original value (and is not disabled), false otherwise. 
		*/
		isDirty?(): boolean;

		/** [Method] Returns whether two field values are logically equal  
		* @param value1 Object The first value to compare 
		* @param value2 Object The second value to compare 
		* @returns Boolean True if the values are equal, false if inequal. 
		*/
		isEqual?( value1?:any, value2?:any ): boolean;

		/** [Method] Returns whether this Field is a file upload field if it returns true forms will use special techniques for submitti  
		* @returns Boolean 
		*/
		isFileUpload?(): boolean;

		/** [Method] Returns whether or not the field value is currently valid by validating the field s current value  
		* @returns Boolean True if the value is valid, else false 
		*/
		isValid?(): boolean;

		/** [Method] Display one or more error messages associated with this field using msgTarget to determine how to display the messag  
		* @param errors String/String[] The validation message(s) to display. 
		*/
		markInvalid?( errors?:any ): void;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;

		/** [Method] Sets the value of validation  
		* @param validation Boolean/String The new value. 
		*/
		setValidation?( validation?:any ): void;

		/** [Method] Sets a data value into the field and runs the change detection and validation  
		* @param value Object The value to set 
		* @returns Ext.form.field.Field this 
		*/
		setValue?( value?:any ): Ext.form.field.IField;

		/** [Method] Returns whether or not the field value is currently valid by validating the field s current value and fires the vali  
		* @returns Boolean True if the value is valid, else false 
		*/
		validate?(): boolean;

	}

}

declare module Ext.form.field {
	export interface IFile extends Ext.form.field.IText {
		/** [Config Option] (Object) */
		buttonConfig?: any;
		/** [Config Option] (Number) */
		buttonMargin?: number;
		/** [Config Option] (Boolean) */
		buttonOnly?: boolean;
		/** [Config Option] (String) */
		buttonText?: string;
		/** [Config Option] (Boolean) */
		clearOnSubmit?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Property] (Ext.button.Button) */
		button?: Ext.button.IButton;

		/** [Property] (Ext.dom.Element) */
		fileInputEl?: Ext.dom.IElement;

		/** [Method] Only relevant if the instance s isFileUpload method returns true  
		* @returns HTMLElement 
		*/
		extractFileInput?(): HTMLElement;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Gets the markup to be inserted into the subTplMarkup  */
		getTriggerMarkup?(): void;

		/** [Method] Returns whether this Field is a file upload field if it returns true forms will use special techniques for submitti  
		* @returns Boolean 
		*/
		isFileUpload?(): boolean;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] private */
		onDisable?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Overridden to do nothing 
		* @returns Ext.form.field.Text 
		*/
		setValue?(): Ext.form.field.IText;

	}

}

declare module Ext.form {
	export interface IFileUploadField extends Ext.form.field.IText {
		/** [Config Option] (Object) */
		buttonConfig?: any;
		/** [Config Option] (Number) */
		buttonMargin?: number;
		/** [Config Option] (Boolean) */
		buttonOnly?: boolean;
		/** [Config Option] (String) */
		buttonText?: string;
		/** [Config Option] (Boolean) */
		clearOnSubmit?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Property] (Ext.button.Button) */
		button?: Ext.button.IButton;

		/** [Property] (Ext.dom.Element) */
		fileInputEl?: Ext.dom.IElement;

		/** [Method] Only relevant if the instance s isFileUpload method returns true  
		* @returns HTMLElement 
		*/
		extractFileInput?(): HTMLElement;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Gets the markup to be inserted into the subTplMarkup  */
		getTriggerMarkup?(): void;

		/** [Method] Returns whether this Field is a file upload field if it returns true forms will use special techniques for submitti  
		* @returns Boolean 
		*/
		isFileUpload?(): boolean;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] private */
		onDisable?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Overridden to do nothing 
		* @returns Ext.form.field.Text 
		*/
		setValue?(): Ext.form.field.IText;

	}

}

declare module Ext.ux.form {
	export interface IFileUploadField extends Ext.form.field.IText {
		/** [Config Option] (Object) */
		buttonConfig?: any;
		/** [Config Option] (Number) */
		buttonMargin?: number;
		/** [Config Option] (Boolean) */
		buttonOnly?: boolean;
		/** [Config Option] (String) */
		buttonText?: string;
		/** [Config Option] (Boolean) */
		clearOnSubmit?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Property] (Ext.button.Button) */
		button?: Ext.button.IButton;

		/** [Property] (Ext.dom.Element) */
		fileInputEl?: Ext.dom.IElement;

		/** [Method] Only relevant if the instance s isFileUpload method returns true  
		* @returns HTMLElement 
		*/
		extractFileInput?(): HTMLElement;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Gets the markup to be inserted into the subTplMarkup  */
		getTriggerMarkup?(): void;

		/** [Method] Returns whether this Field is a file upload field if it returns true forms will use special techniques for submitti  
		* @returns Boolean 
		*/
		isFileUpload?(): boolean;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] private */
		onDisable?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Overridden to do nothing 
		* @returns Ext.form.field.Text 
		*/
		setValue?(): Ext.form.field.IText;

	}

}

declare module Ext.form {
	export interface IFile extends Ext.form.field.IText {
		/** [Config Option] (Object) */
		buttonConfig?: any;
		/** [Config Option] (Number) */
		buttonMargin?: number;
		/** [Config Option] (Boolean) */
		buttonOnly?: boolean;
		/** [Config Option] (String) */
		buttonText?: string;
		/** [Config Option] (Boolean) */
		clearOnSubmit?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Property] (Ext.button.Button) */
		button?: Ext.button.IButton;

		/** [Property] (Ext.dom.Element) */
		fileInputEl?: Ext.dom.IElement;

		/** [Method] Only relevant if the instance s isFileUpload method returns true  
		* @returns HTMLElement 
		*/
		extractFileInput?(): HTMLElement;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Gets the markup to be inserted into the subTplMarkup  */
		getTriggerMarkup?(): void;

		/** [Method] Returns whether this Field is a file upload field if it returns true forms will use special techniques for submitti  
		* @returns Boolean 
		*/
		isFileUpload?(): boolean;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] private */
		onDisable?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Overridden to do nothing 
		* @returns Ext.form.field.Text 
		*/
		setValue?(): Ext.form.field.IText;

	}

}

declare module Ext.form.field {
	export interface IFileButton extends Ext.button.IButton {
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		preventDefault?: boolean;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] This method returns an object which provides substitution parameters for the XTemplate used to create this Button s D  
		* @returns Object Substitution data for a Template. The default implementation which provides data for the default template returns an Object containing the following properties: 
		*/
		getTemplateArgs?(): any;

		/** [Method] Allows addition of behavior to the disable operation  */
		onDisable?(): void;

		/** [Method] Allows addition of behavior to the enable operation  */
		onEnable?(): void;

	}

}

declare module Ext.form.field {
	export interface IHidden extends Ext.form.field.IBase {
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (Boolean) */
		hideLabel?: boolean;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Method] Clear any invalid styles messages for this field  */
		clearInvalid?(): void;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] These are all private overrides */
		initEvents?(): void;

		/** [Method] Display one or more error messages associated with this field using msgTarget to determine how to display the messag  */
		markInvalid?(): void;

		/** [Method] Sets the height of the component  
		* @returns Ext.Component this 
		*/
		setHeight?(): Ext.IComponent;

		/** [Method] Sets the page XY position of the component  
		* @returns Ext.Component this 
		*/
		setPagePosition?(): Ext.IComponent;

		/** [Method] Sets the left and top of the component  
		* @returns Ext.Component this 
		*/
		setPosition?(): Ext.IComponent;

		/** [Method] Sets the width and height of this Component  
		* @returns Ext.Component this 
		*/
		setSize?(): Ext.IComponent;

		/** [Method] Sets the width of the component  
		* @returns Ext.Component this 
		*/
		setWidth?(): Ext.IComponent;

	}

}

declare module Ext.form {
	export interface IHidden extends Ext.form.field.IBase {
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (Boolean) */
		hideLabel?: boolean;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Method] Clear any invalid styles messages for this field  */
		clearInvalid?(): void;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] These are all private overrides */
		initEvents?(): void;

		/** [Method] Display one or more error messages associated with this field using msgTarget to determine how to display the messag  */
		markInvalid?(): void;

		/** [Method] Sets the height of the component  
		* @returns Ext.Component this 
		*/
		setHeight?(): Ext.IComponent;

		/** [Method] Sets the page XY position of the component  
		* @returns Ext.Component this 
		*/
		setPagePosition?(): Ext.IComponent;

		/** [Method] Sets the left and top of the component  
		* @returns Ext.Component this 
		*/
		setPosition?(): Ext.IComponent;

		/** [Method] Sets the width and height of this Component  
		* @returns Ext.Component this 
		*/
		setSize?(): Ext.IComponent;

		/** [Method] Sets the width of the component  
		* @returns Ext.Component this 
		*/
		setWidth?(): Ext.IComponent;

	}

}

declare module Ext.form.field {
	export interface IHtmlEditor extends Ext.form.IFieldContainer, Ext.form.field.IField {
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterIFrameTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterTextAreaTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeIFrameTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeTextAreaTpl?: any;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		createLinkText?: string;
		/** [Config Option] (String) */
		defaultButtonUI?: string;
		/** [Config Option] (String) */
		defaultLinkValue?: string;
		/** [Config Option] (String) */
		defaultValue?: string;
		/** [Config Option] (Boolean) */
		enableAlignments?: boolean;
		/** [Config Option] (Boolean) */
		enableColors?: boolean;
		/** [Config Option] (Boolean) */
		enableFont?: boolean;
		/** [Config Option] (Boolean) */
		enableFontSize?: boolean;
		/** [Config Option] (Boolean) */
		enableFormat?: boolean;
		/** [Config Option] (Boolean) */
		enableLinks?: boolean;
		/** [Config Option] (Boolean) */
		enableLists?: boolean;
		/** [Config Option] (Boolean) */
		enableSourceEdit?: boolean;
		/** [Config Option] (String[]) */
		fontFamilies?: string[];
		/** [Config Option] (String/Array/Ext.XTemplate) */
		iframeAttrTpl?: any;
		/** [Property] (Object) */
		buttonTips?: any;

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (Boolean) */
		maskOnDisable?: boolean;

		/** [Method] A utility for grouping a set of modifications which may trigger value changes into a single transaction to prevent e  
		* @param fn Function The function to call with change checks suspended. 
		*/
		batchChanges?( fn?:any ): void;

		/** [Method] Template method before a field is reset  */
		beforeReset?(): void;

		/** [Method] Checks whether the value of the field has changed since the last time it was checked  */
		checkChange?(): void;

		/** [Method] Checks the isDirty state of the field and if it has changed since the last time it was checked fires the dirtychange  */
		checkDirty?(): void;

		/** [Method] If you need want custom HTML cleanup this is the method you should override  
		* @param html String The HTML to be cleaned 
		* @returns String The cleaned HTML 
		*/
		cleanHtml?( html?:string ): string;

		/** [Method] Clear any invalid styles messages for this field  */
		clearInvalid?(): void;

		/** [Method] Executes a Midas editor command directly on the editor document  
		* @param cmd String The Midas command 
		* @param value String/Boolean The value to pass to the command 
		*/
		execCmd?( cmd?:string, value?:any ): void;

		/** [Method] Only relevant if the instance s isFileUpload method returns true  
		* @returns HTMLElement 
		*/
		extractFileInput?(): HTMLElement;

		/** [Method] Try to focus this component  
		* @param selectText Object 
		* @param delay Object 
		* @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option. If this component is disabled, a closely related component will be focused and that will be returned. 
		*/
		focus?( selectText?:any, delay?:any ): Ext.IComponent;

		/** [Method] Called when the editor initializes the iframe with HTML contents  */
		getDocMarkup?(): void;

		/** [Method] Runs this field s validators and returns an array of error messages for any validation failures  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All error messages for this field; an empty Array if none. 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the element which is masked by the mask method or into which the LoadMask is rendered into  */
		getMaskTarget?(): void;

		/** [Method] Returns the value s that should be saved to the Ext data Model instance for this field when Ext form Basic updateRe  
		* @param includeEmptyText Object 
		* @param isSubmitting Object 
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getModelData?( includeEmptyText?:any, isSubmitting?:any ): any;

		/** [Method] Returns the name attribute of the field  
		* @returns String name The field name 
		*/
		getName?(): string;

		/** [Method] Returns the parameter s that would be included in a standard form submit for this field  
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getSubmitData?(): any;

		/** [Method] Returns the editor s toolbar  
		* @returns Ext.toolbar.Toolbar 
		*/
		getToolbar?(): Ext.toolbar.IToolbar;

		/** [Method] Returns the value of validation  
		* @returns Boolean/String 
		*/
		getValidation?(): any;

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] Initializes this Field mixin on the current instance  */
		initField?(): void;

		/** [Method] Initializes the field s value based on the initial config  */
		initValue?(): void;

		/** [Method] Inserts the passed text at the current cursor position  
		* @param text String 
		*/
		insertAtCursor?( text?:string ): void;

		/** [Method] Returns true if the value of this Field has been changed from its originalValue  
		* @returns Boolean True if this field has been changed from its original value (and is not disabled), false otherwise. 
		*/
		isDirty?(): boolean;

		/** [Method] Returns whether two field values are logically equal  
		* @param value1 Object 
		* @param value2 Object 
		* @returns Boolean True if the values are equal, false if inequal. 
		*/
		isEqual?( value1?:any, value2?:any ): boolean;

		/** [Method] Returns whether this Field is a file upload field if it returns true forms will use special techniques for submitti  
		* @returns Boolean 
		*/
		isFileUpload?(): boolean;

		/** [Method] Returns whether or not the field value is currently valid by validating the field s current value  
		* @returns Boolean True if the value is valid, else false 
		*/
		isValid?(): boolean;

		/** [Method] Display one or more error messages associated with this field using msgTarget to determine how to display the messag  
		* @param errors String/String[] The validation message(s) to display. 
		*/
		markInvalid?( errors?:any ): void;

		/** [Method] Pushes the value of the textarea into the iframe editor  */
		pushValue?(): void;

		/** [Method] Executes a Midas editor command on the editor document and performs necessary focus and toolbar updates  
		* @param cmd String The Midas command 
		* @param value String/Boolean The value to pass to the command 
		*/
		relayCmd?( cmd?:string, value?:any ): void;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;

		/** [Method] Sets the read only state of this field  
		* @param readOnly Boolean Whether the field should be read only. 
		*/
		setReadOnly?( readOnly?:boolean ): void;

		/** [Method] Sets the value of validation  
		* @param validation Boolean/String The new value. 
		*/
		setValidation?( validation?:any ): void;

		/** [Method] Sets a data value into the field and runs the change detection and validation  
		* @param value Object 
		* @returns Ext.form.field.Field this 
		*/
		setValue?( value?:any ): Ext.form.field.IField;

		/** [Method] Syncs the contents of the editor iframe with the textarea  */
		syncValue?(): void;

		/** [Method] Toggles the editor between standard and source edit mode  
		* @param sourceEditMode Boolean True for source edit, false for standard 
		*/
		toggleSourceEdit?( sourceEditMode?:boolean ): void;

		/** [Method] Triggers a toolbar update by reading the markup state of the current selection in the editor  */
		updateToolbar?(): void;

	}

}

declare module Ext.form {
	export interface IHtmlEditor extends Ext.form.IFieldContainer, Ext.form.field.IField {
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterIFrameTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterTextAreaTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeIFrameTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeTextAreaTpl?: any;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		createLinkText?: string;
		/** [Config Option] (String) */
		defaultButtonUI?: string;
		/** [Config Option] (String) */
		defaultLinkValue?: string;
		/** [Config Option] (String) */
		defaultValue?: string;
		/** [Config Option] (Boolean) */
		enableAlignments?: boolean;
		/** [Config Option] (Boolean) */
		enableColors?: boolean;
		/** [Config Option] (Boolean) */
		enableFont?: boolean;
		/** [Config Option] (Boolean) */
		enableFontSize?: boolean;
		/** [Config Option] (Boolean) */
		enableFormat?: boolean;
		/** [Config Option] (Boolean) */
		enableLinks?: boolean;
		/** [Config Option] (Boolean) */
		enableLists?: boolean;
		/** [Config Option] (Boolean) */
		enableSourceEdit?: boolean;
		/** [Config Option] (String[]) */
		fontFamilies?: string[];
		/** [Config Option] (String/Array/Ext.XTemplate) */
		iframeAttrTpl?: any;
		/** [Property] (Object) */
		buttonTips?: any;

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (Boolean) */
		maskOnDisable?: boolean;

		/** [Method] A utility for grouping a set of modifications which may trigger value changes into a single transaction to prevent e  
		* @param fn Function The function to call with change checks suspended. 
		*/
		batchChanges?( fn?:any ): void;

		/** [Method] Template method before a field is reset  */
		beforeReset?(): void;

		/** [Method] Checks whether the value of the field has changed since the last time it was checked  */
		checkChange?(): void;

		/** [Method] Checks the isDirty state of the field and if it has changed since the last time it was checked fires the dirtychange  */
		checkDirty?(): void;

		/** [Method] If you need want custom HTML cleanup this is the method you should override  
		* @param html String The HTML to be cleaned 
		* @returns String The cleaned HTML 
		*/
		cleanHtml?( html?:string ): string;

		/** [Method] Clear any invalid styles messages for this field  */
		clearInvalid?(): void;

		/** [Method] Executes a Midas editor command directly on the editor document  
		* @param cmd String The Midas command 
		* @param value String/Boolean The value to pass to the command 
		*/
		execCmd?( cmd?:string, value?:any ): void;

		/** [Method] Only relevant if the instance s isFileUpload method returns true  
		* @returns HTMLElement 
		*/
		extractFileInput?(): HTMLElement;

		/** [Method] Try to focus this component  
		* @param selectText Object 
		* @param delay Object 
		* @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option. If this component is disabled, a closely related component will be focused and that will be returned. 
		*/
		focus?( selectText?:any, delay?:any ): Ext.IComponent;

		/** [Method] Called when the editor initializes the iframe with HTML contents  */
		getDocMarkup?(): void;

		/** [Method] Runs this field s validators and returns an array of error messages for any validation failures  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All error messages for this field; an empty Array if none. 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the element which is masked by the mask method or into which the LoadMask is rendered into  */
		getMaskTarget?(): void;

		/** [Method] Returns the value s that should be saved to the Ext data Model instance for this field when Ext form Basic updateRe  
		* @param includeEmptyText Object 
		* @param isSubmitting Object 
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getModelData?( includeEmptyText?:any, isSubmitting?:any ): any;

		/** [Method] Returns the name attribute of the field  
		* @returns String name The field name 
		*/
		getName?(): string;

		/** [Method] Returns the parameter s that would be included in a standard form submit for this field  
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getSubmitData?(): any;

		/** [Method] Returns the editor s toolbar  
		* @returns Ext.toolbar.Toolbar 
		*/
		getToolbar?(): Ext.toolbar.IToolbar;

		/** [Method] Returns the value of validation  
		* @returns Boolean/String 
		*/
		getValidation?(): any;

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] Initializes this Field mixin on the current instance  */
		initField?(): void;

		/** [Method] Initializes the field s value based on the initial config  */
		initValue?(): void;

		/** [Method] Inserts the passed text at the current cursor position  
		* @param text String 
		*/
		insertAtCursor?( text?:string ): void;

		/** [Method] Returns true if the value of this Field has been changed from its originalValue  
		* @returns Boolean True if this field has been changed from its original value (and is not disabled), false otherwise. 
		*/
		isDirty?(): boolean;

		/** [Method] Returns whether two field values are logically equal  
		* @param value1 Object 
		* @param value2 Object 
		* @returns Boolean True if the values are equal, false if inequal. 
		*/
		isEqual?( value1?:any, value2?:any ): boolean;

		/** [Method] Returns whether this Field is a file upload field if it returns true forms will use special techniques for submitti  
		* @returns Boolean 
		*/
		isFileUpload?(): boolean;

		/** [Method] Returns whether or not the field value is currently valid by validating the field s current value  
		* @returns Boolean True if the value is valid, else false 
		*/
		isValid?(): boolean;

		/** [Method] Display one or more error messages associated with this field using msgTarget to determine how to display the messag  
		* @param errors String/String[] The validation message(s) to display. 
		*/
		markInvalid?( errors?:any ): void;

		/** [Method] Pushes the value of the textarea into the iframe editor  */
		pushValue?(): void;

		/** [Method] Executes a Midas editor command on the editor document and performs necessary focus and toolbar updates  
		* @param cmd String The Midas command 
		* @param value String/Boolean The value to pass to the command 
		*/
		relayCmd?( cmd?:string, value?:any ): void;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Resets the field s originalValue property so it matches the current value  */
		resetOriginalValue?(): void;

		/** [Method] Sets the read only state of this field  
		* @param readOnly Boolean Whether the field should be read only. 
		*/
		setReadOnly?( readOnly?:boolean ): void;

		/** [Method] Sets the value of validation  
		* @param validation Boolean/String The new value. 
		*/
		setValidation?( validation?:any ): void;

		/** [Method] Sets a data value into the field and runs the change detection and validation  
		* @param value Object 
		* @returns Ext.form.field.Field this 
		*/
		setValue?( value?:any ): Ext.form.field.IField;

		/** [Method] Syncs the contents of the editor iframe with the textarea  */
		syncValue?(): void;

		/** [Method] Toggles the editor between standard and source edit mode  
		* @param sourceEditMode Boolean True for source edit, false for standard 
		*/
		toggleSourceEdit?( sourceEditMode?:boolean ): void;

		/** [Method] Triggers a toolbar update by reading the markup state of the current selection in the editor  */
		updateToolbar?(): void;

	}

}

declare module Ext.form.field {
	export interface INumber extends Ext.form.field.ISpinner {
		/** [Config Option] (Boolean) */
		allowDecimals?: boolean;
		/** [Config Option] (Boolean) */
		allowExponential?: boolean;
		/** [Config Option] (Boolean) */
		autoStripChars?: boolean;
		/** [Config Option] (String) */
		baseChars?: string;
		/** [Config Option] (Number) */
		decimalPrecision?: number;
		/** [Config Option] (String) */
		decimalSeparator?: string;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (String) */
		nanText?: string;
		/** [Config Option] (String) */
		negativeText?: string;
		/** [Config Option] (Number) */
		step?: number;
		/** [Config Option] (Boolean) */
		submitLocaleSeparator?: boolean;
		/** [Method] Runs all of Number s validations and returns an array of any errors  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All validation errors for this field 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the value that would be included in a standard form submit for this field  
		* @returns String The value to be submitted, or null. 
		*/
		getSubmitValue?(): string;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] This method is called when the spinner down button is clicked or when the down arrow key is pressed if keyNavEnabled  */
		onSpinDown?(): void;

		/** [Method] This method is called when the spinner up button is clicked or when the up arrow key is pressed if keyNavEnabled is */
		onSpinUp?(): void;

		/** [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type  
		* @param rawValue Object 
		* @returns Object The converted value. 
		*/
		rawToValue?( rawValue?:any ): any;

		/** [Method] Replaces any existing maxValue with the new value  
		* @param value Number The maximum value 
		*/
		setMaxValue?( value?:number ): void;

		/** [Method] Replaces any existing minValue with the new value  
		* @param value Number The minimum value 
		*/
		setMinValue?( value?:number ): void;

		/** [Method] Sets whether the spinner down button is enabled  
		* @param enabled Object 
		* @param internal Object 
		*/
		setSpinDownEnabled?( enabled?:any, internal?:any ): void;

		/** [Method] Sets whether the spinner up button is enabled  
		* @param enabled Object 
		* @param internal Object 
		*/
		setSpinUpEnabled?( enabled?:any, internal?:any ): void;

		/** [Method] Sets a data value into the field and runs the change detection and validation  
		* @param value Object 
		* @returns Ext.form.field.Text this 
		*/
		setValue?( value?:any ): Ext.form.field.IText;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form {
	export interface INumberField extends Ext.form.field.ISpinner {
		/** [Config Option] (Boolean) */
		allowDecimals?: boolean;
		/** [Config Option] (Boolean) */
		allowExponential?: boolean;
		/** [Config Option] (Boolean) */
		autoStripChars?: boolean;
		/** [Config Option] (String) */
		baseChars?: string;
		/** [Config Option] (Number) */
		decimalPrecision?: number;
		/** [Config Option] (String) */
		decimalSeparator?: string;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (String) */
		nanText?: string;
		/** [Config Option] (String) */
		negativeText?: string;
		/** [Config Option] (Number) */
		step?: number;
		/** [Config Option] (Boolean) */
		submitLocaleSeparator?: boolean;
		/** [Method] Runs all of Number s validations and returns an array of any errors  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All validation errors for this field 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the value that would be included in a standard form submit for this field  
		* @returns String The value to be submitted, or null. 
		*/
		getSubmitValue?(): string;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] This method is called when the spinner down button is clicked or when the down arrow key is pressed if keyNavEnabled  */
		onSpinDown?(): void;

		/** [Method] This method is called when the spinner up button is clicked or when the up arrow key is pressed if keyNavEnabled is */
		onSpinUp?(): void;

		/** [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type  
		* @param rawValue Object 
		* @returns Object The converted value. 
		*/
		rawToValue?( rawValue?:any ): any;

		/** [Method] Replaces any existing maxValue with the new value  
		* @param value Number The maximum value 
		*/
		setMaxValue?( value?:number ): void;

		/** [Method] Replaces any existing minValue with the new value  
		* @param value Number The minimum value 
		*/
		setMinValue?( value?:number ): void;

		/** [Method] Sets whether the spinner down button is enabled  
		* @param enabled Object 
		* @param internal Object 
		*/
		setSpinDownEnabled?( enabled?:any, internal?:any ): void;

		/** [Method] Sets whether the spinner up button is enabled  
		* @param enabled Object 
		* @param internal Object 
		*/
		setSpinUpEnabled?( enabled?:any, internal?:any ): void;

		/** [Method] Sets a data value into the field and runs the change detection and validation  
		* @param value Object 
		* @returns Ext.form.field.Text this 
		*/
		setValue?( value?:any ): Ext.form.field.IText;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form {
	export interface INumber extends Ext.form.field.ISpinner {
		/** [Config Option] (Boolean) */
		allowDecimals?: boolean;
		/** [Config Option] (Boolean) */
		allowExponential?: boolean;
		/** [Config Option] (Boolean) */
		autoStripChars?: boolean;
		/** [Config Option] (String) */
		baseChars?: string;
		/** [Config Option] (Number) */
		decimalPrecision?: number;
		/** [Config Option] (String) */
		decimalSeparator?: string;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (String) */
		nanText?: string;
		/** [Config Option] (String) */
		negativeText?: string;
		/** [Config Option] (Number) */
		step?: number;
		/** [Config Option] (Boolean) */
		submitLocaleSeparator?: boolean;
		/** [Method] Runs all of Number s validations and returns an array of any errors  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All validation errors for this field 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the value that would be included in a standard form submit for this field  
		* @returns String The value to be submitted, or null. 
		*/
		getSubmitValue?(): string;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] This method is called when the spinner down button is clicked or when the down arrow key is pressed if keyNavEnabled  */
		onSpinDown?(): void;

		/** [Method] This method is called when the spinner up button is clicked or when the up arrow key is pressed if keyNavEnabled is */
		onSpinUp?(): void;

		/** [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type  
		* @param rawValue Object 
		* @returns Object The converted value. 
		*/
		rawToValue?( rawValue?:any ): any;

		/** [Method] Replaces any existing maxValue with the new value  
		* @param value Number The maximum value 
		*/
		setMaxValue?( value?:number ): void;

		/** [Method] Replaces any existing minValue with the new value  
		* @param value Number The minimum value 
		*/
		setMinValue?( value?:number ): void;

		/** [Method] Sets whether the spinner down button is enabled  
		* @param enabled Object 
		* @param internal Object 
		*/
		setSpinDownEnabled?( enabled?:any, internal?:any ): void;

		/** [Method] Sets whether the spinner up button is enabled  
		* @param enabled Object 
		* @param internal Object 
		*/
		setSpinUpEnabled?( enabled?:any, internal?:any ): void;

		/** [Method] Sets a data value into the field and runs the change detection and validation  
		* @param value Object 
		* @returns Ext.form.field.Text this 
		*/
		setValue?( value?:any ): Ext.form.field.IText;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form.field {
	export interface IPicker extends Ext.form.field.IText {
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		matchFieldWidth?: boolean;
		/** [Config Option] (String) */
		openCls?: string;
		/** [Config Option] (String) */
		pickerAlign?: string;
		/** [Config Option] (Number[]) */
		pickerOffset?: number[];
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Property] (Boolean) */
		isExpanded?: boolean;

		/** [Property] (Boolean) */
		isPickerField?: boolean;

		/** [Method] Aligns the picker to the input element */
		alignPicker?(): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Collapses this field s picker dropdown  */
		collapse?(): void;

		/** [Method] Creates and returns the component to be used as this field s picker  */
		createPicker?(): void;

		/** [Method] Expands this field s picker dropdown  */
		expand?(): void;

		/** [Method] Returns a reference to the picker component for this field creating it if necessary by calling createPicker  
		* @returns Ext.Component The picker component 
		*/
		getPicker?(): Ext.IComponent;

		/** [Method] Returns the value of triggers  
		* @returns Object 
		*/
		getTriggers?(): any;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] When focus leaves the picker component if it s to outside of this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] Handles the trigger click by default toggles between expanding and collapsing the picker component  
		* @param e Object 
		*/
		onTriggerClick?( e?:any ): void;

		/** [Method] Sets the value of triggers  
		* @param triggers Object The new value. 
		*/
		setTriggers?( triggers?:any ): void;

	}

}

declare module Ext.form {
	export interface IPicker extends Ext.form.field.IText {
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		matchFieldWidth?: boolean;
		/** [Config Option] (String) */
		openCls?: string;
		/** [Config Option] (String) */
		pickerAlign?: string;
		/** [Config Option] (Number[]) */
		pickerOffset?: number[];
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Property] (Boolean) */
		isExpanded?: boolean;

		/** [Property] (Boolean) */
		isPickerField?: boolean;

		/** [Method] Aligns the picker to the input element */
		alignPicker?(): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Collapses this field s picker dropdown  */
		collapse?(): void;

		/** [Method] Creates and returns the component to be used as this field s picker  */
		createPicker?(): void;

		/** [Method] Expands this field s picker dropdown  */
		expand?(): void;

		/** [Method] Returns a reference to the picker component for this field creating it if necessary by calling createPicker  
		* @returns Ext.Component The picker component 
		*/
		getPicker?(): Ext.IComponent;

		/** [Method] Returns the value of triggers  
		* @returns Object 
		*/
		getTriggers?(): any;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] When focus leaves the picker component if it s to outside of this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] Handles the trigger click by default toggles between expanding and collapsing the picker component  
		* @param e Object 
		*/
		onTriggerClick?( e?:any ): void;

		/** [Method] Sets the value of triggers  
		* @param triggers Object The new value. 
		*/
		setTriggers?( triggers?:any ): void;

	}

}

declare module Ext.form.field {
	export interface IRadio extends Ext.form.field.ICheckbox {
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Property] (Boolean) */
		isRadio?: boolean;

		/** [Method] If this radio is part of a group it will return the selected value 
		* @returns String 
		*/
		getGroupValue?(): string;

		/** [Method] Returns the value s that should be saved to the Ext data Model instance for this field when Ext form Basic updateRe  
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getModelData?(): any;

		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms  
		* @returns Boolean/Object True if checked, null if not. 
		*/
		getSubmitValue?(): any;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  */
		onRemoved?(): void;

		/** [Method] Sets either the checked unchecked status of this Radio or if a string value is passed checks a sibling Radio of th  
		* @param value String/Boolean Checked value, or the value of the sibling radio button to check. 
		* @returns Ext.form.field.Radio this 
		*/
		setValue?( value?:any ): Ext.form.field.IRadio;

	}

}

declare module Ext.form {
	export interface IRadio extends Ext.form.field.ICheckbox {
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Property] (Boolean) */
		isRadio?: boolean;

		/** [Method] If this radio is part of a group it will return the selected value 
		* @returns String 
		*/
		getGroupValue?(): string;

		/** [Method] Returns the value s that should be saved to the Ext data Model instance for this field when Ext form Basic updateRe  
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getModelData?(): any;

		/** [Method] Returns the submit value for the checkbox which can be used when submitting forms  
		* @returns Boolean/Object True if checked, null if not. 
		*/
		getSubmitValue?(): any;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  */
		onRemoved?(): void;

		/** [Method] Sets either the checked unchecked status of this Radio or if a string value is passed checks a sibling Radio of th  
		* @param value String/Boolean Checked value, or the value of the sibling radio button to check. 
		* @returns Ext.form.field.Radio this 
		*/
		setValue?( value?:any ): Ext.form.field.IRadio;

	}

}

declare module Ext.form.field {
	export interface ISpinner extends Ext.form.field.IText {
		/** [Config Option] (Boolean) */
		keyNavEnabled?: boolean;
		/** [Config Option] (Boolean) */
		mouseWheelEnabled?: boolean;
		/** [Config Option] (Boolean) */
		repeatTriggerClick?: boolean;
		/** [Config Option] (Boolean) */
		spinDownEnabled?: boolean;
		/** [Config Option] (Boolean) */
		spinUpEnabled?: boolean;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Method] Returns the value of triggers  
		* @returns Object 
		*/
		getTriggers?(): any;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] This method is called when the spinner down button is clicked or when the down arrow key is pressed if keyNavEnabled  */
		onSpinDown?(): void;

		/** [Method] This method is called when the spinner up button is clicked or when the up arrow key is pressed if keyNavEnabled is */
		onSpinUp?(): void;

		/** [Method] Sets whether the spinner down button is enabled  
		* @param enabled Boolean true to enable the button, false to disable it. 
		*/
		setSpinDownEnabled?( enabled?:boolean ): void;

		/** [Method] Sets whether the spinner up button is enabled  
		* @param enabled Boolean true to enable the button, false to disable it. 
		*/
		setSpinUpEnabled?( enabled?:boolean ): void;

		/** [Method] Sets the value of triggers  
		* @param triggers Object The new value. 
		*/
		setTriggers?( triggers?:any ): void;

		/** [Method] Triggers the spinner to step down fires the spin and spindown events and calls the onSpinDown method  */
		spinDown?(): void;

		/** [Method] Triggers the spinner to step up fires the spin and spinup events and calls the onSpinUp method  */
		spinUp?(): void;

	}

}

declare module Ext.form {
	export interface ISpinner extends Ext.form.field.IText {
		/** [Config Option] (Boolean) */
		keyNavEnabled?: boolean;
		/** [Config Option] (Boolean) */
		mouseWheelEnabled?: boolean;
		/** [Config Option] (Boolean) */
		repeatTriggerClick?: boolean;
		/** [Config Option] (Boolean) */
		spinDownEnabled?: boolean;
		/** [Config Option] (Boolean) */
		spinUpEnabled?: boolean;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Method] Returns the value of triggers  
		* @returns Object 
		*/
		getTriggers?(): any;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] This method is called when the spinner down button is clicked or when the down arrow key is pressed if keyNavEnabled  */
		onSpinDown?(): void;

		/** [Method] This method is called when the spinner up button is clicked or when the up arrow key is pressed if keyNavEnabled is */
		onSpinUp?(): void;

		/** [Method] Sets whether the spinner down button is enabled  
		* @param enabled Boolean true to enable the button, false to disable it. 
		*/
		setSpinDownEnabled?( enabled?:boolean ): void;

		/** [Method] Sets whether the spinner up button is enabled  
		* @param enabled Boolean true to enable the button, false to disable it. 
		*/
		setSpinUpEnabled?( enabled?:boolean ): void;

		/** [Method] Sets the value of triggers  
		* @param triggers Object The new value. 
		*/
		setTriggers?( triggers?:any ): void;

		/** [Method] Triggers the spinner to step down fires the spin and spindown events and calls the onSpinDown method  */
		spinDown?(): void;

		/** [Method] Triggers the spinner to step up fires the spin and spinup events and calls the onSpinUp method  */
		spinUp?(): void;

	}

}

declare module Ext.form.field {
	export interface ITag extends Ext.form.field.IComboBox {
		/** [Config Option] (Boolean) */
		createNewOnBlur?: boolean;
		/** [Config Option] (Boolean) */
		createNewOnEnter?: boolean;
		/** [Config Option] (String) */
		delimiter?: string;
		/** [Config Option] (Boolean) */
		encodeSubmitValue?: boolean;
		/** [Config Option] (Boolean) */
		filterPickList?: boolean;
		/** [Config Option] (Boolean) */
		forceSelection?: boolean;
		/** [Config Option] (Boolean) */
		grow?: boolean;
		/** [Config Option] (Number/Boolean) */
		growMax?: any;
		/** [Config Option] (Number/Boolean) */
		growMin?: any;
		/** [Config Option] (String/Ext.XTemplate) */
		labelTpl?: any;
		/** [Config Option] (Boolean) */
		multiSelect?: boolean;
		/** [Config Option] (Boolean) */
		selectOnFocus?: boolean;
		/** [Config Option] (Boolean) */
		stacked?: boolean;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Config Option] (Boolean) */
		triggerOnClick?: boolean;
		/** [Config Option] (String) */
		valueParam?: string;
		/** [Method] Track height change to fire autosize event when applicable  */
		afterComponentLayout?(): void;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Overridden to use value selection instead of raw value and to avoid the use of placeholder */
		applyEmptyText?(): void;

		/** [Method] Overridden to handle partial input selections more directly */
		assertValue?(): void;

		/** [Method] Initiate auto sizing for height based on grow if applicable  */
		autoSize?(): void;

		/** [Method] Finds the record by searching for a specific field value combination  
		* @param field Object 
		* @param value Object 
		* @returns Ext.data.Model The matched record or false. 
		*/
		findRecord?( field?:any, value?:any ): Ext.data.IModel;

		/** [Method] Intercept calls to getRawValue to pretend there is no inputEl for rawValue handling so that we can use inputEl for u  
		* @returns String The raw String value of the field 
		*/
		getRawValue?(): string;

		/** [Method] Returns the record from valueStore for the labeled item node 
		* @param itemEl Object 
		*/
		getRecordByListItemNode?( itemEl?:any ): void;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Overridden to optionally allow for submitting the field as a json encoded array  
		* @returns Object A mapping of submit parameter names to values; each value should be a string, or an array of strings if that particular name has multiple values. It can also return null if there are no parameters to be submitted. 
		*/
		getSubmitData?(): any;

		/** [Method] Returns the records for the field s current value 
		* @returns Array The records for the field's current value 
		*/
		getValueRecords?(): any[];

		/** [Method] private */
		initComponent?(): void;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] Overridden to be more accepting of varied value types 
		* @param v1 Object 
		* @param v2 Object 
		* @returns boolean 
		*/
		isEqual?( v1?:any, v2?:any ): boolean;

		/** [Method] Returns whether or not the field value is currently valid by validating the processed raw value of the field  
		* @returns Boolean True if the value is valid, else false 
		*/
		isValid?(): boolean;

		/** [Method] Template method it is called when a new store is bound to the current instance  
		* @param store Object 
		*/
		onBindStore?( store?:any ): void;

		/** [Method] Intercept calls to onBlur to remove focusCls because the base field classes assume this should be applied to inputEl */
		onBlur?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Intercept calls to onFocus to add focusCls because the base field classes assume this should be applied to inputEl */
		onFocus?(): void;

		/** [Method] Delegation control for selecting and removing labeled items or triggering list collapse expansion 
		* @param e Object 
		*/
		onItemListClick?( e?:any ): void;

		/** [Method] Handles keyDown processing of key based selection of labeled items  
		* @param e Object 
		*/
		onKeyDown?( e?:any ): void;

		/** [Method] Handles auto selection and creation of labeled items based on this field s delimiter as well as the keyUp processing  
		* @param e Object 
		* @param t Object 
		*/
		onKeyUp?( e?:any, t?:any ): void;

		/** [Method] Overridden to get and set the DOM value directly for type ahead suggestion bypassing get setRawValue  */
		onTypeAhead?(): void;

		/** [Method] Template method it is called when an existing store is unbound from the current instance  
		* @param store Object 
		*/
		onUnbindStore?( store?:any ): void;

		/** [Method] Overridden to use inputEl instead of raw value and to avoid the use of placeholder */
		preFocus?(): void;

		/** [Method] Removal of labeled item by node reference 
		* @param itemEl Object 
		*/
		removeByListItemNode?( itemEl?:any ): void;

		/** [Method] Removes a value or values from the current value of the field 
		* @param value Mixed The value or values to remove from the current value, see setValue 
		*/
		removeValue?( value?:any ): void;

		/** [Method] Intercept calls to renderActiveError to add invalidCls because the base field classes assume this should be applied */
		renderActiveError?(): void;

		/** [Method] Sets the field s raw value directly bypassing value conversion change detection and validation  
		* @param value Object 
		* @returns Object value The field value that is set 
		*/
		setRawValue?( value?:any ): any;

		/** [Method] Sets the specified value s into the field  
		* @param value Mixed The value(s) to be set, see method documentation for details 
		* @returns Ext.form.field.Field/Boolean this, or false if asynchronously querying for unknown values 
		*/
		setValue?( value?:any ): any;

		/** [Method] Toggle of labeled item selection by node reference 
		* @param itemEl Object 
		* @param keepExisting Object 
		*/
		toggleSelectionByListItemNode?( itemEl?:any, keepExisting?:any ): void;

	}

}

declare module Ext.form.field {
	export interface IText extends Ext.form.field.IBase {
		/** [Config Option] (Boolean) */
		allowBlank?: boolean;
		/** [Config Option] (Boolean) */
		allowOnlyWhitespace?: boolean;
		/** [Config Option] (String) */
		blankText?: string;
		/** [Config Option] (Boolean) */
		disableKeyFilter?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (String) */
		emptyCls?: string;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Boolean) */
		enableKeyEvents?: boolean;
		/** [Config Option] (Boolean) */
		enforceMaxLength?: boolean;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (Boolean) */
		grow?: boolean;
		/** [Config Option] (String) */
		growAppend?: string;
		/** [Config Option] (Number) */
		growMax?: number;
		/** [Config Option] (Number) */
		growMin?: number;
		/** [Config Option] (Boolean) */
		hideTrigger?: boolean;
		/** [Config Option] (String) */
		inputWrapCls?: string;
		/** [Config Option] (RegExp) */
		maskRe?: RegExp;
		/** [Config Option] (Number) */
		maxLength?: number;
		/** [Config Option] (String) */
		maxLengthText?: string;
		/** [Config Option] (Number) */
		minLength?: number;
		/** [Config Option] (String) */
		minLengthText?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (RegExp) */
		regex?: RegExp;
		/** [Config Option] (String) */
		regexText?: string;
		/** [Config Option] (Boolean) */
		repeatTriggerClick?: boolean;
		/** [Config Option] (String) */
		requiredCls?: string;
		/** [Config Option] (Boolean) */
		selectOnFocus?: boolean;
		/** [Config Option] (Number) */
		size?: number;
		/** [Config Option] (RegExp) */
		stripCharsRe?: RegExp;
		/** [Config Option] (String) */
		triggerWrapCls?: string;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Config Option] (Boolean) */
		validateBlank?: boolean;
		/** [Config Option] (Function) */
		validator?: any;
		/** [Config Option] (String) */
		vtype?: string;
		/** [Config Option] (String) */
		vtypeText?: string;
		/** [Property] (Ext.dom.Element) */
		inputCell?: Ext.dom.IElement;

		/** [Property] (Ext.dom.Element) */
		inputWrap?: Ext.dom.IElement;

		/** [Property] (Ext.CompositeElement) */
		triggerEl?: Ext.ICompositeElement;

		/** [Property] (Ext.dom.Element) */
		triggerWrap?: Ext.dom.IElement;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Applies the state to the object  
		* @param state Object 
		*/
		applyState?( state?:any ): void;

		/** [Method] Automatically grows the field to accommodate the width of the text up to the maximum field width allowed  */
		autoSize?(): void;

		/** [Method] private */
		beforeFocus?(): void;

		/** [Method] Called when focus leaves this input field  
		* @param e Object 
		*/
		completeEdit?( e?:any ): void;

		/** [Method] Validates a value according to the field s validation rules and returns an array of errors for any failing validations  
		* @param value Object The value to validate. The processed raw value will be used if nothing is passed. 
		* @returns String[] Array of any validation errors 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the value of hideTrigger  
		* @returns Boolean 
		*/
		getHideTrigger?(): boolean;

		/** [Method] Returns the raw String value of the field without performing any normalization conversion or validation  
		* @returns String The raw String value of the field 
		*/
		getRawValue?(): string;

		/** [Method] The supplied default state gathering method for the Component class  
		* @returns Object 
		*/
		getState?(): any;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Returns the trigger with the given id 
		* @param id String 
		* @returns Ext.form.trigger.Trigger 
		*/
		getTrigger?( id?:string ): Ext.form.trigger.ITrigger;

		/** [Method] Get the total width of the trigger button area  
		* @returns Number The total trigger width 
		*/
		getTriggerWidth?(): number;

		/** [Method] Returns the value of triggers  
		* @returns Object 
		*/
		getTriggers?(): any;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] private */
		onDisable?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] private */
		onRender?(): void;

		/** [Method] Performs any necessary manipulation of a raw String value to prepare it for conversion and or validation  
		* @param value String The unprocessed string value 
		* @returns String The processed string value 
		*/
		processRawValue?( value?:string ): string;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Selects text in this field 
		* @param start Number The index where the selection should start 
		* @param end Number The index where the selection should end (defaults to the text length) 
		*/
		selectText?( start?:number, end?:number ): void;

		/** [Method] Sets the editable state of this field  
		* @param editable Boolean True to allow the user to directly edit the field text. If false is passed, the user will only be able to modify the field using the trigger. 
		*/
		setEditable?( editable?:boolean ): void;

		/** [Method] Sets the value of hideTrigger  
		* @param hideTrigger Boolean The new value. 
		*/
		setHideTrigger?( hideTrigger?:boolean ): void;

		/** [Method] Sets the read only state of this field  
		* @param readOnly Boolean True to prevent the user changing the field and explicitly hide the trigger(s). Setting this to true will supersede settings editable and hideTrigger. Setting this to false will defer back to editable and hideTrigger. 
		*/
		setReadOnly?( readOnly?:boolean ): void;

		/** [Method] Sets the value of triggers  
		* @param triggers Object The new value. 
		*/
		setTriggers?( triggers?:any ): void;

		/** [Method] Sets a data value into the field and runs the change detection and validation  
		* @param value Object The value to set 
		* @returns Ext.form.field.Text this 
		*/
		setValue?( value?:any ): Ext.form.field.IText;

	}

}

declare module Ext.form {
	export interface ITextField extends Ext.form.field.IBase {
		/** [Config Option] (Boolean) */
		allowBlank?: boolean;
		/** [Config Option] (Boolean) */
		allowOnlyWhitespace?: boolean;
		/** [Config Option] (String) */
		blankText?: string;
		/** [Config Option] (Boolean) */
		disableKeyFilter?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (String) */
		emptyCls?: string;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Boolean) */
		enableKeyEvents?: boolean;
		/** [Config Option] (Boolean) */
		enforceMaxLength?: boolean;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (Boolean) */
		grow?: boolean;
		/** [Config Option] (String) */
		growAppend?: string;
		/** [Config Option] (Number) */
		growMax?: number;
		/** [Config Option] (Number) */
		growMin?: number;
		/** [Config Option] (Boolean) */
		hideTrigger?: boolean;
		/** [Config Option] (String) */
		inputWrapCls?: string;
		/** [Config Option] (RegExp) */
		maskRe?: RegExp;
		/** [Config Option] (Number) */
		maxLength?: number;
		/** [Config Option] (String) */
		maxLengthText?: string;
		/** [Config Option] (Number) */
		minLength?: number;
		/** [Config Option] (String) */
		minLengthText?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (RegExp) */
		regex?: RegExp;
		/** [Config Option] (String) */
		regexText?: string;
		/** [Config Option] (Boolean) */
		repeatTriggerClick?: boolean;
		/** [Config Option] (String) */
		requiredCls?: string;
		/** [Config Option] (Boolean) */
		selectOnFocus?: boolean;
		/** [Config Option] (Number) */
		size?: number;
		/** [Config Option] (RegExp) */
		stripCharsRe?: RegExp;
		/** [Config Option] (String) */
		triggerWrapCls?: string;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Config Option] (Boolean) */
		validateBlank?: boolean;
		/** [Config Option] (Function) */
		validator?: any;
		/** [Config Option] (String) */
		vtype?: string;
		/** [Config Option] (String) */
		vtypeText?: string;
		/** [Property] (Ext.dom.Element) */
		inputCell?: Ext.dom.IElement;

		/** [Property] (Ext.dom.Element) */
		inputWrap?: Ext.dom.IElement;

		/** [Property] (Ext.CompositeElement) */
		triggerEl?: Ext.ICompositeElement;

		/** [Property] (Ext.dom.Element) */
		triggerWrap?: Ext.dom.IElement;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Applies the state to the object  
		* @param state Object 
		*/
		applyState?( state?:any ): void;

		/** [Method] Automatically grows the field to accommodate the width of the text up to the maximum field width allowed  */
		autoSize?(): void;

		/** [Method] private */
		beforeFocus?(): void;

		/** [Method] Called when focus leaves this input field  
		* @param e Object 
		*/
		completeEdit?( e?:any ): void;

		/** [Method] Validates a value according to the field s validation rules and returns an array of errors for any failing validations  
		* @param value Object The value to validate. The processed raw value will be used if nothing is passed. 
		* @returns String[] Array of any validation errors 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the value of hideTrigger  
		* @returns Boolean 
		*/
		getHideTrigger?(): boolean;

		/** [Method] Returns the raw String value of the field without performing any normalization conversion or validation  
		* @returns String The raw String value of the field 
		*/
		getRawValue?(): string;

		/** [Method] The supplied default state gathering method for the Component class  
		* @returns Object 
		*/
		getState?(): any;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Returns the trigger with the given id 
		* @param id String 
		* @returns Ext.form.trigger.Trigger 
		*/
		getTrigger?( id?:string ): Ext.form.trigger.ITrigger;

		/** [Method] Get the total width of the trigger button area  
		* @returns Number The total trigger width 
		*/
		getTriggerWidth?(): number;

		/** [Method] Returns the value of triggers  
		* @returns Object 
		*/
		getTriggers?(): any;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] private */
		onDisable?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] private */
		onRender?(): void;

		/** [Method] Performs any necessary manipulation of a raw String value to prepare it for conversion and or validation  
		* @param value String The unprocessed string value 
		* @returns String The processed string value 
		*/
		processRawValue?( value?:string ): string;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Selects text in this field 
		* @param start Number The index where the selection should start 
		* @param end Number The index where the selection should end (defaults to the text length) 
		*/
		selectText?( start?:number, end?:number ): void;

		/** [Method] Sets the editable state of this field  
		* @param editable Boolean True to allow the user to directly edit the field text. If false is passed, the user will only be able to modify the field using the trigger. 
		*/
		setEditable?( editable?:boolean ): void;

		/** [Method] Sets the value of hideTrigger  
		* @param hideTrigger Boolean The new value. 
		*/
		setHideTrigger?( hideTrigger?:boolean ): void;

		/** [Method] Sets the read only state of this field  
		* @param readOnly Boolean True to prevent the user changing the field and explicitly hide the trigger(s). Setting this to true will supersede settings editable and hideTrigger. Setting this to false will defer back to editable and hideTrigger. 
		*/
		setReadOnly?( readOnly?:boolean ): void;

		/** [Method] Sets the value of triggers  
		* @param triggers Object The new value. 
		*/
		setTriggers?( triggers?:any ): void;

		/** [Method] Sets a data value into the field and runs the change detection and validation  
		* @param value Object The value to set 
		* @returns Ext.form.field.Text this 
		*/
		setValue?( value?:any ): Ext.form.field.IText;

	}

}

declare module Ext.form {
	export interface IText extends Ext.form.field.IBase {
		/** [Config Option] (Boolean) */
		allowBlank?: boolean;
		/** [Config Option] (Boolean) */
		allowOnlyWhitespace?: boolean;
		/** [Config Option] (String) */
		blankText?: string;
		/** [Config Option] (Boolean) */
		disableKeyFilter?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (String) */
		emptyCls?: string;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Boolean) */
		enableKeyEvents?: boolean;
		/** [Config Option] (Boolean) */
		enforceMaxLength?: boolean;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (Boolean) */
		grow?: boolean;
		/** [Config Option] (String) */
		growAppend?: string;
		/** [Config Option] (Number) */
		growMax?: number;
		/** [Config Option] (Number) */
		growMin?: number;
		/** [Config Option] (Boolean) */
		hideTrigger?: boolean;
		/** [Config Option] (String) */
		inputWrapCls?: string;
		/** [Config Option] (RegExp) */
		maskRe?: RegExp;
		/** [Config Option] (Number) */
		maxLength?: number;
		/** [Config Option] (String) */
		maxLengthText?: string;
		/** [Config Option] (Number) */
		minLength?: number;
		/** [Config Option] (String) */
		minLengthText?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (RegExp) */
		regex?: RegExp;
		/** [Config Option] (String) */
		regexText?: string;
		/** [Config Option] (Boolean) */
		repeatTriggerClick?: boolean;
		/** [Config Option] (String) */
		requiredCls?: string;
		/** [Config Option] (Boolean) */
		selectOnFocus?: boolean;
		/** [Config Option] (Number) */
		size?: number;
		/** [Config Option] (RegExp) */
		stripCharsRe?: RegExp;
		/** [Config Option] (String) */
		triggerWrapCls?: string;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Config Option] (Boolean) */
		validateBlank?: boolean;
		/** [Config Option] (Function) */
		validator?: any;
		/** [Config Option] (String) */
		vtype?: string;
		/** [Config Option] (String) */
		vtypeText?: string;
		/** [Property] (Ext.dom.Element) */
		inputCell?: Ext.dom.IElement;

		/** [Property] (Ext.dom.Element) */
		inputWrap?: Ext.dom.IElement;

		/** [Property] (Ext.CompositeElement) */
		triggerEl?: Ext.ICompositeElement;

		/** [Property] (Ext.dom.Element) */
		triggerWrap?: Ext.dom.IElement;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Applies the state to the object  
		* @param state Object 
		*/
		applyState?( state?:any ): void;

		/** [Method] Automatically grows the field to accommodate the width of the text up to the maximum field width allowed  */
		autoSize?(): void;

		/** [Method] private */
		beforeFocus?(): void;

		/** [Method] Called when focus leaves this input field  
		* @param e Object 
		*/
		completeEdit?( e?:any ): void;

		/** [Method] Validates a value according to the field s validation rules and returns an array of errors for any failing validations  
		* @param value Object The value to validate. The processed raw value will be used if nothing is passed. 
		* @returns String[] Array of any validation errors 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the value of hideTrigger  
		* @returns Boolean 
		*/
		getHideTrigger?(): boolean;

		/** [Method] Returns the raw String value of the field without performing any normalization conversion or validation  
		* @returns String The raw String value of the field 
		*/
		getRawValue?(): string;

		/** [Method] The supplied default state gathering method for the Component class  
		* @returns Object 
		*/
		getState?(): any;

		/** [Method] Creates and returns the data object to be used when rendering the fieldSubTpl  
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Returns the trigger with the given id 
		* @param id String 
		* @returns Ext.form.trigger.Trigger 
		*/
		getTrigger?( id?:string ): Ext.form.trigger.ITrigger;

		/** [Method] Get the total width of the trigger button area  
		* @returns Number The total trigger width 
		*/
		getTriggerWidth?(): number;

		/** [Method] Returns the value of triggers  
		* @returns Object 
		*/
		getTriggers?(): any;

		/** [Method] private */
		initEvents?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] private */
		onDisable?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] private */
		onRender?(): void;

		/** [Method] Performs any necessary manipulation of a raw String value to prepare it for conversion and or validation  
		* @param value String The unprocessed string value 
		* @returns String The processed string value 
		*/
		processRawValue?( value?:string ): string;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Selects text in this field 
		* @param start Number The index where the selection should start 
		* @param end Number The index where the selection should end (defaults to the text length) 
		*/
		selectText?( start?:number, end?:number ): void;

		/** [Method] Sets the editable state of this field  
		* @param editable Boolean True to allow the user to directly edit the field text. If false is passed, the user will only be able to modify the field using the trigger. 
		*/
		setEditable?( editable?:boolean ): void;

		/** [Method] Sets the value of hideTrigger  
		* @param hideTrigger Boolean The new value. 
		*/
		setHideTrigger?( hideTrigger?:boolean ): void;

		/** [Method] Sets the read only state of this field  
		* @param readOnly Boolean True to prevent the user changing the field and explicitly hide the trigger(s). Setting this to true will supersede settings editable and hideTrigger. Setting this to false will defer back to editable and hideTrigger. 
		*/
		setReadOnly?( readOnly?:boolean ): void;

		/** [Method] Sets the value of triggers  
		* @param triggers Object The new value. 
		*/
		setTriggers?( triggers?:any ): void;

		/** [Method] Sets a data value into the field and runs the change detection and validation  
		* @param value Object The value to set 
		* @returns Ext.form.field.Text this 
		*/
		setValue?( value?:any ): Ext.form.field.IText;

	}

}

declare module Ext.form.field {
	export interface ITextArea extends Ext.form.field.IText {
		/** [Config Option] (Boolean) */
		enterIsSpecial?: boolean;
		/** [Config Option] (String) */
		growAppend?: string;
		/** [Config Option] (Number) */
		growMax?: number;
		/** [Config Option] (Number) */
		growMin?: number;
		/** [Config Option] (Boolean) */
		preventScrollbars?: boolean;
		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Automatically grows the field to accomodate the height of the text up to the maximum field height allowed  */
		autoSize?(): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] private 
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] The following overrides deal with an issue whereby some browsers will strip carriage returns from the textarea input 
		* @param value Object 
		* @returns Object The value to set 
		*/
		transformRawValue?( value?:any ): any;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form {
	export interface ITextArea extends Ext.form.field.IText {
		/** [Config Option] (Boolean) */
		enterIsSpecial?: boolean;
		/** [Config Option] (String) */
		growAppend?: string;
		/** [Config Option] (Number) */
		growMax?: number;
		/** [Config Option] (Number) */
		growMin?: number;
		/** [Config Option] (Boolean) */
		preventScrollbars?: boolean;
		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Automatically grows the field to accomodate the height of the text up to the maximum field height allowed  */
		autoSize?(): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] private 
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] The following overrides deal with an issue whereby some browsers will strip carriage returns from the textarea input 
		* @param value Object 
		* @returns Object The value to set 
		*/
		transformRawValue?( value?:any ): any;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form.field {
	export interface ITime extends Ext.form.field.IComboBox {
		/** [Config Option] (String) */
		altFormats?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date/String) */
		maxValue?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Date/String) */
		minValue?: any;
		/** [Config Option] (Number) */
		pickerMaxHeight?: number;
		/** [Config Option] (String) */
		queryMode?: string;
		/** [Config Option] (Boolean) */
		selectOnTab?: boolean;
		/** [Config Option] (Boolean) */
		snapToIncrement?: boolean;
		/** [Config Option] (String) */
		submitFormat?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
		/** [Method] Called when focus leaves this input field  */
		completeEdit?(): void;

		/** [Method] Finds the record by searching values in the valueField  
		* @param value Object/String The value to match the field against. 
		* @returns Ext.data.Model The matched record or false. 
		*/
		findRecordByValue?( value?:any ): Ext.data.IModel;

		/** [Method] Runs all of Time s validations and returns an array of any errors  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All validation errors for this field 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type  
		* @param item Object 
		* @returns Object The converted value. 
		*/
		rawToValue?( item?:any ): any;

		/** [Method] Replaces any existing maxValue with the new time and refreshes the picker s range  
		* @param value Date/String The maximum time that can be selected 
		*/
		setMaxValue?( value?:any ): void;

		/** [Method] Replaces any existing minValue with the new time and refreshes the picker s range  
		* @param value Date/String The minimum time that can be selected 
		*/
		setMinValue?( value?:any ): void;

		/** [Method] Sets the specified value s into the field  
		* @param v Object 
		* @returns Ext.form.field.Field this 
		*/
		setValue?( v?:any ): Ext.form.field.IField;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form {
	export interface ITimeField extends Ext.form.field.IComboBox {
		/** [Config Option] (String) */
		altFormats?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date/String) */
		maxValue?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Date/String) */
		minValue?: any;
		/** [Config Option] (Number) */
		pickerMaxHeight?: number;
		/** [Config Option] (String) */
		queryMode?: string;
		/** [Config Option] (Boolean) */
		selectOnTab?: boolean;
		/** [Config Option] (Boolean) */
		snapToIncrement?: boolean;
		/** [Config Option] (String) */
		submitFormat?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
		/** [Method] Called when focus leaves this input field  */
		completeEdit?(): void;

		/** [Method] Finds the record by searching values in the valueField  
		* @param value Object/String The value to match the field against. 
		* @returns Ext.data.Model The matched record or false. 
		*/
		findRecordByValue?( value?:any ): Ext.data.IModel;

		/** [Method] Runs all of Time s validations and returns an array of any errors  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All validation errors for this field 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type  
		* @param item Object 
		* @returns Object The converted value. 
		*/
		rawToValue?( item?:any ): any;

		/** [Method] Replaces any existing maxValue with the new time and refreshes the picker s range  
		* @param value Date/String The maximum time that can be selected 
		*/
		setMaxValue?( value?:any ): void;

		/** [Method] Replaces any existing minValue with the new time and refreshes the picker s range  
		* @param value Date/String The minimum time that can be selected 
		*/
		setMinValue?( value?:any ): void;

		/** [Method] Sets the specified value s into the field  
		* @param v Object 
		* @returns Ext.form.field.Field this 
		*/
		setValue?( v?:any ): Ext.form.field.IField;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form {
	export interface ITime extends Ext.form.field.IComboBox {
		/** [Config Option] (String) */
		altFormats?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date/String) */
		maxValue?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Date/String) */
		minValue?: any;
		/** [Config Option] (Number) */
		pickerMaxHeight?: number;
		/** [Config Option] (String) */
		queryMode?: string;
		/** [Config Option] (Boolean) */
		selectOnTab?: boolean;
		/** [Config Option] (Boolean) */
		snapToIncrement?: boolean;
		/** [Config Option] (String) */
		submitFormat?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
		/** [Method] Called when focus leaves this input field  */
		completeEdit?(): void;

		/** [Method] Finds the record by searching values in the valueField  
		* @param value Object/String The value to match the field against. 
		* @returns Ext.data.Model The matched record or false. 
		*/
		findRecordByValue?( value?:any ): Ext.data.IModel;

		/** [Method] Runs all of Time s validations and returns an array of any errors  
		* @param value Object The value to get errors for (defaults to the current field value) 
		* @returns String[] All validation errors for this field 
		*/
		getErrors?( value?:any ): string[];

		/** [Method] Returns the current data value of the field  
		* @returns Object value The field value 
		*/
		getValue?(): any;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] Converts a raw input field value into a mixed type value that is suitable for this particular field type  
		* @param item Object 
		* @returns Object The converted value. 
		*/
		rawToValue?( item?:any ): any;

		/** [Method] Replaces any existing maxValue with the new time and refreshes the picker s range  
		* @param value Date/String The maximum time that can be selected 
		*/
		setMaxValue?( value?:any ): void;

		/** [Method] Replaces any existing minValue with the new time and refreshes the picker s range  
		* @param value Date/String The minimum time that can be selected 
		*/
		setMinValue?( value?:any ): void;

		/** [Method] Sets the specified value s into the field  
		* @param v Object 
		* @returns Ext.form.field.Field this 
		*/
		setValue?( v?:any ): Ext.form.field.IField;

		/** [Method] Converts a mixed type value to a raw representation suitable for displaying in the field  
		* @param value Object 
		* @returns Object The converted raw value. 
		*/
		valueToRaw?( value?:any ): any;

	}

}

declare module Ext.form.field {
	export interface ITrigger extends Ext.form.field.IText {
		/** [Config Option] (String) */
		triggerCls?: string;
	}

}

declare module Ext.form {
	export interface ITriggerField extends Ext.form.field.IText {
		/** [Config Option] (String) */
		triggerCls?: string;
	}

}

declare module Ext.form {
	export interface ITwinTriggerField extends Ext.form.field.IText {
		/** [Config Option] (String) */
		triggerCls?: string;
	}

}

declare module Ext.form {
	export interface ITrigger extends Ext.form.field.IText {
		/** [Config Option] (String) */
		triggerCls?: string;
	}

}

declare module Ext.form.field {
	export interface IVTypes extends Ext.IBase {
	}
	export class VTypes {
		/** [Property] (RegExp) */
		static alphaMask: RegExp;

		/** [Property] (String) */
		static alphaText: string;

		/** [Property] (RegExp) */
		static alphanumMask: RegExp;

		/** [Property] (String) */
		static alphanumText: string;

		/** [Property] (RegExp) */
		static emailMask: RegExp;

		/** [Property] (String) */
		static emailText: string;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (String) */
		static urlText: string;

		/** [Method] The function used to validate alpha values 
		* @param value String The value 
		* @returns Boolean true if the RegExp test passed, and false if not. 
		*/
		static alpha( value?:string ): boolean;

		/** [Method] The function used to validate alphanumeric values 
		* @param value String The value 
		* @returns Boolean true if the RegExp test passed, and false if not. 
		*/
		static alphanum( value?:string ): boolean;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] The function used to validate email addresses  
		* @param value String The email address 
		* @returns Boolean true if the RegExp test passed, and false if not. 
		*/
		static email( value?:string ): boolean;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] The function used to validate URLs 
		* @param value String The URL 
		* @returns Boolean true if the RegExp test passed, and false if not. 
		*/
		static url( value?:string ): boolean;

	}

}

declare module Ext.form {
	export interface IVTypes extends Ext.IBase {
	}
	export class VTypes {
		/** [Property] (RegExp) */
		static alphaMask: RegExp;

		/** [Property] (String) */
		static alphaText: string;

		/** [Property] (RegExp) */
		static alphanumMask: RegExp;

		/** [Property] (String) */
		static alphanumText: string;

		/** [Property] (RegExp) */
		static emailMask: RegExp;

		/** [Property] (String) */
		static emailText: string;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (String) */
		static urlText: string;

		/** [Method] The function used to validate alpha values 
		* @param value String The value 
		* @returns Boolean true if the RegExp test passed, and false if not. 
		*/
		static alpha( value?:string ): boolean;

		/** [Method] The function used to validate alphanumeric values 
		* @param value String The value 
		* @returns Boolean true if the RegExp test passed, and false if not. 
		*/
		static alphanum( value?:string ): boolean;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] The function used to validate email addresses  
		* @param value String The email address 
		* @returns Boolean true if the RegExp test passed, and false if not. 
		*/
		static email( value?:string ): boolean;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] The function used to validate URLs 
		* @param value String The URL 
		* @returns Boolean true if the RegExp test passed, and false if not. 
		*/
		static url( value?:string ): boolean;

	}

}

declare module Ext.form {
	export interface IFieldAncestor extends Ext.IMixin {
		/** [Config Option] (Object) */
		fieldDefaults?: any;
		/** [Method] Initializes the FieldAncestor s state this must be called from the initComponent method of any components importing */
		initFieldAncestor?(): void;

		/** [Method] Fired when the error message of any field within the container changes  
		* @param field Ext.form.Labelable The sub-field whose active error changed 
		* @param error String The new active error message 
		*/
		onFieldErrorChange?( field?:Ext.form.ILabelable, error?:string ): void;

		/** [Method] Fired when the validity of any field within the container changes  
		* @param field Ext.form.field.Field The sub-field whose validity changed 
		* @param valid Boolean The new validity state 
		*/
		onFieldValidityChange?( field?:Ext.form.field.IField, valid?:boolean ): void;

	}

}

declare module Ext.form {
	export interface IFieldContainer extends Ext.container.IContainer, Ext.form.ILabelable, Ext.form.IFieldAncestor {
		/** [Config Option] (Boolean) */
		combineErrors?: boolean;
		/** [Config Option] (Boolean) */
		combineLabels?: boolean;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		invalidCls?: string;
		/** [Config Option] (String) */
		labelConnector?: string;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Property] (Boolean) */
		maskOnDisable?: boolean;

		/** [Method] Gets the active error message for this component if any  
		* @returns String The active error message on the component; if there is no error, an empty string is returned. 
		*/
		getActiveError?(): string;

		/** [Method] Gets an Array of any active error messages currently applied to the field  
		* @returns String[] The active error messages on the component; if there are no errors, an empty Array is returned. 
		*/
		getActiveErrors?(): string[];

		/** [Method] Returns the value of childEls  
		* @returns Array 
		*/
		getChildEls?(): any[];

		/** [Method] Takes an Array of invalid Ext form field Field objects and builds a combined list of error messages from them  
		* @param invalidFields Ext.form.field.Field[] An Array of the sub-fields which are currently invalid. 
		* @returns String[] The combined list of error messages 
		*/
		getCombinedErrors?( invalidFields?:Ext.form.field.IField[] ): string[];

		/** [Method] Returns the combined field label if combineLabels is set to true and if there is no set fieldLabel  
		* @returns String The label, or empty string if none. 
		*/
		getFieldLabel?(): string;

		/** [Method] Get the input id if any for this component  
		* @returns String The input id 
		*/
		getInputId?(): string;

		/** [Method] Generates the arguments for the field decorations rendering template  
		* @param data Object optional object to use as the base data object. If provided, this method will add properties to the base object instead of creating a new one. 
		* @returns Object The template arguments 
		*/
		getLabelableRenderData?( data?:any ): any;

		/** [Method] Gets the markup to be inserted into the outer template s bodyEl  
		* @param fieldData Object 
		* @returns String The markup to be inserted 
		*/
		getSubTplMarkup?( fieldData?:any ): string;

		/** [Method] Tells whether the field currently has an active error message  
		* @returns Boolean 
		*/
		hasActiveError?(): boolean;

		/** [Method] Checks if the field has a visible label 
		* @returns Boolean True if the field has a visible label 
		*/
		hasVisibleLabel?(): boolean;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Initializes the FieldAncestor s state this must be called from the initComponent method of any components importing */
		initFieldAncestor?(): void;

		/** [Method] Performs initialization of this mixin  */
		initLabelable?(): void;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] Called when a Ext form Labelable instance is added to the container s subtree  
		* @param labelItem Ext.form.Labelable The instance that was added 
		*/
		onAdd?( labelItem?:Ext.form.ILabelable ): void;

		/** [Method] Fired when the validity of any field within the container changes  
		* @param field Ext.form.field.Field The sub-field whose validity changed 
		* @param valid Boolean The new validity state 
		*/
		onFieldValidityChange?( field?:Ext.form.field.IField, valid?:boolean ): void;

		/** [Method] Called when a Ext form Labelable instance is removed from the container s subtree  
		* @param labelItem Ext.form.Labelable The instance that was removed 
		*/
		onRemove?( labelItem?:Ext.form.ILabelable ): void;

		/** [Method] Sets the active error message to the given string  
		* @param msg String The error message 
		*/
		setActiveError?( msg?:string ): void;

		/** [Method] Set the active error message to an Array of error messages  
		* @param errors String[] The error messages 
		*/
		setActiveErrors?( errors?:string[] ): void;

		/** [Method] Sets the value of childEls  
		* @param childEls Array The new value. 
		*/
		setChildEls?( childEls?:any[] ): void;

		/** [Method] Applies a set of default configuration values to this Labelable instance  
		* @param defaults Object The defaults to apply to the object. 
		*/
		setFieldDefaults?( defaults?:any ): void;

		/** [Method] Set the label of this field  
		* @param label String The new label. The labelSeparator will be automatically appended to the label string. 
		*/
		setFieldLabel?( label?:string ): void;

		/** [Method] Returns the trimmed label by slicing off the label separator character  
		* @returns String The trimmed field label, or empty string if not defined 
		*/
		trimLabelSeparator?(): string;

		/** [Method] Clears the active error message s */
		unsetActiveError?(): void;

	}

}

declare module Ext.form {
	export interface IFieldSet extends Ext.container.IContainer, Ext.form.IFieldAncestor {
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		checkboxName?: string;
		/** [Config Option] (Boolean) */
		checkboxToggle?: boolean;
		/** [Config Option] (String) */
		checkboxUI?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		collapsed?: boolean;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String[]) */
		stateEvents?: string[];
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (Boolean) */
		toggleOnTitleClick?: boolean;
		/** [Property] (Ext.form.field.Checkbox) */
		checkboxCmp?: Ext.form.field.ICheckbox;

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (Ext.Component) */
		legend?: Ext.IComponent;

		/** [Property] (Boolean) */
		maskOnDisable?: boolean;

		/** [Property] (Ext.panel.Tool) */
		toggleCmp?: Ext.panel.ITool;

		/** [Method] Collapses the fieldset  
		* @returns Ext.form.FieldSet this 
		*/
		collapse?(): Ext.form.IFieldSet;

		/** [Method] Creates the checkbox component  
		* @returns Ext.Component 
		*/
		createCheckboxCmp?(): Ext.IComponent;

		/** [Method] Creates the legend title component  
		* @returns Ext.Component 
		*/
		createTitleCmp?(): Ext.IComponent;

		/** [Method] Creates the toggle button component  
		* @returns Ext.Component 
		*/
		createToggleCmp?(): Ext.IComponent;

		/** [Method] Expands the fieldset  
		* @returns Ext.form.FieldSet this 
		*/
		expand?(): Ext.form.IFieldSet;

		/** [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th  
		* @param deep Object 
		*/
		getRefItems?( deep?:any ): void;

		/** [Method] The supplied default state gathering method for the Component class  
		* @returns Object 
		*/
		getState?(): any;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Initializes the FieldAncestor s state this must be called from the initComponent method of any components importing */
		initFieldAncestor?(): void;

		/** [Method] Fired when the error message of any field within the container changes  
		* @param field Ext.form.Labelable The sub-field whose active error changed 
		* @param error String The new active error message 
		*/
		onFieldErrorChange?( field?:Ext.form.ILabelable, error?:string ): void;

		/** [Method] Fired when the validity of any field within the container changes  
		* @param field Ext.form.field.Field The sub-field whose validity changed 
		* @param valid Boolean The new validity state 
		*/
		onFieldValidityChange?( field?:Ext.form.field.IField, valid?:boolean ): void;

		/** [Method] Sets the title of this fieldset  
		* @param title String The new title. 
		* @returns Ext.form.FieldSet this 
		*/
		setTitle?( title?:string ): Ext.form.IFieldSet;

		/** [Method] Toggle the fieldset s collapsed state to the opposite of what it is currently  */
		toggle?(): void;

	}

}

declare module Ext.form {
	export interface ILabel extends Ext.IComponent {
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (String) */
		forId?: string;
		/** [Config Option] (String) */
		html?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Method] Updates the label s innerHTML with the specified string  
		* @param text String The new label text 
		* @param encode Boolean False to skip HTML-encoding the text when rendering it to the label. This might be useful if you want to include tags in the label's innerHTML rather than rendering them as string literals per the default logic. 
		* @returns Ext.form.Label this 
		*/
		setText?( text?:string, encode?:boolean ): Ext.form.ILabel;

	}

}

declare module Ext.form {
	export interface ILabelable extends Ext.IMixin {
		/** [Config Option] (String) */
		activeError?: string;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		activeErrorsTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterBodyEl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterLabelTextTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterLabelTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterSubTpl?: any;
		/** [Config Option] (Boolean) */
		autoFitErrors?: boolean;
		/** [Config Option] (String) */
		baseBodyCls?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeBodyEl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeLabelTextTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeLabelTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeSubTpl?: any;
		/** [Config Option] (String) */
		errorMsgCls?: string;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldLabel?: string;
		/** [Config Option] (String) */
		formItemCls?: string;
		/** [Config Option] (Boolean) */
		hideEmptyLabel?: boolean;
		/** [Config Option] (Boolean) */
		hideLabel?: boolean;
		/** [Config Option] (String) */
		invalidCls?: string;
		/** [Config Option] (String) */
		labelAlign?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		labelAttrTpl?: any;
		/** [Config Option] (String) */
		labelCls?: string;
		/** [Config Option] (String) */
		labelClsExtra?: string;
		/** [Config Option] (Number) */
		labelPad?: number;
		/** [Config Option] (String) */
		labelSeparator?: string;
		/** [Config Option] (String) */
		labelStyle?: string;
		/** [Config Option] (Number) */
		labelWidth?: number;
		/** [Config Option] (String) */
		msgTarget?: string;
		/** [Config Option] (Boolean) */
		preventMark?: boolean;
		/** [Property] (Ext.dom.Element) */
		bodyEl?: Ext.dom.IElement;

		/** [Property] (Ext.dom.Element) */
		errorEl?: Ext.dom.IElement;

		/** [Property] (Boolean) */
		isFieldLabelable?: boolean;

		/** [Property] (Ext.dom.Element) */
		labelEl?: Ext.dom.IElement;

		/** [Method] Gets the active error message for this component if any  
		* @returns String The active error message on the component; if there is no error, an empty string is returned. 
		*/
		getActiveError?(): string;

		/** [Method] Gets an Array of any active error messages currently applied to the field  
		* @returns String[] The active error messages on the component; if there are no errors, an empty Array is returned. 
		*/
		getActiveErrors?(): string[];

		/** [Method] Returns the value of childEls  
		* @returns Array 
		*/
		getChildEls?(): any[];

		/** [Method] Returns the label for the field  
		* @returns String The configured field label, or empty string if not defined 
		*/
		getFieldLabel?(): string;

		/** [Method] Get the input id if any for this component  
		* @returns String The input id 
		*/
		getInputId?(): string;

		/** [Method] Generates the arguments for the field decorations rendering template  
		* @param data Object optional object to use as the base data object. If provided, this method will add properties to the base object instead of creating a new one. 
		* @returns Object The template arguments 
		*/
		getLabelableRenderData?( data?:any ): any;

		/** [Method] Gets the markup to be inserted into the outer template s bodyEl  
		* @returns String The markup to be inserted 
		*/
		getSubTplMarkup?(): string;

		/** [Method] Tells whether the field currently has an active error message  
		* @returns Boolean 
		*/
		hasActiveError?(): boolean;

		/** [Method] Checks if the field has a visible label 
		* @returns Boolean True if the field has a visible label 
		*/
		hasVisibleLabel?(): boolean;

		/** [Method] Performs initialization of this mixin  */
		initLabelable?(): void;

		/** [Method] Sets the active error message to the given string  
		* @param msg String The error message 
		*/
		setActiveError?( msg?:string ): void;

		/** [Method] Set the active error message to an Array of error messages  
		* @param errors String[] The error messages 
		*/
		setActiveErrors?( errors?:string[] ): void;

		/** [Method] Sets the value of childEls  
		* @param childEls Array The new value. 
		*/
		setChildEls?( childEls?:any[] ): void;

		/** [Method] Applies a set of default configuration values to this Labelable instance  
		* @param defaults Object The defaults to apply to the object. 
		*/
		setFieldDefaults?( defaults?:any ): void;

		/** [Method] Set the label of this field  
		* @param label String The new label. The labelSeparator will be automatically appended to the label string. 
		*/
		setFieldLabel?( label?:string ): void;

		/** [Method] Returns the trimmed label by slicing off the label separator character  
		* @returns String The trimmed field label, or empty string if not defined 
		*/
		trimLabelSeparator?(): string;

		/** [Method] Clears the active error message s */
		unsetActiveError?(): void;

	}
	export class Labelable {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Destroy the error tip instance  */
		static destroyTip(): void;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.form {
	export interface IPanel extends Ext.panel.IPanel, Ext.form.IFieldAncestor {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		errorReader?: any;
		/** [Config Option] (Boolean) */
		jsonSubmit?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Config Option] (Boolean) */
		pollForChanges?: boolean;
		/** [Config Option] (Number) */
		pollInterval?: number;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: boolean;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		waitMsgTarget?: any;
		/** [Config Option] (String) */
		waitTitle?: string;
		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Forces each field within the form panel to check if its value has changed  */
		checkChange?(): void;

		/** [Method] Provides access to the Form which this Panel contains  
		* @returns Ext.form.Basic The Form which this Panel contains. 
		*/
		getForm?(): Ext.form.IBasic;

		/** [Method] Returns the currently loaded Ext data Model instance if one was loaded via loadRecord  
		* @returns Ext.data.Model The loaded instance 
		*/
		getRecord?(): Ext.data.IModel;

		/** [Method] Convenience function for fetching the current value of each field in the form  
		* @param asString Boolean If true, will return the key/value collection as a single URL-encoded param string. 
		* @param dirtyOnly Boolean If true, only fields that are dirty will be included in the result. 
		* @param includeEmptyText Boolean If true, the configured emptyText of empty fields will be used. 
		* @param useDataValues Boolean If true, the getModelData method is used to retrieve values from fields, otherwise the getSubmitData method is used. 
		* @returns String/Object 
		*/
		getValues?( asString?:boolean, dirtyOnly?:boolean, includeEmptyText?:boolean, useDataValues?:boolean ): any;

		/** [Method] Convenience function to check if the form has any invalid fields  */
		hasInvalidField?(): void;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Initializes the FieldAncestor s state this must be called from the initComponent method of any components importing */
		initFieldAncestor?(): void;

		/** [Method] This method is called to initialize the items collection  */
		initItems?(): void;

		/** [Method] Convenience function to check if the form has any dirty fields  
		* @returns Boolean 
		*/
		isDirty?(): boolean;

		/** [Method] Convenience function to check if the form has all valid fields  
		* @returns Boolean 
		*/
		isValid?(): boolean;

		/** [Method] This is a proxy for the underlying BasicForm s Ext form Basic load call  
		* @param options Object The options to pass to the action (see Ext.form.Basic.load and Ext.form.Basic.doAction for details) 
		*/
		load?( options?:any ): void;

		/** [Method] Loads an Ext data Model into this form internally just calls Ext form Basic loadRecord See also trackResetOnLoad  
		* @param record Ext.data.Model The record to load 
		* @returns Ext.form.Basic The Ext.form.Basic attached to this FormPanel 
		*/
		loadRecord?( record?:Ext.data.IModel ): Ext.form.IBasic;

		/** [Method] Fired when the error message of any field within the container changes  
		* @param field Ext.form.Labelable The sub-field whose active error changed 
		* @param error String The new active error message 
		*/
		onFieldErrorChange?( field?:Ext.form.ILabelable, error?:string ): void;

		/** [Method] Fired when the validity of any field within the container changes  
		* @param field Ext.form.field.Field The sub-field whose validity changed 
		* @param valid Boolean The new validity state 
		*/
		onFieldValidityChange?( field?:Ext.form.field.IField, valid?:boolean ): void;

		/** [Method] Convenience function reset the form  
		* @param resetRecord Boolean True to unbind any record set by loadRecord 
		* @returns Ext.form.Basic this 
		*/
		reset?( resetRecord?:boolean ): Ext.form.IBasic;

		/** [Method] Start an interval task to continuously poll all the fields in the form for changes in their values  
		* @param interval Number The interval in milliseconds at which the check should run. 
		*/
		startPolling?( interval?:number ): void;

		/** [Method] Stop a running interval task that was started by startPolling  */
		stopPolling?(): void;

		/** [Method] This is a proxy for the underlying BasicForm s Ext form Basic submit call  
		* @param options Object The options to pass to the action (see Ext.form.Basic.submit and Ext.form.Basic.doAction for details) 
		*/
		submit?( options?:any ): void;

		/** [Method] Persists the values in this form into the passed Ext data Model object in a beginEdit endEdit block  
		* @param record Ext.data.Model The record to edit 
		* @returns Ext.form.Basic The Ext.form.Basic attached to this FormPanel 
		*/
		updateRecord?( record?:Ext.data.IModel ): Ext.form.IBasic;

	}

}

declare module Ext {
	export interface IFormPanel extends Ext.panel.IPanel, Ext.form.IFieldAncestor {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		errorReader?: any;
		/** [Config Option] (Boolean) */
		jsonSubmit?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Config Option] (Boolean) */
		pollForChanges?: boolean;
		/** [Config Option] (Number) */
		pollInterval?: number;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: boolean;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		waitMsgTarget?: any;
		/** [Config Option] (String) */
		waitTitle?: string;
		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Forces each field within the form panel to check if its value has changed  */
		checkChange?(): void;

		/** [Method] Provides access to the Form which this Panel contains  
		* @returns Ext.form.Basic The Form which this Panel contains. 
		*/
		getForm?(): Ext.form.IBasic;

		/** [Method] Returns the currently loaded Ext data Model instance if one was loaded via loadRecord  
		* @returns Ext.data.Model The loaded instance 
		*/
		getRecord?(): Ext.data.IModel;

		/** [Method] Convenience function for fetching the current value of each field in the form  
		* @param asString Boolean If true, will return the key/value collection as a single URL-encoded param string. 
		* @param dirtyOnly Boolean If true, only fields that are dirty will be included in the result. 
		* @param includeEmptyText Boolean If true, the configured emptyText of empty fields will be used. 
		* @param useDataValues Boolean If true, the getModelData method is used to retrieve values from fields, otherwise the getSubmitData method is used. 
		* @returns String/Object 
		*/
		getValues?( asString?:boolean, dirtyOnly?:boolean, includeEmptyText?:boolean, useDataValues?:boolean ): any;

		/** [Method] Convenience function to check if the form has any invalid fields  */
		hasInvalidField?(): void;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Initializes the FieldAncestor s state this must be called from the initComponent method of any components importing */
		initFieldAncestor?(): void;

		/** [Method] This method is called to initialize the items collection  */
		initItems?(): void;

		/** [Method] Convenience function to check if the form has any dirty fields  
		* @returns Boolean 
		*/
		isDirty?(): boolean;

		/** [Method] Convenience function to check if the form has all valid fields  
		* @returns Boolean 
		*/
		isValid?(): boolean;

		/** [Method] This is a proxy for the underlying BasicForm s Ext form Basic load call  
		* @param options Object The options to pass to the action (see Ext.form.Basic.load and Ext.form.Basic.doAction for details) 
		*/
		load?( options?:any ): void;

		/** [Method] Loads an Ext data Model into this form internally just calls Ext form Basic loadRecord See also trackResetOnLoad  
		* @param record Ext.data.Model The record to load 
		* @returns Ext.form.Basic The Ext.form.Basic attached to this FormPanel 
		*/
		loadRecord?( record?:Ext.data.IModel ): Ext.form.IBasic;

		/** [Method] Fired when the error message of any field within the container changes  
		* @param field Ext.form.Labelable The sub-field whose active error changed 
		* @param error String The new active error message 
		*/
		onFieldErrorChange?( field?:Ext.form.ILabelable, error?:string ): void;

		/** [Method] Fired when the validity of any field within the container changes  
		* @param field Ext.form.field.Field The sub-field whose validity changed 
		* @param valid Boolean The new validity state 
		*/
		onFieldValidityChange?( field?:Ext.form.field.IField, valid?:boolean ): void;

		/** [Method] Convenience function reset the form  
		* @param resetRecord Boolean True to unbind any record set by loadRecord 
		* @returns Ext.form.Basic this 
		*/
		reset?( resetRecord?:boolean ): Ext.form.IBasic;

		/** [Method] Start an interval task to continuously poll all the fields in the form for changes in their values  
		* @param interval Number The interval in milliseconds at which the check should run. 
		*/
		startPolling?( interval?:number ): void;

		/** [Method] Stop a running interval task that was started by startPolling  */
		stopPolling?(): void;

		/** [Method] This is a proxy for the underlying BasicForm s Ext form Basic submit call  
		* @param options Object The options to pass to the action (see Ext.form.Basic.submit and Ext.form.Basic.doAction for details) 
		*/
		submit?( options?:any ): void;

		/** [Method] Persists the values in this form into the passed Ext data Model object in a beginEdit endEdit block  
		* @param record Ext.data.Model The record to edit 
		* @returns Ext.form.Basic The Ext.form.Basic attached to this FormPanel 
		*/
		updateRecord?( record?:Ext.data.IModel ): Ext.form.IBasic;

	}

}

declare module Ext.form {
	export interface IFormPanel extends Ext.panel.IPanel, Ext.form.IFieldAncestor {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		errorReader?: any;
		/** [Config Option] (Boolean) */
		jsonSubmit?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Config Option] (Boolean) */
		pollForChanges?: boolean;
		/** [Config Option] (Number) */
		pollInterval?: number;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: boolean;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		waitMsgTarget?: any;
		/** [Config Option] (String) */
		waitTitle?: string;
		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Forces each field within the form panel to check if its value has changed  */
		checkChange?(): void;

		/** [Method] Provides access to the Form which this Panel contains  
		* @returns Ext.form.Basic The Form which this Panel contains. 
		*/
		getForm?(): Ext.form.IBasic;

		/** [Method] Returns the currently loaded Ext data Model instance if one was loaded via loadRecord  
		* @returns Ext.data.Model The loaded instance 
		*/
		getRecord?(): Ext.data.IModel;

		/** [Method] Convenience function for fetching the current value of each field in the form  
		* @param asString Boolean If true, will return the key/value collection as a single URL-encoded param string. 
		* @param dirtyOnly Boolean If true, only fields that are dirty will be included in the result. 
		* @param includeEmptyText Boolean If true, the configured emptyText of empty fields will be used. 
		* @param useDataValues Boolean If true, the getModelData method is used to retrieve values from fields, otherwise the getSubmitData method is used. 
		* @returns String/Object 
		*/
		getValues?( asString?:boolean, dirtyOnly?:boolean, includeEmptyText?:boolean, useDataValues?:boolean ): any;

		/** [Method] Convenience function to check if the form has any invalid fields  */
		hasInvalidField?(): void;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Initializes the FieldAncestor s state this must be called from the initComponent method of any components importing */
		initFieldAncestor?(): void;

		/** [Method] This method is called to initialize the items collection  */
		initItems?(): void;

		/** [Method] Convenience function to check if the form has any dirty fields  
		* @returns Boolean 
		*/
		isDirty?(): boolean;

		/** [Method] Convenience function to check if the form has all valid fields  
		* @returns Boolean 
		*/
		isValid?(): boolean;

		/** [Method] This is a proxy for the underlying BasicForm s Ext form Basic load call  
		* @param options Object The options to pass to the action (see Ext.form.Basic.load and Ext.form.Basic.doAction for details) 
		*/
		load?( options?:any ): void;

		/** [Method] Loads an Ext data Model into this form internally just calls Ext form Basic loadRecord See also trackResetOnLoad  
		* @param record Ext.data.Model The record to load 
		* @returns Ext.form.Basic The Ext.form.Basic attached to this FormPanel 
		*/
		loadRecord?( record?:Ext.data.IModel ): Ext.form.IBasic;

		/** [Method] Fired when the error message of any field within the container changes  
		* @param field Ext.form.Labelable The sub-field whose active error changed 
		* @param error String The new active error message 
		*/
		onFieldErrorChange?( field?:Ext.form.ILabelable, error?:string ): void;

		/** [Method] Fired when the validity of any field within the container changes  
		* @param field Ext.form.field.Field The sub-field whose validity changed 
		* @param valid Boolean The new validity state 
		*/
		onFieldValidityChange?( field?:Ext.form.field.IField, valid?:boolean ): void;

		/** [Method] Convenience function reset the form  
		* @param resetRecord Boolean True to unbind any record set by loadRecord 
		* @returns Ext.form.Basic this 
		*/
		reset?( resetRecord?:boolean ): Ext.form.IBasic;

		/** [Method] Start an interval task to continuously poll all the fields in the form for changes in their values  
		* @param interval Number The interval in milliseconds at which the check should run. 
		*/
		startPolling?( interval?:number ): void;

		/** [Method] Stop a running interval task that was started by startPolling  */
		stopPolling?(): void;

		/** [Method] This is a proxy for the underlying BasicForm s Ext form Basic submit call  
		* @param options Object The options to pass to the action (see Ext.form.Basic.submit and Ext.form.Basic.doAction for details) 
		*/
		submit?( options?:any ): void;

		/** [Method] Persists the values in this form into the passed Ext data Model object in a beginEdit endEdit block  
		* @param record Ext.data.Model The record to edit 
		* @returns Ext.form.Basic The Ext.form.Basic attached to this FormPanel 
		*/
		updateRecord?( record?:Ext.data.IModel ): Ext.form.IBasic;

	}

}

declare module Ext.form {
	export interface IRadioGroup extends Ext.form.ICheckboxGroup, Ext.util.IFocusableContainer {
		/** [Config Option] (Boolean) */
		allowBlank?: boolean;
		/** [Config Option] (String) */
		blankText?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Ext.form.field.Radio[]/Object[]) */
		items?: any;
		/** [Method] Checks whether the value of the field has changed since the last time it was checked  */
		checkChange?(): void;

		/** [Method] Sets the value of the radio group  
		* @param value Object The map from names to values to be set. 
		* @returns Ext.form.RadioGroup this 
		*/
		setValue?( value?:any ): Ext.form.IRadioGroup;

	}

}

declare module Ext.form {
	export interface IRadioManager extends Ext.util.IMixedCollection {
	}
	export class RadioManager {
		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isMixedCollection: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Boolean) */
		static isSortable: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Adds an item to the collection  
		* @param key String/Object The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter. 
		* @param obj Object The item to add. Note that when adding a value that is iterable, it must be wrapped in brackets, i.e.: c.add([[1, 2]]);  This will be needed for any value that is iterable, i.e., an array, arguments object, HTML collections, etc. 
		* @returns Object The item added. 
		*/
		static add( key?:any, obj?:any ): any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Adds all elements of an Array or an Object to the collection  
		* @param objs Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if allowFunctions has been set to true. 
		*/
		static addAll( objs?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all items from the collection  */
		static clear(): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] Creates a shallow copy of this collection 
		* @returns Ext.util.MixedCollection 
		*/
		static clone(): Ext.util.IMixedCollection;

		/** [Method] Collects unique values of a particular property in this MixedCollection 
		* @param property String The property to collect on 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param allowBlank Boolean Pass true to allow null, undefined or empty string values 
		* @returns Array The unique values 
		*/
		static collect( property?:string, root?:string, allowBlank?:boolean ): any[];

		/** [Method] Returns true if the collection contains the passed Object as an item  
		* @param o Object The Object to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as an item. 
		*/
		static contains( o?:any ): boolean;

		/** [Method] Returns true if the collection contains the passed Object as a key  
		* @param key String The key to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as a key. 
		*/
		static containsKey( key?:string ): boolean;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Executes the specified function once for every item in the collection  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration. 
		*/
		static each( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		static eachKey( fn?:any, scope?:any ): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Filters the objects in this collection by a set of Filters or by a single property value pair with optional paramete  
		* @param property Ext.util.Filter[]/String A property on your objects, or an array of Filter objects 
		* @param value String/RegExp Either string that the property values should start with or a RegExp to test against the property 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		static filter( property?:any, value?:any, anyMatch?:boolean, caseSensitive?:boolean ): Ext.util.IMixedCollection;

		/** [Method] Filter by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		static filterBy( fn?:any, scope?:any ): Ext.util.IMixedCollection;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  */
		static find(): void;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  
		* @param fn Function The selection function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		* @returns Object The first item in the collection which returned true from the selection function, or null if none was found. 
		*/
		static findBy( fn?:any, scope?:any ): any;

		/** [Method] Finds the index of the first matching object in this collection by a specific property value  
		* @param property String The name of a property on your objects. 
		* @param value String/RegExp A string that the property values should start with or a RegExp to test against the property. 
		* @param start Number The index to start searching at. 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Number The matched index or -1 
		*/
		static findIndex( property?:string, value?:any, start?:number, anyMatch?:boolean, caseSensitive?:boolean ): number;

		/** [Method] Find the index of the first matching object in this collection by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @param start Number The index to start searching at. 
		* @returns Number The matched index or -1 
		*/
		static findIndexBy( fn?:any, scope?:any, start?:number ): number;

		/** [Method] Calculates the insertion index of the new item based upon the comparison function passed or the current sort order  
		* @param newItem Object The new object to find the insertion position of. 
		* @param sorterFn Function The function to sort by. This is the same as the sorting function passed to sortBy. It accepts 2 items from this MixedCollection, and returns -1 0, or 1 depending on the relative sort positions of the 2 compared items. If omitted, a function generated from the currently defined set of sorters will be used. 
		* @returns Number The insertion point to add the new item into this MixedCollection at using insert 
		*/
		static findInsertionIndex( newItem?:any, sorterFn?:any ): number;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the first item in the collection  
		* @returns Object the first item in the collection.. 
		*/
		static first(): any;

		/** [Method] Returns a comparator function which compares two items and returns 1 0 or 1 depending on the currently defined set  */
		static generateComparator(): void;

		/** [Method] Returns the item associated with the passed key OR index  
		* @param key String/Number The key or index of the item. 
		* @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null. 
		*/
		static get( key?:any ): any;

		/** [Method] Returns the item at the specified index  
		* @param index Number The index of the item. 
		* @returns Object The item at the specified index. 
		*/
		static getAt( index?:number ): any;

		/** [Method] Returns the item associated with the passed key  
		* @param key String/Number The key of the item. 
		* @returns Object The item associated with the passed key. 
		*/
		static getByKey( key?:any ): any;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the number of items in the collection  
		* @returns Number the number of items in the collection. 
		*/
		static getCount(): number;

		/** [Method] Gets the first sorter from the sorters collection excluding any groupers that may be in place 
		* @returns Ext.util.Sorter The sorter, null if none exist 
		*/
		static getFirstSorter(): Ext.util.ISorter;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] A function which will be called passing a newly added object when the object is added without a separate id  
		* @param item Object The item for which to find the key. 
		* @returns Object The key for the passed item. 
		*/
		static getKey( item?:any ): any;

		/** [Method] Returns a range of items in this collection 
		* @param startIndex Number The starting index. Defaults to 0. 
		* @param endIndex Number The ending index. Defaults to the last item. 
		* @returns Array An array of items 
		*/
		static getRange( startIndex?:number, endIndex?:number ): any[];

		/** [Method] Returns the number of Sorters which apply to this Sortable  */
		static getSorterCount(): void;

		/** [Method] Returns the value of sorters  
		* @returns Ext.util.Sorter[]/Object[] 
		*/
		static getSorters(): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Returns index within the collection of the passed Object  
		* @param o Object The item to find the index of. 
		* @returns Number index of the item. Returns -1 if not found. 
		*/
		static indexOf( o?:any ): number;

		/** [Method] Returns index within the collection of the passed key  
		* @param key String The key to find the index of. 
		* @returns Number index of the key. 
		*/
		static indexOfKey( key?:string ): number;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Inserts an item at the specified index in the collection  
		* @param index Number The index to insert the item at. 
		* @param key String/Object/String[]/Object[] The key to associate with the new item, or the item itself. May also be an array of either to insert multiple items at once. 
		* @param o Object/Object[] If the second parameter was a key, the new item. May also be an array to insert multiple items at once. 
		* @returns Object The item inserted or an array of items inserted. 
		*/
		static insert( index?:number, key?:any, o?:any ): any;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Returns the last item in the collection  
		* @returns Object the last item in the collection.. 
		*/
		static last(): any;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Remove an item from the collection  
		* @param o Object The item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		static remove( o?:any ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Remove all items in the collection  
		* @param items Array An array of items to be removed. 
		* @returns Ext.util.MixedCollection this object 
		*/
		static removeAll( items?:any[] ): Ext.util.IMixedCollection;

		/** [Method] Remove an item from a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		static removeAt( index?:number ): any;

		/** [Method] Removes an item associated with the passed key fom the collection  
		* @param key String The key of the item to remove. If null is passed, all objects which yielded no key from the configured getKey function are removed. 
		* @returns Object Only returned if removing at a specified key. The item removed or false if no item was removed. 
		*/
		static removeAtKey( key?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Remove a range of items starting at a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @param removeCount Number The nuber of items to remove beginning at the specified index. 
		* @returns Object The last item removed or false if no item was removed. 
		*/
		static removeRange( index?:number, removeCount?:number ): any;

		/** [Method] Reorders each of the items based on a mapping from old index to new index  
		* @param mapping Object Mapping from old item index to new item index 
		*/
		static reorder( mapping?:any ): void;

		/** [Method] Replaces an item in the collection  
		* @param key String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter. 
		* @param o Object {Object} o (optional) If the first parameter passed was a key, the item to associate with that key. 
		* @returns Object The new item. 
		*/
		static replace( key?:string, o?:any ): any;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Sets the value of sorters  
		* @param sorters Ext.util.Sorter[]/Object[] The new value. 
		*/
		static setSorters( sorters?:any ): void;

		/** [Method] Updates the sorters collection and triggers sorting of this Sortable  
		* @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations. 
		* @param direction String The overall direction to sort the data by. 
		* @param insertionPosition String Where to put the new sorter in the collection of sorters. This may take the following values:  replace : This means that the new sorter(s) becomes the sole sorter set for this Sortable. This is the most useful call mode  to programatically sort by multiple fields. prepend : This means that the new sorters are inserted as the primary sorters, unchanged, and the sorter list length must be controlled by the developer. multi : This is mainly useful for implementing intuitive "Sort by this" user interfaces such as the GridPanel's column sorting UI. This mode is only supported when passing a property name and a direction. This means that the new sorter is becomes the primary sorter. If the sorter was already the primary sorter, the direction  of sort is toggled if no direction parameter is specified. The number of sorters maintained is limited by the multiSortLimit configuration. append : This means that the new sorter becomes the last sorter.  
		* @returns Ext.util.Sorter[] The new sorters. 
		*/
		static sort( sorters?:any, direction?:string, insertionPosition?:string ): Ext.util.ISorter[];

		/** [Method] Sorts the collection by a single sorter function 
		* @param sorterFn Function The function to sort by 
		*/
		static sortBy( sorterFn?:any ): void;

		/** [Method] Sorts this collection by keys  
		* @param direction String 'ASC' or 'DESC'. Defaults to 'ASC'. 
		* @param fn Function Comparison function that defines the sort order. Defaults to sorting by case insensitive string. 
		*/
		static sortByKey( direction?:string, fn?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Collects all of the values of the given property and returns their sum 
		* @param property String The property to sum by 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param start Number The record index to start at 
		* @param end Number The record index to end at 
		* @returns Number The total 
		*/
		static sum( property?:string, root?:string, start?:number, end?:number ): number;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Change the key for an existing item in the collection  
		* @param oldKey Object The old key 
		* @param newKey Object The new key 
		*/
		static updateKey( oldKey?:any, newKey?:any ): void;

	}

}

declare module Ext.form.trigger {
	export interface IComponent extends Ext.form.trigger.ITrigger {
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Object/Ext.Component/Ext.Widget) */
		component?: any;
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.form.trigger {
	export interface ISpinner extends Ext.form.trigger.ITrigger {
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Function/String) */
		downHandler?: any;
		/** [Config Option] (Function/String) */
		upHandler?: any;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
		/** [Property] (Ext.Template/String/Array) */
		bodyTpl?: any;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Allows addition of data to the render data object for the bodyTpl  
		* @returns Object 
		*/
		getBodyRenderData?(): any;

		/** [Method] Returns the element that should receive the state classes  focusCls overCls and clickCls  */
		getStateEl?(): void;

		/** [Method] Handles a click on the trigger s element */
		onClick?(): void;

		/** [Method] Called when this trigger s field is rendered */
		onFieldRender?(): void;

	}

}

declare module Ext.form.trigger {
	export interface ITrigger extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (String) */
		extraCls?: string;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (Boolean) */
		hideOnReadOnly?: boolean;
		/** [Config Option] (Boolean) */
		repeatClick?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Number) */
		weight?: number;
		/** [Config Option] (Number) */
		width?: number;
		/** [Property] (Ext.Template/String/Array) */
		bodyTpl?: any;

		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Method] Called when this trigger s field is rendered */
		afterFieldRender?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Allows addition of data to the render data object for the bodyTpl  
		* @returns Object 
		*/
		getBodyRenderData?(): any;

		/** [Method] Get the element for this trigger  
		* @returns Ext.dom.Element The element for this trigger, null if not rendered. 
		*/
		getEl?(): Ext.dom.IElement;

		/** [Method] Returns the element that should receive the state classes  focusCls overCls and clickCls  */
		getStateEl?(): void;

		/** [Method] Hides the trigger */
		hide?(): void;

		/** [Method] Returns true if this Trigger is visible  
		* @returns Boolean true if this trigger is visible, false otherwise. 
		*/
		isVisible?(): boolean;

		/** [Method] Handles a click on the trigger s element */
		onClick?(): void;

		/** [Method] Called when this trigger s field is blurred */
		onFieldBlur?(): void;

		/** [Method] Called when this trigger s field is focused */
		onFieldFocus?(): void;

		/** [Method] Called when this trigger s field is rendered */
		onFieldRender?(): void;

		/** [Method] Shows the trigger */
		show?(): void;

	}

}

declare module Ext {
	export interface IFunction {
	}
	export class Function {
		/** [Method] Create an alias to the provided method property with name methodName of object  
		* @param object Object/Function 
		* @param methodName String 
		* @returns Function aliasFn 
		*/
		static alias( object?:any, methodName?:string ): any;

		/** [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the  
		* @param fn Function The function to delegate. 
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the default global environment object (usually the browser window). 
		* @param args Array Overrides arguments for the call. (Defaults to the arguments passed by the caller) 
		* @param appendArgs Boolean/Number if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position. 
		* @returns Function The new function. 
		*/
		static bind( fn?:any, scope?:any, args?:any[], appendArgs?:any ): any;

		/** [Method] Captures the given parameters for a later call to Ext callback  
		* @param callback Object 
		* @param scope Object 
		* @param args Object 
		* @param delay Object 
		* @param caller Object 
		* @returns Function A function that, when called, uses Ext.callback to call the captured callback. 
		*/
		static bindCallback( callback?:any, scope?:any, args?:any, delay?:any, caller?:any ): any;

		/** [Method] Create a clone of the provided method  
		* @param method Function 
		* @returns Function cloneFn 
		*/
		static clone( method?:any ): any;

		/** [Method] Wraps the passed function in a barrier function which will call the passed function after the passed number of invoca  
		* @param count Number The number of invocations which will result in the calling of the passed function. 
		* @param fn Function The function to call after the required number of invocations. 
		* @param scope Object The scope (this reference) in which the function will be called. 
		*/
		static createBarrier( count?:number, fn?:any, scope?:any ): void;

		/** [Method] Creates a delegate function optionally with a bound scope which when called buffers the execution of the passed fu  
		* @param fn Function The function to invoke on a buffered timer. 
		* @param buffer Number The number of milliseconds by which to buffer the invocation of the function. 
		* @param scope Object The scope (this reference) in which. the passed function is executed. If omitted, defaults to the scope specified by the caller. 
		* @param args Array Override arguments for the call. Defaults to the arguments passed by the caller. 
		* @returns Function A function which invokes the passed function after buffering for the specified time. 
		*/
		static createBuffered( fn?:any, buffer?:number, scope?:any, args?:any[] ): any;

		/** [Method] Creates a delegate callback which when called executes after a specific delay  
		* @param fn Function The function which will be called on a delay when the returned function is called. Optionally, a replacement (or additional) argument list may be specified. 
		* @param delay Number The number of milliseconds to defer execution by whenever called. 
		* @param scope Object The scope (this reference) used by the function at execution time. 
		* @param args Array Override arguments for the call. (Defaults to the arguments passed by the caller) 
		* @param appendArgs Boolean/Number if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position. 
		* @returns Function A function which, when called, executes the original function after the specified delay. 
		*/
		static createDelayed( fn?:any, delay?:number, scope?:any, args?:any[], appendArgs?:any ): any;

		/** [Method] Creates an interceptor function  
		* @param origFn Function The original function. 
		* @param newFn Function The function to call before the original. 
		* @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the browser window. 
		* @param returnValue Object The value to return if the passed function return false. 
		* @returns Function The new function. 
		*/
		static createInterceptor( origFn?:any, newFn?:any, scope?:any, returnValue?:any ): any;

		/** [Method] Create a combined function call sequence of the original function  the passed function  
		* @param originalFn Function The original function. 
		* @param newFn Function The function to sequence. 
		* @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope in which the original function is called or the default global environment object (usually the browser window). 
		* @returns Function The new function. 
		*/
		static createSequence( originalFn?:any, newFn?:any, scope?:any ): any;

		/** [Method] Creates a throttled version of the passed function which when called repeatedly and rapidly invokes the passed func  
		* @param fn Function The function to execute at a regular time interval. 
		* @param interval Number The interval in milliseconds on which the passed function is executed. 
		* @param scope Object The scope (this reference) in which the passed function is executed. If omitted, defaults to the scope specified by the caller. 
		* @returns Function A function which invokes the passed function at the specified interval. 
		*/
		static createThrottled( fn?:any, interval?:number, scope?:any ): any;

		/** [Method] Calls this function after the number of milliseconds specified optionally in a specific scope  
		* @param fn Function The function to defer. 
		* @param millis Number The number of milliseconds for the setTimeout call (if less than or equal to 0 the function is executed immediately). 
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window. 
		* @param args Array Overrides arguments for the call. Defaults to the arguments passed by the caller. 
		* @param appendArgs Boolean/Number If true args are appended to call args instead of overriding, or, if a number, then the args are inserted at the specified position. 
		* @returns Number The timeout id that can be used with clearTimeout. 
		*/
		static defer( fn?:any, millis?:number, scope?:any, args?:any[], appendArgs?:any ): number;

		/** [Method] A very commonly used method throughout the framework  
		* @param setter Function The single value setter method. 
		* @returns Function 
		*/
		static flexSetter( setter?:any ): any;

		/** [Method] Adds behavior to an existing method that is executed after the original behavior of the function  
		* @param object Object The target object 
		* @param methodName String Name of the method to override 
		* @param fn Function Function with the new behavior. It will be called with the same arguments as the original method. The return value of this function will be the return value of the new method. 
		* @param scope Object The scope to execute the interceptor function. Defaults to the object. 
		* @returns Function The new function just created. 
		*/
		static interceptAfter( object?:any, methodName?:string, fn?:any, scope?:any ): any;

		/** [Method] Adds behavior to an existing method that is executed before the original behavior of the function  
		* @param object Object The target object 
		* @param methodName String Name of the method to override 
		* @param fn Function Function with the new behavior. It will be called with the same arguments as the original method. The return value of this function will be the return value of the new method. 
		* @param scope Object The scope to execute the interceptor function. Defaults to the object. 
		* @returns Function The new function just created. 
		*/
		static interceptBefore( object?:any, methodName?:string, fn?:any, scope?:any ): any;

		/** [Method] Calls this function repeatedly at a given interval optionally in a specific scope  
		* @param fn Function The function to defer. 
		* @param millis Number The number of milliseconds for the setInterval call 
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window. 
		* @param args Array Overrides arguments for the call. Defaults to the arguments passed by the caller. 
		* @param appendArgs Boolean/Number If true args are appended to call args instead of overriding, or, if a number, then the args are inserted at the specified position. 
		* @returns Number The interval id that can be used with clearInterval. 
		*/
		static interval( fn?:any, millis?:number, scope?:any, args?:any[], appendArgs?:any ): number;

		/** [Method] Create a new function from the provided fn the arguments of which are pre set to args  
		* @param fn Function The original function. 
		* @param args Array The arguments to pass to new callback. 
		* @param scope Object The scope (this reference) in which the function is executed. 
		* @returns Function The new callback function. 
		*/
		static pass( fn?:any, args?:any[], scope?:any ): any;

	}

}

declare module Ext.fx {
	export interface IAnim extends Ext.IBase, Ext.util.IObservable {
		/** [Config Option] (Boolean) */
		alternate?: boolean;
		/** [Config Option] (Boolean) */
		autoEnd?: boolean;
		/** [Config Option] (Function/String) */
		callback?: any;
		/** [Config Option] (Number) */
		delay?: number;
		/** [Config Option] (Number) */
		duration?: number;
		/** [Config Option] (Boolean) */
		dynamic?: boolean;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Object) */
		from?: any;
		/** [Config Option] (Number) */
		iterations?: number;
		/** [Config Option] (Object) */
		keyframes?: any;
		/** [Config Option] (Boolean) */
		remove?: boolean;
		/** [Config Option] (Boolean) */
		reverse?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String/Object) */
		target?: any;
		/** [Config Option] (Object) */
		to?: any;
		/** [Property] (Number) */
		currentIteration?: number;

		/** [Property] (Boolean) */
		isAnimation?: boolean;

		/** [Property] (Boolean) */
		paused?: boolean;

		/** [Property] (Boolean) */
		running?: boolean;

		/** [Property] (Date) */
		startTime?: any;

		/** [Method] Fire afteranimate event and end the animation  */
		end?(): void;

		/** [Method] Immediately force this animation to its final state  */
		jumpToEnd?(): void;

	}

}

declare module Ext.fx.animation {
	export interface IAbstract extends Ext.IEvented {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (String) */
		easing?: string;
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of after  
		* @returns Object 
		*/
		getAfter?(): any;

		/** [Method] Returns the value of before  
		* @returns Object 
		*/
		getBefore?(): any;

		/** [Method] Returns the value of delay  
		* @returns Number 
		*/
		getDelay?(): number;

		/** [Method] Returns the value of direction  
		* @returns String 
		*/
		getDirection?(): string;

		/** [Method] Returns the value of duration  
		* @returns Number 
		*/
		getDuration?(): number;

		/** [Method] Returns the value of easing  
		* @returns String 
		*/
		getEasing?(): string;

		/** [Method] Returns the value of element  
		* @returns Object 
		*/
		getElement?(): any;

		/** [Method] Returns the value of iteration  
		* @returns Number 
		*/
		getIteration?(): number;

		/** [Method] Returns the value of name  
		* @returns String 
		*/
		getName?(): string;

		/** [Method] Returns the value of onBeforeEnd  
		* @returns Object 
		*/
		getOnBeforeEnd?(): any;

		/** [Method] Returns the value of onBeforeStart  
		* @returns Object 
		*/
		getOnBeforeStart?(): any;

		/** [Method] Returns the value of onEnd  
		* @returns Object 
		*/
		getOnEnd?(): any;

		/** [Method] Returns the value of preserveEndState  
		* @returns Boolean 
		*/
		getPreserveEndState?(): boolean;

		/** [Method] Returns the value of replacePrevious  
		* @returns Boolean 
		*/
		getReplacePrevious?(): boolean;

		/** [Method] Returns the value of reverse  
		* @returns Object 
		*/
		getReverse?(): any;

		/** [Method] Returns the value of scope  
		* @returns Object 
		*/
		getScope?(): any;

		/** [Method] Sets the value of after  
		* @param after Object The new value. 
		*/
		setAfter?( after?:any ): void;

		/** [Method] Sets the value of before  
		* @param before Object The new value. 
		*/
		setBefore?( before?:any ): void;

		/** [Method] Sets the value of delay  
		* @param delay Number The new value. 
		*/
		setDelay?( delay?:number ): void;

		/** [Method] Sets the value of direction  
		* @param direction String The new value. 
		*/
		setDirection?( direction?:string ): void;

		/** [Method] Sets the value of duration  
		* @param duration Number The new value. 
		*/
		setDuration?( duration?:number ): void;

		/** [Method] Sets the value of easing  
		* @param easing String The new value. 
		*/
		setEasing?( easing?:string ): void;

		/** [Method] Sets the value of element  
		* @param element Object The new value. 
		*/
		setElement?( element?:any ): void;

		/** [Method] Sets the value of iteration  
		* @param iteration Number The new value. 
		*/
		setIteration?( iteration?:number ): void;

		/** [Method] Sets the value of name  
		* @param name String The new value. 
		*/
		setName?( name?:string ): void;

		/** [Method] Sets the value of onBeforeEnd  
		* @param onBeforeEnd Object The new value. 
		*/
		setOnBeforeEnd?( onBeforeEnd?:any ): void;

		/** [Method] Sets the value of onBeforeStart  
		* @param onBeforeStart Object The new value. 
		*/
		setOnBeforeStart?( onBeforeStart?:any ): void;

		/** [Method] Sets the value of onEnd  
		* @param onEnd Object The new value. 
		*/
		setOnEnd?( onEnd?:any ): void;

		/** [Method] Sets the value of preserveEndState  
		* @param preserveEndState Boolean The new value. 
		*/
		setPreserveEndState?( preserveEndState?:boolean ): void;

		/** [Method] Sets the value of replacePrevious  
		* @param replacePrevious Boolean The new value. 
		*/
		setReplacePrevious?( replacePrevious?:boolean ): void;

		/** [Method] Sets the value of reverse  
		* @param reverse Object The new value. 
		*/
		setReverse?( reverse?:any ): void;

		/** [Method] Sets the value of scope  
		* @param scope Object The new value. 
		*/
		setScope?( scope?:any ): void;

	}

}

declare module Ext.fx.animation {
	export interface ICube extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (String) */
		direction?: string;
		/** [Method] Returns the value of after  
		* @returns Object 
		*/
		getAfter?(): any;

		/** [Method] Returns the value of before  
		* @returns Object 
		*/
		getBefore?(): any;

		/** [Method] Returns the value of direction  
		* @returns String 
		*/
		getDirection?(): string;

		/** [Method] Returns the value of out  
		* @returns Boolean 
		*/
		getOut?(): boolean;

		/** [Method] Sets the value of after  
		* @param after Object The new value. 
		*/
		setAfter?( after?:any ): void;

		/** [Method] Sets the value of before  
		* @param before Object The new value. 
		*/
		setBefore?( before?:any ): void;

		/** [Method] Sets the value of direction  
		* @param direction String The new value. 
		*/
		setDirection?( direction?:string ): void;

		/** [Method] Sets the value of out  
		* @param out Boolean The new value. 
		*/
		setOut?( out?:boolean ): void;

	}

}

declare module Ext.fx.animation {
	export interface IFade extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of after  
		* @returns Object 
		*/
		getAfter?(): any;

		/** [Method] Returns the value of before  
		* @returns Object 
		*/
		getBefore?(): any;

		/** [Method] Returns the value of out  
		* @returns Boolean 
		*/
		getOut?(): boolean;

		/** [Method] Returns the value of reverse  
		* @returns Object 
		*/
		getReverse?(): any;

		/** [Method] Sets the value of after  
		* @param after Object The new value. 
		*/
		setAfter?( after?:any ): void;

		/** [Method] Sets the value of before  
		* @param before Object The new value. 
		*/
		setBefore?( before?:any ): void;

		/** [Method] Sets the value of out  
		* @param out Boolean The new value. 
		*/
		setOut?( out?:boolean ): void;

		/** [Method] Sets the value of reverse  
		* @param reverse Object The new value. 
		*/
		setReverse?( reverse?:any ): void;

	}

}

declare module Ext.fx.animation {
	export interface IFadeIn extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of after  
		* @returns Object 
		*/
		getAfter?(): any;

		/** [Method] Returns the value of before  
		* @returns Object 
		*/
		getBefore?(): any;

		/** [Method] Returns the value of out  
		* @returns Boolean 
		*/
		getOut?(): boolean;

		/** [Method] Returns the value of reverse  
		* @returns Object 
		*/
		getReverse?(): any;

		/** [Method] Sets the value of after  
		* @param after Object The new value. 
		*/
		setAfter?( after?:any ): void;

		/** [Method] Sets the value of before  
		* @param before Object The new value. 
		*/
		setBefore?( before?:any ): void;

		/** [Method] Sets the value of out  
		* @param out Boolean The new value. 
		*/
		setOut?( out?:boolean ): void;

		/** [Method] Sets the value of reverse  
		* @param reverse Object The new value. 
		*/
		setReverse?( reverse?:any ): void;

	}

}

declare module Ext.fx.animation {
	export interface IFadeOut extends Ext.fx.animation.IFade {
		/** [Config Option] (Object) */
		before?: any;
		/** [Method] Returns the value of before  
		* @returns Object 
		*/
		getBefore?(): any;

		/** [Method] Sets the value of before  
		* @param before Object The new value. 
		*/
		setBefore?( before?:any ): void;

	}

}

declare module Ext.fx.animation {
	export interface IFlip extends Ext.fx.animation.IAbstract {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Method] Returns the value of direction  
		* @returns String 
		*/
		getDirection?(): string;

		/** [Method] Returns the value of easing  
		* @returns String 
		*/
		getEasing?(): string;

		/** [Method] Returns the value of half  
		* @returns Boolean 
		*/
		getHalf?(): boolean;

		/** [Method] Returns the value of out  
		* @returns Object 
		*/
		getOut?(): any;

		/** [Method] Sets the value of direction  
		* @param direction String The new value. 
		*/
		setDirection?( direction?:string ): void;

		/** [Method] Sets the value of easing  
		* @param easing String The new value. 
		*/
		setEasing?( easing?:string ): void;

		/** [Method] Sets the value of half  
		* @param half Boolean The new value. 
		*/
		setHalf?( half?:boolean ): void;

		/** [Method] Sets the value of out  
		* @param out Object The new value. 
		*/
		setOut?( out?:any ): void;

	}

}

declare module Ext.fx {
	export interface IAnimation extends Ext.IBase {
		/** [Config Option] (String) */
		type?: string;
	}

}

declare module Ext.fx.animation {
	export interface IPop extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of after  
		* @returns Object 
		*/
		getAfter?(): any;

		/** [Method] Returns the value of before  
		* @returns Object 
		*/
		getBefore?(): any;

		/** [Method] Returns the value of out  
		* @returns Boolean 
		*/
		getOut?(): boolean;

		/** [Method] Sets the value of after  
		* @param after Object The new value. 
		*/
		setAfter?( after?:any ): void;

		/** [Method] Sets the value of before  
		* @param before Object The new value. 
		*/
		setBefore?( before?:any ): void;

		/** [Method] Sets the value of out  
		* @param out Boolean The new value. 
		*/
		setOut?( out?:boolean ): void;

	}

}

declare module Ext.fx.animation {
	export interface IPopIn extends Ext.fx.animation.IAbstract {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of after  
		* @returns Object 
		*/
		getAfter?(): any;

		/** [Method] Returns the value of before  
		* @returns Object 
		*/
		getBefore?(): any;

		/** [Method] Returns the value of out  
		* @returns Boolean 
		*/
		getOut?(): boolean;

		/** [Method] Sets the value of after  
		* @param after Object The new value. 
		*/
		setAfter?( after?:any ): void;

		/** [Method] Sets the value of before  
		* @param before Object The new value. 
		*/
		setBefore?( before?:any ): void;

		/** [Method] Sets the value of out  
		* @param out Boolean The new value. 
		*/
		setOut?( out?:boolean ): void;

	}

}

declare module Ext.fx.animation {
	export interface IPopOut extends Ext.fx.animation.IPop {
		/** [Config Option] (Object) */
		before?: any;
		/** [Method] Returns the value of before  
		* @returns Object 
		*/
		getBefore?(): any;

		/** [Method] Sets the value of before  
		* @param before Object The new value. 
		*/
		setBefore?( before?:any ): void;

	}

}

declare module Ext.fx.animation {
	export interface ISlide extends Ext.fx.animation.IAbstract {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Number) */
		offset?: number;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of direction  
		* @returns String 
		*/
		getDirection?(): string;

		/** [Method] Returns the value of easing  
		* @returns String 
		*/
		getEasing?(): string;

		/** [Method] Returns the value of isElementBoxFit  
		* @returns Boolean 
		*/
		getIsElementBoxFit?(): boolean;

		/** [Method] Returns the value of offset  
		* @returns Number 
		*/
		getOffset?(): number;

		/** [Method] Returns the value of out  
		* @returns Boolean 
		*/
		getOut?(): boolean;

		/** [Method] Returns the value of useCssTransform  
		* @returns Boolean 
		*/
		getUseCssTransform?(): boolean;

		/** [Method] Sets the value of containerBox  
		* @param containerBox String The new value. 
		*/
		setContainerBox?( containerBox?:string ): void;

		/** [Method] Sets the value of direction  
		* @param direction String The new value. 
		*/
		setDirection?( direction?:string ): void;

		/** [Method] Sets the value of easing  
		* @param easing String The new value. 
		*/
		setEasing?( easing?:string ): void;

		/** [Method] Sets the value of elementBox  
		* @param elementBox String The new value. 
		*/
		setElementBox?( elementBox?:string ): void;

		/** [Method] Sets the value of isElementBoxFit  
		* @param isElementBoxFit Boolean The new value. 
		*/
		setIsElementBoxFit?( isElementBoxFit?:boolean ): void;

		/** [Method] Sets the value of offset  
		* @param offset Number The new value. 
		*/
		setOffset?( offset?:number ): void;

		/** [Method] Sets the value of out  
		* @param out Boolean The new value. 
		*/
		setOut?( out?:boolean ): void;

		/** [Method] Sets the value of useCssTransform  
		* @param useCssTransform Boolean The new value. 
		*/
		setUseCssTransform?( useCssTransform?:boolean ): void;

	}

}

declare module Ext.fx.animation {
	export interface ISlideIn extends Ext.fx.animation.IAbstract {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Number) */
		offset?: number;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of direction  
		* @returns String 
		*/
		getDirection?(): string;

		/** [Method] Returns the value of easing  
		* @returns String 
		*/
		getEasing?(): string;

		/** [Method] Returns the value of isElementBoxFit  
		* @returns Boolean 
		*/
		getIsElementBoxFit?(): boolean;

		/** [Method] Returns the value of offset  
		* @returns Number 
		*/
		getOffset?(): number;

		/** [Method] Returns the value of out  
		* @returns Boolean 
		*/
		getOut?(): boolean;

		/** [Method] Returns the value of useCssTransform  
		* @returns Boolean 
		*/
		getUseCssTransform?(): boolean;

		/** [Method] Sets the value of containerBox  
		* @param containerBox String The new value. 
		*/
		setContainerBox?( containerBox?:string ): void;

		/** [Method] Sets the value of direction  
		* @param direction String The new value. 
		*/
		setDirection?( direction?:string ): void;

		/** [Method] Sets the value of easing  
		* @param easing String The new value. 
		*/
		setEasing?( easing?:string ): void;

		/** [Method] Sets the value of elementBox  
		* @param elementBox String The new value. 
		*/
		setElementBox?( elementBox?:string ): void;

		/** [Method] Sets the value of isElementBoxFit  
		* @param isElementBoxFit Boolean The new value. 
		*/
		setIsElementBoxFit?( isElementBoxFit?:boolean ): void;

		/** [Method] Sets the value of offset  
		* @param offset Number The new value. 
		*/
		setOffset?( offset?:number ): void;

		/** [Method] Sets the value of out  
		* @param out Boolean The new value. 
		*/
		setOut?( out?:boolean ): void;

		/** [Method] Sets the value of useCssTransform  
		* @param useCssTransform Boolean The new value. 
		*/
		setUseCssTransform?( useCssTransform?:boolean ): void;

	}

}

declare module Ext.fx.animation {
	export interface ISlideOut extends Ext.fx.animation.ISlide {
	}

}

declare module Ext.fx.animation {
	export interface IWipe extends Ext.fx.IAnimation {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of direction  
		* @returns String 
		*/
		getDirection?(): string;

		/** [Method] Returns the value of easing  
		* @returns String 
		*/
		getEasing?(): string;

		/** [Method] Returns the value of out  
		* @returns Boolean 
		*/
		getOut?(): boolean;

		/** [Method] Sets the value of direction  
		* @param direction String The new value. 
		*/
		setDirection?( direction?:string ): void;

		/** [Method] Sets the value of easing  
		* @param easing String The new value. 
		*/
		setEasing?( easing?:string ): void;

		/** [Method] Sets the value of out  
		* @param out Boolean The new value. 
		*/
		setOut?( out?:boolean ): void;

	}

}

declare module Ext.fx.animation {
	export interface IWipeIn extends Ext.fx.IAnimation {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Boolean) */
		out?: boolean;
		/** [Method] Returns the value of direction  
		* @returns String 
		*/
		getDirection?(): string;

		/** [Method] Returns the value of easing  
		* @returns String 
		*/
		getEasing?(): string;

		/** [Method] Returns the value of out  
		* @returns Boolean 
		*/
		getOut?(): boolean;

		/** [Method] Sets the value of direction  
		* @param direction String The new value. 
		*/
		setDirection?( direction?:string ): void;

		/** [Method] Sets the value of easing  
		* @param easing String The new value. 
		*/
		setEasing?( easing?:string ): void;

		/** [Method] Sets the value of out  
		* @param out Boolean The new value. 
		*/
		setOut?( out?:boolean ): void;

	}

}

declare module Ext.fx.animation {
	export interface IWipeOut extends Ext.fx.animation.IWipe {
	}

}

declare module Ext.fx {
	export interface IAnimator extends Ext.IBase, Ext.util.IObservable {
		/** [Config Option] (Number) */
		delay?: number;
		/** [Config Option] (Number) */
		duration?: number;
		/** [Config Option] (Boolean) */
		dynamic?: boolean;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Number) */
		iterations?: number;
		/** [Config Option] (Object) */
		keyframes?: any;
		/** [Config Option] (Ext.fx.target.Target) */
		target?: Ext.fx.target.ITarget;
		/** [Property] (Number) */
		currentIteration?: number;

		/** [Property] (Boolean) */
		isAnimator?: boolean;

		/** [Property] (Number) */
		keyframeStep?: number;

		/** [Property] (Boolean) */
		paused?: boolean;

		/** [Property] (Boolean) */
		running?: boolean;

		/** [Method] Fire afteranimate event and end the animation  */
		end?(): void;

	}

}

declare module Ext.fx {
	export interface ICubicBezier extends Ext.IBase {
	}
	export class CubicBezier {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.fx {
	export interface IDrawPath extends Ext.IBase {
	}
	export class DrawPath {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.fx.easing {
	export interface IAbstract extends Ext.IBase {
		/** [Method] Returns the value of startTime  
		* @returns Number 
		*/
		getStartTime?(): number;

		/** [Method] Returns the value of startValue  
		* @returns Number 
		*/
		getStartValue?(): number;

		/** [Method] Sets the value of startTime  
		* @param startTime Number The new value. 
		*/
		setStartTime?( startTime?:number ): void;

		/** [Method] Sets the value of startValue  
		* @param startValue Number The new value. 
		*/
		setStartValue?( startValue?:number ): void;

	}

}

declare module Ext.fx.easing {
	export interface IBounce extends Ext.fx.easing.IAbstract {
		/** [Method] Returns the value of acceleration  
		* @returns Number 
		*/
		getAcceleration?(): number;

		/** [Method] Returns the value of springTension  
		* @returns Number 
		*/
		getSpringTension?(): number;

		/** [Method] Returns the value of startVelocity  
		* @returns Number 
		*/
		getStartVelocity?(): number;

		/** [Method] Sets the value of acceleration  
		* @param acceleration Number The new value. 
		*/
		setAcceleration?( acceleration?:number ): void;

		/** [Method] Sets the value of springTension  
		* @param springTension Number The new value. 
		*/
		setSpringTension?( springTension?:number ): void;

		/** [Method] Sets the value of startVelocity  
		* @param startVelocity Number The new value. 
		*/
		setStartVelocity?( startVelocity?:number ): void;

	}

}

declare module Ext.fx.easing {
	export interface IBoundMomentum extends Ext.fx.easing.IAbstract {
		/** [Config Option] (Object) */
		bounce?: any;
		/** [Config Option] (Number) */
		minVelocity?: number;
		/** [Config Option] (Object) */
		momentum?: any;
		/** [Config Option] (Number) */
		startVelocity?: number;
		/** [Method] Returns the value of bounce  
		* @returns Object 
		*/
		getBounce?(): any;

		/** [Method] Returns the value of maxMomentumValue  
		* @returns Number 
		*/
		getMaxMomentumValue?(): number;

		/** [Method] Returns the value of minMomentumValue  
		* @returns Number 
		*/
		getMinMomentumValue?(): number;

		/** [Method] Returns the value of minVelocity  
		* @returns Number 
		*/
		getMinVelocity?(): number;

		/** [Method] Returns the value of momentum  
		* @returns Object 
		*/
		getMomentum?(): any;

		/** [Method] Returns the value of startVelocity  
		* @returns Number 
		*/
		getStartVelocity?(): number;

		/** [Method] Sets the value of bounce  
		* @param bounce Object The new value. 
		*/
		setBounce?( bounce?:any ): void;

		/** [Method] Sets the value of maxMomentumValue  
		* @param maxMomentumValue Number The new value. 
		*/
		setMaxMomentumValue?( maxMomentumValue?:number ): void;

		/** [Method] Sets the value of minMomentumValue  
		* @param minMomentumValue Number The new value. 
		*/
		setMinMomentumValue?( minMomentumValue?:number ): void;

		/** [Method] Sets the value of minVelocity  
		* @param minVelocity Number The new value. 
		*/
		setMinVelocity?( minVelocity?:number ): void;

		/** [Method] Sets the value of momentum  
		* @param momentum Object The new value. 
		*/
		setMomentum?( momentum?:any ): void;

		/** [Method] Sets the value of startVelocity  
		* @param startVelocity Number The new value. 
		*/
		setStartVelocity?( startVelocity?:number ): void;

	}

}

declare module Ext.fx.easing {
	export interface IEaseIn extends Ext.fx.easing.ILinear {
		/** [Method] Returns the value of duration  
		* @returns Number 
		*/
		getDuration?(): number;

		/** [Method] Returns the value of exponent  
		* @returns Number 
		*/
		getExponent?(): number;

		/** [Method] Sets the value of duration  
		* @param duration Number The new value. 
		*/
		setDuration?( duration?:number ): void;

		/** [Method] Sets the value of exponent  
		* @param exponent Number The new value. 
		*/
		setExponent?( exponent?:number ): void;

	}

}

declare module Ext.fx.easing {
	export interface IEaseOut extends Ext.fx.easing.ILinear {
		/** [Method] Returns the value of duration  
		* @returns Number 
		*/
		getDuration?(): number;

		/** [Method] Returns the value of exponent  
		* @returns Number 
		*/
		getExponent?(): number;

		/** [Method] Sets the value of duration  
		* @param duration Number The new value. 
		*/
		setDuration?( duration?:number ): void;

		/** [Method] Sets the value of exponent  
		* @param exponent Number The new value. 
		*/
		setExponent?( exponent?:number ): void;

	}

}

declare module Ext.fx.easing {
	export interface IEasing extends Ext.IBase {
	}

}

declare module Ext.fx {
	export interface IEasing extends Ext.IBase {
	}
	export class Easing {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.fx.easing {
	export interface ILinear extends Ext.fx.easing.IAbstract {
		/** [Method] Returns the value of duration  
		* @returns Number 
		*/
		getDuration?(): number;

		/** [Method] Returns the value of endValue  
		* @returns Number 
		*/
		getEndValue?(): number;

		/** [Method] Sets the value of duration  
		* @param duration Number The new value. 
		*/
		setDuration?( duration?:number ): void;

		/** [Method] Sets the value of endValue  
		* @param endValue Number The new value. 
		*/
		setEndValue?( endValue?:number ): void;

	}

}

declare module Ext.fx.easing {
	export interface IMomentum extends Ext.fx.easing.IAbstract {
		/** [Method] Returns the value of acceleration  
		* @returns Number 
		*/
		getAcceleration?(): number;

		/** [Method] Returns the value of friction  
		* @returns Number 
		*/
		getFriction?(): number;

		/** [Method] Returns the value of startVelocity  
		* @returns Number 
		*/
		getStartVelocity?(): number;

		/** [Method] Sets the value of acceleration  
		* @param acceleration Number The new value. 
		*/
		setAcceleration?( acceleration?:number ): void;

		/** [Method] Sets the value of friction  
		* @param friction Number The new value. 
		*/
		setFriction?( friction?:number ): void;

		/** [Method] Sets the value of startVelocity  
		* @param startVelocity Number The new value. 
		*/
		setStartVelocity?( startVelocity?:number ): void;

	}

}

declare module Ext.fx.layout.card {
	export interface IAbstract extends Ext.IEvented {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of direction  
		* @returns String 
		*/
		getDirection?(): string;

		/** [Method] Returns the value of duration  
		* @returns Object 
		*/
		getDuration?(): any;

		/** [Method] Returns the value of layout  
		* @returns Object 
		*/
		getLayout?(): any;

		/** [Method] Returns the value of reverse  
		* @returns Object 
		*/
		getReverse?(): any;

		/** [Method] Sets the value of direction  
		* @param direction String The new value. 
		*/
		setDirection?( direction?:string ): void;

		/** [Method] Sets the value of duration  
		* @param duration Object The new value. 
		*/
		setDuration?( duration?:any ): void;

		/** [Method] Sets the value of layout  
		* @param layout Object The new value. 
		*/
		setLayout?( layout?:any ): void;

		/** [Method] Sets the value of reverse  
		* @param reverse Object The new value. 
		*/
		setReverse?( reverse?:any ): void;

	}

}

declare module Ext.fx.layout.card {
	export interface ICover extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation  
		* @returns Object 
		*/
		getInAnimation?(): any;

		/** [Method] Returns the value of outAnimation  
		* @returns Object 
		*/
		getOutAnimation?(): any;

		/** [Method] Returns the value of reverse  
		* @returns Object 
		*/
		getReverse?(): any;

		/** [Method] Sets the value of inAnimation  
		* @param inAnimation Object The new value. 
		*/
		setInAnimation?( inAnimation?:any ): void;

		/** [Method] Sets the value of outAnimation  
		* @param outAnimation Object The new value. 
		*/
		setOutAnimation?( outAnimation?:any ): void;

		/** [Method] Sets the value of reverse  
		* @param reverse Object The new value. 
		*/
		setReverse?( reverse?:any ): void;

	}

}

declare module Ext.fx.layout.card {
	export interface ICube extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation  
		* @returns Object 
		*/
		getInAnimation?(): any;

		/** [Method] Returns the value of outAnimation  
		* @returns Object 
		*/
		getOutAnimation?(): any;

		/** [Method] Returns the value of reverse  
		* @returns Object 
		*/
		getReverse?(): any;

		/** [Method] Sets the value of inAnimation  
		* @param inAnimation Object The new value. 
		*/
		setInAnimation?( inAnimation?:any ): void;

		/** [Method] Sets the value of outAnimation  
		* @param outAnimation Object The new value. 
		*/
		setOutAnimation?( outAnimation?:any ): void;

		/** [Method] Sets the value of reverse  
		* @param reverse Object The new value. 
		*/
		setReverse?( reverse?:any ): void;

	}

}

declare module Ext.fx.layout.card {
	export interface IFade extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation  
		* @returns Object 
		*/
		getInAnimation?(): any;

		/** [Method] Returns the value of outAnimation  
		* @returns Object 
		*/
		getOutAnimation?(): any;

		/** [Method] Returns the value of reverse  
		* @returns Object 
		*/
		getReverse?(): any;

		/** [Method] Sets the value of inAnimation  
		* @param inAnimation Object The new value. 
		*/
		setInAnimation?( inAnimation?:any ): void;

		/** [Method] Sets the value of outAnimation  
		* @param outAnimation Object The new value. 
		*/
		setOutAnimation?( outAnimation?:any ): void;

		/** [Method] Sets the value of reverse  
		* @param reverse Object The new value. 
		*/
		setReverse?( reverse?:any ): void;

	}

}

declare module Ext.fx.layout.card {
	export interface IFlip extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of duration  
		* @returns Number 
		*/
		getDuration?(): number;

		/** [Method] Returns the value of inAnimation  
		* @returns Object 
		*/
		getInAnimation?(): any;

		/** [Method] Returns the value of outAnimation  
		* @returns Object 
		*/
		getOutAnimation?(): any;

		/** [Method] Sets the value of duration  
		* @param duration Number The new value. 
		*/
		setDuration?( duration?:number ): void;

		/** [Method] Sets the value of inAnimation  
		* @param inAnimation Object The new value. 
		*/
		setInAnimation?( inAnimation?:any ): void;

		/** [Method] Sets the value of outAnimation  
		* @param outAnimation Object The new value. 
		*/
		setOutAnimation?( outAnimation?:any ): void;

	}

}

declare module Ext.fx.layout {
	export interface ICard extends Ext.IBase {
	}

}

declare module Ext.fx.layout.card {
	export interface IPop extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of duration  
		* @returns Number 
		*/
		getDuration?(): number;

		/** [Method] Returns the value of inAnimation  
		* @returns Object 
		*/
		getInAnimation?(): any;

		/** [Method] Returns the value of outAnimation  
		* @returns Object 
		*/
		getOutAnimation?(): any;

		/** [Method] Sets the value of duration  
		* @param duration Number The new value. 
		*/
		setDuration?( duration?:number ): void;

		/** [Method] Sets the value of inAnimation  
		* @param inAnimation Object The new value. 
		*/
		setInAnimation?( inAnimation?:any ): void;

		/** [Method] Sets the value of outAnimation  
		* @param outAnimation Object The new value. 
		*/
		setOutAnimation?( outAnimation?:any ): void;

	}

}

declare module Ext.fx.layout.card {
	export interface IReveal extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation  
		* @returns Object 
		*/
		getInAnimation?(): any;

		/** [Method] Returns the value of outAnimation  
		* @returns Object 
		*/
		getOutAnimation?(): any;

		/** [Method] Sets the value of inAnimation  
		* @param inAnimation Object The new value. 
		*/
		setInAnimation?( inAnimation?:any ): void;

		/** [Method] Sets the value of outAnimation  
		* @param outAnimation Object The new value. 
		*/
		setOutAnimation?( outAnimation?:any ): void;

	}

}

declare module Ext.fx.layout.card {
	export interface IScroll extends Ext.fx.layout.card.IAbstract {
		/** [Method] Returns the value of duration  
		* @returns Number 
		*/
		getDuration?(): number;

		/** [Method] Sets the value of duration  
		* @param duration Number The new value. 
		*/
		setDuration?( duration?:number ): void;

	}

}

declare module Ext.fx.layout.card {
	export interface IScrollCover extends Ext.fx.layout.card.IScroll {
	}

}

declare module Ext.fx.layout.card {
	export interface IScrollReveal extends Ext.fx.layout.card.IScroll {
	}

}

declare module Ext.fx.layout.card {
	export interface ISlide extends Ext.fx.layout.card.IStyle {
		/** [Method] Returns the value of inAnimation  
		* @returns Object 
		*/
		getInAnimation?(): any;

		/** [Method] Returns the value of outAnimation  
		* @returns Object 
		*/
		getOutAnimation?(): any;

		/** [Method] Sets the value of inAnimation  
		* @param inAnimation Object The new value. 
		*/
		setInAnimation?( inAnimation?:any ): void;

		/** [Method] Sets the value of outAnimation  
		* @param outAnimation Object The new value. 
		*/
		setOutAnimation?( outAnimation?:any ): void;

	}

}

declare module Ext.fx.layout.card {
	export interface IStyle extends Ext.fx.layout.card.IAbstract {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of inAnimation  
		* @returns Object 
		*/
		getInAnimation?(): any;

		/** [Method] Returns the value of outAnimation  
		* @returns Object 
		*/
		getOutAnimation?(): any;

		/** [Method] Sets the value of inAnimation  
		* @param inAnimation Object The new value. 
		*/
		setInAnimation?( inAnimation?:any ): void;

		/** [Method] Sets the value of outAnimation  
		* @param outAnimation Object The new value. 
		*/
		setOutAnimation?( outAnimation?:any ): void;

	}

}

declare module Ext.fx {
	export interface IManager extends Ext.IBase, Ext.fx.IQueue {
	}
	export class Manager {
		/** [Config Option] (Boolean) */
		static forceJS: boolean;
		/** [Config Option] (Number) */
		static interval: number;
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Add an Anim to the manager  
		* @param anim Ext.fx.Anim 
		*/
		static addAnim( anim?:Ext.fx.IAnim ): void;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Remove an Anim from the manager  
		* @param anim Ext.fx.Anim 
		*/
		static removeAnim( anim?:Ext.fx.IAnim ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.fx {
	export interface IPropertyHandler extends Ext.IBase {
	}

}

declare module Ext.fx {
	export interface IQueue extends Ext.IBase {
	}

}

declare module Ext.fx.runner {
	export interface ICss extends Ext.IEvented {
	}

}

declare module Ext.fx.runner {
	export interface ICssAnimation extends Ext.fx.runner.ICss {
	}

}

declare module Ext.fx.runner {
	export interface ICssTransition extends Ext.fx.runner.ICss {
	}
	export class CssTransition {
		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext {
	export interface IAnimator extends Ext.fx.runner.ICss {
	}
	export class Animator {
		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.fx {
	export interface IRunner extends Ext.IBase {
	}

}

declare module Ext.fx {
	export interface IState extends Ext.IBase {
		/** [Method] Sets a single multiple configuration options  
		* @param data Object 
		* @returns Ext.Base this 
		*/
		setConfig?( data?:any ): Ext.IBase;

	}

}

declare module Ext.fx.target {
	export interface IComponent extends Ext.fx.target.ITarget {
	}

}

declare module Ext.fx.target {
	export interface ICompositeElement extends Ext.fx.target.IElement {
		/** [Property] (Boolean) */
		isComposite?: boolean;

	}

}

declare module Ext.fx.target {
	export interface ICompositeElementCSS extends Ext.fx.target.ICompositeElement {
	}

}

declare module Ext.fx.target {
	export interface ICompositeSprite extends Ext.fx.target.ISprite {
	}

}

declare module Ext.fx.target {
	export interface IElement extends Ext.fx.target.ITarget {
	}

}

declare module Ext.fx.target {
	export interface IElementCSS extends Ext.fx.target.IElement {
	}

}

declare module Ext.fx.target {
	export interface ISprite extends Ext.fx.target.ITarget {
	}

}

declare module Ext.fx.target {
	export interface ITarget extends Ext.IBase {
	}

}

declare module Ext {
	export interface IGlobalEvents extends Ext.mixin.IObservable {
	}
	export class GlobalEvents {
		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.grid {
	export interface ICellContext extends Ext.IBase {
		/** [Property] (Boolean) */
		isCellContext?: boolean;

	}

}

declare module Ext.grid {
	export interface ICellEditor extends Ext.IEditor {
		/** [Config Option] (String) */
		alignment?: string;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Boolean) */
		hideEl?: boolean;
		/** [Config Option] (Boolean/String) */
		shadow?: any;
		/** [Config Option] (Boolean) */
		shim?: boolean;
		/** [Method] private 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] Starts the editing process and shows the editor  
		* @param boundEl Object 
		* @param value Object 
		*/
		startEdit?( boundEl?:any, value?:any ): void;

	}

}

declare module Ext.grid.column {
	export interface IAction extends Ext.grid.column.IColumn {
		/** [Config Option] (String) */
		altText?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Function) */
		getClass?: any;
		/** [Config Option] (Function) */
		getTip?: any;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Function) */
		isDisabled?: any;
		/** [Config Option] (Object[]) */
		items?: any[];
		/** [Config Option] (String) */
		menuText?: string;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		sortable?: boolean;
		/** [Config Option] (Boolean) */
		stopSelection?: boolean;
		/** [Config Option] (String) */
		tooltip?: string;
		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Cascades down the component container heirarchy from this component passed in the first call  calling the specified  
		* @param fn Object 
		* @param scope Object 
		* @returns Ext.Container this 
		*/
		cascade?( fn?:any, scope?:any ): Ext.IContainer;

		/** [Method] Renderer closure iterates through items creating an element for each and tagging with an identifying class name x ac  
		* @param v Object 
		* @param cellValues Object 
		* @param record Object 
		* @param rowIdx Object 
		* @param colIdx Object 
		* @param store Object 
		* @param view Object 
		*/
		defaultRenderer?( v?:any, cellValues?:any, record?:any, rowIdx?:any, colIdx?:any, store?:any, view?:any ): void;

		/** [Method] Disables this ActionColumn s action at the specified index  
		* @param index Number/Ext.grid.column.Action 
		* @param silent Boolean 
		*/
		disableAction?( index?:any, silent?:boolean ): void;

		/** [Method] Enables this ActionColumn s action at the specified index  
		* @param index Number/Ext.grid.column.Action 
		* @param silent Boolean 
		*/
		enableAction?( index?:any, silent?:boolean ): void;

		/** [Method] Private override because this cannot function as a Container and it has an items property which is an Array NOT a M  */
		getRefItems?(): void;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

	}

}

declare module Ext.grid {
	export interface IActionColumn extends Ext.grid.column.IColumn {
		/** [Config Option] (String) */
		altText?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Function) */
		getClass?: any;
		/** [Config Option] (Function) */
		getTip?: any;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Function) */
		isDisabled?: any;
		/** [Config Option] (Object[]) */
		items?: any[];
		/** [Config Option] (String) */
		menuText?: string;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		sortable?: boolean;
		/** [Config Option] (Boolean) */
		stopSelection?: boolean;
		/** [Config Option] (String) */
		tooltip?: string;
		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Cascades down the component container heirarchy from this component passed in the first call  calling the specified  
		* @param fn Object 
		* @param scope Object 
		* @returns Ext.Container this 
		*/
		cascade?( fn?:any, scope?:any ): Ext.IContainer;

		/** [Method] Renderer closure iterates through items creating an element for each and tagging with an identifying class name x ac  
		* @param v Object 
		* @param cellValues Object 
		* @param record Object 
		* @param rowIdx Object 
		* @param colIdx Object 
		* @param store Object 
		* @param view Object 
		*/
		defaultRenderer?( v?:any, cellValues?:any, record?:any, rowIdx?:any, colIdx?:any, store?:any, view?:any ): void;

		/** [Method] Disables this ActionColumn s action at the specified index  
		* @param index Number/Ext.grid.column.Action 
		* @param silent Boolean 
		*/
		disableAction?( index?:any, silent?:boolean ): void;

		/** [Method] Enables this ActionColumn s action at the specified index  
		* @param index Number/Ext.grid.column.Action 
		* @param silent Boolean 
		*/
		enableAction?( index?:any, silent?:boolean ): void;

		/** [Method] Private override because this cannot function as a Container and it has an items property which is an Array NOT a M  */
		getRefItems?(): void;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

	}

}

declare module Ext.grid.column {
	export interface IBoolean extends Ext.grid.column.IColumn {
		/** [Config Option] (String) */
		falseText?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Config Option] (String) */
		trueText?: string;
		/** [Config Option] (String) */
		undefinedText?: string;
		/** [Method] When defined this will take precedence over the renderer config  
		* @param value Object 
		*/
		defaultRenderer?( value?:any ): void;

	}

}

declare module Ext.grid {
	export interface IBooleanColumn extends Ext.grid.column.IColumn {
		/** [Config Option] (String) */
		falseText?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Config Option] (String) */
		trueText?: string;
		/** [Config Option] (String) */
		undefinedText?: string;
		/** [Method] When defined this will take precedence over the renderer config  
		* @param value Object 
		*/
		defaultRenderer?( value?:any ): void;

	}

}

declare module Ext.grid.column {
	export interface ICheck extends Ext.grid.column.IColumn {
		/** [Config Option] (Boolean) */
		stopSelection?: boolean;
		/** [Config Option] (String) */
		tdCls?: string;
		/** [Method] Note class names are not placed on the prototype bc renderer scope is not in the header  
		* @param value Object 
		* @param cellValues Object 
		*/
		defaultRenderer?( value?:any, cellValues?:any ): void;

		/** [Method] Disables this CheckColumn  */
		onDisable?(): void;

		/** [Method] Enables this CheckColumn  */
		onEnable?(): void;

	}

}

declare module Ext.ux {
	export interface ICheckColumn extends Ext.grid.column.IColumn {
		/** [Config Option] (Boolean) */
		stopSelection?: boolean;
		/** [Config Option] (String) */
		tdCls?: string;
		/** [Method] Note class names are not placed on the prototype bc renderer scope is not in the header  
		* @param value Object 
		* @param cellValues Object 
		*/
		defaultRenderer?( value?:any, cellValues?:any ): void;

		/** [Method] Disables this CheckColumn  */
		onDisable?(): void;

		/** [Method] Enables this CheckColumn  */
		onEnable?(): void;

	}

}

declare module Ext.grid.column {
	export interface ICheckColumn extends Ext.grid.column.IColumn {
		/** [Config Option] (Boolean) */
		stopSelection?: boolean;
		/** [Config Option] (String) */
		tdCls?: string;
		/** [Method] Note class names are not placed on the prototype bc renderer scope is not in the header  
		* @param value Object 
		* @param cellValues Object 
		*/
		defaultRenderer?( value?:any, cellValues?:any ): void;

		/** [Method] Disables this CheckColumn  */
		onDisable?(): void;

		/** [Method] Enables this CheckColumn  */
		onEnable?(): void;

	}

}

declare module Ext.grid.column {
	export interface IColumn extends Ext.grid.header.IContainer {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		cellWrap?: boolean;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Object[]) */
		columns?: any[];
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		dataIndex?: string;
		/** [Config Option] (Boolean) */
		detachOnRemove?: boolean;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Function/String) */
		editRenderer?: any;
		/** [Config Option] (Object/String) */
		editor?: any;
		/** [Config Option] (String) */
		emptyCellText?: string;
		/** [Config Option] (Boolean) */
		enableFocusableContainer?: boolean;
		/** [Config Option] (Object/String) */
		field?: any;
		/** [Config Option] (Boolean) */
		fixed?: boolean;
		/** [Config Option] (String) */
		formatter?: string;
		/** [Config Option] (Boolean) */
		groupable?: boolean;
		/** [Config Option] (String) */
		header?: string;
		/** [Config Option] (Boolean) */
		hideable?: boolean;
		/** [Config Option] (Boolean) */
		lockable?: boolean;
		/** [Config Option] (Boolean) */
		locked?: boolean;
		/** [Config Option] (Boolean) */
		menuDisabled?: boolean;
		/** [Config Option] (String) */
		menuText?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Function/String) */
		renderer?: any;
		/** [Config Option] (Boolean) */
		resizable?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		sortable?: boolean;
		/** [Config Option] (String) */
		stateId?: string;
		/** [Config Option] (Function/String) */
		summaryRenderer?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		tdCls?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		tooltip?: string;
		/** [Config Option] (String) */
		tooltipType?: string;
		/** [Config Option] (Function/String) */
		updater?: any;
		/** [Config Option] (Boolean) */
		variableRowHeight?: boolean;
		/** [Property] (Boolean) */
		isColumn?: boolean;

		/** [Property] (Boolean) */
		isHeader?: boolean;

		/** [Property] (Ext.dom.Element) */
		textEl?: Ext.dom.IElement;

		/** [Property] (Ext.dom.Element) */
		triggerEl?: Ext.dom.IElement;

		/** [Method] private Inform the header container about the resize 
		* @param width Object 
		* @param height Object 
		* @param oldWidth Object 
		* @param oldHeight Object 
		*/
		afterComponentLayout?( width?:any, height?:any, oldWidth?:any, oldHeight?:any ): void;

		/** [Method] Sizes this Column to fit the max content width  */
		autoSize?(): void;

		/** [Method] When defined this will take precedence over the renderer config  */
		defaultRenderer?(): void;

		/** [Method] Retrieves the editing field for editing associated with this header  
		* @param record Object The Model instance being edited. 
		* @param defaultField Object/String An xtype or config object for a Field to be created as the default editor if it does not already exist 
		* @returns Ext.form.field.Field/Boolean The editor field associated with this column. Returns false if there is no field associated with the Column. 
		*/
		getEditor?( record?:any, defaultField?:any ): any;

		/** [Method] Returns the index of this column only if this column is a base level Column  
		* @returns Number 
		*/
		getIndex?(): number;

		/** [Method] Returns the parameter to sort upon when sorting this header  
		* @returns String 
		*/
		getSortParam?(): string;

		/** [Method] Returns the value of triggerVisible  
		* @returns Boolean 
		*/
		getTriggerVisible?(): boolean;

		/** [Method] Returns the index of this column in the list of visible columns only if this column is a base level Column  
		* @returns Number 
		*/
		getVisibleIndex?(): number;

		/** [Method] Hides this Component setting it to invisible using the configured hideMode  
		* @returns Ext.Component this 
		*/
		hide?(): Ext.IComponent;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] This method is called to initialize the items collection  */
		initItems?(): void;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] Determines whether the UI should be allowed to offer an option to hide this column  */
		isHideable?(): void;

		/** [Method] Determines whether the UI should be allowed to offer an option to lock or unlock this column  */
		isLockable?(): void;

		/** [Method] Invalidate column cache on add We cannot refresh the View on every add because this method is called when the HeaderD  
		* @param child Object 
		*/
		onAdd?( child?:any ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] Invalidate column cache on remove We cannot refresh the View on every remove because this method is called when the H  
		* @param child Object 
		*/
		onRemove?( child?:any ): void;

		/** [Method] Called when the component is resized  
		* @param width Object 
		* @param height Object 
		* @param oldWidth Object 
		* @param oldHeight Object 
		*/
		onResize?( width?:any, height?:any, oldWidth?:any, oldHeight?:any ): void;

		/** [Method] Sets the form field to be used for editing  
		* @param field Object An object representing a field to be created. If no xtype is specified a 'textfield' is assumed. 
		*/
		setEditor?( field?:any ): void;

		/** [Method] Sets the header text for this Column  
		* @param text String The header to display on this Column. 
		*/
		setText?( text?:string ): void;

		/** [Method] Sets the value of triggerVisible  
		* @param triggerVisible Boolean The new value. 
		*/
		setTriggerVisible?( triggerVisible?:boolean ): void;

		/** [Method] Shows this Component rendering it first if autoRender or floating are true  
		* @returns Ext.Component this 
		*/
		show?(): Ext.IComponent;

	}

}

declare module Ext.grid {
	export interface IColumn extends Ext.grid.header.IContainer {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		cellWrap?: boolean;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Object[]) */
		columns?: any[];
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		dataIndex?: string;
		/** [Config Option] (Boolean) */
		detachOnRemove?: boolean;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Function/String) */
		editRenderer?: any;
		/** [Config Option] (Object/String) */
		editor?: any;
		/** [Config Option] (String) */
		emptyCellText?: string;
		/** [Config Option] (Boolean) */
		enableFocusableContainer?: boolean;
		/** [Config Option] (Object/String) */
		field?: any;
		/** [Config Option] (Boolean) */
		fixed?: boolean;
		/** [Config Option] (String) */
		formatter?: string;
		/** [Config Option] (Boolean) */
		groupable?: boolean;
		/** [Config Option] (String) */
		header?: string;
		/** [Config Option] (Boolean) */
		hideable?: boolean;
		/** [Config Option] (Boolean) */
		lockable?: boolean;
		/** [Config Option] (Boolean) */
		locked?: boolean;
		/** [Config Option] (Boolean) */
		menuDisabled?: boolean;
		/** [Config Option] (String) */
		menuText?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Function/String) */
		renderer?: any;
		/** [Config Option] (Boolean) */
		resizable?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		sortable?: boolean;
		/** [Config Option] (String) */
		stateId?: string;
		/** [Config Option] (Function/String) */
		summaryRenderer?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		tdCls?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		tooltip?: string;
		/** [Config Option] (String) */
		tooltipType?: string;
		/** [Config Option] (Function/String) */
		updater?: any;
		/** [Config Option] (Boolean) */
		variableRowHeight?: boolean;
		/** [Property] (Boolean) */
		isColumn?: boolean;

		/** [Property] (Boolean) */
		isHeader?: boolean;

		/** [Property] (Ext.dom.Element) */
		textEl?: Ext.dom.IElement;

		/** [Property] (Ext.dom.Element) */
		triggerEl?: Ext.dom.IElement;

		/** [Method] private Inform the header container about the resize 
		* @param width Object 
		* @param height Object 
		* @param oldWidth Object 
		* @param oldHeight Object 
		*/
		afterComponentLayout?( width?:any, height?:any, oldWidth?:any, oldHeight?:any ): void;

		/** [Method] Sizes this Column to fit the max content width  */
		autoSize?(): void;

		/** [Method] When defined this will take precedence over the renderer config  */
		defaultRenderer?(): void;

		/** [Method] Retrieves the editing field for editing associated with this header  
		* @param record Object The Model instance being edited. 
		* @param defaultField Object/String An xtype or config object for a Field to be created as the default editor if it does not already exist 
		* @returns Ext.form.field.Field/Boolean The editor field associated with this column. Returns false if there is no field associated with the Column. 
		*/
		getEditor?( record?:any, defaultField?:any ): any;

		/** [Method] Returns the index of this column only if this column is a base level Column  
		* @returns Number 
		*/
		getIndex?(): number;

		/** [Method] Returns the parameter to sort upon when sorting this header  
		* @returns String 
		*/
		getSortParam?(): string;

		/** [Method] Returns the value of triggerVisible  
		* @returns Boolean 
		*/
		getTriggerVisible?(): boolean;

		/** [Method] Returns the index of this column in the list of visible columns only if this column is a base level Column  
		* @returns Number 
		*/
		getVisibleIndex?(): number;

		/** [Method] Hides this Component setting it to invisible using the configured hideMode  
		* @returns Ext.Component this 
		*/
		hide?(): Ext.IComponent;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] This method is called to initialize the items collection  */
		initItems?(): void;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] Determines whether the UI should be allowed to offer an option to hide this column  */
		isHideable?(): void;

		/** [Method] Determines whether the UI should be allowed to offer an option to lock or unlock this column  */
		isLockable?(): void;

		/** [Method] Invalidate column cache on add We cannot refresh the View on every add because this method is called when the HeaderD  
		* @param child Object 
		*/
		onAdd?( child?:any ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] Invalidate column cache on remove We cannot refresh the View on every remove because this method is called when the H  
		* @param child Object 
		*/
		onRemove?( child?:any ): void;

		/** [Method] Called when the component is resized  
		* @param width Object 
		* @param height Object 
		* @param oldWidth Object 
		* @param oldHeight Object 
		*/
		onResize?( width?:any, height?:any, oldWidth?:any, oldHeight?:any ): void;

		/** [Method] Sets the form field to be used for editing  
		* @param field Object An object representing a field to be created. If no xtype is specified a 'textfield' is assumed. 
		*/
		setEditor?( field?:any ): void;

		/** [Method] Sets the header text for this Column  
		* @param text String The header to display on this Column. 
		*/
		setText?( text?:string ): void;

		/** [Method] Sets the value of triggerVisible  
		* @param triggerVisible Boolean The new value. 
		*/
		setTriggerVisible?( triggerVisible?:boolean ): void;

		/** [Method] Shows this Component rendering it first if autoRender or floating are true  
		* @returns Ext.Component this 
		*/
		show?(): Ext.IComponent;

	}

}

declare module Ext.grid.column {
	export interface IDate extends Ext.grid.column.IColumn {
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Method] When defined this will take precedence over the renderer config  
		* @param value Object 
		*/
		defaultRenderer?( value?:any ): void;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

	}

}

declare module Ext.grid {
	export interface IDateColumn extends Ext.grid.column.IColumn {
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Method] When defined this will take precedence over the renderer config  
		* @param value Object 
		*/
		defaultRenderer?( value?:any ): void;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

	}

}

declare module Ext.grid.column {
	export interface INumber extends Ext.grid.column.IColumn {
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Method] When defined this will take precedence over the renderer config  
		* @param value Object 
		*/
		defaultRenderer?( value?:any ): void;

	}

}

declare module Ext.grid {
	export interface INumberColumn extends Ext.grid.column.IColumn {
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Method] When defined this will take precedence over the renderer config  
		* @param value Object 
		*/
		defaultRenderer?( value?:any ): void;

	}

}

declare module Ext.grid.column {
	export interface IRowNumberer extends Ext.grid.column.IColumn {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		dataIndex?: string;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Boolean) */
		hideable?: boolean;
		/** [Config Option] (Boolean) */
		lockable?: boolean;
		/** [Config Option] (Boolean) */
		menuDisabled?: boolean;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Config Option] (Boolean) */
		resizable?: boolean;
		/** [Config Option] (String) */
		tdCls?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (Number) */
		width?: number;
		/** [Method] private 
		* @param value Object 
		* @param metaData Object 
		* @param record Object 
		* @param rowIdx Object 
		* @param colIdx Object 
		* @param dataSource Object 
		* @param view Object 
		*/
		defaultRenderer?( value?:any, metaData?:any, record?:any, rowIdx?:any, colIdx?:any, dataSource?:any, view?:any ): void;

	}

}

declare module Ext.grid {
	export interface IRowNumberer extends Ext.grid.column.IColumn {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		dataIndex?: string;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Boolean) */
		hideable?: boolean;
		/** [Config Option] (Boolean) */
		lockable?: boolean;
		/** [Config Option] (Boolean) */
		menuDisabled?: boolean;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Config Option] (Boolean) */
		resizable?: boolean;
		/** [Config Option] (String) */
		tdCls?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (Number) */
		width?: number;
		/** [Method] private 
		* @param value Object 
		* @param metaData Object 
		* @param record Object 
		* @param rowIdx Object 
		* @param colIdx Object 
		* @param dataSource Object 
		* @param view Object 
		*/
		defaultRenderer?( value?:any, metaData?:any, record?:any, rowIdx?:any, colIdx?:any, dataSource?:any, view?:any ): void;

	}

}

declare module Ext.grid.column {
	export interface ITemplate extends Ext.grid.column.IColumn {
		/** [Config Option] (String/Ext.XTemplate) */
		tpl?: any;
		/** [Method] When defined this will take precedence over the renderer config  
		* @param value Object 
		* @param meta Object 
		* @param record Object 
		*/
		defaultRenderer?( value?:any, meta?:any, record?:any ): void;

	}

}

declare module Ext.grid {
	export interface ITemplateColumn extends Ext.grid.column.IColumn {
		/** [Config Option] (String/Ext.XTemplate) */
		tpl?: any;
		/** [Method] When defined this will take precedence over the renderer config  
		* @param value Object 
		* @param meta Object 
		* @param record Object 
		*/
		defaultRenderer?( value?:any, meta?:any, record?:any ): void;

	}

}

declare module Ext.grid.column {
	export interface IWidget extends Ext.grid.column.IColumn {
		/** [Config Option] (Object) */
		defaultWidgetUI?: any;
		/** [Config Option] (Function/String) */
		onWidgetAttach?: any;
		/** [Config Option] (Boolean) */
		sortable?: boolean;
		/** [Config Option] (Boolean) */
		stopSelection?: boolean;
		/** [Config Option] (Object) */
		widget?: any;
		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Cell must be left blank */
		defaultRenderer?(): void;

		/** [Method] Returns the value of defaultWidgetUI  
		* @returns Object 
		*/
		getDefaultWidgetUI?(): any;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  */
		onAdded?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param isDestroying Object 
		*/
		onRemoved?( isDestroying?:any ): void;

		/** [Method] Called when the component is resized  
		* @param newWidth Object 
		*/
		onResize?( newWidth?:any ): void;

		/** [Method] Sets the value of defaultWidgetUI  
		* @param defaultWidgetUI Object The new value. 
		*/
		setDefaultWidgetUI?( defaultWidgetUI?:any ): void;

	}

}

declare module Ext.grid {
	export interface IColumnComponentLayout extends Ext.layout.component.IAuto {
		/** [Config Option] (Boolean) */
		setWidthInDom?: boolean;
		/** [Method] Called before any calculation cycles to prepare for layout  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		*/
		beginLayoutCycle?( ownerContext?:any ): void;

	}

}

declare module Ext.grid {
	export interface IColumnLayout extends Ext.layout.container.IHBox {
		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] This method is called after all layouts are complete and their calculations flushed to the DOM  
		* @param ownerContext Object 
		*/
		finishedLayout?( ownerContext?:any ): void;

		/** [Method] A one time initialization method called just before rendering  */
		initLayout?(): void;

	}

}

declare module Ext.grid {
	export interface IColumnManager extends Ext.IBase {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Get the first column  
		* @returns Ext.grid.column.Column The header. null if it doesn't exist 
		*/
		getFirst?(): Ext.grid.column.IColumn;

		/** [Method] If called from a root header gets a leaf level header by index regardless of what the nesting structure is  
		* @param index Number The column index for which to retrieve the column. 
		* @returns Ext.grid.column.Column The header. null if it doesn't exist. 
		*/
		getHeaderAtIndex?( index?:number ): Ext.grid.column.IColumn;

		/** [Method] Get a leaf level header by data index regardless of what the nesting structure is  
		* @param dataIndex String The data index 
		* @returns Ext.grid.column.Column The header. null if it doesn't exist. 
		*/
		getHeaderByDataIndex?( dataIndex?:string ): Ext.grid.column.IColumn;

		/** [Method] Get a leaf level header by index regardless of what the nesting structure is  
		* @param id String The id 
		* @returns Ext.grid.column.Column The header. null if it doesn't exist. 
		*/
		getHeaderById?( id?:string ): Ext.grid.column.IColumn;

		/** [Method] If called from a root header returns the index of a leaf level header regardless of what the nesting structure is  
		* @param header Ext.grid.column.Column The header to find the index of 
		* @returns Number The index of the specified column header 
		*/
		getHeaderIndex?( header?:Ext.grid.column.IColumn ): number;

		/** [Method] Get the last column  
		* @returns Ext.grid.column.Column The header. null if it doesn't exist 
		*/
		getLast?(): Ext.grid.column.IColumn;

		/** [Method] When passed a column index returns the closet visible column to that  
		* @param index Number Position at which to find the closest visible column. 
		*/
		getVisibleHeaderClosestToIndex?( index?:number ): void;

	}

}

declare module Ext.grid {
	export interface IColumnModel extends Ext.IBase {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Get the first column  
		* @returns Ext.grid.column.Column The header. null if it doesn't exist 
		*/
		getFirst?(): Ext.grid.column.IColumn;

		/** [Method] If called from a root header gets a leaf level header by index regardless of what the nesting structure is  
		* @param index Number The column index for which to retrieve the column. 
		* @returns Ext.grid.column.Column The header. null if it doesn't exist. 
		*/
		getHeaderAtIndex?( index?:number ): Ext.grid.column.IColumn;

		/** [Method] Get a leaf level header by data index regardless of what the nesting structure is  
		* @param dataIndex String The data index 
		* @returns Ext.grid.column.Column The header. null if it doesn't exist. 
		*/
		getHeaderByDataIndex?( dataIndex?:string ): Ext.grid.column.IColumn;

		/** [Method] Get a leaf level header by index regardless of what the nesting structure is  
		* @param id String The id 
		* @returns Ext.grid.column.Column The header. null if it doesn't exist. 
		*/
		getHeaderById?( id?:string ): Ext.grid.column.IColumn;

		/** [Method] If called from a root header returns the index of a leaf level header regardless of what the nesting structure is  
		* @param header Ext.grid.column.Column The header to find the index of 
		* @returns Number The index of the specified column header 
		*/
		getHeaderIndex?( header?:Ext.grid.column.IColumn ): number;

		/** [Method] Get the last column  
		* @returns Ext.grid.column.Column The header. null if it doesn't exist 
		*/
		getLast?(): Ext.grid.column.IColumn;

		/** [Method] When passed a column index returns the closet visible column to that  
		* @param index Number Position at which to find the closest visible column. 
		*/
		getVisibleHeaderClosestToIndex?( index?:number ): void;

	}

}

declare module Ext.grid.feature {
	export interface IAbstractSummary extends Ext.grid.feature.IFeature {
		/** [Config Option] (Boolean) */
		showSummaryRow?: boolean;
		/** [Method] Toggle whether or not to show the summary row  
		* @param visible Boolean True to show the summary row 
		*/
		toggleSummaryRow?( visible?:boolean ): void;

	}

}

declare module Ext.grid.feature {
	export interface IFeature extends Ext.util.IObservable {
		/** [Property] (Boolean) */
		disabled?: boolean;

		/** [Property] (String) */
		eventPrefix?: string;

		/** [Property] (String) */
		eventSelector?: string;

		/** [Property] (Ext.grid.Panel) */
		grid?: Ext.grid.IPanel;

		/** [Property] (Boolean) */
		hasFeatureEvent?: boolean;

		/** [Property] (Ext.view.Table) */
		view?: Ext.view.ITable;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Disables the feature  */
		disable?(): void;

		/** [Method] Enables the feature  */
		enable?(): void;

		/** [Method] Abstract method to be overriden when a feature should add additional arguments to its event signature  
		* @param eventName Object 
		* @param view Object 
		* @param featureTarget Object 
		* @param e Object 
		*/
		getFireEventArgs?( eventName?:any, view?:any, featureTarget?:any, e?:any ): void;

	}

}

declare module Ext.grid.feature {
	export interface IGrouping extends Ext.grid.feature.IFeature, Ext.grid.feature.IAbstractSummary {
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (Number) */
		depthToIndent?: number;
		/** [Config Option] (Boolean) */
		enableGroupingMenu?: boolean;
		/** [Config Option] (Boolean) */
		enableNoGroups?: boolean;
		/** [Config Option] (String) */
		groupByText?: string;
		/** [Config Option] (String/Array/Ext.Template) */
		groupHeaderTpl?: any;
		/** [Config Option] (Array) */
		groupers?: any[];
		/** [Config Option] (Boolean) */
		hideGroupedHeader?: boolean;
		/** [Config Option] (String) */
		remoteRoot?: string;
		/** [Config Option] (String) */
		showGroupsText?: string;
		/** [Config Option] (Boolean) */
		showSummaryRow?: boolean;
		/** [Config Option] (Boolean) */
		startCollapsed?: boolean;
		/** [Property] (String) */
		eventPrefix?: string;

		/** [Property] (String) */
		eventSelector?: string;

		/** [Method] Collapse a group 
		* @param groupName String The group name 
		* @param focus Boolean Pass true to focus the group after expand. 
		*/
		collapse?( groupName?:string, focus?:boolean ): void;

		/** [Method] Collapse all groups */
		collapseAll?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Disables the feature  */
		disable?(): void;

		/** [Method] Enables the feature  */
		enable?(): void;

		/** [Method] Expand a group 
		* @param groupName String The group name 
		* @param focus Boolean Pass true to focus the group after expand. 
		*/
		expand?( groupName?:string, focus?:boolean ): void;

		/** [Method] Expand all groups */
		expandAll?(): void;

		/** [Method] Abstract method to be overriden when a feature should add additional arguments to its event signature  
		* @param type Object 
		* @param view Object 
		* @param targetEl Object 
		* @param e Object 
		*/
		getFireEventArgs?( type?:any, view?:any, targetEl?:any, e?:any ): void;

		/** [Method] Returns the group data object for the group to which the passed record belongs if the Store is grouped  
		* @param record Ext.data.Model The record for which to return group information. 
		* @returns Object A single group data block as returned from Store.getGroups. Returns undefined if the Store is not grouped. 
		*/
		getRecordGroup?( record?:Ext.data.IModel ): any;

		/** [Method] Returns true if the named group is expanded  
		* @param groupName String The group name. This is the value of the groupField. 
		* @returns Boolean true if the group defined by that value is expanded. 
		*/
		isExpanded?( groupName?:string ): boolean;

		/** [Method] Toggle whether or not to show the summary row  
		* @param visible Boolean True to show the summary row 
		*/
		toggleSummaryRow?( visible?:boolean ): void;

	}

}

declare module Ext.grid.feature {
	export interface IGroupingSummary extends Ext.grid.feature.IGrouping {
		/** [Config Option] (Boolean) */
		showSummaryRow?: boolean;
	}

}

declare module Ext.grid.feature {
	export interface IGroupStore extends Ext.util.IObservable {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Get the Record with the specified id  
		* @param id Mixed The id of the Record to find. 
		* @returns Ext.data.Model The Record with the passed id. Returns null if not found. 
		*/
		getById?( id?:any ): Ext.data.IModel;

		/** [Method] Get the index within the store of the Record with the passed id  
		* @param id String The id of the Record to find. 
		* @returns Number The index of the Record. Returns -1 if not found. 
		*/
		indexOfId?( id?:string ): number;

		/** [Method] Get the index within the entire dataset  
		* @param record Ext.data.Model The Ext.data.Model object to find. 
		* @returns Number The index of the passed Record. Returns -1 if not found. 
		*/
		indexOfTotal?( record?:Ext.data.IModel ): number;

	}

}

declare module Ext.grid.feature {
	export interface IRowBody extends Ext.grid.feature.IFeature {
		/** [Config Option] (Boolean) */
		bodyBefore?: boolean;
		/** [Property] (String) */
		eventPrefix?: string;

		/** [Property] (String) */
		eventSelector?: string;

		/** [Method] Provides additional data to the prepareData call within the grid view  
		* @param data Object The data for this particular record. 
		* @param idx Number The row index for this record. 
		* @param record Ext.data.Model The record instance 
		* @param orig Object The original result from the prepareData call to massage. 
		*/
		getAdditionalData?( data?:any, idx?:number, record?:Ext.data.IModel, orig?:any ): void;

	}

}

declare module Ext.grid.feature {
	export interface ISummary extends Ext.grid.feature.IAbstractSummary {
		/** [Config Option] (String) */
		dock?: string;
		/** [Property] (Boolean) */
		hasFeatureEvent?: boolean;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Toggle whether or not to show the summary row  
		* @param visible Object 
		* @param fromLockingPartner Object 
		*/
		toggleSummaryRow?( visible?:any, fromLockingPartner?:any ): void;

	}

}

declare module Ext.grid.filters.filter {
	export interface IBase extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Config Option] (Boolean) */
		active?: boolean;
		/** [Config Option] (String) */
		dataIndex?: string;
		/** [Config Option] (Object) */
		itemDefaults?: any;
		/** [Config Option] (Number) */
		updateBuffer?: number;
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Ext.menu.Menu) */
		menu?: Ext.menu.IMenu;

		/** [Property] (String) */
		type?: string;

		/** [Method] Destroys this filter by purging any event listeners and removing any menus  */
		destroy?(): void;

		/** [Method] Returns the value of itemDefaults  
		* @returns Object 
		*/
		getItemDefaults?(): any;

		/** [Method] Returns the value of menuDefaults  
		* @returns Object 
		*/
		getMenuDefaults?(): any;

		/** [Method] Returns the value of updateBuffer  
		* @returns Number 
		*/
		getUpdateBuffer?(): number;

		/** [Method] Sets the status of the filter and fires the appropriate events  
		* @param active Boolean The new filter state. 
		* @param key String The filter key for columns that support multiple filters. 
		*/
		setActive?( active?:boolean, key?:string ): void;

		/** [Method] Sets the value of itemDefaults  
		* @param itemDefaults Object The new value. 
		*/
		setItemDefaults?( itemDefaults?:any ): void;

		/** [Method] Sets the value of menuDefaults  
		* @param menuDefaults Object The new value. 
		*/
		setMenuDefaults?( menuDefaults?:any ): void;

		/** [Method] Sets the value of updateBuffer  
		* @param updateBuffer Number The new value. 
		*/
		setUpdateBuffer?( updateBuffer?:number ): void;

	}

}

declare module Ext.grid.filters.filter {
	export interface IBoolean extends Ext.grid.filters.filter.ISingleFilter {
		/** [Config Option] (Boolean) */
		defaultValue?: boolean;
		/** [Config Option] (String) */
		noText?: string;
		/** [Config Option] (Number) */
		updateBuffer?: number;
		/** [Config Option] (String) */
		yesText?: string;
		/** [Property] (String) */
		type?: string;

	}

}

declare module Ext.grid.filters.filter {
	export interface IDate extends Ext.grid.filters.filter.ITriFilter {
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (Object) */
		fields?: any;
		/** [Config Option] (Object) */
		itemDefaults?: any;
		/** [Config Option] (Date) */
		maxDate?: any;
		/** [Config Option] (Date) */
		minDate?: any;
		/** [Config Option] (Object) */
		pickerDefaults?: any;
		/** [Config Option] (Number) */
		updateBuffer?: number;
		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of dateFormat  
		* @returns String 
		*/
		getDateFormat?(): string;

		/** [Method] Returns the value of fields  
		* @returns Object 
		*/
		getFields?(): any;

		/** [Method] Gets the menu picker associated with the passed field 
		* @param item String The field identifier ('lt', 'gt', 'eq') 
		* @returns Object The menu picker 
		*/
		getPicker?( item?:string ): any;

		/** [Method] Returns the value of pickerDefaults  
		* @returns Object 
		*/
		getPickerDefaults?(): any;

		/** [Method] Returns the value of updateBuffer  
		* @returns Number 
		*/
		getUpdateBuffer?(): number;

		/** [Method] Handler for when the DatePicker for a field fires the select event 
		* @param picker Ext.picker.Date 
		* @param date Object 
		*/
		onMenuSelect?( picker?:Ext.picker.IDate, date?:any ): void;

		/** [Method] Sets the value of dateFormat  
		* @param dateFormat String The new value. 
		*/
		setDateFormat?( dateFormat?:string ): void;

		/** [Method] Sets the value of fields  
		* @param fields Object The new value. 
		*/
		setFields?( fields?:any ): void;

		/** [Method] Sets the value of pickerDefaults  
		* @param pickerDefaults Object The new value. 
		*/
		setPickerDefaults?( pickerDefaults?:any ): void;

		/** [Method] Sets the value of updateBuffer  
		* @param updateBuffer Number The new value. 
		*/
		setUpdateBuffer?( updateBuffer?:number ): void;

	}

}

declare module Ext.grid.filters.filter {
	export interface IList extends Ext.grid.filters.filter.ISingleFilter {
		/** [Config Option] (String) */
		idField?: string;
		/** [Config Option] (Object) */
		itemDefaults?: any;
		/** [Config Option] (String) */
		labelField?: string;
		/** [Config Option] (String) */
		labelIndex?: string;
		/** [Config Option] (Boolean) */
		loadOnShow?: boolean;
		/** [Config Option] (String) */
		loadingText?: string;
		/** [Config Option] (Array) */
		options?: any[];
		/** [Config Option] (Boolean) */
		single?: boolean;
		/** [Config Option] (Ext.data.Store) */
		store?: Ext.data.IStore;
		/** [Property] (String) */
		type?: string;

		/** [Method] Destroys this filter by purging any event listeners and removing any menus  */
		destroy?(): void;

	}

}

declare module Ext.grid.filters.filter {
	export interface INumber extends Ext.grid.filters.filter.ITriFilter {
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Object) */
		fields?: any;
		/** [Config Option] (Object) */
		itemDefaults?: any;
		/** [Property] (String) */
		type?: string;

		/** [Method] Returns the value of fields  
		* @returns Object 
		*/
		getFields?(): any;

		/** [Method] Sets the value of fields  
		* @param fields Object The new value. 
		*/
		setFields?( fields?:any ): void;

	}

}

declare module Ext.grid.filters.filter {
	export interface ISingleFilter extends Ext.grid.filters.filter.IBase {
	}

}

declare module Ext.grid.filters.filter {
	export interface IString extends Ext.grid.filters.filter.ISingleFilter {
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Object) */
		itemDefaults?: any;
		/** [Property] (String) */
		type?: string;

	}

}

declare module Ext.grid.filters.filter {
	export interface ITriFilter extends Ext.grid.filters.filter.IBase {
	}

}

declare module Ext.grid.filters {
	export interface IFilters extends Ext.plugin.IAbstract, Ext.util.IStoreHolder {
		/** [Config Option] (String) */
		menuFilterText?: string;
		/** [Config Option] (String) */
		pluginId?: string;
		/** [Config Option] (Boolean) */
		showMenu?: boolean;
		/** [Config Option] (String) */
		stateId?: string;
		/** [Property] (String) */
		filterCls?: string;

		/** [Method] Adds a filter to the collection and creates a store filter if has a value property  
		* @param filters Object/Object[]/Ext.util.Filter/Ext.util.Filter[] A filter configuration or a filter object. 
		*/
		addFilter?( filters?:any ): void;

		/** [Method] Adds filters to the collection  
		* @param filters Array An Array of filter configuration objects. 
		*/
		addFilters?( filters?:any[] ): void;

		/** [Method] Binds a store to this instance  
		* @param store Ext.data.AbstractStore/String The store to bind or ID of the store. When no store given (or when null or undefined passed), unbinds the existing store. 
		*/
		bindStore?( store?:any ): void;

		/** [Method] Binds listeners for this component to the store  
		* @param store Ext.data.AbstractStore The store to bind to 
		*/
		bindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

		/** [Method] Turns all filters off  
		* @param autoFilter Boolean If true, don't fire the deactivate event in setActive. 
		*/
		clearFilters?( autoFilter?:boolean ): void;

		/** [Method] Gets the current store instance  
		* @returns Ext.data.AbstractStore The store, null if one does not exist. 
		*/
		getStore?(): Ext.data.IAbstractStore;

		/** [Method] Gets the listeners to bind to a new store  
		* @param store Ext.data.Store The Store which is being bound to for which a listeners object should be returned. 
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?( store?:Ext.data.IStore ): any;

		/** [Method] The init method is invoked after initComponent method has been run for the client Component  
		* @param grid Object 
		*/
		init?( grid?:any ): void;

		/** [Method] Checks the plugin s grid for statefulness  
		* @returns Boolean 
		*/
		isStateful?(): boolean;

		/** [Method] Template method it is called when a new store is bound to the current instance  
		* @param store Object 
		* @param initial Object 
		* @param propName Object 
		*/
		onBindStore?( store?:any, initial?:any, propName?:any ): void;

		/** [Method] Handler called by the grid beforedestroy event */
		onGridDestroy?(): void;

		/** [Method] Template method it is called when an existing store is unbound from the current instance  
		* @param store Object 
		*/
		onUnbindStore?( store?:any ): void;

		/** [Method] Sets the store to the specified store  
		* @param store Object 
		*/
		setStore?( store?:any ): void;

		/** [Method] Unbinds listeners from this component to the store  
		* @param store Ext.data.AbstractStore The store to unbind from 
		*/
		unbindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

	}

}

declare module Ext.grid.header {
	export interface IContainer extends Ext.container.IContainer, Ext.util.IFocusableContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String/Boolean) */
		border?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Number) */
		defaultWidth?: number;
		/** [Config Option] (Boolean) */
		detachOnRemove?: boolean;
		/** [Config Option] ('top'/'bottom'/'left'/'right') */
		dock?: any;
		/** [Config Option] (Boolean) */
		enableColumnHide?: boolean;
		/** [Config Option] (Boolean) */
		enableFocusableContainer?: boolean;
		/** [Config Option] (Boolean) */
		sealed?: boolean;
		/** [Config Option] (Boolean) */
		sortable?: boolean;
		/** [Config Option] (Number) */
		weight?: number;
		/** [Property] (Boolean) */
		isGroupHeader?: boolean;

		/** [Method] Returns the number of grid columns descended from this HeaderContainer  */
		getColumnCount?(): void;

		/** [Method] Returns an array of menu CheckItems corresponding to all immediate children of the passed Container which have been c  
		* @param headerContainer Object 
		*/
		getColumnMenu?( headerContainer?:any ): void;

		/** [Method] Returns an array of all columns which exist in the grid s View visible or not  
		* @returns Ext.grid.column.Column[] columns An array of columns. Returns an empty array if no columns are found. 
		*/
		getGridColumns?(): Ext.grid.column.IColumn[];

		/** [Method] Get a leaf level header by index regardless of what the nesting structure is  
		* @param index Number The column index for which to retrieve the column. 
		*/
		getHeaderAtIndex?( index?:number ): void;

		/** [Method] Returns the index of a leaf level header regardless of what the nesting structure is  
		* @param header Ext.grid.column.Column The header to find the index of 
		* @returns Number The index of the specified column header 
		*/
		getHeaderIndex?( header?:Ext.grid.column.IColumn ): number;

		/** [Method] Returns an array of menu items to be placed into the shared menu across all headers in this header container  
		* @returns Array menuItems 
		*/
		getMenuItems?(): any[];

		/** [Method] Gets the full width of all columns that are visible for setting width of tables  */
		getTableWidth?(): void;

		/** [Method] Returns an array of the visible columns in the grid  
		* @returns Ext.grid.column.Column[] columns An array of visible columns. Returns an empty array if no visible columns are found. 
		*/
		getVisibleGridColumns?(): Ext.grid.column.IColumn[];

		/** [Method] When passed a column index returns the closet visible column to that  
		* @param index Number Position at which to find the closest visible column. 
		*/
		getVisibleHeaderClosestToIndex?( index?:number ): void;

		/** [Method] Initialize any events on this component */
		initEvents?(): void;

		/** [Method] Determines whether this Component is the root of a layout  */
		isLayoutRoot?(): void;

		/** [Method] Moves a Component within the Container  
		* @param fromIdx Object 
		* @param toIdx Object 
		* @returns Ext.Component component The Component that was moved. 
		*/
		move?( fromIdx?:any, toIdx?:any ): Ext.IComponent;

		/** [Method] Invalidate column cache on add We cannot refresh the View on every add because this method is called when the HeaderD  
		* @param c Object 
		*/
		onAdd?( c?:any ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Invalidate column cache on remove We cannot refresh the View on every remove because this method is called when the H  
		* @param c Object 
		*/
		onRemove?( c?:any ): void;

	}

}

declare module Ext.grid.header {
	export interface IDragZone extends Ext.dd.IDragZone {
		/** [Method] Called when a mousedown occurs in this container  
		* @param e Object 
		* @returns Object The dragData 
		*/
		getDragData?( e?:any ): any;

		/** [Method] Called before a repair of an invalid drop to get the XY to animate to  
		* @returns Number[] The xy location (e.g. [100, 200]) 
		*/
		getRepairXY?(): number[];

		/** [Method] An empty function by default but provided so that you can perform a custom action before the initial drag event begi  
		* @returns Boolean isValid True if the drag event is valid, else false to cancel 
		*/
		onBeforeDrag?(): boolean;

		/** [Method] Called once drag threshold has been reached to initialize the proxy element  
		* @returns Boolean true to continue the drag, false to cancel 
		*/
		onInitDrag?(): boolean;

	}

}

declare module Ext.grid.header {
	export interface IDropZone extends Ext.dd.IDropZone {
		/** [Method] Destroy this DragDrop instance */
		destroy?(): void;

		/** [Method] Returns a custom data object associated with the DOM node that is the target of the event  
		* @param e Object 
		* @returns Object data The custom data 
		*/
		getTargetFromEvent?( e?:any ): any;

		/** [Method] Called when the DropZone determines that a Ext dd DragSource has been dropped onto the drop node  
		* @param node Object 
		* @param dragZone Object 
		* @param e Object 
		* @param data Object 
		* @returns Boolean True if the drop was valid, else false 
		*/
		onNodeDrop?( node?:any, dragZone?:any, e?:any, data?:any ): boolean;

		/** [Method] Called when the DropZone determines that a Ext dd DragSource has been dragged out of the drop node without dropping  */
		onNodeOut?(): void;

		/** [Method] Called while the DropZone determines that a Ext dd DragSource is over a drop node that has either been registered or 
		* @param node Object 
		* @param dragZone Object 
		* @param e Object 
		* @param data Object 
		* @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated 
		*/
		onNodeOver?( node?:any, dragZone?:any, e?:any, data?:any ): string;

	}

}

declare module Ext.grid.locking {
	export interface IHeaderContainer extends Ext.grid.header.IContainer {
		/** [Method] Disables all child input fields and buttons  */
		disable?(): void;

		/** [Method] Enables all child input fields and buttons  */
		enable?(): void;

		/** [Method] This is the function which all other column access methods are based upon Return the full column set for the whole Lo  
		* @returns Ext.grid.column.Column[] columns An array of columns. Returns an empty array if no columns are found. 
		*/
		getGridColumns?(): Ext.grid.column.IColumn[];

		/** [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th  */
		getRefItems?(): void;

	}

}

declare module Ext.grid.locking {
	export interface ILockable extends Ext.IBase {
		/** [Config Option] (Object) */
		layout?: any;
		/** [Config Option] (Object) */
		lockedGridConfig?: any;
		/** [Config Option] (Object) */
		lockedViewConfig?: any;
		/** [Config Option] (Object) */
		normalGridConfig?: any;
		/** [Config Option] (Object) */
		normalViewConfig?: any;
		/** [Config Option] (Number) */
		scrollDelta?: number;
		/** [Config Option] (Boolean) */
		split?: boolean;
		/** [Config Option] (String) */
		subGridXType?: string;
		/** [Config Option] (Boolean) */
		syncRowHeight?: boolean;
		/** [Method] Synchronizes the row heights between the locked and non locked portion of the grid for each row  */
		syncRowHeights?(): void;

	}

}

declare module Ext.grid {
	export interface ILockable extends Ext.IBase {
		/** [Config Option] (Object) */
		layout?: any;
		/** [Config Option] (Object) */
		lockedGridConfig?: any;
		/** [Config Option] (Object) */
		lockedViewConfig?: any;
		/** [Config Option] (Object) */
		normalGridConfig?: any;
		/** [Config Option] (Object) */
		normalViewConfig?: any;
		/** [Config Option] (Number) */
		scrollDelta?: number;
		/** [Config Option] (Boolean) */
		split?: boolean;
		/** [Config Option] (String) */
		subGridXType?: string;
		/** [Config Option] (Boolean) */
		syncRowHeight?: boolean;
		/** [Method] Synchronizes the row heights between the locked and non locked portion of the grid for each row  */
		syncRowHeights?(): void;

	}

}

declare module Ext.grid.locking {
	export interface IRowSynchronizer extends Ext.IBase {
	}

}

declare module Ext.grid.locking {
	export interface IView extends Ext.IBase, Ext.util.IObservable, Ext.util.IStoreHolder, Ext.util.IFocusable {
		/** [Property] (Boolean) */
		isLockingView?: boolean;

		/** [Method] Template method to do any pre blur processing  
		* @param e Ext.event.Event The event object 
		*/
		beforeBlur?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method to do any pre focus processing  
		* @param e Ext.event.Event The event object 
		*/
		beforeFocus?( e?:Ext.event.IEvent ): void;

		/** [Method] Binds a store to this instance  
		* @param store Ext.data.AbstractStore/String The store to bind or ID of the store. When no store given (or when null or undefined passed), unbinds the existing store. 
		*/
		bindStore?( store?:any ): void;

		/** [Method] Binds listeners for this component to the store  
		* @param store Ext.data.AbstractStore The store to bind to 
		*/
		bindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

		/** [Method] Cancel any deferred focus on this component */
		cancelFocus?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Try to focus this component  
		* @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option. If this component is disabled, a closely related component will be focused and that will be returned. 
		*/
		focus?(): Ext.IComponent;

		/** [Method] Returns the focus styling holder element associated with this Focusable  
		* @returns Ext.Element The focus styling element. 
		*/
		getFocusClsEl?(): Ext.IElement;

		/** [Method] Returns the focus holder element associated with this Focusable  
		* @returns Ext.Element 
		*/
		getFocusEl?(): Ext.IElement;

		/** [Method] Gets the current store instance  
		* @returns Ext.data.AbstractStore The store, null if one does not exist. 
		*/
		getStore?(): Ext.data.IAbstractStore;

		/** [Method] Gets the listeners to bind to a new store  
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?(): any;

		/** [Method] Return the actual tabIndex for this Focusable  
		* @returns Number tabIndex attribute value 
		*/
		getTabIndex?(): number;

		/** [Method] Template method to do any Focusable related initialization that does not involve event listeners creation  */
		initFocusable?(): void;

		/** [Method] Template method to do any event listener initialization for a Focusable  */
		initFocusableEvents?(): void;

		/** [Method] Determine if this Focusable can receive focus at this time  
		* @param deep Boolean Optionally determine if the container itself is focusable, or if container's focus is delegated to a child component and that child is focusable. 
		* @returns Boolean True if component is focusable, false if not. 
		*/
		isFocusable?( deep?:boolean ): boolean;

		/** [Method] Changes the data store bound to this view and refreshes it  
		* @param store Ext.data.Store The store to bind to this view 
		*/
		onBindStore?( store?:Ext.data.IStore ): void;

		/** [Method] Called when focus enters this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		onFocusEnter?( e?:Ext.event.IEvent ): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		onFocusLeave?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method it is called when an existing store is unbound from the current instance  
		* @param store Ext.data.AbstractStore The store being unbound 
		* @param initial Boolean True if this store is being bound as initialization of the instance. 
		*/
		onUnbindStore?( store?:Ext.data.IAbstractStore, initial?:boolean ): void;

		/** [Method] Template method to do any post blur processing  
		* @param e Ext.event.Event The event object 
		*/
		postBlur?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method to do any post focus processing  
		* @param e Ext.event.Event The event object 
		*/
		postFocus?( e?:Ext.event.IEvent ): void;

		/** [Method] Sets the store to the specified store  
		* @param store Object 
		*/
		setStore?( store?:any ): void;

		/** [Method] Set the tabIndex property for this Focusable  
		* @param newTabIndex Number new tabIndex to set 
		*/
		setTabIndex?( newTabIndex?:number ): void;

		/** [Method] Unbinds listeners from this component to the store  
		* @param store Ext.data.AbstractStore The store to unbind from 
		*/
		unbindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

	}

}

declare module Ext.grid {
	export interface ILockingView extends Ext.IBase, Ext.util.IObservable, Ext.util.IStoreHolder, Ext.util.IFocusable {
		/** [Property] (Boolean) */
		isLockingView?: boolean;

		/** [Method] Template method to do any pre blur processing  
		* @param e Ext.event.Event The event object 
		*/
		beforeBlur?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method to do any pre focus processing  
		* @param e Ext.event.Event The event object 
		*/
		beforeFocus?( e?:Ext.event.IEvent ): void;

		/** [Method] Binds a store to this instance  
		* @param store Ext.data.AbstractStore/String The store to bind or ID of the store. When no store given (or when null or undefined passed), unbinds the existing store. 
		*/
		bindStore?( store?:any ): void;

		/** [Method] Binds listeners for this component to the store  
		* @param store Ext.data.AbstractStore The store to bind to 
		*/
		bindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

		/** [Method] Cancel any deferred focus on this component */
		cancelFocus?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Try to focus this component  
		* @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option. If this component is disabled, a closely related component will be focused and that will be returned. 
		*/
		focus?(): Ext.IComponent;

		/** [Method] Returns the focus styling holder element associated with this Focusable  
		* @returns Ext.Element The focus styling element. 
		*/
		getFocusClsEl?(): Ext.IElement;

		/** [Method] Returns the focus holder element associated with this Focusable  
		* @returns Ext.Element 
		*/
		getFocusEl?(): Ext.IElement;

		/** [Method] Gets the current store instance  
		* @returns Ext.data.AbstractStore The store, null if one does not exist. 
		*/
		getStore?(): Ext.data.IAbstractStore;

		/** [Method] Gets the listeners to bind to a new store  
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?(): any;

		/** [Method] Return the actual tabIndex for this Focusable  
		* @returns Number tabIndex attribute value 
		*/
		getTabIndex?(): number;

		/** [Method] Template method to do any Focusable related initialization that does not involve event listeners creation  */
		initFocusable?(): void;

		/** [Method] Template method to do any event listener initialization for a Focusable  */
		initFocusableEvents?(): void;

		/** [Method] Determine if this Focusable can receive focus at this time  
		* @param deep Boolean Optionally determine if the container itself is focusable, or if container's focus is delegated to a child component and that child is focusable. 
		* @returns Boolean True if component is focusable, false if not. 
		*/
		isFocusable?( deep?:boolean ): boolean;

		/** [Method] Changes the data store bound to this view and refreshes it  
		* @param store Ext.data.Store The store to bind to this view 
		*/
		onBindStore?( store?:Ext.data.IStore ): void;

		/** [Method] Called when focus enters this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		onFocusEnter?( e?:Ext.event.IEvent ): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		onFocusLeave?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method it is called when an existing store is unbound from the current instance  
		* @param store Ext.data.AbstractStore The store being unbound 
		* @param initial Boolean True if this store is being bound as initialization of the instance. 
		*/
		onUnbindStore?( store?:Ext.data.IAbstractStore, initial?:boolean ): void;

		/** [Method] Template method to do any post blur processing  
		* @param e Ext.event.Event The event object 
		*/
		postBlur?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method to do any post focus processing  
		* @param e Ext.event.Event The event object 
		*/
		postFocus?( e?:Ext.event.IEvent ): void;

		/** [Method] Sets the store to the specified store  
		* @param store Object 
		*/
		setStore?( store?:any ): void;

		/** [Method] Set the tabIndex property for this Focusable  
		* @param newTabIndex Number new tabIndex to set 
		*/
		setTabIndex?( newTabIndex?:number ): void;

		/** [Method] Unbinds listeners from this component to the store  
		* @param store Ext.data.AbstractStore The store to unbind from 
		*/
		unbindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

	}

}

declare module Ext.grid {
	export interface INavigationModel extends Ext.view.INavigationModel {
		/** [Method] Called by Ext view AbstractView refresh before refresh to allow the current focus position to be cached  
		* @param view Object 
		*/
		beforeViewRefresh?( view?:any ): void;

		/** [Method] Called to focus an item in the client DataView  
		* @param item Ext.dom.Element 
		* @returns undefined 
		*/
		focusItem?( item?:Ext.dom.IElement ): void;

	}

}

declare module Ext.grid {
	export interface IPanel extends Ext.panel.ITable {
		/** [Config Option] (Ext.grid.column.Column[]/Object) */
		columns?: any;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
	}

}

declare module Ext.list {
	export interface IListView extends Ext.panel.ITable {
		/** [Config Option] (Ext.grid.column.Column[]/Object) */
		columns?: any;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
	}

}

declare module Ext {
	export interface IListView extends Ext.panel.ITable {
		/** [Config Option] (Ext.grid.column.Column[]/Object) */
		columns?: any;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
	}

}

declare module Ext.grid {
	export interface IGridPanel extends Ext.panel.ITable {
		/** [Config Option] (Ext.grid.column.Column[]/Object) */
		columns?: any;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
	}

}

declare module Ext.grid.plugin {
	export interface IBufferedRenderer extends Ext.IAbstractPlugin {
		/** [Config Option] (Number) */
		leadingBufferZone?: number;
		/** [Config Option] (Number) */
		numFromEdge?: number;
		/** [Config Option] (Number) */
		scrollToLoadBuffer?: number;
		/** [Config Option] (Boolean) */
		synchronousRender?: boolean;
		/** [Config Option] (Number) */
		trailingBufferZone?: number;
		/** [Property] (Boolean) */
		isBufferedRenderer?: boolean;

		/** [Property] (Number) */
		position?: number;

		/** [Method] The destroy method is invoked by the owning Component at the time the Component is being destroyed  */
		destroy?(): void;

		/** [Method] Initialize this as a plugin 
		* @param grid Object 
		*/
		init?( grid?:any ): void;

	}

}

declare module Ext.grid.plugin {
	export interface ICellEditing extends Ext.grid.plugin.IEditing {
		/** [Method] Cancels any active editing  */
		cancelEdit?(): void;

		/** [Method] Completes the edit if there is an active edit in progress  
		* @param remainVisible Object 
		*/
		completeEdit?( remainVisible?:any ): void;

		/** [Method] Fires after the grid is reconfigured 
		* @param grid Object 
		* @param store Object 
		* @param columns Object 
		*/
		onReconfigure?( grid?:any, store?:any, columns?:any ): void;

		/** [Method] Called from the specialkey event of an active editor when a control key is pressed 
		* @param ed Ext.form.field.Field The Editor 
		* @param field HTMLElement The Editor's input field 
		* @param e Ext.event.Event the key event. 
		*/
		onSpecialKey?( ed?:Ext.form.field.IField, field?:HTMLElement, e?:Ext.event.IEvent ): void;

		/** [Method] Starts editing the specified record using the specified Column definition to define which field is being edited  
		* @param record Ext.data.Model/Number The Store data record which backs the row to be edited, or index of the record. 
		* @param columnHeader Ext.grid.column.Column/Number The Column object defining the column to be edited, or index of the column. 
		* @returns Boolean true if editing was started, false otherwise. 
		*/
		startEdit?( record?:any, columnHeader?:any ): boolean;

		/** [Method] Starts editing by position row column  
		* @param position Object A position with keys of row and column. Example usage: cellEditing.startEditByPosition({  row: 3,  column: 2 }); 
		*/
		startEditByPosition?( position?:any ): void;

	}

}

declare module Ext.grid.plugin {
	export interface IClipboard extends Ext.plugin.IAbstractClipboard {
		/** [Config Option] (Object) */
		formats?: any;
		/** [Method] This method returns the selected data in text format  
		* @param format Object 
		* @param erase Object 
		* @returns String The data in text format. 
		*/
		getTextData?( format?:any, erase?:any ): string;

		/** [Method] This method pastes the given text data  
		* @param data Object 
		* @param format Object 
		*/
		putTextData?( data?:any, format?:any ): void;

	}

}

declare module Ext.grid.plugin {
	export interface IDragDrop extends Ext.plugin.IAbstract {
		/** [Config Option] (Object/Boolean) */
		containerScroll?: any;
		/** [Config Option] (String) */
		ddGroup?: string;
		/** [Config Option] (String) */
		dragGroup?: string;
		/** [Config Option] (String) */
		dragText?: string;
		/** [Config Option] (Object) */
		dragZone?: any;
		/** [Config Option] (String) */
		dropGroup?: string;
		/** [Config Option] (Object) */
		dropZone?: any;
		/** [Config Option] (Boolean) */
		enableDrag?: boolean;
		/** [Config Option] (Boolean) */
		enableDrop?: boolean;
		/** [Method] The base implementation just sets the plugin s disabled flag to true Plugin subclasses which need more complex proce  */
		disable?(): void;

		/** [Method] The base implementation just sets the plugin s disabled flag to false Plugin subclasses which need more complex proc  */
		enable?(): void;

	}

}

declare module Ext.grid.plugin {
	export interface IEditing extends Ext.plugin.IAbstract, Ext.util.IObservable {
		/** [Config Option] (Number) */
		clicksToEdit?: number;
		/** [Config Option] (String) */
		default?: string;
		/** [Config Option] (String) */
		triggerEvent?: string;
		/** [Property] (Boolean) */
		editing?: boolean;

		/** [Method] Cancels any active edit that is in progress  */
		cancelEdit?(): void;

		/** [Method] Completes the edit if there is an active edit in progress  */
		completeEdit?(): void;

		/** [Method] Fires after the grid is reconfigured */
		onReconfigure?(): void;

		/** [Method] Starts editing the specified record using the specified Column definition to define which field is being edited  
		* @param record Ext.data.Model/Number The Store data record which backs the row to be edited, or index of the record in Store. 
		* @param columnHeader Ext.grid.column.Column/Number The Column object defining the column to be edited, or index of the column. 
		*/
		startEdit?( record?:any, columnHeader?:any ): void;

	}

}

declare module Ext.grid.plugin {
	export interface IHeaderReorderer extends Ext.plugin.IAbstract {
		/** [Method] The base implementation just sets the plugin s disabled flag to true Plugin subclasses which need more complex proce  */
		disable?(): void;

		/** [Method] The base implementation just sets the plugin s disabled flag to false Plugin subclasses which need more complex proc  */
		enable?(): void;

		/** [Method] The init method is invoked after initComponent method has been run for the client Component  
		* @param headerCt Object 
		*/
		init?( headerCt?:any ): void;

	}

}

declare module Ext.grid.plugin {
	export interface IHeaderResizer extends Ext.plugin.IAbstract {
		/** [Config Option] (Boolean) */
		dynamic?: boolean;
		/** [Method] The base implementation just sets the plugin s disabled flag to true Plugin subclasses which need more complex proce  */
		disable?(): void;

		/** [Method] The base implementation just sets the plugin s disabled flag to false Plugin subclasses which need more complex proc  */
		enable?(): void;

		/** [Method] Returns the value of dynamic  
		* @returns Boolean 
		*/
		getDynamic?(): boolean;

		/** [Method] The init method is invoked after initComponent method has been run for the client Component  
		* @param headerCt Object 
		*/
		init?( headerCt?:any ): void;

		/** [Method] Sets the value of dynamic  
		* @param dynamic Boolean The new value. 
		*/
		setDynamic?( dynamic?:boolean ): void;

	}

}

declare module Ext.grid.plugin {
	export interface IRowEditing extends Ext.grid.plugin.IEditing {
		/** [Config Option] (Boolean) */
		autoCancel?: boolean;
		/** [Config Option] (Number) */
		clicksToMoveEditor?: number;
		/** [Config Option] (Boolean) */
		errorSummary?: boolean;
		/** [Method] Cancels any active edit that is in progress  */
		cancelEdit?(): void;

		/** [Method] Completes the edit if there is an active edit in progress  */
		completeEdit?(): void;

		/** [Method] Fires after the grid is reconfigured 
		* @param grid Object 
		* @param store Object 
		* @param columns Object 
		*/
		onReconfigure?( grid?:any, store?:any, columns?:any ): void;

		/** [Method] Starts editing the specified record using the specified Column definition to define which field is being edited  
		* @param record Ext.data.Model The Store data record which backs the row to be edited. 
		* @param columnHeader Ext.grid.column.Column/Number The Column object defining the column field to be focused, or index of the column. If not specified, it will default to the first visible column. 
		* @returns Boolean true if editing was started, false otherwise. 
		*/
		startEdit?( record?:Ext.data.IModel, columnHeader?:any ): boolean;

	}

}

declare module Ext.grid.plugin {
	export interface IRowExpander extends Ext.plugin.IAbstract {
		/** [Config Option] (Boolean) */
		bodyBefore?: boolean;
		/** [Config Option] (Number) */
		columnWidth?: number;
		/** [Config Option] (Boolean) */
		expandOnDblClick?: boolean;
		/** [Config Option] (Boolean) */
		expandOnEnter?: boolean;
		/** [Config Option] (Number) */
		headerWidth?: number;
		/** [Config Option] (Ext.XTemplate) */
		lockedTpl?: Ext.IXTemplate;
		/** [Config Option] (Ext.XTemplate) */
		rowBodyTpl?: Ext.IXTemplate;
		/** [Config Option] (Boolean) */
		selectRowOnExpand?: boolean;
		/** [Method]  
		* @param grid Object 
		* @returns Array And array of Features or Feature config objects. Returns the array of Feature configurations needed to make the RowExpander work. May be overridden in a subclass to modify the returned array. 
		*/
		getFeatureConfig?( grid?:any ): any[];

		/** [Method] The init method is invoked after initComponent method has been run for the client Component  
		* @param grid Object 
		*/
		init?( grid?:any ): void;

	}

}

declare module Ext.grid.property {
	export interface IGrid extends Ext.grid.IPanel {
		/** [Config Option] (Boolean) */
		columnLines?: boolean;
		/** [Config Option] (Object) */
		customEditors?: any;
		/** [Config Option] (Object) */
		customRenderers?: any;
		/** [Config Option] (Boolean) */
		enableColumnMove?: boolean;
		/** [Config Option] (Boolean) */
		inferTypes?: boolean;
		/** [Config Option] (Number/String) */
		nameColumnWidth?: any;
		/** [Config Option] (String) */
		nameField?: string;
		/** [Config Option] (Object) */
		propertyNames?: any;
		/** [Config Option] (Object) */
		source?: any;
		/** [Config Option] (Object) */
		sourceConfig?: any;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Gets the value of a property  
		* @param prop String The name of the property. 
		* @returns Object The property value. null if there is no value. 
		*/
		getProperty?( prop?:string ): any;

		/** [Method] Gets the source data object containing the property data  
		* @returns Object The data object. 
		*/
		getSource?(): any;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] Removes a property from the grid  
		* @param prop String The name of the property to remove. 
		*/
		removeProperty?( prop?:string ): void;

		/** [Method] Sets the value of a property  
		* @param prop String The name of the property to set. 
		* @param value Object The value to test. 
		* @param create Boolean true to create the property if it doesn't already exist. 
		*/
		setProperty?( prop?:string, value?:any, create?:boolean ): void;

		/** [Method] Sets the source data object containing the property data  
		* @param source Object The data object. 
		* @param sourceConfig Object A new object. If this argument is not passed the current configuration will be re-used. To reset the config, pass null or an empty object literal. 
		*/
		setSource?( source?:any, sourceConfig?:any ): void;

	}

}

declare module Ext.grid {
	export interface IPropertyGrid extends Ext.grid.IPanel {
		/** [Config Option] (Boolean) */
		columnLines?: boolean;
		/** [Config Option] (Object) */
		customEditors?: any;
		/** [Config Option] (Object) */
		customRenderers?: any;
		/** [Config Option] (Boolean) */
		enableColumnMove?: boolean;
		/** [Config Option] (Boolean) */
		inferTypes?: boolean;
		/** [Config Option] (Number/String) */
		nameColumnWidth?: any;
		/** [Config Option] (String) */
		nameField?: string;
		/** [Config Option] (Object) */
		propertyNames?: any;
		/** [Config Option] (Object) */
		source?: any;
		/** [Config Option] (Object) */
		sourceConfig?: any;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Gets the value of a property  
		* @param prop String The name of the property. 
		* @returns Object The property value. null if there is no value. 
		*/
		getProperty?( prop?:string ): any;

		/** [Method] Gets the source data object containing the property data  
		* @returns Object The data object. 
		*/
		getSource?(): any;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] Removes a property from the grid  
		* @param prop String The name of the property to remove. 
		*/
		removeProperty?( prop?:string ): void;

		/** [Method] Sets the value of a property  
		* @param prop String The name of the property to set. 
		* @param value Object The value to test. 
		* @param create Boolean true to create the property if it doesn't already exist. 
		*/
		setProperty?( prop?:string, value?:any, create?:boolean ): void;

		/** [Method] Sets the source data object containing the property data  
		* @param source Object The data object. 
		* @param sourceConfig Object A new object. If this argument is not passed the current configuration will be re-used. To reset the config, pass null or an empty object literal. 
		*/
		setSource?( source?:any, sourceConfig?:any ): void;

	}

}

declare module Ext.grid.property {
	export interface IHeaderContainer extends Ext.grid.header.IContainer {
	}

}

declare module Ext.grid {
	export interface IPropertyColumnModel extends Ext.grid.header.IContainer {
	}

}

declare module Ext.grid.property {
	export interface IProperty extends Ext.data.IModel {
		/** [Config Option] (String) */
		idProperty?: string;
	}

}

declare module Ext {
	export interface IPropGridProperty extends Ext.data.IModel {
		/** [Config Option] (String) */
		idProperty?: string;
	}

}

declare module Ext.grid.property {
	export interface IReader extends Ext.data.reader.IReader {
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Method] Reads the given response object  
		* @param dataObject Object 
		* @returns Ext.data.ResultSet The parsed or default ResultSet object 
		*/
		read?( dataObject?:any ): Ext.data.IResultSet;

		/** [Method] Abstracts common functionality used by all Reader subclasses  
		* @param dataObject Object 
		* @returns Ext.data.ResultSet A ResultSet object 
		*/
		readRecords?( dataObject?:any ): Ext.data.IResultSet;

	}

}

declare module Ext.grid.property {
	export interface IStore extends Ext.data.IStore {
		/** [Config Option] (Boolean) */
		remoteSort?: boolean;
		/** [Method] Return a singleton customized Proxy object which configures itself with a custom Reader 
		* @returns String/Ext.data.proxy.Proxy/Object 
		*/
		getProxy?(): any;

	}

}

declare module Ext.grid {
	export interface IPropertyStore extends Ext.data.IStore {
		/** [Config Option] (Boolean) */
		remoteSort?: boolean;
		/** [Method] Return a singleton customized Proxy object which configures itself with a custom Reader 
		* @returns String/Ext.data.proxy.Proxy/Object 
		*/
		getProxy?(): any;

	}

}

declare module Ext.grid {
	export interface IRowEditor extends Ext.form.IPanel {
		/** [Config Option] (Boolean) */
		border?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th  
		* @param deep Object 
		*/
		getRefItems?( deep?:any ): void;

		/** [Method] Used by ComponentQuery and the up method to find the owning Component in the linkage hierarchy  */
		getRefOwner?(): void;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Convenience function to check if the form has any dirty fields  
		* @returns Boolean 
		*/
		isDirty?(): boolean;

		/** [Method] Loads an Ext data Model into this form internally just calls Ext form Basic loadRecord See also trackResetOnLoad  
		* @param record Object 
		* @returns Ext.form.Basic The Ext.form.Basic attached to this FormPanel 
		*/
		loadRecord?( record?:any ): Ext.form.IBasic;

		/** [Method] Allows addition of behavior to the hide operation  */
		onHide?(): void;

		/** [Method] Called when the component is resized  
		* @param width Object 
		* @param height Object 
		*/
		onResize?( width?:any, height?:any ): void;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Start editing the specified grid at the specified position  
		* @param record Ext.data.Model The Store data record which backs the row to be edited. 
		* @param columnHeader Ext.data.Model The Column object defining the column to be focused 
		*/
		startEdit?( record?:Ext.data.IModel, columnHeader?:Ext.data.IModel ): void;

	}

}

declare module Ext.grid {
	export interface IRowEditorButtons extends Ext.container.IContainer {
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
	}

}

declare module Ext.grid.selection {
	export interface ICells extends Ext.grid.selection.ISelection {
		/** [Property] (Boolean) */
		isCells?: boolean;

		/** [Method] Base Selection API 
		* @returns Ext.grid.selection.Selection A clone of this instance. 
		*/
		clone?(): Ext.grid.selection.ISelection;

		/** [Method] Returns true if the passed cell context is selected  
		* @param cellContext Ext.grid.CellContext The cell context to test. 
		* @returns Boolean true if the passed cell context is selected. 
		*/
		contains?( cellContext?:Ext.grid.ICellContext ): boolean;

		/** [Method] Calls the passed function for each selected cell from top left to bottom right iterating over columns within each row  
		* @param fn Object 
		* @param scope Object 
		*/
		eachCell?( fn?:any, scope?:any ): void;

		/** [Method] Calls the passed function for each selected column from left to right  
		* @param fn Object 
		* @param scope Object 
		*/
		eachColumn?( fn?:any, scope?:any ): void;

		/** [Method] Calls the passed function for each selected record  
		* @param fn Object 
		* @param scope Object 
		*/
		eachRow?( fn?:any, scope?:any ): void;

		/** [Method]  
		* @returns Number The column index of the first column in the range or zero if no range. 
		*/
		getFirstColumnIndex?(): number;

		/** [Method]  
		* @returns Number The row index of the first row in the range or zero if no range. 
		*/
		getFirstRowIndex?(): number;

		/** [Method]  
		* @returns Number The column index of the last column in the range or -1 if no range. 
		*/
		getLastColumnIndex?(): number;

		/** [Method]  
		* @returns Number The row index of the last row in the range or -1 if no range. 
		*/
		getLastRowIndex?(): number;

	}

}

declare module Ext.grid.selection {
	export interface IColumns extends Ext.grid.selection.ISelection {
		/** [Property] (Boolean) */
		isColumns?: boolean;

		/** [Method] Base Selection API 
		* @returns Ext.grid.selection.Selection A clone of this instance. 
		*/
		clone?(): Ext.grid.selection.ISelection;

		/** [Method] Returns true if the passed column is selected  
		* @param column Ext.grid.column.Column The column to test. 
		* @returns Boolean true if the passed column is selected. 
		*/
		contains?( column?:Ext.grid.column.IColumn ): boolean;

		/** [Method] Calls the passed function for each selected cell from top left to bottom right iterating over columns within each row  
		* @param fn Object 
		* @param scope Object 
		*/
		eachCell?( fn?:any, scope?:any ): void;

		/** [Method] Calls the passed function for each selected column from left to right  
		* @param fn Object 
		* @param scope Object 
		*/
		eachColumn?( fn?:any, scope?:any ): void;

		/** [Method] Calls the passed function for each selected record  
		* @param fn Object 
		* @param scope Object 
		*/
		eachRow?( fn?:any, scope?:any ): void;

		/** [Method] Returns the columns selected  
		* @returns Ext.grid.column.Column[] The columns selected. 
		*/
		getColumns?(): Ext.grid.column.IColumn[];

		/** [Method] Returns the number of columns selected  
		* @returns Number The number of columns selected. 
		*/
		getCount?(): number;

	}

}

declare module Ext.grid.selection {
	export interface IRows extends Ext.grid.selection.ISelection {
		/** [Property] (Boolean) */
		isRows?: boolean;

		/** [Method] This method is called to indicate the start of multiple changes to the selected row set  */
		beginUpdate?(): void;

		/** [Method] Base Selection API 
		* @returns Ext.grid.selection.Selection A clone of this instance. 
		*/
		clone?(): Ext.grid.selection.ISelection;

		/** [Method] Returns true if the passed record is selected  
		* @param record Ext.data.Model The record to test. 
		* @returns Boolean true if the passed record is selected. 
		*/
		contains?( record?:Ext.data.IModel ): boolean;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Calls the passed function for each selected cell from top left to bottom right iterating over columns within each row  
		* @param fn Object 
		* @param scope Object 
		*/
		eachCell?( fn?:any, scope?:any ): void;

		/** [Method] Calls the passed function for each selected column from left to right  
		* @param fn Object 
		* @param scope Object 
		*/
		eachColumn?( fn?:any, scope?:any ): void;

		/** [Method] Calls the passed function for each selected record  
		* @param fn Object 
		* @param scope Object 
		*/
		eachRow?( fn?:any, scope?:any ): void;

		/** [Method] This method is called after modifications are complete on a selected row set  */
		endUpdate?(): void;

		/** [Method] Returns the number of records selected 
		* @returns Number The number of records selected. 
		*/
		getCount?(): number;

		/** [Method] Returns the records selected  
		* @returns Ext.data.Model[] The records selected. 
		*/
		getRecords?(): Ext.data.IModel[];

	}

}

declare module Ext.grid.selection {
	export interface ISelection extends Ext.IBase {
		/** [Method] Clones this selection object  
		* @returns Ext.grid.selection.Selection A clone of this instance. 
		*/
		clone?(): Ext.grid.selection.ISelection;

		/** [Method] Calls the passed function for each selected cell from top left to bottom right iterating over columns within each row  
		* @param fn Function The function to call. If this returns false, the iteration is halted with no further calls. 
		* @param scope Object The context (this reference) in which fn is executed. Defaults to this Selection object. 
		*/
		eachCell?( fn?:any, scope?:any ): void;

		/** [Method] Calls the passed function for each selected column from left to right  
		* @param fn Function The function to call. If this returns false, the iteration is halted with no further calls. 
		* @param scope Object The context (this reference) in which fn is executed. Defaults to this Selection object. 
		*/
		eachColumn?( fn?:any, scope?:any ): void;

		/** [Method] Calls the passed function for each selected record  
		* @param fn Function The function to call. If this returns false, the iteration is halted with no further calls. 
		* @param scope Object The context (this reference) in which the function is executed. Defaults to this Selection object. 
		*/
		eachRow?( fn?:any, scope?:any ): void;

	}

}

declare module Ext.grid.selection {
	export interface ISpreadsheetModel extends Ext.selection.IModel {
		/** [Config Option] (Boolean) */
		cellSelect?: boolean;
		/** [Config Option] (Number/String) */
		checkboxColumnIndex?: any;
		/** [Config Option] (Number/String) */
		checkboxHeaderWidth?: any;
		/** [Config Option] (Boolean) */
		checkboxSelect?: boolean;
		/** [Config Option] (Boolean) */
		columnSelect?: boolean;
		/** [Config Option] (Boolean) */
		dragSelect?: boolean;
		/** [Config Option] (Number/String) */
		rowNumbererHeaderWidth?: any;
		/** [Config Option] (Boolean) */
		rowSelect?: boolean;
		/** [Config Option] (Ext.grid.selection.Selection) */
		selected?: Ext.grid.selection.ISelection;
		/** [Config Option] (Boolean) */
		showHeaderCheckbox?: boolean;
		/** [Method] Deselects a record instance by record instance or index  
		* @param records Object 
		* @param suppressEvent Object 
		*/
		deselect?( records?:any, suppressEvent?:any ): void;

		/** [Method] Clears the selection  
		* @param suppressEvent Boolean Pass true to prevent firing the selectionchange event. 
		*/
		deselectAll?( suppressEvent?:boolean ): void;

		/** [Method] Deselects a column  
		* @param column Ext.grid.column.Column Column to deselect. 
		* @param suppressEvent Boolean Pass true to prevent firing the selectionchange event. 
		*/
		deselectColumn?( column?:Ext.grid.column.IColumn, suppressEvent?:boolean ): void;

		/** [Method] cleanup  */
		destroy?(): void;

		/** [Method] Returns the value of cellSelect  
		* @returns Boolean 
		*/
		getCellSelect?(): boolean;

		/** [Method] Retrieve a configuration to be used in a HeaderContainer  */
		getCheckboxHeaderConfig?(): void;

		/** [Method] Returns the value of columnSelect  
		* @returns Boolean 
		*/
		getColumnSelect?(): boolean;

		/** [Method] This method is not supported by SpreadsheetModel  
		* @returns number 
		*/
		getCount?(): number;

		/** [Method] Returns the value of dragSelect  
		* @returns Boolean 
		*/
		getDragSelect?(): boolean;

		/** [Method] Returns the value of rowSelect  
		* @returns Boolean 
		*/
		getRowSelect?(): boolean;

		/** [Method] Returns the value of selected  
		* @returns Ext.grid.selection.Selection 
		*/
		getSelected?(): Ext.grid.selection.ISelection;

		/** [Method] Returns an array of the currently selected records  
		* @returns Ext.data.Model[] The selected records 
		*/
		getSelection?(): Ext.data.IModel[];

		/** [Method] This method is not supported by SpreadsheetModel  
		* @returns string 
		*/
		getSelectionMode?(): string;

		/** [Method] This method is not currently supported by SpreadsheetModel  
		* @returns boolean 
		*/
		isLocked?(): boolean;

		/** [Method] This method is not supported by SpreadsheetModel  
		* @returns boolean 
		*/
		isRangeSelected?(): boolean;

		/** [Method] Returns true if the specified row is selected  
		* @param record Object 
		* @returns Boolean 
		*/
		isSelected?( record?:any ): boolean;

		/** [Method] Selects a record instance by record instance or index  
		* @param records Object 
		* @param keepExisting Object 
		* @param suppressEvent Object 
		*/
		select?( records?:any, keepExisting?:any, suppressEvent?:any ): void;

		/** [Method] Select all the data if possible  
		* @param suppressEvent Boolean Pass true to prevent firing the selectionchange event. 
		*/
		selectAll?( suppressEvent?:boolean ): void;

		/** [Method] This method allows programmatic selection of the cell range  
		* @param rangeStart Object {Ext.grid.CellContext/Number[]} Range starting position. Can be either Cell context or a [rowIndex, columnIndex] numeric array. Note that when a numeric array is used in a locking grid, the column indices are relative to the outermost grid, encompassing locked and normal sides. 
		* @param rangeEnd Object {Ext.grid.CellContext/Number[]} Range end position. Can be either Cell context or a [rowIndex, columnIndex] numeric array. Note that when a numeric array is used in a locking grid, the column indices are relative to the outermost grid, encompassing locked and normal sides. 
		* @param suppressEvent Boolean Pass true to prevent firing the selectionchange event. 
		*/
		selectCells?( rangeStart?:any, rangeEnd?:any, suppressEvent?:boolean ): void;

		/** [Method] Selects a column  
		* @param column Ext.grid.column.Column Column to select. 
		* @param keepSelection Boolean Pass true to keep previous selection. 
		* @param suppressEvent Boolean Pass true to prevent firing the selectionchange event. 
		*/
		selectColumn?( column?:Ext.grid.column.IColumn, keepSelection?:boolean, suppressEvent?:boolean ): void;

		/** [Method] Select one or more rows  
		* @param rows Object {Ext.data.Model[]} Records to select. 
		* @param keepSelection Boolean Pass true to keep previous selection. 
		* @param suppressEvent Boolean Pass true to prevent firing the selectionchange event. 
		*/
		selectRows?( rows?:any, keepSelection?:boolean, suppressEvent?:boolean ): void;

		/** [Method] Sets the value of cellSelect  
		* @param cellSelect Boolean The new value. 
		*/
		setCellSelect?( cellSelect?:boolean ): void;

		/** [Method] Sets the value of columnSelect  
		* @param columnSelect Boolean The new value. 
		*/
		setColumnSelect?( columnSelect?:boolean ): void;

		/** [Method] Sets the value of dragSelect  
		* @param dragSelect Boolean The new value. 
		*/
		setDragSelect?( dragSelect?:boolean ): void;

		/** [Method] This method is not currently supported by SpreadsheetModel  */
		setLocked?(): void;

		/** [Method] Sets the value of rowSelect  
		* @param rowSelect Boolean The new value. 
		*/
		setRowSelect?( rowSelect?:boolean ): void;

		/** [Method] Sets the value of selected  
		* @param selected Ext.grid.selection.Selection The new value. 
		*/
		setSelected?( selected?:Ext.grid.selection.ISelection ): void;

		/** [Method] This method is not supported by SpreadsheetModel  */
		setSelectionMode?(): void;

	}

}

declare module Ext.grid {
	export interface IViewDropZone extends Ext.view.IDropZone {
	}

}

declare module Ext {
	export interface IImg extends Ext.IComponent {
		/** [Config Option] (String) */
		alt?: string;
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (String) */
		imgCls?: string;
		/** [Config Option] (String) */
		src?: string;
		/** [Config Option] (String) */
		title?: string;
		/** [Property] (Boolean) */
		maskOnDisable?: boolean;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

		/** [Method] Updates the glyph of the image  
		* @param glyph Number/String 
		*/
		setGlyph?( glyph?:any ): void;

		/** [Method] Updates the src of the image  
		* @param src String 
		*/
		setSrc?( src?:string ): void;

	}

}

declare module Ext {
	export interface IInventory {
		/** [Method] Get the aliases of a class by the class name 
		* @param name String 
		* @returns Array aliases 
		*/
		getAliasesByName?( name?:string ): any[];

		/** [Method] Get the name of a class by its alias  
		* @param alias String 
		* @returns String className 
		*/
		getNameByAlias?( alias?:string ): string;

		/** [Method] Get the name of a class by its alternate name  
		* @param alternate String 
		* @returns String className 
		*/
		getNameByAlternate?( alternate?:string ): string;

		/** [Method] Converts a string expression to an array of matching class names  
		* @param expression String/String[] 
		* @param exclude Object An object keyed by class name containing classes to exclude from the returned classes. This must be provided if accumulate is set to true. 
		* @param accumulate Boolean Pass true to add matching classes to the specified exclude object. 
		* @returns String[] An array of class names. 
		*/
		getNamesByExpression?( expression?:any, exclude?:any, accumulate?:boolean ): string[];

		/** [Method] This method returns a selector object that produces a selection of classes and delivers them to the desired receiver  
		* @param receiver Object 
		* @param scope Object Optional scope to use when calling receiver methods. 
		* @returns Object An object with the same methods as receiver plus exclude. 
		*/
		select?( receiver?:any, scope?:any ): any;

		/** [Method] Sets the path of a namespace  
		* @param name String/Object The name of a single mapping or an object of mappings. 
		* @param path String If name is a String, then this is the path for that name. Otherwise this parameter is ignored. 
		* @returns Ext.Inventory this 
		*/
		setPath?( name?:any, path?:string ): Ext.IInventory;

	}

}

declare module Ext {
		/** [Config Option] (Object) */
		export var debugConfig: any;
		/** [Config Option] (String/Object) */
		export var manifest: any;
		/** [Property] (String) */
		export var BLANK_IMAGE_URL: string;

		/** [Property] (String) */
		export var SSL_SECURE_URL: string;

		/** [Property] (Boolean) */
		export var USE_NATIVE_JSON: boolean;

		/** [Property] (String) */
		export var baseCSSPrefix: string;

		/** [Property] (Number) */
		export var chromeVersion: number;

		/** [Property] (Function) */
		export var emptyFn: any;

		/** [Property] (Object) */
		export var emptyString: any;

		/** [Property] (Boolean) */
		export var enableFx: boolean;

		/** [Property] (Boolean) */
		export var enableGarbageCollector: boolean;

		/** [Property] (Boolean) */
		export var enableListenerCollection: boolean;

		/** [Property] (String[]) */
		export var enumerables: string[];

		/** [Property] (Number) */
		export var firefoxVersion: number;

		/** [Property] (Object) */
		export var frameStartTime: any;

		/** [Property] (Function) */
		export var identityFn: any;

		/** [Property] (Number) */
		export var ieVersion: number;

		/** [Property] (Boolean) */
		export var isChrome: boolean;

		/** [Property] (Boolean) */
		export var isDomReady: boolean;

		/** [Property] (Boolean) */
		export var isGecko: boolean;

		/** [Property] (Boolean) */
		export var isIE: boolean;

		/** [Property] (Boolean) */
		export var isIE10: boolean;

		/** [Property] (Boolean) */
		export var isIE10m: boolean;

		/** [Property] (Boolean) */
		export var isIE10p: boolean;

		/** [Property] (Boolean) */
		export var isIE11: boolean;

		/** [Property] (Boolean) */
		export var isIE11m: boolean;

		/** [Property] (Boolean) */
		export var isIE11p: boolean;

		/** [Property] (Boolean) */
		export var isIE8: boolean;

		/** [Property] (Boolean) */
		export var isIE8m: boolean;

		/** [Property] (Boolean) */
		export var isIE8p: boolean;

		/** [Property] (Boolean) */
		export var isIE9: boolean;

		/** [Property] (Boolean) */
		export var isIE9m: boolean;

		/** [Property] (Boolean) */
		export var isIE9p: boolean;

		/** [Property] (Boolean) */
		export var isLinux: boolean;

		/** [Property] (Boolean) */
		export var isMac: boolean;

		/** [Property] (Boolean) */
		export var isOpera: boolean;

		/** [Property] (Boolean) */
		export var isReady: boolean;

		/** [Property] (Boolean) */
		export var isSafari: boolean;

		/** [Property] (Boolean) */
		export var isSecure: boolean;

		/** [Property] (Boolean) */
		export var isWebKit: boolean;

		/** [Property] (Boolean) */
		export var isWindows: boolean;

		/** [Property] (String) */
		export var name: string;

		/** [Property] (Number) */
		export var operaVersion: number;

		/** [Property] (Object) */
		export var platformTags: any;

		/** [Property] (Function) */
		export var privateFn: any;

		/** [Property] (Number) */
		export var safariVersion: number;

		/** [Property] (Boolean) */
		export var scopeCss: boolean;

		/** [Property] (Boolean) */
		export var useShims: boolean;

		/** [Property] (Number) */
		export var webKitVersion: number;

		/** [Method] Applies event listeners to elements by selectors when the document is ready  
		* @param obj Object The list of behaviors to apply 
		*/
		export function addBehaviors( obj?:any ): void;

		/** [Method] Loads Ext app Application class and starts it up with given configuration after the page is ready  
		* @param config Object/String Application config object or name of a class derived from Ext.app.Application. 
		*/
		export function application( config?:any ): void;

		/** [Method] Copies all the properties of config to the specified object  
		* @param object Object The receiver of the properties. 
		* @param config Object The primary source of the properties. 
		* @param defaults Object An object that will also be applied for default values. 
		* @returns Object returns object. 
		*/
		export function apply( object?:any, config?:any, defaults?:any ): any;

		/** [Method] Copies all the properties of config to object if they don t already exist  
		* @param object Object The receiver of the properties 
		* @param config Object The source of the properties 
		* @returns Object returns obj 
		*/
		export function applyIf( object?:any, config?:any ): any;

		/** [Method] Utility wrapper that suspends layouts of all components for the duration of a given function  
		* @param fn Function The function to execute. 
		* @param scope Object The scope (this reference) in which the specified function is executed. 
		*/
		export function batchLayouts( fn?:any, scope?:any ): void;

		/** [Method] Create a new function from the provided fn change this to the provided scope optionally overrides arguments for the  
		* @param fn Function The function to delegate. 
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the default global environment object (usually the browser window). 
		* @param args Array Overrides arguments for the call. (Defaults to the arguments passed by the caller) 
		* @param appendArgs Boolean/Number if True args are appended to call args instead of overriding, if a number the args are inserted at the specified position. 
		* @returns Function The new function. 
		*/
		export function bind( fn?:any, scope?:any, args?:any[], appendArgs?:any ): any;

		/** [Method] Execute a callback function in a particular scope  
		* @param callback Function/String The callback function to execute or the name of the callback method on the provided scope. 
		* @param scope Object The scope in which callback should be invoked. If callback is a string this object provides the method by that name. If this is null then the caller is used to resolve the scope to a ViewController or the proper defaultListenerScope. 
		* @param args Array The arguments to pass to the function. 
		* @param delay Number Pass a number to delay the call by a number of milliseconds. 
		* @param caller Object The object calling the callback. This is used to resolve named methods when no explicit scope is provided. 
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The value returned by the callback or undefined (if there is a delay or if the callback is not a function). 
		*/
		export function callback( callback?:any, scope?:any, args?:any[], delay?:number, caller?:any, defaultScope?:any ): any;

		/** [Method] This method checks the registered package versions against the provided version specs  
		* @param specs String/Array/Object A version specification string, an object containing or or and with a value that is equivalent to specs or an array of either of these. 
		* @param matchAll Boolean Pass true to require all specs to match. 
		* @returns Boolean True if specs matches the registered package versions. 
		*/
		export function checkVersion( specs?:any, matchAll?:boolean ): boolean;

		/** [Method] Old alias to Ext Array clean 
		* @param array Array 
		* @returns Array results 
		*/
		export function clean( array?:any[] ): any[];

		/** [Method] Clone simple variables including array  like objects DOM nodes and Date without keeping the old reference  
		* @param item Object The variable to clone 
		* @returns Object clone 
		*/
		export function clone( item?:any ): any;

		/** [Method] Coerces the first value if possible so that it is comparable to the second value  
		* @param from Mixed The value to coerce 
		* @param to Mixed The value it must be compared against 
		* @returns Object The coerced value. 
		*/
		export function coerce( from?:any, to?:any ): any;

		/** [Method] Copies a set of named properties fom the source object to the destination object  
		* @param dest Object The destination object. 
		* @param source Object The source object. 
		* @param names String/String[] Either an Array of property names, or a comma-delimited list of property names to copy. 
		* @param usePrototypeKeys Boolean Pass true to copy keys off of the prototype as well as the instance. 
		* @returns Object The dest object. 
		*/
		export function copyTo( dest?:any, source?:any, names?:any, usePrototypeKeys?:boolean ): any;

		/** [Method] Copies a set of named properties fom the source object to the destination object if the destination object does not a  
		* @param destination Object The destination object. 
		* @param source Object The source object. 
		* @param names String/String[] Either an Array of property names, or a single string with a list of property names separated by ",", ";" or spaces. 
		* @returns Object The dest object. 
		*/
		export function copyToIf( destination?:any, source?:any, names?:any ): any;

		/** [Method] Instantiate a class by either full name alias or alternate name  
		* @param name String The class name or alias. Can be specified as xclass property if only one object parameter is specified. 
		* @param args Object... Additional arguments after the name will be passed to the class' constructor. 
		* @returns Object instance 
		*/
		export function create( name:string, ...args:any[] ): any;

		/** [Method] Instantiate a class by its alias  
		* @param alias String 
		* @param args Object... Additional arguments after the alias will be passed to the class constructor. 
		* @returns Object instance 
		*/
		export function createByAlias( alias:string, ...args:any[] ): any;

		/** [Method] Shorthand for Ext JSON decode 
		* @param json String The JSON string. 
		* @param safe Boolean true to return null, otherwise throw an exception if the JSON is invalid. 
		* @returns Object The resulting object. 
		*/
		export function decode( json?:string, safe?:boolean ): any;

		/** [Method] Calls this function after the number of milliseconds specified optionally in a specific scope  
		* @param fn Function The function to defer. 
		* @param millis Number The number of milliseconds for the setTimeout call (if less than or equal to 0 the function is executed immediately). 
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window. 
		* @param args Array Overrides arguments for the call. Defaults to the arguments passed by the caller. 
		* @param appendArgs Boolean/Number If true args are appended to call args instead of overriding, or, if a number, then the args are inserted at the specified position. 
		* @returns Number The timeout id that can be used with clearTimeout. 
		*/
		export function defer( fn?:any, millis?:number, scope?:any, args?:any[], appendArgs?:any ): number;

		/** [Method] Defines a class or override  
		* @param className String The class name to create in string dot-namespaced format, for example: 'My.very.awesome.Class', 'FeedViewer.plugin.CoolPager' It is highly recommended to follow this simple convention: - The root and the class name are 'CamelCased' - Everything else is lower-cased Pass null to create an anonymous class. 
		* @param data Object The key - value pairs of properties to apply to this class. Property names can be of any valid strings, except those in the reserved listed below:  alias alternateClassName cachedConfig config extend inheritableStatics mixins override platformConfig privates requires self singleton statics uses xtype (for Components only)  
		* @param createdFn Function Callback to execute after the class is created, the execution scope of which (this) will be the newly created class itself. 
		* @returns Ext.Base 
		*/
		export function define( className?:string, data?:any, createdFn?:any ): Ext.IBase;

		/** [Method] Destroys all of the given objects  
		* @param args Mixed... Any number of objects or arrays. 
		*/
		export function destroy( ...args:any[] ): void;

		/** [Method] Destroys the specified named members of the given object using Ext destroy  
		* @param object Object The object who's properties you wish to destroy. 
		* @param args String... One or more names of the properties to destroy and remove from the object. 
		*/
		export function destroyMembers( object:any, ...args:any[] ): void;

		/** [Method] Iterates an array or an iterable value and invoke the given callback function for each item  
		* @param iterable Array/NodeList/Object The value to be iterated. If this argument is not iterable, the callback function is called once. 
		* @param fn Function The callback function. If it returns false, the iteration stops and this method returns the current index. 
		* @param scope Object The scope (this reference) in which the specified function is executed. 
		* @param reverse Boolean Reverse the iteration order (loop from the end to the beginning). 
		* @returns Boolean See description for the fn parameter. 
		*/
		export function each( iterable?:any, fn?:any, scope?:any, reverse?:boolean ): boolean;

		/** [Method] Shorthand for Ext JSON encode 
		* @param o Object The variable to encode. 
		* @returns String The JSON string. 
		*/
		export function encode( o?:any ): string;

		/** [Method] Explicitly exclude files from being loaded  
		* @param excludes String/String[] 
		* @returns Object Contains exclude, require and syncRequire methods for chaining. 
		*/
		export function exclude( excludes?:any ): any;

		/** [Method] This method deprecated  
		* @param superclass Function 
		* @param overrides Object 
		* @returns Function The subclass constructor from the overrides parameter, or a generated one if not provided. 
		*/
		export function extend( superclass?:any, overrides?:any ): any;

		/** [Method] A global factory method to instantiate a class from a config object  
		* @param config Object The config object to instantiate or update an instance with. 
		* @param classReference String The class to instantiate from. 
		* @param instance Object The instance to update. 
		* @param aliasNamespace Object 
		*/
		export function factory( config?:any, classReference?:string, instance?:any, aliasNamespace?:any ): void;

		/** [Method] Old alias to Ext Array flatten 
		* @param array Array The array to flatten 
		* @returns Array The 1-d array. 
		*/
		export function flatten( array?:any[] ): any[];

		/** [Method] Gets the globally shared flyweight Element with the passed node as the active element  
		* @param dom String/HTMLElement The DOM node or id. 
		* @param named String Allows for creation of named reusable flyweights to prevent conflicts (e.g. internally Ext uses "_global"). 
		* @returns Ext.dom.Element The shared Element object (or null if no matching element was found). 
		*/
		export function fly( dom?:any, named?:string ): Ext.dom.IElement;

		/** [Method] Retrieves Ext dom Element objects  
		* @param element String/HTMLElement/Ext.dom.Element The id of the node, a DOM Node or an existing Element. 
		* @returns Ext.dom.Element The Element object (or null if no matching element was found). 
		*/
		export function get( element?:any ): Ext.dom.IElement;

		/** [Method] Returns the current document body as an Ext dom Element  
		* @returns Ext.dom.Element The document body. 
		*/
		export function getBody(): Ext.dom.IElement;

		/** [Method] Get the class of the provided object returns null if it s not an instance of any class created with Ext define  
		* @param object Object 
		* @returns Ext.Class class 
		*/
		export function getClass( object?:any ): Ext.IClass;

		/** [Method] Get the name of the class by its reference or its instance  
		* @param object Ext.Class/Object 
		* @returns String className 
		*/
		export function getClassName( object?:any ): string;

		/** [Method] This is shorthand reference to Ext ComponentManager get  
		* @param id String The component id 
		* @returns Object Ext.Component The Component, undefined if not found, or null if a Class was found. 
		*/
		export function getCmp( id?:string ): any;

		/** [Method] Returns the current HTML document object as an Ext dom Element  
		* @returns Ext.dom.Element The document. 
		*/
		export function getDoc(): Ext.dom.IElement;

		/** [Method] Return the dom node for the passed String id  dom node or Ext Element  
		* @param el String/HTMLElement/Ext.dom.Element 
		* @returns HTMLElement 
		*/
		export function getDom( el?:any ): HTMLElement;

		/** [Method] Returns the current document head as an Ext dom Element  
		* @returns Ext.dom.Element The document head. 
		*/
		export function getHead(): Ext.dom.IElement;

		/** [Method]  
		* @param className String 
		* @returns String Namespace prefix if it's known, otherwise undefined 
		*/
		export function getNamespace( className?:string ): string;

		/** [Method] Returns the size of the browser scrollbars  
		* @param force Boolean true to force a recalculation of the value. 
		* @returns Object An object containing scrollbar sizes. 
		*/
		export function getScrollbarSize( force?:boolean ): any;

		/** [Method] Shortcut to Ext data StoreManager lookup  
		* @param store String/Object The id of the Store, or a Store instance, or a store configuration 
		* @returns Ext.data.Store 
		*/
		export function getStore( store?:any ): Ext.data.IStore;

		/** [Method] Get the version number of the supplied package name will return the version of the framework  
		* @param packageName String The package name, e.g., 'core', 'touch', 'ext'. 
		* @returns Ext.Version The version. 
		*/
		export function getVersion( packageName?:string ): Ext.IVersion;

		/** [Method] Returns the current window object as an Ext dom Element  
		* @returns Ext.dom.Element The window. 
		*/
		export function getWin(): Ext.dom.IElement;

		/** [Method] Old alias to Ext String htmlDecode 
		* @param value String The string to decode. 
		* @returns String The decoded text. 
		*/
		export function htmlDecode( value?:string ): string;

		/** [Method] Old alias to Ext String htmlEncode 
		* @param value String The string to encode. 
		* @returns String The encoded text. 
		*/
		export function htmlEncode( value?:string ): string;

		/** [Method] Generates unique ids  
		* @param o Object The object to generate an id for. 
		* @param prefix String The id prefix. 
		* @returns String The generated id. 
		*/
		export function id( o?:any, prefix?:string ): string;

		/** [Method] Calls this function repeatedly at a given interval optionally in a specific scope  
		* @param fn Function The function to defer. 
		* @param millis Number The number of milliseconds for the setInterval call 
		* @param scope Object The scope (this reference) in which the function is executed. If omitted, defaults to the browser window. 
		* @param args Array Overrides arguments for the call. Defaults to the arguments passed by the caller. 
		* @param appendArgs Boolean/Number If true args are appended to call args instead of overriding, or, if a number, then the args are inserted at the specified position. 
		* @returns Number The interval id that can be used with clearInterval. 
		*/
		export function interval( fn?:any, millis?:number, scope?:any, args?:any[], appendArgs?:any ): number;

		/** [Method] Returns true if the passed value is a JavaScript Array false otherwise  
		* @param target Object The target to test. 
		* @returns Boolean 
		*/
		export function isArray( target?:any ): boolean;

		/** [Method] Returns true if the passed value is a boolean  
		* @param value Object The value to test. 
		* @returns Boolean 
		*/
		export function isBoolean( value?:any ): boolean;

		/** [Method] Returns true if the passed value is a JavaScript Date object false otherwise  
		* @param object Object The object to test. 
		* @returns Boolean 
		*/
		export function isDate( object?:any ): boolean;

		/** [Method] This method returns true if debug is enabled for the specified class  
		* @param className String The name of the class. 
		* @returns Boolean true if debug is enabled for the specified class. 
		*/
		export function isDebugEnabled( className?:string ): boolean;

		/** [Method] Returns true if the passed value is defined  
		* @param value Object The value to test. 
		* @returns Boolean 
		*/
		export function isDefined( value?:any ): boolean;

		/** [Method] Returns true if the passed value is an HTMLElement 
		* @param value Object The value to test. 
		* @returns Boolean 
		*/
		export function isElement( value?:any ): boolean;

		/** [Method] Returns true if the passed value is empty false otherwise  
		* @param value Object The value to test. 
		* @param allowEmptyString Boolean true to allow empty strings. 
		* @returns Boolean 
		*/
		export function isEmpty( value?:any, allowEmptyString?:boolean ): boolean;

		/** [Method] Returns true if the passed value is a JavaScript Function false otherwise  
		* @param value Object The value to test. 
		* @returns Boolean 
		*/
		export function isFunction( value?:any ): boolean;

		/** [Method] Returns true if the passed value is iterable that is if elements of it are addressable using array notation with nu  
		* @param value Object The value to test 
		* @returns Boolean 
		*/
		export function isIterable( value?:any ): boolean;

		/** [Method] Returns true if the passed value is a String that matches the MS Date JSON encoding format  
		* @param value String The string to test. 
		* @returns Boolean 
		*/
		export function isMSDate( value?:string ): boolean;

		/** [Method] Returns true if the passed value is a number  
		* @param value Object The value to test. 
		* @returns Boolean 
		*/
		export function isNumber( value?:any ): boolean;

		/** [Method] Validates that a value is numeric  
		* @param value Object Examples: 1, '1', '2.34' 
		* @returns Boolean True if numeric, false otherwise 
		*/
		export function isNumeric( value?:any ): boolean;

		/** [Method] Returns true if the passed value is a JavaScript Object false otherwise  
		* @param value Object The value to test. 
		* @returns Boolean 
		*/
		export function isObject( value?:any ): boolean;

		/** [Method] Returns true if the passed value is a JavaScript primitive  a string number or boolean  
		* @param value Object The value to test. 
		* @returns Boolean 
		*/
		export function isPrimitive( value?:any ): boolean;

		/** [Method] Returns trueif the passed value is a string  
		* @param value Object The value to test. 
		* @returns Boolean 
		*/
		export function isString( value?:any ): boolean;

		/** [Method] Returns true if the passed value is a TextNode 
		* @param value Object The value to test. 
		* @returns Boolean 
		*/
		export function isTextNode( value?:any ): boolean;

		/** [Method] Iterates either an array or an object  
		* @param object Object/Array The object or array to be iterated. 
		* @param fn Function The function to be called for each iteration. See and Ext.Array.each and Ext.Object.each for detailed lists of arguments passed to this function depending on the given object type that is being iterated. 
		* @param scope Object The scope (this reference) in which the specified function is executed. Defaults to the object being iterated itself. 
		*/
		export function iterate( object?:any, fn?:any, scope?:any ): void;

		/** [Method] Logs a message  
		* @param options String/Object The message to log or an options object with any of the following properties:  msg: The message to log (required). level: One of: "error", "warn", "info" or "log" (the default is "log"). dump: An object to dump to the log as part of the message. stack: True to include a stack trace in the log. indent: Cause subsequent log statements to be indented one step. outdent: Cause this and following statements to be one step less indented.  
		* @param message String... The message to log (required unless specified in options object). 
		*/
		export function log( options:any, ...message:any[] ): void;

		/** [Method] Old alias to Ext Array max 
		* @param array Array/NodeList The Array from which to select the maximum value. 
		* @param comparisonFn Function a function to perform the comparison which determines maximization. If omitted the ">" operator will be used. Note: gt = 1; eq = 0; lt = -1 
		* @returns Object maxValue The maximum value. 
		*/
		export function max( array?:any, comparisonFn?:any ): any;

		/** [Method] Old alias to Ext Array mean 
		* @param array Array The Array to calculate the mean value of. 
		* @returns Number The mean. 
		*/
		export function mean( array?:any[] ): number;

		/** [Method] A convenient alias method for Ext Object merge  
		* @param destination Object The object into which all subsequent objects are merged. 
		* @param object Object... Any number of objects to merge into the destination. 
		* @returns Object merged The destination object with all passed objects merged in. 
		*/
		export function merge( destination:any, ...object:any[] ): any;

		/** [Method] Old alias to Ext Array min 
		* @param array Array/NodeList The Array from which to select the minimum value. 
		* @param comparisonFn Function a function to perform the comparison which determines minimization. If omitted the "&lt;" operator will be used. Note: gt = 1; eq = 0; lt = -1 
		* @returns Object minValue The minimum value. 
		*/
		export function min( array?:any, comparisonFn?:any ): any;

		/** [Method] Creates namespaces to be used for scoping variables and classes so that they are not global  
		* @param namespaces String... 
		* @returns Object The namespace object. (If multiple arguments are passed, this will be the last namespace created) 
		*/
		export function namespace( ...namespaces:any[] ): any;

		/** [Method] Returns the current timestamp  
		* @returns Number Milliseconds since UNIX epoch. 
		*/
		export function now(): number;

		/** [Method] Convenient alias for Ext namespace  
		* @param namespaces String... 
		* @returns Object The namespace object. (If multiple arguments are passed, this will be the last namespace created) 
		*/
		export function ns( ...namespaces:any[] ): any;

		/** [Method] Validate that a value is numeric and convert it to a number if necessary  
		* @param value Object 
		* @param defaultValue Number The value to return if the original value is non-numeric 
		* @returns Number value, if numeric, defaultValue otherwise 
		*/
		export function num( value?:any, defaultValue?:number ): number;

		/** [Method] Shorthand for Ext GlobalEvents addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		export function on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Adds a listener to be notified when the document is ready before onload and before images are loaded 
		* @param fn Function The method to call. 
		* @param scope Object The scope (this reference) in which the handler function executes. Defaults to the browser window. 
		* @param options Object An object with extra options. 
		*/
		export function onReady( fn?:any, scope?:any, options?:any ): void;

		/** [Method] Overrides members of the specified target with the given values  
		* @param target Object The target to override. 
		* @param overrides Object The properties to add or replace on target. 
		*/
		export function override( target?:any, overrides?:any ): void;

		/** [Method] Create a new function from the provided fn the arguments of which are pre set to args  
		* @param fn Function The original function. 
		* @param args Array The arguments to pass to new callback. 
		* @param scope Object The scope (this reference) in which the function is executed. 
		* @returns Function The new callback function. 
		*/
		export function pass( fn?:any, args?:any[], scope?:any ): any;

		/** [Method] Old alias to Ext Array pluck 
		* @param array Array/NodeList The Array of items to pluck the value from. 
		* @param propertyName String The property name to pluck from each element. 
		* @returns Array The value from each item in the Array. 
		*/
		export function pluck( array?:any, propertyName?:string ): any[];

		/** [Method] Selects child nodes of a given root based on the passed CSS selector  
		* @param selector String The CSS selector. 
		* @param asDom Boolean false to return an array of Ext.dom.Element 
		* @param root HTMLElement/String The root element of the query or id of the root 
		* @returns HTMLElement[]/Ext.dom.Element[] An Array of elements that match the selector. If there are no matches, an empty Array is returned. 
		*/
		export function query( selector?:string, asDom?:boolean, root?:any ): any;

		/** [Method] Creates a new store for the given id and config then registers it with the Store Manager  
		* @param id String The id to set on the new store 
		* @param config Object The store config 
		*/
		export function regStore( id?:string, config?:any ): void;

		/** [Method] Removes an HTMLElement from the document  
		* @param node HTMLElement The node to remove 
		*/
		export function removeNode( node?:HTMLElement ): void;

		/** [Method] Loads all classes by the given names and all their direct dependencies optionally executes the given callback functi  
		* @param expressions String/String[] The class, classes or wildcards to load. 
		* @param fn Function The callback function. 
		* @param scope Object The execution scope (this) of the callback function. 
		*/
		export function require( expressions?:any, fn?:any, scope?:any ): void;

		/** [Method] Resumes layout activity in the whole framework  
		* @param flush Boolean true to perform all the pending layouts. This can also be achieved by calling flushLayouts directly. 
		*/
		export function resumeLayouts( flush?:boolean ): void;

		/** [Method] A reusable function which returns the value of getId  called upon a single passed parameter  
		* @param o Object 
		*/
		export function returnId( o?:any ): void;

		/** [Method] A reusable function which returns true  */
		export function returnTrue(): void;

		/** [Method] Selects elements based on the passed CSS selector to enable Element methods to be applied to many related elements in  
		* @param selector String/HTMLElement[] The CSS selector or an array of elements 
		* @param composite Boolean Return a CompositeElement as opposed to a CompositeElementLite. Defaults to false. 
		* @param root HTMLElement/String The root element of the query or id of the root 
		* @returns Ext.dom.CompositeElementLite/Ext.dom.CompositeElement 
		*/
		export function select( selector?:any, composite?:boolean, root?:any ): Ext.dom.ICompositeElementLite;

		/** [Method] Sets the default font family to use for components that support a glyph config  
		* @param fontFamily String The name of the font-family 
		*/
		export function setGlyphFontFamily( fontFamily?:string ): void;

		/** [Method] Set version number for the given package name  
		* @param packageName String The package name, e.g. 'core', 'touch', 'ext'. 
		* @param version String/Ext.Version The version, e.g. '1.2.3alpha', '2.4.0-dev'. 
		* @returns void 
		*/
		export function setVersion( packageName?:string, version?:any ): void;

		/** [Method] Old alias to Ext Array sum 
		* @param array Array The Array to calculate the sum value of. 
		* @returns Number The sum. 
		*/
		export function sum( array?:any[] ): number;

		/** [Method] Stops layouts from happening in the whole framework  */
		export function suspendLayouts(): void;

		/** [Method] Synchronously loads all classes by the given names and all their direct dependencies optionally executes the given c  
		* @param expressions String/String[] The class, classes or wildcards to load. 
		* @param fn Function The callback function. 
		* @param scope Object The execution scope (this) of the callback function. 
		*/
		export function syncRequire( expressions?:any, fn?:any, scope?:any ): void;

		/** [Method] Converts any iterable numeric indices and a length property into a true array  
		* @param iterable Object the iterable object to be turned into a true Array. 
		* @param start Number a zero-based index that specifies the start of extraction. 
		* @param end Number a 1-based index that specifies the end of extraction. 
		* @returns Array 
		*/
		export function toArray( iterable?:any, start?:number, end?:number ): any[];

		/** [Method] Returns the type of the given variable in string format  
		* @param value Object 
		* @returns String 
		*/
		export function typeOf( value?:any ): string;

		/** [Method] Shorthand for Ext GlobalEvents removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		export function un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Old alias to Ext Array unique 
		* @param array Array 
		* @returns Array results 
		*/
		export function unique( array?:any[] ): any[];

		/** [Method] Old alias to Ext String urlAppend 
		* @param url String The URL to append to. 
		* @param string String The content to append to the URL. 
		* @returns String The resulting URL 
		*/
		export function urlAppend( url?:string, string?:string ): string;

		/** [Method] Alias for Ext Object fromQueryString  
		* @param queryString String The query string to decode 
		* @param recursive Boolean Whether or not to recursively decode the string. This format is supported by PHP / Ruby on Rails servers and similar. 
		* @returns Object 
		*/
		export function urlDecode( queryString?:string, recursive?:boolean ): any;

		/** [Method] Takes an object and converts it to an encoded query string  
		* @param object Object The object to encode 
		* @param recursive Boolean Whether or not to interpret the object in recursive format. (PHP / Ruby on Rails servers and similar). 
		* @returns String queryString 
		*/
		export function urlEncode( object?:any, recursive?:boolean ): string;

		/** [Method] Returns the given value itself if it s not empty as described in isEmpty returns the default value second argument  
		* @param value Object The value to test. 
		* @param defaultValue Object The value to return if the original value is empty. 
		* @param allowBlank Boolean true to allow zero length strings to qualify as non-empty. 
		* @returns Object value, if non-empty, else defaultValue. 
		*/
		export function valueFrom( value?:any, defaultValue?:any, allowBlank?:boolean ): any;

		/** [Method] Convenient shorthand to create a widget by its xtype or a config object  
		* @param name String The xtype of the widget to create. 
		* @param config Object The configuration object for the widget constructor. 
		* @returns Object The widget instance 
		*/
		export function widget( name?:string, config?:any ): any;

}

declare module Ext {
	export interface IJSON {
	}
	export class JSON {
		/** [Method] Decodes parses a JSON string to an object  
		* @param json String The JSON string. 
		* @param safe Boolean true to return null, otherwise throw an exception if the JSON is invalid. 
		* @returns Object The resulting object. 
		*/
		static decode( json?:string, safe?:boolean ): any;

		/** [Method] Encodes an Object Array or other value  
		* @param o Object The variable to encode. 
		* @returns String The JSON string. 
		*/
		static encode( o?:any ): string;

		/** [Method] Encodes a Date  
		* @param d Date The Date to encode 
		* @returns String The string literal to use in a JSON string. 
		*/
		static encodeDate( d?:any ): string;

		/** [Method] Encodes a String  
		* @param s String The String to encode 
		* @returns String The string literal to use in a JSON string. 
		*/
		static encodeString( s?:string ): string;

		/** [Method] The function which encode uses to encode all javascript values to their JSON representations when Ext USE_NATIVE_JSON  
		* @param o Object Any javascript value to be converted to its JSON representation 
		* @returns String The JSON representation of the passed value. 
		*/
		static encodeValue( o?:any ): string;

	}

}

declare module Ext.layout.component {
	export interface IAuto extends Ext.layout.component.IComponent {
		/** [Config Option] (Boolean) */
		setHeightInDom?: boolean;
		/** [Config Option] (Boolean) */
		setWidthInDom?: boolean;
		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		* @param firstCycle Object 
		*/
		beginLayoutCycle?( ownerContext?:any, firstCycle?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

	}

}

declare module Ext.layout.component {
	export interface IBody extends Ext.layout.component.IAuto {
		/** [Method] Called before any calculation cycles to prepare for layout  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		* @param firstCycle Object 
		*/
		beginLayoutCycle?( ownerContext?:any, firstCycle?:any ): void;

	}

}

declare module Ext.layout.component {
	export interface IBoundList extends Ext.layout.component.IAuto {
		/** [Method] Called before any calculation cycles to prepare for layout  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		*/
		beginLayoutCycle?( ownerContext?:any ): void;

		/** [Method] This method is called after all layouts are complete and their calculations flushed to the DOM  
		* @param ownerContext Object 
		*/
		finishedLayout?( ownerContext?:any ): void;

		/** [Method] Returns the set of items to layout empty by default */
		getLayoutItems?(): void;

		/** [Method] Validates item is in the proper place in the dom  */
		isValidParent?(): void;

	}

}

declare module Ext.layout.component {
	export interface IComponent extends Ext.layout.ILayout {
		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		* @param firstCycle Object 
		*/
		beginLayoutCycle?( ownerContext?:any, firstCycle?:any ): void;

		/** [Method] This method is called after all layouts are complete and their calculations flushed to the DOM  
		* @param ownerContext Object 
		*/
		finishedLayout?( ownerContext?:any ): void;

		/** [Method] Returns the element into which rendering must take place  
		* @returns Ext.dom.Element 
		*/
		getRenderTarget?(): Ext.dom.IElement;

		/** [Method] Returns the owner component s resize element  
		* @returns Ext.dom.Element 
		*/
		getTarget?(): Ext.dom.IElement;

		/** [Method] This method if implemented is called after all layouts are finished and all have a lastComponentSize cached  
		* @param ownerContext Object 
		*/
		notifyOwner?( ownerContext?:any ): void;

	}

}

declare module Ext.layout.component {
	export interface IDock extends Ext.layout.component.IComponent {
		/** [Method] Removes layout s itemCls and owning Container s itemCls  
		* @param item Object 
		*/
		afterRemove?( item?:any ): void;

		/** [Method] Called before any calculation cycles to prepare for layout  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		*/
		beginLayoutCycle?( ownerContext?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] We are overriding the Ext layout Layout configureItem method to also add a class that indicates the position of the d  
		* @param item Ext.Component The item we are configuring 
		*/
		configureItem?( item?:Ext.IComponent ): void;

		/** [Method] This method is called after all layouts are complete and their calculations flushed to the DOM  
		* @param ownerContext Object 
		*/
		finishedLayout?( ownerContext?:any ): void;

		/** [Method] Retrieve an ordered and or filtered array of all docked Components  
		* @param order String The desired ordering of the items ('render' or 'visual'). 
		* @param beforeBody Boolean An optional flag to limit the set of items to only those before the body (true) or after the body (false). All components are returned by default. 
		* @returns Ext.Component[] An array of components. 
		*/
		getDockedItems?( order?:string, beforeBody?:boolean ): Ext.IComponent[];

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @param ownerSizeModel Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any, ownerSizeModel?:any ): Ext.layout.ISizePolicy;

		/** [Method] Returns an array containing all the visible docked items inside this layout s owner Panel 
		* @returns Array An array containing all the visible docked items of the Panel 
		*/
		getLayoutItems?(): any[];

		/** [Method] The default weighting of docked items produces this arrangement  
		* @param ownerContext Object 
		* @param horz Object 
		* @param vert Object 
		*/
		invalidateAxes?( ownerContext?:any, horz?:any, vert?:any ): void;

		/** [Method] Render the top and left docked items before any existing DOM nodes in our render target and then render the right an  
		* @param items Object 
		* @param target Object 
		*/
		renderItems?( items?:any, target?:any ): void;

	}

}

declare module Ext.layout.component {
	export interface IAbstractDock extends Ext.layout.component.IComponent {
		/** [Method] Removes layout s itemCls and owning Container s itemCls  
		* @param item Object 
		*/
		afterRemove?( item?:any ): void;

		/** [Method] Called before any calculation cycles to prepare for layout  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		*/
		beginLayoutCycle?( ownerContext?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] We are overriding the Ext layout Layout configureItem method to also add a class that indicates the position of the d  
		* @param item Ext.Component The item we are configuring 
		*/
		configureItem?( item?:Ext.IComponent ): void;

		/** [Method] This method is called after all layouts are complete and their calculations flushed to the DOM  
		* @param ownerContext Object 
		*/
		finishedLayout?( ownerContext?:any ): void;

		/** [Method] Retrieve an ordered and or filtered array of all docked Components  
		* @param order String The desired ordering of the items ('render' or 'visual'). 
		* @param beforeBody Boolean An optional flag to limit the set of items to only those before the body (true) or after the body (false). All components are returned by default. 
		* @returns Ext.Component[] An array of components. 
		*/
		getDockedItems?( order?:string, beforeBody?:boolean ): Ext.IComponent[];

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @param ownerSizeModel Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any, ownerSizeModel?:any ): Ext.layout.ISizePolicy;

		/** [Method] Returns an array containing all the visible docked items inside this layout s owner Panel 
		* @returns Array An array containing all the visible docked items of the Panel 
		*/
		getLayoutItems?(): any[];

		/** [Method] The default weighting of docked items produces this arrangement  
		* @param ownerContext Object 
		* @param horz Object 
		* @param vert Object 
		*/
		invalidateAxes?( ownerContext?:any, horz?:any, vert?:any ): void;

		/** [Method] Render the top and left docked items before any existing DOM nodes in our render target and then render the right an  
		* @param items Object 
		* @param target Object 
		*/
		renderItems?( items?:any, target?:any ): void;

	}

}

declare module Ext.layout.component.field {
	export interface IFieldContainer extends Ext.layout.component.IAuto {
		/** [Method] Called before any calculation cycles to prepare for layout  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

	}

}

declare module Ext.layout.component.field {
	export interface IHtmlEditor extends Ext.layout.component.field.IFieldContainer {
		/** [Method] Called before any calculation cycles to prepare for layout  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		*/
		beginLayoutCycle?( ownerContext?:any ): void;

		/** [Method] This method is called after all layouts are complete and their calculations flushed to the DOM  */
		finishedLayout?(): void;

	}

}

declare module Ext.layout.component {
	export interface IFieldSet extends Ext.layout.component.IBody {
		/** [Method] Called before any calculation cycles to prepare for layout  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		*/
		beginLayoutCycle?( ownerContext?:any ): void;

		/** [Method] This method is called after all layouts are complete and their calculations flushed to the DOM  
		* @param ownerContext Object 
		*/
		finishedLayout?( ownerContext?:any ): void;

		/** [Method] Returns the set of items to layout empty by default */
		getLayoutItems?(): void;

	}

}

declare module Ext.layout.component {
	export interface IProgressBar extends Ext.layout.component.IAuto {
		/** [Method] Called before any calculation cycles to prepare for layout  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

	}

}

declare module Ext.layout.container {
	export interface IAbsolute extends Ext.layout.container.IAnchor {
		/** [Config Option] (Boolean) */
		ignoreOnContentChange?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] This method is called when a child item changes in some way  
		* @returns Boolean True if this layout has handled the content change. 
		*/
		onContentChange?(): boolean;

	}

}

declare module Ext.layout {
	export interface IAbsoluteLayout extends Ext.layout.container.IAnchor {
		/** [Config Option] (Boolean) */
		ignoreOnContentChange?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] This method is called when a child item changes in some way  
		* @returns Boolean True if this layout has handled the content change. 
		*/
		onContentChange?(): boolean;

	}

}

declare module Ext.layout.container {
	export interface IAccordion extends Ext.layout.container.IVBox {
		/** [Config Option] (Boolean) */
		activeOnTop?: boolean;
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (Boolean) */
		animate?: boolean;
		/** [Config Option] (Boolean) */
		autoWidth?: boolean;
		/** [Config Option] (Boolean) */
		collapseFirst?: boolean;
		/** [Config Option] (Boolean) */
		enableSplitters?: boolean;
		/** [Config Option] (Boolean) */
		fill?: boolean;
		/** [Config Option] (Boolean) */
		hideCollapseTool?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Boolean) */
		multi?: boolean;
		/** [Config Option] (Boolean) */
		titleCollapse?: boolean;
		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Adds layout s itemCls and owning Container s itemCls 
		* @param item Object 
		*/
		configureItem?( item?:any ): void;

		/** [Method] Iterates over all passed items ensuring they are rendered  
		* @param items Object 
		* @param target Object 
		*/
		renderItems?( items?:any, target?:any ): void;

	}

}

declare module Ext.layout {
	export interface IAccordionLayout extends Ext.layout.container.IVBox {
		/** [Config Option] (Boolean) */
		activeOnTop?: boolean;
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (Boolean) */
		animate?: boolean;
		/** [Config Option] (Boolean) */
		autoWidth?: boolean;
		/** [Config Option] (Boolean) */
		collapseFirst?: boolean;
		/** [Config Option] (Boolean) */
		enableSplitters?: boolean;
		/** [Config Option] (Boolean) */
		fill?: boolean;
		/** [Config Option] (Boolean) */
		hideCollapseTool?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Boolean) */
		multi?: boolean;
		/** [Config Option] (Boolean) */
		titleCollapse?: boolean;
		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Adds layout s itemCls and owning Container s itemCls 
		* @param item Object 
		*/
		configureItem?( item?:any ): void;

		/** [Method] Iterates over all passed items ensuring they are rendered  
		* @param items Object 
		* @param target Object 
		*/
		renderItems?( items?:any, target?:any ): void;

	}

}

declare module Ext.layout.container {
	export interface IAnchor extends Ext.layout.container.IAuto {
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (String) */
		defaultAnchor?: string;
		/** [Property] (Boolean) */
		manageOverflow?: boolean;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		*/
		beginLayoutCycle?( ownerContext?:any ): void;

		/** [Method] Adds layout s itemCls and owning Container s itemCls 
		* @param item Object 
		*/
		configureItem?( item?:any ): void;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any ): Ext.layout.ISizePolicy;

	}

}

declare module Ext.layout {
	export interface IAnchorLayout extends Ext.layout.container.IAuto {
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (String) */
		defaultAnchor?: string;
		/** [Property] (Boolean) */
		manageOverflow?: boolean;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		*/
		beginLayoutCycle?( ownerContext?:any ): void;

		/** [Method] Adds layout s itemCls and owning Container s itemCls 
		* @param item Object 
		*/
		configureItem?( item?:any ): void;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any ): Ext.layout.ISizePolicy;

	}

}

declare module Ext.layout.container {
	export interface IAuto extends Ext.layout.container.IContainer {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		reserveScrollbar?: boolean;
		/** [Property] (Boolean) */
		manageOverflow?: boolean;

		/** [Property] (Boolean) */
		managePadding?: boolean;

		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		*/
		beginLayoutCycle?( ownerContext?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] Handles overflow processing for a container  
		* @param ownerContext Ext.layout.ContextItem 
		*/
		calculateOverflow?( ownerContext?:Ext.layout.IContextItem ): void;

		/** [Method] This method if implemented is called at the end of the cycle in which this layout completes by not setting done to  
		* @param ownerContext Object 
		*/
		completeLayout?( ownerContext?:any ): void;

		/** [Method] This method is called after all layouts are complete and their calculations flushed to the DOM  
		* @param ownerContext Object 
		*/
		finishedLayout?( ownerContext?:any ): void;

		/** [Method] Returns the container size that of the target 
		* @param ownerContext Ext.layout.ContextItem The owner's context item. 
		* @param inDom Boolean True if the container size must be in the DOM. 
		* @returns Object The size 
		*/
		getContainerSize?( ownerContext?:Ext.layout.IContextItem, inDom?:boolean ): any;

		/** [Method] Overridden method from Ext layout container Container  
		* @returns Ext.dom.Element 
		*/
		getElementTarget?(): Ext.dom.IElement;

		/** [Method] Returns the overflow x style of the render target  
		* @param ownerContext Ext.layout.ContextItem 
		* @returns String 
		*/
		getOverflowXStyle?( ownerContext?:Ext.layout.IContextItem ): string;

		/** [Method] Returns the overflow y style of the render target  
		* @param ownerContext Ext.layout.ContextItem 
		* @returns String 
		*/
		getOverflowYStyle?( ownerContext?:Ext.layout.IContextItem ): string;

		/** [Method] Overridden method from Ext layout container Container  
		* @returns Ext.dom.Element 
		*/
		getRenderTarget?(): Ext.dom.IElement;

		/** [Method] A one time initialization method called just before rendering  */
		initLayout?(): void;

		/** [Method] This method sets the height and or width of the outerCt innerCt to adjust for the following browser specific issues  
		* @param ownerContext Ext.layout.ContextItem 
		* @param containerSize Object 
		*/
		setCtSizeIfNeeded?( ownerContext?:Ext.layout.IContextItem, containerSize?:any ): void;

	}

}

declare module Ext.layout.container {
	export interface IBorder extends Ext.layout.container.IContainer {
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Number/String/Object) */
		padding?: any;
		/** [Config Option] (Object) */
		regionWeights?: any;
		/** [Config Option] (Boolean/Ext.resizer.BorderSplitter) */
		split?: any;
		/** [Config Option] (Boolean) */
		splitterResize?: boolean;
		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any ): Ext.layout.ISizePolicy;

		/** [Method] Returns an array of child components either for a render phase Performed in the beforeLayout method of the layout s 
		* @returns Ext.Component[] of child components 
		*/
		getLayoutItems?(): Ext.IComponent[];

	}

}

declare module Ext.layout {
	export interface IBorderLayout extends Ext.layout.container.IContainer {
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Number/String/Object) */
		padding?: any;
		/** [Config Option] (Object) */
		regionWeights?: any;
		/** [Config Option] (Boolean/Ext.resizer.BorderSplitter) */
		split?: any;
		/** [Config Option] (Boolean) */
		splitterResize?: boolean;
		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any ): Ext.layout.ISizePolicy;

		/** [Method] Returns an array of child components either for a render phase Performed in the beforeLayout method of the layout s 
		* @returns Ext.Component[] of child components 
		*/
		getLayoutItems?(): Ext.IComponent[];

	}

}

declare module Ext.layout.container {
	export interface IBox extends Ext.layout.container.IContainer {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] ("round"/"floor"/"ceil") */
		alignRoundingMethod?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		constrainAlign?: boolean;
		/** [Config Option] (Boolean) */
		enableSplitters?: boolean;
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (String/Ext.layout.container.boxOverflow.None) */
		overflowHandler?: any;
		/** [Config Option] (String) */
		pack?: string;
		/** [Config Option] (String) */
		padding?: string;
		/** [Config Option] (String/Ext.Component) */
		stretchMaxPartner?: any;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		* @param firstCycle Object 
		*/
		beginLayoutCycle?( ownerContext?:any, firstCycle?:any ): void;

		/** [Method] This method is called to re cache our understanding of flexes  
		* @param ownerContext Object 
		*/
		cacheFlexes?( ownerContext?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] This method if implemented is called at the end of the cycle in which this layout completes by not setting done to  
		* @param ownerContext Object 
		*/
		completeLayout?( ownerContext?:any ): void;

		/** [Method] This method is called after all layouts are complete and their calculations flushed to the DOM  
		* @param ownerContext Object 
		*/
		finishedLayout?( ownerContext?:any ): void;

		/** [Method] Returns the value of align  
		* @returns String 
		*/
		getAlign?(): string;

		/** [Method] Returns the value of alignRoundingMethod  
		* @returns "round"/"floor"/"ceil" 
		*/
		getAlignRoundingMethod?(): any;

		/** [Method] Returns the value of constrainAlign  
		* @returns Boolean 
		*/
		getConstrainAlign?(): boolean;

		/** [Method] Overridden method from Ext layout container Container  
		* @returns Ext.dom.Element 
		*/
		getElementTarget?(): Ext.dom.IElement;

		/** [Method] Returns the value of enableSplitters  
		* @returns Boolean 
		*/
		getEnableSplitters?(): boolean;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @param ownerSizeModel Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any, ownerSizeModel?:any ): Ext.layout.ISizePolicy;

		/** [Method] Returns an array of child components either for a render phase Performed in the beforeLayout method of the layout s 
		* @returns Ext.Component[] of child components 
		*/
		getLayoutItems?(): Ext.IComponent[];

		/** [Method] Returns the value of overflowHandler  
		* @returns String/Ext.layout.container.boxOverflow.None 
		*/
		getOverflowHandler?(): any;

		/** [Method] Returns the value of pack  
		* @returns String 
		*/
		getPack?(): string;

		/** [Method] Returns the value of padding  
		* @returns String 
		*/
		getPadding?(): string;

		/** [Method] Overridden method from Ext layout container Container  
		* @returns Ext.dom.Element 
		*/
		getRenderTarget?(): Ext.dom.IElement;

		/** [Method] Returns the value of stretchMaxPartner  
		* @returns String/Ext.Component 
		*/
		getStretchMaxPartner?(): any;

		/** [Method] Returns the value of vertical  
		* @returns Boolean 
		*/
		getVertical?(): boolean;

		/** [Method] Sets the value of align  
		* @param align String The new value. 
		*/
		setAlign?( align?:string ): void;

		/** [Method] Sets the value of alignRoundingMethod  
		* @param alignRoundingMethod "round"/"floor"/"ceil" The new value. 
		*/
		setAlignRoundingMethod?( alignRoundingMethod?:any ): void;

		/** [Method] Sets the value of constrainAlign  
		* @param constrainAlign Boolean The new value. 
		*/
		setConstrainAlign?( constrainAlign?:boolean ): void;

		/** [Method] Sets the value of enableSplitters  
		* @param enableSplitters Boolean The new value. 
		*/
		setEnableSplitters?( enableSplitters?:boolean ): void;

		/** [Method] Sets the value of overflowHandler  
		* @param overflowHandler String/Ext.layout.container.boxOverflow.None The new value. 
		*/
		setOverflowHandler?( overflowHandler?:any ): void;

		/** [Method] Sets the value of pack  
		* @param pack String The new value. 
		*/
		setPack?( pack?:string ): void;

		/** [Method] Sets the value of padding  
		* @param padding String The new value. 
		*/
		setPadding?( padding?:string ): void;

		/** [Method] Sets the value of stretchMaxPartner  
		* @param stretchMaxPartner String/Ext.Component The new value. 
		*/
		setStretchMaxPartner?( stretchMaxPartner?:any ): void;

		/** [Method] Sets the value of vertical  
		* @param vertical Boolean The new value. 
		*/
		setVertical?( vertical?:boolean ): void;

	}

}

declare module Ext.layout {
	export interface IBoxLayout extends Ext.layout.container.IContainer {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] ("round"/"floor"/"ceil") */
		alignRoundingMethod?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		constrainAlign?: boolean;
		/** [Config Option] (Boolean) */
		enableSplitters?: boolean;
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (String/Ext.layout.container.boxOverflow.None) */
		overflowHandler?: any;
		/** [Config Option] (String) */
		pack?: string;
		/** [Config Option] (String) */
		padding?: string;
		/** [Config Option] (String/Ext.Component) */
		stretchMaxPartner?: any;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		* @param firstCycle Object 
		*/
		beginLayoutCycle?( ownerContext?:any, firstCycle?:any ): void;

		/** [Method] This method is called to re cache our understanding of flexes  
		* @param ownerContext Object 
		*/
		cacheFlexes?( ownerContext?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] This method if implemented is called at the end of the cycle in which this layout completes by not setting done to  
		* @param ownerContext Object 
		*/
		completeLayout?( ownerContext?:any ): void;

		/** [Method] This method is called after all layouts are complete and their calculations flushed to the DOM  
		* @param ownerContext Object 
		*/
		finishedLayout?( ownerContext?:any ): void;

		/** [Method] Returns the value of align  
		* @returns String 
		*/
		getAlign?(): string;

		/** [Method] Returns the value of alignRoundingMethod  
		* @returns "round"/"floor"/"ceil" 
		*/
		getAlignRoundingMethod?(): any;

		/** [Method] Returns the value of constrainAlign  
		* @returns Boolean 
		*/
		getConstrainAlign?(): boolean;

		/** [Method] Overridden method from Ext layout container Container  
		* @returns Ext.dom.Element 
		*/
		getElementTarget?(): Ext.dom.IElement;

		/** [Method] Returns the value of enableSplitters  
		* @returns Boolean 
		*/
		getEnableSplitters?(): boolean;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @param ownerSizeModel Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any, ownerSizeModel?:any ): Ext.layout.ISizePolicy;

		/** [Method] Returns an array of child components either for a render phase Performed in the beforeLayout method of the layout s 
		* @returns Ext.Component[] of child components 
		*/
		getLayoutItems?(): Ext.IComponent[];

		/** [Method] Returns the value of overflowHandler  
		* @returns String/Ext.layout.container.boxOverflow.None 
		*/
		getOverflowHandler?(): any;

		/** [Method] Returns the value of pack  
		* @returns String 
		*/
		getPack?(): string;

		/** [Method] Returns the value of padding  
		* @returns String 
		*/
		getPadding?(): string;

		/** [Method] Overridden method from Ext layout container Container  
		* @returns Ext.dom.Element 
		*/
		getRenderTarget?(): Ext.dom.IElement;

		/** [Method] Returns the value of stretchMaxPartner  
		* @returns String/Ext.Component 
		*/
		getStretchMaxPartner?(): any;

		/** [Method] Returns the value of vertical  
		* @returns Boolean 
		*/
		getVertical?(): boolean;

		/** [Method] Sets the value of align  
		* @param align String The new value. 
		*/
		setAlign?( align?:string ): void;

		/** [Method] Sets the value of alignRoundingMethod  
		* @param alignRoundingMethod "round"/"floor"/"ceil" The new value. 
		*/
		setAlignRoundingMethod?( alignRoundingMethod?:any ): void;

		/** [Method] Sets the value of constrainAlign  
		* @param constrainAlign Boolean The new value. 
		*/
		setConstrainAlign?( constrainAlign?:boolean ): void;

		/** [Method] Sets the value of enableSplitters  
		* @param enableSplitters Boolean The new value. 
		*/
		setEnableSplitters?( enableSplitters?:boolean ): void;

		/** [Method] Sets the value of overflowHandler  
		* @param overflowHandler String/Ext.layout.container.boxOverflow.None The new value. 
		*/
		setOverflowHandler?( overflowHandler?:any ): void;

		/** [Method] Sets the value of pack  
		* @param pack String The new value. 
		*/
		setPack?( pack?:string ): void;

		/** [Method] Sets the value of padding  
		* @param padding String The new value. 
		*/
		setPadding?( padding?:string ): void;

		/** [Method] Sets the value of stretchMaxPartner  
		* @param stretchMaxPartner String/Ext.Component The new value. 
		*/
		setStretchMaxPartner?( stretchMaxPartner?:any ): void;

		/** [Method] Sets the value of vertical  
		* @param vertical Boolean The new value. 
		*/
		setVertical?( vertical?:boolean ): void;

	}

}

declare module Ext.layout.container.boxoverflow {
	export interface IMenu extends Ext.layout.container.boxoverflow.INone {
		/** [Property] (Array) */
		menuItems?: any[];

		/** [Property] (String) */
		noItemsMenuText?: string;

	}

}

declare module Ext.layout.boxoverflow {
	export interface IMenu extends Ext.layout.container.boxoverflow.INone {
		/** [Property] (Array) */
		menuItems?: any[];

		/** [Property] (String) */
		noItemsMenuText?: string;

	}

}

declare module Ext.layout.container.boxoverflow {
	export interface INone extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Property] (Object) */
		factoryConfig?: any;

	}

}

declare module Ext.layout.boxoverflow {
	export interface INone extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Property] (Object) */
		factoryConfig?: any;

	}

}

declare module Ext.layout.container.boxoverflow {
	export interface IScroller extends Ext.layout.container.boxoverflow.INone, Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		animateScroll?: boolean;
		/** [Config Option] (Number) */
		scrollDuration?: number;
		/** [Config Option] (Number) */
		scrollIncrement?: number;
		/** [Config Option] (Number) */
		scrollRepeatInterval?: number;
		/** [Config Option] (Number) */
		wheelIncrement?: number;
		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the current scroll position of the innerCt element 
		* @returns Number The current scroll position 
		*/
		getScrollPosition?(): number;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Scrolls to the given component  
		* @param item String/Number/Ext.Component The item to scroll to. Can be a numerical index, component id or a reference to the component itself. 
		* @param animate Boolean True to animate the scrolling 
		*/
		scrollToItem?( item?:any, animate?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.layout.boxoverflow {
	export interface IScroller extends Ext.layout.container.boxoverflow.INone, Ext.mixin.IObservable {
		/** [Config Option] (Boolean) */
		animateScroll?: boolean;
		/** [Config Option] (Number) */
		scrollDuration?: number;
		/** [Config Option] (Number) */
		scrollIncrement?: number;
		/** [Config Option] (Number) */
		scrollRepeatInterval?: number;
		/** [Config Option] (Number) */
		wheelIncrement?: number;
		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the current scroll position of the innerCt element 
		* @returns Number The current scroll position 
		*/
		getScrollPosition?(): number;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Scrolls to the given component  
		* @param item String/Number/Ext.Component The item to scroll to. Can be a numerical index, component id or a reference to the component itself. 
		* @param animate Boolean True to animate the scrolling 
		*/
		scrollToItem?( item?:any, animate?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.layout.container {
	export interface ICard extends Ext.layout.container.IFit {
		/** [Config Option] (Boolean) */
		deferredRender?: boolean;
		/** [Method] Return the active visible component in the layout  
		* @returns Ext.Component 
		*/
		getActiveItem?(): Ext.IComponent;

		/** [Method] Return the active visible component in the layout to the next card 
		* @returns Ext.Component The next component or false. 
		*/
		getNext?(): Ext.IComponent;

		/** [Method] Return the active visible component in the layout to the previous card 
		* @returns Ext.Component The previous component or false. 
		*/
		getPrev?(): Ext.IComponent;

		/** [Method] Validates item is in the proper place in the dom  
		* @param item Object 
		* @param target Object 
		* @param position Object 
		*/
		isValidParent?( item?:any, target?:any, position?:any ): void;

		/** [Method] Sets the active visible component in the layout to the next card 
		* @returns Ext.Component the activated component or false when nothing activated. 
		*/
		next?(): Ext.IComponent;

		/** [Method] Sets the active visible component in the layout to the previous card 
		* @returns Ext.Component the activated component or false when nothing activated. 
		*/
		prev?(): Ext.IComponent;

		/** [Method] Makes the given card active  
		* @param newCard Ext.Component/Number/String The component, component id, itemId, or index of component. 
		* @returns Ext.Component the activated component or false when nothing activated. False is returned also when trying to activate an already active card. 
		*/
		setActiveItem?( newCard?:any ): Ext.IComponent;

	}

}

declare module Ext.layout {
	export interface ICardLayout extends Ext.layout.container.IFit {
		/** [Config Option] (Boolean) */
		deferredRender?: boolean;
		/** [Method] Return the active visible component in the layout  
		* @returns Ext.Component 
		*/
		getActiveItem?(): Ext.IComponent;

		/** [Method] Return the active visible component in the layout to the next card 
		* @returns Ext.Component The next component or false. 
		*/
		getNext?(): Ext.IComponent;

		/** [Method] Return the active visible component in the layout to the previous card 
		* @returns Ext.Component The previous component or false. 
		*/
		getPrev?(): Ext.IComponent;

		/** [Method] Validates item is in the proper place in the dom  
		* @param item Object 
		* @param target Object 
		* @param position Object 
		*/
		isValidParent?( item?:any, target?:any, position?:any ): void;

		/** [Method] Sets the active visible component in the layout to the next card 
		* @returns Ext.Component the activated component or false when nothing activated. 
		*/
		next?(): Ext.IComponent;

		/** [Method] Sets the active visible component in the layout to the previous card 
		* @returns Ext.Component the activated component or false when nothing activated. 
		*/
		prev?(): Ext.IComponent;

		/** [Method] Makes the given card active  
		* @param newCard Ext.Component/Number/String The component, component id, itemId, or index of component. 
		* @returns Ext.Component the activated component or false when nothing activated. False is returned also when trying to activate an already active card. 
		*/
		setActiveItem?( newCard?:any ): Ext.IComponent;

	}

}

declare module Ext.layout.container {
	export interface ICenter extends Ext.layout.container.IFit {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Property] (String) */
		itemCls?: string;

		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		* @param firstCycle Object 
		*/
		beginLayoutCycle?( ownerContext?:any, firstCycle?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @param ownerSizeModel Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any, ownerSizeModel?:any ): Ext.layout.ISizePolicy;

		/** [Method] Returns the element into which rendering must take place  
		* @returns Ext.dom.Element 
		*/
		getRenderTarget?(): Ext.dom.IElement;

	}

}

declare module Ext.ux.layout {
	export interface ICenter extends Ext.layout.container.IFit {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Property] (String) */
		itemCls?: string;

		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		* @param firstCycle Object 
		*/
		beginLayoutCycle?( ownerContext?:any, firstCycle?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @param ownerSizeModel Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any, ownerSizeModel?:any ): Ext.layout.ISizePolicy;

		/** [Method] Returns the element into which rendering must take place  
		* @returns Ext.dom.Element 
		*/
		getRenderTarget?(): Ext.dom.IElement;

	}

}

declare module Ext.layout.container {
	export interface ICheckboxGroup extends Ext.layout.container.IContainer {
		/** [Config Option] (Boolean) */
		autoFlex?: boolean;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Just wait for the child items to all lay themselves out in the width we are configured to make available to them  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any ): Ext.layout.ISizePolicy;

		/** [Method] A one time initialization method called just before rendering  */
		initLayout?(): void;

		/** [Method] Iterates over all passed items ensuring they are rendered  
		* @param items Object 
		*/
		renderItems?( items?:any ): void;

	}

}

declare module Ext.layout.container {
	export interface IColumn extends Ext.layout.container.IAuto {
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Property] (Boolean) */
		manageOverflow?: boolean;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @param ownerSizeModel Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any, ownerSizeModel?:any ): Ext.layout.ISizePolicy;

	}

}

declare module Ext.layout {
	export interface IColumnLayout extends Ext.layout.container.IAuto {
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Property] (Boolean) */
		manageOverflow?: boolean;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @param ownerSizeModel Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any, ownerSizeModel?:any ): Ext.layout.ISizePolicy;

	}

}

declare module Ext.layout.container {
	export interface IColumnSplitter extends Ext.resizer.ISplitter {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number|String) */
		height?: any;
		/** [Config Option] (Number|String) */
		width?: any;
		/** [Property] (String) */
		orientation?: string;

		/** [Method] Returns the config object with an xclass property for the splitter tracker  */
		getTrackerConfig?(): void;

	}

}

declare module Ext.layout.container {
	export interface IColumnSplitterTracker extends Ext.resizer.ISplitterTracker {
		/** [Method] We move the splitter el  
		* @param e Object 
		*/
		onStart?( e?:any ): void;

	}

}

declare module Ext.layout.container {
	export interface IContainer extends Ext.layout.ILayout, Ext.util.IElementContainer {
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		* @param firstCycle Object 
		*/
		beginLayoutCycle?( ownerContext?:any, firstCycle?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] Adds layout s itemCls and owning Container s itemCls 
		* @param item Object 
		*/
		configureItem?( item?:any ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of childEls  
		* @returns Object/String[]/Object[] 
		*/
		getChildEls?(): any;

		/** [Method] Returns the container size that of the target 
		* @param ownerContext Ext.layout.ContextItem The owner's context item. 
		* @param inDom Boolean True if the container size must be in the DOM. 
		* @returns Object The size 
		*/
		getContainerSize?( ownerContext?:Ext.layout.IContextItem, inDom?:boolean ): any;

		/** [Method] Returns the element into which extra functional DOM elements can be inserted  
		* @returns Ext.dom.Element 
		*/
		getElementTarget?(): Ext.dom.IElement;

		/** [Method] Returns an array of child components either for a render phase Performed in the beforeLayout method of the layout s 
		* @returns Ext.Component[] of child components 
		*/
		getLayoutItems?(): Ext.IComponent[];

		/** [Method] Returns the element into which rendering must take place  
		* @returns Ext.dom.Element 
		*/
		getRenderTarget?(): Ext.dom.IElement;

		/** [Method] Returns all items that are rendered 
		* @returns Array All matching items 
		*/
		getRenderedItems?(): any[];

		/** [Method] Returns the owner component s resize element  
		* @returns Ext.dom.Element 
		*/
		getTarget?(): Ext.dom.IElement;

		/** [Method] Returns all items that are both rendered and visible 
		* @returns Array All matching items 
		*/
		getVisibleItems?(): any[];

		/** [Method] Sets the value of childEls  
		* @param childEls Object/String[]/Object[] The new value. 
		*/
		setChildEls?( childEls?:any ): void;

	}

}

declare module Ext.layout {
	export interface IContainerLayout extends Ext.layout.ILayout, Ext.util.IElementContainer {
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		* @param firstCycle Object 
		*/
		beginLayoutCycle?( ownerContext?:any, firstCycle?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] Adds layout s itemCls and owning Container s itemCls 
		* @param item Object 
		*/
		configureItem?( item?:any ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of childEls  
		* @returns Object/String[]/Object[] 
		*/
		getChildEls?(): any;

		/** [Method] Returns the container size that of the target 
		* @param ownerContext Ext.layout.ContextItem The owner's context item. 
		* @param inDom Boolean True if the container size must be in the DOM. 
		* @returns Object The size 
		*/
		getContainerSize?( ownerContext?:Ext.layout.IContextItem, inDom?:boolean ): any;

		/** [Method] Returns the element into which extra functional DOM elements can be inserted  
		* @returns Ext.dom.Element 
		*/
		getElementTarget?(): Ext.dom.IElement;

		/** [Method] Returns an array of child components either for a render phase Performed in the beforeLayout method of the layout s 
		* @returns Ext.Component[] of child components 
		*/
		getLayoutItems?(): Ext.IComponent[];

		/** [Method] Returns the element into which rendering must take place  
		* @returns Ext.dom.Element 
		*/
		getRenderTarget?(): Ext.dom.IElement;

		/** [Method] Returns all items that are rendered 
		* @returns Array All matching items 
		*/
		getRenderedItems?(): any[];

		/** [Method] Returns the owner component s resize element  
		* @returns Ext.dom.Element 
		*/
		getTarget?(): Ext.dom.IElement;

		/** [Method] Returns all items that are both rendered and visible 
		* @returns Array All matching items 
		*/
		getVisibleItems?(): any[];

		/** [Method] Sets the value of childEls  
		* @param childEls Object/String[]/Object[] The new value. 
		*/
		setChildEls?( childEls?:any ): void;

	}

}

declare module Ext.layout.container {
	export interface IDashboard extends Ext.layout.container.IColumn {
		/** [Method] In addition to work done by our base classes containers benefit from some extra cached data  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] This method is called after all layouts are complete and their calculations flushed to the DOM  
		* @param ownerContext Object 
		*/
		finishedLayout?( ownerContext?:any ): void;

	}

}

declare module Ext.layout.container {
	export interface IEditor extends Ext.layout.container.IContainer {
		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any ): Ext.layout.ISizePolicy;

	}

}

declare module Ext.layout.container {
	export interface IFit extends Ext.layout.container.IContainer {
		/** [Property] (String) */
		itemCls?: string;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		* @param firstCycle Object 
		*/
		beginLayoutCycle?( ownerContext?:any, firstCycle?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @param ownerSizeModel Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any, ownerSizeModel?:any ): Ext.layout.ISizePolicy;

	}

}

declare module Ext.layout {
	export interface IFitLayout extends Ext.layout.container.IContainer {
		/** [Property] (String) */
		itemCls?: string;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		* @param firstCycle Object 
		*/
		beginLayoutCycle?( ownerContext?:any, firstCycle?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Object 
		* @param ownerSizeModel Object 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:any, ownerSizeModel?:any ): Ext.layout.ISizePolicy;

	}

}

declare module Ext.layout.container {
	export interface IForm extends Ext.layout.container.IAuto {
		/** [Config Option] (Number) */
		itemSpacing?: number;
		/** [Config Option] (Number/String) */
		labelWidth?: any;
		/** [Method] Overridden method from Ext layout container Container  
		* @returns Ext.dom.Element 
		*/
		getRenderTarget?(): Ext.dom.IElement;

	}

}

declare module Ext.layout {
	export interface IFormLayout extends Ext.layout.container.IAuto {
		/** [Config Option] (Number) */
		itemSpacing?: number;
		/** [Config Option] (Number/String) */
		labelWidth?: any;
		/** [Method] Overridden method from Ext layout container Container  
		* @returns Ext.dom.Element 
		*/
		getRenderTarget?(): Ext.dom.IElement;

	}

}

declare module Ext.layout.container {
	export interface IHBox extends Ext.layout.container.IBox {
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module Ext.layout {
	export interface IHBoxLayout extends Ext.layout.container.IBox {
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module Ext.layout.container {
	export interface ISegmentedButton extends Ext.layout.container.IContainer {
	}

}

declare module Ext.layout.container {
	export interface ITable extends Ext.layout.container.IContainer {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Number) */
		columns?: number;
		/** [Config Option] (Object) */
		tableAttrs?: any;
		/** [Config Option] (Object) */
		tdAttrs?: any;
		/** [Config Option] (Object) */
		trAttrs?: any;
		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] Returns an array of child components either for a render phase Performed in the beforeLayout method of the layout s 
		* @returns Ext.Component[] of child components 
		*/
		getLayoutItems?(): Ext.IComponent[];

		/** [Method] Validates item is in the proper place in the dom  
		* @param item Object 
		* @param target Object 
		* @param rowIdx Object 
		* @param cellIdx Object 
		*/
		isValidParent?( item?:any, target?:any, rowIdx?:any, cellIdx?:any ): void;

	}

}

declare module Ext.layout {
	export interface ITableLayout extends Ext.layout.container.IContainer {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Number) */
		columns?: number;
		/** [Config Option] (Object) */
		tableAttrs?: any;
		/** [Config Option] (Object) */
		tdAttrs?: any;
		/** [Config Option] (Object) */
		trAttrs?: any;
		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] Returns an array of child components either for a render phase Performed in the beforeLayout method of the layout s 
		* @returns Ext.Component[] of child components 
		*/
		getLayoutItems?(): Ext.IComponent[];

		/** [Method] Validates item is in the proper place in the dom  
		* @param item Object 
		* @param target Object 
		* @param rowIdx Object 
		* @param cellIdx Object 
		*/
		isValidParent?( item?:any, target?:any, rowIdx?:any, cellIdx?:any ): void;

	}

}

declare module Ext.layout.container {
	export interface IVBox extends Ext.layout.container.IBox {
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module Ext.layout {
	export interface IVBoxLayout extends Ext.layout.container.IBox {
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module Ext.layout {
	export interface IContext extends Ext.IBase {
		/** [Property] (Ext.util.Queue) */
		layoutQueue?: Ext.util.IQueue;

		/** [Property] (Number) */
		state?: number;

		/** [Method] Flushes any pending writes to the DOM by calling each ContextItem in the flushQueue  */
		flush?(): void;

		/** [Method] Returns the ContextItem for a component  
		* @param cmp Ext.Component 
		*/
		getCmp?( cmp?:Ext.IComponent ): void;

		/** [Method] Returns the ContextItem for an element  
		* @param parent Ext.layout.ContextItem 
		* @param el Ext.dom.Element 
		*/
		getEl?( parent?:Ext.layout.IContextItem, el?:Ext.dom.IElement ): void;

		/** [Method] Invalidates one or more components layouts component and container 
		* @param components Ext.Component/Array An array of Components or a single Component. 
		* @param full Boolean True if all properties should be invalidated, otherwise only those calculated by the component should be invalidated. 
		*/
		invalidate?( components?:any, full?:boolean ): void;

		/** [Method] Removes the ContextItem for an element from the cache and from the parent s children array  
		* @param parent Ext.layout.ContextItem 
		* @param el Ext.dom.Element 
		*/
		removeEl?( parent?:Ext.layout.IContextItem, el?:Ext.dom.IElement ): void;

		/** [Method] Resets the given layout object  
		* @param layout Object 
		* @param ownerContext Object 
		* @param firstTime Object 
		*/
		resetLayout?( layout?:any, ownerContext?:any, firstTime?:any ): void;

		/** [Method] Runs the layout calculations  
		* @returns Boolean True if all layouts were completed, false if not. 
		*/
		run?(): boolean;

		/** [Method] Performs one layout cycle by calling each layout in the layout queue  
		* @returns Boolean True if some progress was made, false if not. 
		*/
		runCycle?(): boolean;

		/** [Method] Set the size of a component element or composite or an array of components or elements  
		* @param item Ext.Component/Ext.Component[]/Ext.dom.Element/Ext.dom.Element[]/Ext.dom.CompositeElement The item(s) to size. 
		* @param width Number The new width to set (ignored if undefined or NaN). 
		* @param height Number The new height to set (ignored if undefined or NaN). 
		*/
		setItemSize?( item?:any, width?:number, height?:number ): void;

	}

}

declare module Ext.layout {
	export interface IContextItem extends Ext.IBase {
		/** [Property] (Object) */
		state?: any;

		/** [Property] (Boolean) */
		wrapsComponent?: boolean;

		/** [Method] Registers a layout in the block list for the given property  
		* @param layout Ext.layout.Layout 
		* @param propName String The property name that blocked the layout (e.g., 'width'). 
		*/
		block?( layout?:Ext.layout.ILayout, propName?:string ): void;

		/** [Method] clears the margin cache so that marginInfo get re read from the dom on the next call to getMarginInfo  This is neede  */
		clearMarginCache?(): void;

		/** [Method] Registers a layout in the DOM block list for the given property  
		* @param layout Ext.layout.Layout 
		* @param propName String The property name that blocked the layout (e.g., 'width'). 
		*/
		domBlock?( layout?:Ext.layout.ILayout, propName?:string ): void;

		/** [Method] Flushes any updates in the dirty collection to the DOM  */
		flush?(): void;

		/** [Method] Gets the border information for the element as an object with left top right and bottom properties holding border s  
		* @returns Object 
		*/
		getBorderInfo?(): any;

		/** [Method] Gets a property of this object if it is correct in the DOM  
		* @param propName String The property name (e.g., 'width'). 
		* @returns Object The property value or undefined if not yet set or is dirty. 
		*/
		getDomProp?( propName?:string ): any;

		/** [Method] Returns the context item for an owned element  
		* @param nameOrEl String/Ext.dom.Element The element or the name of an owned element 
		* @param owner Ext.layout.container.Container/Ext.Component The owner of the named element if the passed "nameOrEl" parameter is a String. Defaults to this ContextItem's "target" property. For more details on owned elements see childEls and renderSelectors 
		* @returns Ext.layout.ContextItem 
		*/
		getEl?( nameOrEl?:any, owner?:any ): Ext.layout.IContextItem;

		/** [Method] Gets the frame information for the element as an object with left top right and bottom properties holding border 
		* @returns Object 
		*/
		getFrameInfo?(): any;

		/** [Method] Gets the margin information for the element as an object with left top right and bottom properties holding margin s  
		* @returns Object 
		*/
		getMarginInfo?(): any;

		/** [Method] Gets the padding information for the element as an object with left top right and bottom properties holding padding  
		* @returns Object 
		*/
		getPaddingInfo?(): any;

		/** [Method] Gets a property of this object  
		* @param propName String The property name that blocked the layout (e.g., 'width'). 
		* @returns Object The property value or undefined if not yet set. 
		*/
		getProp?( propName?:string ): any;

		/** [Method] Returns a style for this item  
		* @param styleName String The CSS style name. 
		* @returns Object The value of the DOM style (parsed as necessary). 
		*/
		getStyle?( styleName?:string ): any;

		/** [Method] Returns styles for this item  
		* @param styleNames String[] The CSS style names. 
		* @param altNames String[] The alternate names for the returned styles. If given, these names must correspond one-for-one to the styleNames. 
		* @returns Object The values of the DOM styles (parsed as necessary). 
		*/
		getStyles?( styleNames?:string[], altNames?:string[] ): any;

		/** [Method] Returns true if the given property is correct in the DOM  
		* @param propName String The property name (e.g., 'width'). 
		* @returns Boolean 
		*/
		hasDomProp?( propName?:string ): boolean;

		/** [Method] Returns true if the given property has been set  
		* @param propName String The property name (e.g., 'width'). 
		* @returns Boolean 
		*/
		hasProp?( propName?:string ): boolean;

		/** [Method] Invalidates the component associated with this item  
		* @param options Object An object describing how to handle the invalidation. 
		*/
		invalidate?( options?:any ): void;

		/** [Method] Recovers a property value from the last computation and restores its value and dirty state  
		* @param propName String The name of the property to recover. 
		* @param oldProps Object The old "props" object from which to recover values. 
		* @param oldDirty Object The old "dirty" object from which to recover state. 
		*/
		recoverProp?( propName?:string, oldProps?:any, oldDirty?:any ): void;

		/** [Method] Removes a cached ContextItem that was created using getEl  
		* @param nameOrEl String/Ext.dom.Element The element or the name of an owned element 
		* @param owner Ext.layout.container.Container/Ext.Component The owner of the named element if the passed "nameOrEl" parameter is a String. Defaults to this ContextItem's "target" property. 
		*/
		removeEl?( nameOrEl?:any, owner?:any ): void;

		/** [Method] Queue the setting of a DOM attribute on this ContextItem s target when next flushed  
		* @param name Object 
		* @param value Object 
		*/
		setAttribute?( name?:any, value?:any ): void;

		/** [Method] Sets the contentHeight property  
		* @param height Object 
		* @param measured Object 
		*/
		setContentHeight?( height?:any, measured?:any ): void;

		/** [Method] Sets the contentWidth and contentHeight properties  
		* @param width Object 
		* @param height Object 
		* @param measured Object 
		*/
		setContentSize?( width?:any, height?:any, measured?:any ): void;

		/** [Method] Sets the contentWidth property  
		* @param width Object 
		* @param measured Object 
		*/
		setContentWidth?( width?:any, measured?:any ): void;

		/** [Method] Sets the height and constrains the height to min maxHeight range  
		* @param height Number The height. 
		* @param dirty Boolean Specifies if the value is currently in the DOM. A value of false indicates that the value is already in the DOM. 
		* @returns Number The actual height after constraining. 
		*/
		setHeight?( height?:number, dirty?:boolean ): number;

		/** [Method] Sets a property value  
		* @param propName String The property name (e.g., 'width'). 
		* @param value Object The new value of the property. 
		* @param dirty Boolean Optionally specifies if the value is currently in the DOM (default is true which indicates the value is not in the DOM and must be flushed at some point). 
		* @returns Number 1 if this call specified the property value, 0 if not. 
		*/
		setProp?( propName?:string, value?:any, dirty?:boolean ): number;

		/** [Method] Sets the height and constrains the width to min maxWidth range  
		* @param width Number The width. 
		* @param dirty Boolean Specifies if the value is currently in the DOM. A value of false indicates that the value is already in the DOM. 
		* @returns Number The actual width after constraining. 
		*/
		setWidth?( width?:number, dirty?:boolean ): number;

	}

}

declare module Ext.layout {
	export interface ILayout extends Ext.IBase, Ext.mixin.IFactoryable {
		/** [Property] (Boolean) */
		done?: boolean;

		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Boolean) */
		isLayout?: boolean;

		/** [Method] Removes layout s itemCls and owning Container s itemCls  
		* @param item Object 
		*/
		afterRemove?( item?:any ): void;

		/** [Method] Called before any calculation cycles to prepare for layout  
		* @param ownerContext Ext.layout.ContextItem The context item for the layout's owner component. 
		*/
		beginLayout?( ownerContext?:Ext.layout.IContextItem ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Ext.layout.ContextItem The context item for the layout's owner component. 
		*/
		beginLayoutCycle?( ownerContext?:Ext.layout.IContextItem ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Ext.layout.ContextItem The context item for the layout's owner component. 
		*/
		calculate?( ownerContext?:Ext.layout.IContextItem ): void;

		/** [Method] This method if implemented is called at the end of the cycle in which this layout completes by not setting done to  
		* @param ownerContext Ext.layout.ContextItem The context item for the layout's owner component. 
		*/
		completeLayout?( ownerContext?:Ext.layout.IContextItem ): void;

		/** [Method] Called before an item is rendered to allow the layout to configure the item  
		* @param item Ext.Component The item to be configured 
		*/
		configureItem?( item?:Ext.IComponent ): void;

		/** [Method] Destroys this layout  */
		destroy?(): void;

		/** [Method] This method if implemented is called after all layouts have completed  
		* @param ownerContext Ext.layout.ContextItem The context item for the layout's owner component. 
		*/
		finalizeLayout?( ownerContext?:Ext.layout.IContextItem ): void;

		/** [Method] This method is called after all layouts are complete and their calculations flushed to the DOM  
		* @param ownerContext Ext.layout.ContextItem The context item for the layout's owner component. 
		*/
		finishedLayout?( ownerContext?:Ext.layout.IContextItem ): void;

		/** [Method] Returns an object describing how this layout manages the size of the given component  
		* @param item Ext.Component 
		* @returns Ext.layout.SizePolicy An object describing the sizing done by the layout for this item. 
		*/
		getItemSizePolicy?( item?:Ext.IComponent ): Ext.layout.ISizePolicy;

		/** [Method] Returns the set of items to layout empty by default */
		getLayoutItems?(): void;

		/** [Method] A one time initialization method called just before rendering  */
		initLayout?(): void;

		/** [Method] Validates item is in the proper place in the dom  
		* @param item Object 
		* @param target Object 
		* @param position Object 
		*/
		isValidParent?( item?:any, target?:any, position?:any ): void;

		/** [Method] This method if implemented is called after all layouts are finished and all have a lastComponentSize cached  
		* @param ownerContext Ext.layout.ContextItem The context item for the layout's owner component. 
		*/
		notifyOwner?( ownerContext?:Ext.layout.IContextItem ): void;

		/** [Method] This method is called when a child item changes in some way  
		* @param child Ext.Component The child item that has changed. 
		* @returns Boolean True if this layout has handled the content change. 
		*/
		onContentChange?( child?:Ext.IComponent ): boolean;

		/** [Method] Iterates over all passed items ensuring they are rendered  
		* @param items Object 
		* @param target Object 
		*/
		renderItems?( items?:any, target?:any ): void;

	}

}

declare module Ext.layout {
	export interface ISizeModel extends Ext.IBase {
		/** [Property] (Boolean) */
		auto?: boolean;

		/** [Property] (Boolean) */
		calculated?: boolean;

		/** [Property] (Boolean) */
		calculatedFromConfigured?: boolean;

		/** [Property] (Boolean) */
		calculatedFromNatural?: boolean;

		/** [Property] (Boolean) */
		calculatedFromShrinkWrap?: boolean;

		/** [Property] (Boolean) */
		configured?: boolean;

		/** [Property] (Boolean) */
		constrainedMax?: boolean;

		/** [Property] (Boolean) */
		constrainedMin?: boolean;

		/** [Property] (Boolean) */
		fixed?: boolean;

		/** [Property] (String) */
		name?: string;

		/** [Property] (Object) */
		names?: any;

		/** [Property] (Boolean) */
		natural?: boolean;

		/** [Property] (Number) */
		ordinal?: number;

		/** [Property] (Object[]) */
		pairsByHeightOrdinal?: any[];

		/** [Property] (Boolean) */
		shrinkWrap?: boolean;

	}

}

declare module Ext.layout {
	export interface ISizePolicy {
		/** [Property] (Boolean) */
		readsHeight?: boolean;

		/** [Property] (Boolean) */
		readsWidth?: boolean;

		/** [Property] (Boolean) */
		setsHeight?: boolean;

		/** [Property] (Boolean) */
		setsWidth?: boolean;

	}

}

declare module Ext {
	export interface ILoader {
	}
	export class Loader {
		/** [Config Option] (Boolean) */
		static disableCaching: boolean;
		/** [Config Option] (String) */
		static disableCachingParam: string;
		/** [Config Option] (Boolean) */
		static enabled: boolean;
		/** [Config Option] (Object) */
		static paths: any;
		/** [Config Option] (Boolean) */
		static preserveScripts: boolean;
		/** [Config Option] (Boolean) */
		static scriptChainDelay: boolean;
		/** [Config Option] (String) */
		static scriptCharset: string;
		/** [Property] (Array) */
		static history: any[];

		/** [Method] fixes up loader path configs by prepending Ext Boot baseUrl to the beginning of the path then delegates to Ext Loade  
		* @param pathConfig Object 
		*/
		static addBaseUrlClassPathMappings( pathConfig?:any ): void;

		/** [Method] Sets a batch of path entries 
		* @param paths Object a set of className: path mappings 
		* @returns Ext.Loader this 
		*/
		static addClassPathMappings( paths?:Object ): Ext.ILoader;

		/** [Method] Get the config value corresponding to the specified name  
		* @param name String The config property name 
		* @returns Object 
		*/
		static getConfig( name?:string ): any;

		/** [Method] Translates a className to a file path by adding the the proper prefix and converting the  s to  s  
		* @param className String 
		* @returns String path 
		*/
		static getPath( className?:string ): string;

		/** [Method] Loads the specified script URL and calls the supplied callbacks  
		* @param options Object/String/String[] The options object or simply the URL(s) to load. 
		*/
		static loadScript( options?:any ): void;

		/** [Method] Add a new listener to be executed when all required scripts are fully loaded 
		* @param fn Function The function callback to be executed 
		* @param scope Object The execution scope (this) of the callback function. 
		* @param withDomReady Boolean Pass false to not also wait for document dom ready. 
		* @param options Object Additional callback options. 
		*/
		static onReady( fn?:any, scope?:any, withDomReady?:boolean, options?:any ): void;

		/** [Method] Set the configuration for the loader  
		* @param config Object The config object to override the default values 
		* @returns Ext.Loader this 
		*/
		static setConfig( config?:any ): Ext.ILoader;

		/** [Method] Sets the path of a namespace  
		* @param name String/Object See flexSetter 
		* @param path String See flexSetter 
		* @returns Ext.Loader this 
		*/
		static setPath( name?:any, path?:string ): Ext.ILoader;

	}

}

declare module Ext {
	export interface ILoadMask extends Ext.IComponent, Ext.util.IStoreHolder {
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (String) */
		msg?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean) */
		shim?: boolean;
		/** [Config Option] (Ext.data.Store) */
		store?: Ext.data.IStore;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Ext.Component) */
		target?: Ext.IComponent;
		/** [Config Option] (Boolean) */
		useMsg?: boolean;
		/** [Config Option] (Boolean) */
		useTargetEl?: boolean;
		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (Boolean) */
		isLoadMask?: boolean;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Invoked after the Component is shown after onShow is called */
		afterShow?(): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Changes the data store bound to this LoadMask  
		* @param store Ext.data.Store The store to bind to this LoadMask 
		*/
		bindStore?( store?:Ext.data.IStore ): void;

		/** [Method] Binds listeners for this component to the store  
		* @param store Ext.data.AbstractStore The store to bind to 
		*/
		bindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

		/** [Method] Returns the element which is masked by the mask method or into which the LoadMask is rendered into  */
		getMaskTarget?(): void;

		/** [Method] Gets the current store instance  
		* @returns Ext.data.AbstractStore The store, null if one does not exist. 
		*/
		getStore?(): Ext.data.IAbstractStore;

		/** [Method] Gets the listeners to bind to a new store  
		* @param store Object 
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?( store?:any ): any;

		/** [Method] Hides this Component setting it to invisible using the configured hideMode  
		* @returns Ext.Component this 
		*/
		hide?(): Ext.IComponent;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] Template method it is called when a new store is bound to the current instance  
		* @param store Ext.data.AbstractStore The store being bound 
		* @param initial Boolean True if this store is being bound as initialization of the instance. 
		*/
		onBindStore?( store?:Ext.data.IAbstractStore, initial?:boolean ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Allows addition of behavior to the disable operation  */
		onDisable?(): void;

		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

		/** [Method] Template method it is called when an existing store is unbound from the current instance  
		* @param store Ext.data.AbstractStore The store being unbound 
		* @param initial Boolean True if this store is being bound as initialization of the instance. 
		*/
		onUnbindStore?( store?:Ext.data.IAbstractStore, initial?:boolean ): void;

		/** [Method] Sets the store to the specified store  
		* @param store Object 
		*/
		setStore?( store?:any ): void;

		/** [Method] Shows this Component rendering it first if autoRender or floating are true  
		* @returns Ext.Component this 
		*/
		show?(): Ext.IComponent;

		/** [Method] Unbinds listeners from this component to the store  
		* @param store Ext.data.AbstractStore The store to unbind from 
		*/
		unbindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

	}

}

declare module Ext.menu {
	export interface ICheckItem extends Ext.menu.IItem {
		/** [Config Option] (Boolean) */
		checkChangeDisabled?: boolean;
		/** [Config Option] (Function/String) */
		checkHandler?: any;
		/** [Config Option] (Boolean) */
		checked?: boolean;
		/** [Config Option] (String) */
		checkedCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		group?: string;
		/** [Config Option] (String) */
		groupCls?: string;
		/** [Config Option] (Boolean) */
		hideOnClick?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		uncheckedCls?: string;
		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Disables just the checkbox functionality of this menu Item  */
		disableCheckChange?(): void;

		/** [Method] Re enables the checkbox functionality of this menu item after having been disabled by disableCheckChange */
		enableCheckChange?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Sets the checked state of the item 
		* @param checked Boolean True to check, false to un-check 
		* @param suppressEvents Boolean True to prevent firing the checkchange events. 
		*/
		setChecked?( checked?:boolean, suppressEvents?:boolean ): void;

	}

}

declare module Ext.menu {
	export interface IColorPicker extends Ext.menu.IMenu {
		/** [Config Option] (Boolean) */
		hideOnClick?: boolean;
		/** [Config Option] (String) */
		pickerId?: string;
		/** [Property] (Ext.picker.Color) */
		picker?: Ext.picker.IColor;

	}

}

declare module Ext.menu {
	export interface IDatePicker extends Ext.menu.IMenu {
		/** [Config Option] (String) */
		ariaLabel?: string;
		/** [Config Option] (Boolean) */
		hideOnClick?: boolean;
		/** [Config Option] (String) */
		pickerId?: string;
		/** [Property] (Ext.picker.Date) */
		picker?: Ext.picker.IDate;

	}

}

declare module Ext.menu {
	export interface IItem extends Ext.IComponent, Ext.mixin.IQueryable {
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		canActivate?: boolean;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Number) */
		clickHideDelay?: number;
		/** [Config Option] (Boolean) */
		destroyMenu?: boolean;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (Boolean) */
		hideOnClick?: boolean;
		/** [Config Option] (String) */
		href?: string;
		/** [Config Option] (String) */
		hrefTarget?: string;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Ext.menu.Menu/Object) */
		menu?: any;
		/** [Config Option] (String) */
		menuAlign?: string;
		/** [Config Option] (Number) */
		menuExpandDelay?: number;
		/** [Config Option] (Number) */
		menuHideDelay?: number;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String/Object) */
		tooltip?: any;
		/** [Config Option] (String) */
		tooltipType?: string;
		/** [Property] (Boolean) */
		activated?: boolean;

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (Boolean) */
		isMenuItem?: boolean;

		/** [Property] (Boolean) */
		maskOnDisable?: boolean;

		/** [Property] (Ext.menu.Menu) */
		parentMenu?: Ext.menu.IMenu;

		/** [Method] Retrieves the first direct child of this container which matches the passed selector or component  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching child Ext.Component (or null if no match was found). 
		*/
		child?( selector?:any ): any;

		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found). 
		*/
		down?( selector?:any ): any;

		/** [Method] Get the attached sub menu for this item  
		* @returns Ext.menu.Menu The sub-menu. null if it doesn't exist. 
		*/
		getMenu?(): Ext.menu.IMenu;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  */
		onRemoved?(): void;

		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned. 
		* @returns Ext.Component[] Components which matched the selector 
		*/
		query?( selector?:string ): Ext.IComponent[];

		/** [Method] Retrieves all descendant components which match the passed function  
		* @param fn Function The matcher function. It will be called with a single argument, the component being tested. 
		* @param scope Object The scope in which to run the function. If not specified, it will default to the active component. 
		* @returns Ext.Component[] Components matched by the passed function 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.IComponent[];

		/** [Method] Finds a component at any level under this container matching the id itemId  
		* @param id String The id to find 
		* @returns Ext.Component The matching id, null if not found 
		*/
		queryById?( id?:string ): Ext.IComponent;

		/** [Method] Sets the click handler of this item 
		* @param fn Function The handler function 
		* @param scope Object The scope of the handler function 
		*/
		setHandler?( fn?:any, scope?:any ): void;

		/** [Method] Sets the icon on this item  
		* @param icon String The new icon 
		*/
		setIcon?( icon?:string ): void;

		/** [Method] Sets the iconCls of this item 
		* @param iconCls String The CSS class to set to iconCls 
		*/
		setIconCls?( iconCls?:string ): void;

		/** [Method] Set a child menu for this item  
		* @param menu Ext.menu.Menu/Object A menu, or menu configuration. null may be passed to remove the menu. 
		* @param destroyMenu Boolean True to destroy any existing menu. False to prevent destruction. If not specified, the destroyMenu configuration will be used. 
		*/
		setMenu?( menu?:any, destroyMenu?:boolean ): void;

		/** [Method] Sets the text of this item 
		* @param text String The text 
		*/
		setText?( text?:string ): void;

		/** [Method] Sets the tooltip for this menu item  
		* @param tooltip String/Object This may be:  String : A string to be used as innerHTML (html tags are accepted) to show in a tooltip Object : A configuration object for Ext.tip.QuickTipManager.register.  
		* @returns Ext.menu.Item this 
		*/
		setTooltip?( tooltip?:any ): Ext.menu.IItem;

		/** [Method] Traverses the tree rooted at this node in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPostOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at this node in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPreOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

	}

}

declare module Ext.menu {
	export interface ITextItem extends Ext.IComponent, Ext.mixin.IQueryable {
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		canActivate?: boolean;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Number) */
		clickHideDelay?: number;
		/** [Config Option] (Boolean) */
		destroyMenu?: boolean;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (Boolean) */
		hideOnClick?: boolean;
		/** [Config Option] (String) */
		href?: string;
		/** [Config Option] (String) */
		hrefTarget?: string;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Ext.menu.Menu/Object) */
		menu?: any;
		/** [Config Option] (String) */
		menuAlign?: string;
		/** [Config Option] (Number) */
		menuExpandDelay?: number;
		/** [Config Option] (Number) */
		menuHideDelay?: number;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String/Object) */
		tooltip?: any;
		/** [Config Option] (String) */
		tooltipType?: string;
		/** [Property] (Boolean) */
		activated?: boolean;

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (Boolean) */
		isMenuItem?: boolean;

		/** [Property] (Boolean) */
		maskOnDisable?: boolean;

		/** [Property] (Ext.menu.Menu) */
		parentMenu?: Ext.menu.IMenu;

		/** [Method] Retrieves the first direct child of this container which matches the passed selector or component  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching child Ext.Component (or null if no match was found). 
		*/
		child?( selector?:any ): any;

		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found). 
		*/
		down?( selector?:any ): any;

		/** [Method] Get the attached sub menu for this item  
		* @returns Ext.menu.Menu The sub-menu. null if it doesn't exist. 
		*/
		getMenu?(): Ext.menu.IMenu;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  */
		onRemoved?(): void;

		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned. 
		* @returns Ext.Component[] Components which matched the selector 
		*/
		query?( selector?:string ): Ext.IComponent[];

		/** [Method] Retrieves all descendant components which match the passed function  
		* @param fn Function The matcher function. It will be called with a single argument, the component being tested. 
		* @param scope Object The scope in which to run the function. If not specified, it will default to the active component. 
		* @returns Ext.Component[] Components matched by the passed function 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.IComponent[];

		/** [Method] Finds a component at any level under this container matching the id itemId  
		* @param id String The id to find 
		* @returns Ext.Component The matching id, null if not found 
		*/
		queryById?( id?:string ): Ext.IComponent;

		/** [Method] Sets the click handler of this item 
		* @param fn Function The handler function 
		* @param scope Object The scope of the handler function 
		*/
		setHandler?( fn?:any, scope?:any ): void;

		/** [Method] Sets the icon on this item  
		* @param icon String The new icon 
		*/
		setIcon?( icon?:string ): void;

		/** [Method] Sets the iconCls of this item 
		* @param iconCls String The CSS class to set to iconCls 
		*/
		setIconCls?( iconCls?:string ): void;

		/** [Method] Set a child menu for this item  
		* @param menu Ext.menu.Menu/Object A menu, or menu configuration. null may be passed to remove the menu. 
		* @param destroyMenu Boolean True to destroy any existing menu. False to prevent destruction. If not specified, the destroyMenu configuration will be used. 
		*/
		setMenu?( menu?:any, destroyMenu?:boolean ): void;

		/** [Method] Sets the text of this item 
		* @param text String The text 
		*/
		setText?( text?:string ): void;

		/** [Method] Sets the tooltip for this menu item  
		* @param tooltip String/Object This may be:  String : A string to be used as innerHTML (html tags are accepted) to show in a tooltip Object : A configuration object for Ext.tip.QuickTipManager.register.  
		* @returns Ext.menu.Item this 
		*/
		setTooltip?( tooltip?:any ): Ext.menu.IItem;

		/** [Method] Traverses the tree rooted at this node in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPostOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at this node in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPreOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

	}

}

declare module Ext.menu {
	export interface IManager extends Ext.IBase {
	}
	export class Manager {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a Ext menu Menu object 
		* @param menu String/Object The string menu id, an existing menu object reference, or a Menu config that will be used to generate and return a new Menu this. 
		* @param config Object A configuration to use when creating the menu. 
		* @returns Ext.menu.Menu The specified menu, or null if none are found 
		*/
		static get( menu?:any, config?:any ): Ext.menu.IMenu;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Hides all floating menus that are currently visible 
		* @returns Boolean success True if any active menus were hidden. 
		*/
		static hideAll(): boolean;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.menu {
	export interface IMenuMgr extends Ext.IBase {
	}
	export class MenuMgr {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a Ext menu Menu object 
		* @param menu String/Object The string menu id, an existing menu object reference, or a Menu config that will be used to generate and return a new Menu this. 
		* @param config Object A configuration to use when creating the menu. 
		* @returns Ext.menu.Menu The specified menu, or null if none are found 
		*/
		static get( menu?:any, config?:any ): Ext.menu.IMenu;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Hides all floating menus that are currently visible 
		* @returns Boolean success True if any active menus were hidden. 
		*/
		static hideAll(): boolean;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.menu {
	export interface IMenu extends Ext.panel.IPanel, Ext.util.IFocusableContainer {
		/** [Config Option] (Boolean) */
		allowOtherMenus?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultAlign?: string;
		/** [Config Option] (String) */
		defaultFocus?: string;
		/** [Config Option] (Boolean) */
		enableKeyNav?: boolean;
		/** [Config Option] (Boolean) */
		floating?: boolean;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (Boolean) */
		ignoreParentClicks?: boolean;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Boolean) */
		showSeparator?: boolean;
		/** [Property] (Boolean) */
		isMenu?: boolean;

		/** [Property] (Ext.menu.Menu) */
		parentMenu?: Ext.menu.IMenu;

		/** [Method] Invoked after the Component is shown after onShow is called */
		afterShow?(): void;

		/** [Method] Invoked before the Component is shown  */
		beforeShow?(): void;

		/** [Method]  
		* @param item Ext.Component The child item to test for focusability. Returns whether a menu item can be activated or not. 
		* @returns Boolean true if the passed item is focusable. 
		*/
		canActivateItem?( item?:Ext.IComponent ): boolean;

		/** [Method] Deactivates the current active item on the menu if one exists  */
		deactivateActiveItem?(): void;

		/** [Method] As menus are never contained a Menu s visibility only ever depends upon its own hidden state  
		* @returns Object The inheritedState object containing inherited properties. 
		*/
		getInherited?(): any;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Invoked when this component has first achieved size  */
		onBoxReady?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] Allows addition of behavior to the hide operation  
		* @param animateTarget Object 
		* @param cb Object 
		* @param scope Object 
		*/
		onHide?( animateTarget?:any, cb?:any, scope?:any ): void;

		/** [Method] This method is invoked after a new Component has been removed  
		* @param cmp Object 
		*/
		onRemove?( cmp?:any ): void;

		/** [Method] Sets a component as the active layout item  
		* @param item Object 
		* @returns Ext.Component the activated component or false when nothing activated. False is returned also when trying to activate an already active item. 
		*/
		setActiveItem?( item?:any ): Ext.IComponent;

	}

}

declare module Ext.menu {
	export interface ISeparator extends Ext.menu.IItem {
		/** [Config Option] (String) */
		separatorCls?: string;
		/** [Property] (Boolean) */
		focusable?: boolean;

	}

}

declare module Ext {
	export interface IMessageBox extends Ext.window.IMessageBox {
	}
	export class MessageBox {
		/** [Property] (Number) */
		static CANCEL: number;

		/** [Property] (String) */
		static ERROR: string;

		/** [Property] (String) */
		static INFO: string;

		/** [Property] (Number) */
		static NO: number;

		/** [Property] (Number) */
		static OK: number;

		/** [Property] (Number) */
		static OKCANCEL: number;

		/** [Property] (String) */
		static QUESTION: string;

		/** [Property] (String) */
		static WARNING: string;

		/** [Property] (Number) */
		static YES: number;

		/** [Property] (Number) */
		static YESNO: number;

		/** [Property] (Number) */
		static YESNOCANCEL: number;

		/** [Property] (Boolean) */
		static _isLayoutRoot: boolean;

		/** [Property] (Ext.dom.Element) */
		static body: Ext.dom.IElement;

		/** [Property] (Object) */
		static buttonText: any;

		/** [Property] (String) */
		static contentPaddingProperty: string;

		/** [Property] (Ext.util.ComponentDragger) */
		static dd: Ext.util.IComponentDragger;

		/** [Property] (String) */
		static defaultBindProperty: string;

		/** [Property] (Number) */
		static defaultTextHeight: number;

		/** [Property] (Ext.Container) */
		static floatParent: Ext.IContainer;

		/** [Property] (Ext.util.MixedCollection) */
		static floatingItems: Ext.util.IMixedCollection;

		/** [Property] (Boolean) */
		static focusable: boolean;

		/** [Property] (Object) */
		static frameSize: any;

		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Object) */
		static initialConfig: any;

		/** [Property] (Boolean) */
		static isComponent: boolean;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Boolean) */
		static isPanel: boolean;

		/** [Property] (Boolean) */
		static isWindow: boolean;

		/** [Property] (Ext.util.AbstractMixedCollection) */
		static items: Ext.util.IAbstractMixedCollection;

		/** [Property] (Boolean) */
		static maskOnDisable: boolean;

		/** [Property] (Number) */
		static minProgressWidth: number;

		/** [Property] (Number) */
		static minPromptWidth: number;

		/** [Property] (Ext.Container) */
		static ownerCt: Ext.IContainer;

		/** [Property] (Boolean) */
		static rendered: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (Ext.ZIndexManager) */
		static zIndexManager: Ext.IZIndexManager;

		/** [Property] (Ext.Container) */
		static zIndexParent: Ext.IContainer;

		/** [Method] Adds Component s to this Container  
		* @param component Ext.Component[]|Object[]/Ext.Component.../Object... Either one or more Components to add or an Array of Components to add. See items for additional information. 
		* @returns Ext.Component[]/Ext.Component The Components that were added. 
		*/
		static add( component?:any ): any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Adds a CSS class to the body element  
		* @param cls String The class to add 
		* @returns Ext.panel.Panel this 
		*/
		static addBodyCls( cls?:string ): Ext.panel.IPanel;

		/** [Method] Adds a CSS class to the top level element representing this component  
		* @param cls String/String[] The CSS class name to add. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		static addClass( cls?:any ): Ext.IComponent;

		/** [Method] Adds a CSS class to the top level element representing this component  
		* @param cls String/String[] The CSS class name to add. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		static addCls( cls?:any ): Ext.IComponent;

		/** [Method] Adds a cls to the uiCls array which will also call addUIClsToElement and adds to all elements of this component  
		* @param classes String/String[] A string or an array of strings to add to the uiCls. 
		* @param skip Boolean true to skip adding it to the class and do it later (via the return). 
		*/
		static addClsWithUI( classes?:any, skip?:boolean ): void;

		/** [Method] Adds docked item s to the container  
		* @param items Object/Object[] The Component or array of components to add. The components must include a 'dock' parameter on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left'). 
		* @param pos Number The index at which the Component will be added 
		* @returns Ext.Component[] The added components. 
		*/
		static addDocked( items?:any, pos?:number ): Ext.IComponent[];

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Save a property to the given state object if it is not its default or configured value  
		* @param state Object The state object. 
		* @param propName String The name of the property on this object to save. 
		* @param value String The value of the state property (defaults to this[propName]). 
		* @returns Object The state object or a new object if state was null and the property was saved. 
		*/
		static addPropertyToState( state?:any, propName?:string, value?:string ): any;

		/** [Method] Add events that will trigger the state to be saved  
		* @param events String/String[] The event name or an array of event names. 
		*/
		static addStateEvents( events?:any ): void;

		/** [Method] Add tools to this panel 
		* @param tools Object[]/Ext.panel.Tool[] The tools to add 
		*/
		static addTool( tools?:any ): void;

		/** [Method] Method which adds a specified UI  uiCls to the components element  
		* @param uiCls String The UI class to add to the element. 
		*/
		static addUIClsToElement( uiCls?:string ): void;

		/** [Method] Invoked after the Panel is Collapsed  */
		static afterCollapse(): void;

		/** [Method] Called by the layout system after the Component has been laid out  */
		static afterComponentLayout(): void;

		/** [Method] Invoked after the Panel is Expanded  */
		static afterExpand(): void;

		/** [Method] Invoked after the Container has laid out and rendered if necessary its child Components  
		* @param layout Ext.layout.container.Container 
		*/
		static afterLayout( layout?:Ext.layout.container.IContainer ): void;

		/** [Method] Template method called after a Component has been positioned  
		* @param x Number 
		* @param y Number 
		*/
		static afterSetPosition( x?:number, y?:number ): void;

		/** [Method] Invoked after the Component is shown after onShow is called 
		* @param animateTarget String/Ext.dom.Element 
		* @param callback Function 
		* @param scope Object 
		*/
		static afterShow( animateTarget?:any, callback?:any, scope?:any ): void;

		/** [Method] Displays a standard read only message box with an OK button comparable to the basic JavaScript alert prompt 
		* @param title String The title bar text 
		* @param message String The message box body text 
		* @param fn Function The callback function invoked after the message box is closed. See show method for details. 
		* @param scope Object The scope (this reference) in which the callback is executed. 
		* @returns Ext.window.MessageBox this 
		*/
		static alert( title?:string, message?:string, fn?:any, scope?:any ): Ext.window.IMessageBox;

		/** [Method] Aligns the element with another element relative to the specified anchor points  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] Element animation config object 
		* @returns Ext.util.Positionable this 
		*/
		static alignTo( element?:any, position?:string, offsets?:number[] ): Ext.util.IPositionable;

		/** [Method] Anchors an element to another element and realigns it when the window is resized  
		* @param anchorToEl Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param alignment String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @param monitorScroll Boolean/Number True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay in milliseconds. 
		* @param callback Function The function to call after the animation finishes 
		* @returns Ext.util.Positionable this 
		*/
		static anchorTo( anchorToEl?:any, alignment?:string, offsets?:number[], animate?:any, monitorScroll?:any, callback?:any ): Ext.util.IPositionable;

		/** [Method] Performs custom animation on this object  
		* @param animObj Object 
		* @returns Object this 
		*/
		static animate( animObj?:any ): any;

		/** [Method] Applies the state to the object  
		* @param state Object 
		*/
		static applyState( state?:any ): void;

		/** [Method] Template method to do any pre blur processing  
		* @param e Ext.event.Event The event object 
		*/
		static beforeBlur( e?:Ext.event.IEvent ): void;

		/** [Method] Occurs before componentLayout is run  
		* @param adjWidth Number The box-adjusted width that was set. 
		* @param adjHeight Number The box-adjusted height that was set. 
		*/
		static beforeComponentLayout( adjWidth?:number, adjHeight?:number ): void;

		/** [Method] Template method to do any pre focus processing  
		* @param e Ext.event.Event The event object 
		*/
		static beforeFocus( e?:Ext.event.IEvent ): void;

		/** [Method] Occurs before componentLayout is run  */
		static beforeLayout(): void;

		/** [Method] Invoked before the Component is shown  */
		static beforeShow(): void;

		/** [Method] Bubbles up the component container hierarchy calling the specified function with each component  
		* @param fn Function The function to call 
		* @param scope Object The scope of the function. Defaults to current node. 
		* @param args Array The args to call the function with. Defaults to passing the current component. 
		* @returns Ext.Component this 
		*/
		static bubble( fn?:any, scope?:any, args?:any[] ): Ext.IComponent;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Cancel any deferred focus on this component */
		static cancelFocus(): void;

		/** [Method] Cascades down the component container heirarchy from this component passed in the first call  calling the specified  
		* @param fn Function The function to call 
		* @param scope Object The scope of the function (defaults to current component) 
		* @param args Array The args to call the function with. The current component always passed as the last argument. 
		* @returns Ext.Container this 
		*/
		static cascade( fn?:any, scope?:any, args?:any[] ): Ext.IContainer;

		/** [Method] Center this Component in its container  
		* @returns Ext.Component this 
		*/
		static center(): Ext.IComponent;

		/** [Method] Retrieves the first direct child of this container which matches the passed selector or component  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching child Ext.Component (or null if no match was found). 
		*/
		static child( selector?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] Clone the current component using the original config values passed into this instance by default  
		* @param overrides Object A new config containing any properties to override in the cloned version. An id property can be passed on this object, otherwise one will be generated to avoid duplicates. 
		* @returns Ext.Component clone The cloned copy of this component 
		*/
		static cloneConfig( overrides?:any ): Ext.IComponent;

		/** [Method] Closes the Panel  */
		static close(): void;

		/** [Method] Collapses the panel body so that the body becomes hidden  
		* @param direction String The direction to collapse towards. Must be one of  Ext.Component.DIRECTION_TOP Ext.Component.DIRECTION_RIGHT Ext.Component.DIRECTION_BOTTOM Ext.Component.DIRECTION_LEFT Defaults to collapseDirection. 
		* @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds. 
		* @returns Ext.panel.Panel this 
		*/
		static collapse( direction?:string, animate?:boolean ): Ext.panel.IPanel;

		/** [Method] Displays a confirmation message box with Yes and No buttons comparable to JavaScript s confirm 
		* @param title String The title bar text 
		* @param message String The message box body text 
		* @param fn Function The callback function invoked after the message box is closed. See show method for details. 
		* @param scope Object The scope (this reference) in which the callback is executed. 
		* @returns Ext.window.MessageBox this 
		*/
		static confirm( title?:string, message?:string, fn?:any, scope?:any ): Ext.window.IMessageBox;

		/** [Method] Determines whether the passed Component is either an immediate child of this Container or whether it is a descendant  
		* @param comp Ext.Component The Component to test. 
		* @param deep Boolean Pass true to test for the Component being a descendant at any level. 
		* @returns Boolean true if the passed Component is contained at the specified level. 
		*/
		static contains( comp?:Ext.IComponent, deep?:boolean ): boolean;

		/** [Method] converts a collapsdDir into an anchor argument for Element slideIn overridden in rtl mode to switch l and r  
		* @param collapseDir Object 
		*/
		static convertCollapseDir( collapseDir?:any ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Disables all child input fields and buttons  
		* @param silent Object 
		* @param fromParent Object 
		*/
		static disable( silent?:any, fromParent?:any ): void;

		/** [Method] This method needs to be called whenever you change something on this component that requires the Component s layout t  
		* @returns Ext.Component this 
		*/
		static doComponentLayout(): Ext.IComponent;

		/** [Method] Moves this floating Component into a constrain region  
		* @param constrainTo String/HTMLElement/Ext.dom.Element/Ext.util.Region The Element or Region into which this Component is to be constrained. Defaults to the element into which this floating Component was rendered. 
		*/
		static doConstrain( constrainTo?:any ): void;

		/** [Method] Manually force this container s layout to be recalculated  
		* @returns Ext.container.Container this 
		*/
		static doLayout(): Ext.container.IContainer;

		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found). 
		*/
		static down( selector?:any ): any;

		/** [Method] Enables all child input fields and buttons  
		* @param silent Object 
		* @param fromParent Object 
		*/
		static enable( silent?:any, fromParent?:any ): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Ensures that this component is attached to document body  
		* @param runLayout Boolean True to run the component's layout. 
		*/
		static ensureAttachedToBody( runLayout?:boolean ): void;

		/** [Method] Expands the panel body so that it becomes visible  
		* @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds. 
		* @returns Ext.panel.Panel this 
		*/
		static expand( animate?:boolean ): Ext.panel.IPanel;

		/** [Method] Find a container above this component at any level by a custom function  
		* @param fn Function The custom function to call with the arguments (container, this component). 
		* @returns Ext.container.Container The first Container for which the custom function returns true 
		*/
		static findParentBy( fn?:any ): Ext.container.IContainer;

		/** [Method] Find a container above this component at any level by xtype or class See also the up method  
		* @param xtype String/Ext.Class The xtype string for a component, or the class of the component directly 
		* @returns Ext.container.Container The first Container which matches the given xtype or class 
		*/
		static findParentByType( xtype?:any ): Ext.container.IContainer;

		/** [Method] Retrieves plugin from this component s collection by its ptype  
		* @param ptype String The Plugin's ptype as specified by the class's alias configuration. 
		* @returns Ext.plugin.Abstract plugin instance. 
		*/
		static findPlugin( ptype?:string ): Ext.plugin.IAbstract;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Try to focus this component  
		* @param selectText Mixed If applicable, true to also select all the text in this component, or an array consisting of start and end (defaults to start) position of selection. 
		* @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds). 
		* @param callback Function Only needed if the delay parameter is used. A function to call upon focus. 
		* @param scope Function Only needed if the delay parameter is used. The scope (this reference) in which to execute the callback. 
		* @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option. If this component is disabled, a closely related component will be focused and that will be returned. 
		*/
		static focus( selectText?:any, delay?:any, callback?:any, scope?:any ): Ext.IComponent;

		/** [Method] Updates this component s layout  
		* @param options Object An object with layout options. 
		*/
		static forceComponentLayout( options?:any ): void;

		/** [Method] Returns the current animation if this object has any effects actively running or queued else returns false  
		* @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false 
		*/
		static getActiveAnimation(): any;

		/** [Method] Gets the x y coordinates to align this element with another element  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @returns Number[] [x, y] 
		*/
		static getAlignToXY( element?:any, position?:string, offsets?:number[] ): number[];

		/** [Method] Returns the value of alwaysOnTop  
		* @returns Boolean/Number 
		*/
		static getAlwaysOnTop(): any;

		/** [Method] Gets the x y coordinates specified by the anchor position on the element  
		* @param anchor String The specified anchor position. See alignTo for details on supported anchor positions. 
		* @param local Boolean True to get the local (element top/left-relative) anchor position instead of page coordinates 
		* @param size Object An object containing the size to use for calculating anchor position {width: (target width), height: (target height)} (defaults to the element's current size) 
		* @returns Number[] [x, y] An array containing the element's x and y coordinates 
		*/
		static getAnchorXY( anchor?:string, local?:boolean, size?:any ): number[];

		/** [Method] Returns the value of bind  
		* @returns Object 
		*/
		static getBind(): any;

		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param contentBox Boolean If true a box for the content of the element is returned. 
		* @param local Boolean If true the element's left and top relative to its offsetParent are returned instead of page x/y. 
		* @returns Object An object in the format 
		*/
		static getBox( contentBox?:boolean, local?:boolean ): any;

		/** [Method] Implements an upward event bubbling policy  */
		static getBubbleTarget(): void;

		/** [Method] Return the immediate child Component in which the passed element is located  
		* @param el Ext.dom.Element/HTMLElement/String The element to test (or ID of element). 
		* @param deep Boolean If true, returns the deepest descendant Component which contains the passed element. 
		* @returns Ext.Component The child item which contains the passed element. 
		*/
		static getChildByElement( el?:any, deep?:boolean ): Ext.IComponent;

		/** [Method] Returns the value of childEls  
		* @returns Object/String[]/Object[] 
		*/
		static getChildEls(): any;

		/** [Method] Returns the current collapsed state of the panel  
		* @returns Boolean/String False when not collapsed, otherwise the value of collapseDirection. 
		*/
		static getCollapsed(): any;

		/** [Method] Attempts a default component lookup see Ext container Container getComponent 
		* @param comp String/Number The component id, itemId or position to find 
		* @returns Ext.Component The component (if found) 
		*/
		static getComponent( comp?:any ): Ext.IComponent;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the content region of this element for purposes of constraining floating children  */
		static getConstrainRegion(): void;

		/** [Method] Returns the X Y vector by which this Positionable s element must be translated to make a best attempt to constrain  
		* @param constrainTo Ext.util.Positionable/HTMLElement/String/Ext.util.Region The Positionable, HTMLElement, element id, or Region into which the element is to be constrained. 
		* @param proposedPosition Number[] A proposed [X, Y] position to test for validity and to produce a vector for instead of using the element's current position 
		* @param proposedSize Number[] A proposed [width, height] size to constrain instead of using the element's current size 
		* @returns Number[]/Boolean If the element needs to be translated, an [X, Y] vector by which this element must be translated. Otherwise, false. 
		*/
		static getConstrainVector( constrainTo?:any, proposedPosition?:number[], proposedSize?:number[] ): any;

		/** [Method] Returns the value of controller  
		* @returns String/Object/Ext.app.ViewController 
		*/
		static getController(): any;

		/** [Method] Returns the value of data  
		* @returns Object 
		*/
		static getData(): any;

		/** [Method] Gets the configured default focus item  */
		static getDefaultFocus(): void;

		/** [Method] Returns the value of defaultListenerScope  
		* @returns Boolean 
		*/
		static getDefaultListenerScope(): boolean;

		/** [Method] Finds a docked component by id itemId or position  
		* @param comp String/Number The id, itemId or position of the docked component (see getComponent for details) 
		* @returns Ext.Component The docked component (if found) 
		*/
		static getDockedComponent( comp?:any ): Ext.IComponent;

		/** [Method] Retrieves an array of all currently docked Components  
		* @param selector String A ComponentQuery selector string to filter the returned items. 
		* @param beforeBody Boolean An optional flag to limit the set of items to only those before the body (true) or after the body (false). All components are returned by default. 
		* @returns Ext.Component[] The array of docked components meeting the specified criteria. 
		*/
		static getDockedItems( selector?:string, beforeBody?:boolean ): Ext.IComponent[];

		/** [Method] Retrieves the top level element representing this component  
		* @returns Ext.dom.Element 
		*/
		static getEl(): Ext.dom.IElement;

		/** [Method] Returns the focus styling holder element associated with this Focusable  
		* @returns Ext.Element The focus styling element. 
		*/
		static getFocusClsEl(): Ext.IElement;

		/** [Method] Returns the focus holder element associated with this Window  
		* @returns Ext.dom.Element/Ext.Component the focus holding element or Component. 
		*/
		static getFocusEl(): any;

		/** [Method] Gets the Header for this panel  
		* @returns Ext.panel.Header 
		*/
		static getHeader(): Ext.panel.IHeader;

		/** [Method] Gets the current height of the component s underlying element  
		* @returns Number 
		*/
		static getHeight(): number;

		/** [Method] Retrieves the id of this component  
		* @returns String 
		*/
		static getId(): string;

		/** [Method] This method returns an object containing the inherited properties for this instance  
		* @param inner Boolean Pass true to return inheritedStateInner instead of the normal inheritedState object. This is only needed internally and should not be passed by user code. 
		* @returns Object The inheritedState object containing inherited properties. 
		*/
		static getInherited( inner?:boolean ): any;

		/** [Method] This method returns the value of a config property that may be inherited from some ancestor  
		* @param property String The name of the config property to return. 
		* @param skipThis Boolean Pass true if the property should be ignored if found on this instance. In other words, true means the property must be inherited and not explicitly set on this instance. 
		* @returns Mixed The value of the requested property. 
		*/
		static getInheritedConfig( property?:string, skipThis?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] This function takes the position argument passed to onRender and returns a DOM element that you can use in the insert  
		* @param position String/Number/Ext.dom.Element/HTMLElement Index, element id or element you want to put this component before. 
		* @returns HTMLElement DOM element that you can use in the insertBefore 
		*/
		static getInsertPosition( position?:any ): HTMLElement;

		/** [Method] Returns the value of itemId assigned to this component or when that is not set returns the value of id  
		* @returns String 
		*/
		static getItemId(): string;

		/** [Method] Returns the layout instance currently associated with this Container  
		* @returns Ext.layout.container.Container The layout 
		*/
		static getLayout(): Ext.layout.container.IContainer;

		/** [Method] Gets the Ext ComponentLoader for this Component  
		* @returns Ext.ComponentLoader The loader instance, null if it doesn't exist. 
		*/
		static getLoader(): Ext.IComponentLoader;

		/** [Method] Overridden in Ext rtl Component  
		* @returns Number The local x coordinate 
		*/
		static getLocalX(): number;

		/** [Method] Overridden in Ext rtl Component  
		* @returns Number[] The local XY position of the element 
		*/
		static getLocalXY(): number[];

		/** [Method] Returns the y coordinate of this element reletive to its offsetParent  
		* @returns Number The local y coordinate 
		*/
		static getLocalY(): number;

		/** [Method] Returns the element which is masked by the mask method or into which the LoadMask is rendered into  */
		static getMaskTarget(): void;

		/** [Method] Returns the value of maxHeight  
		* @returns Number 
		*/
		static getMaxHeight(): number;

		/** [Method] Returns the value of maxWidth  
		* @returns Number 
		*/
		static getMaxWidth(): number;

		/** [Method] Returns the value of minHeight  
		* @returns Number 
		*/
		static getMinHeight(): number;

		/** [Method] Returns the value of minWidth  
		* @returns Number 
		*/
		static getMinWidth(): number;

		/** [Method] Returns the offsets of this element from the passed element  
		* @param offsetsTo Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or element id to get get the offsets from. 
		* @returns Number[] The XY page offsets (e.g. [100, -200]) 
		*/
		static getOffsetsTo( offsetsTo?:any ): number[];

		/** [Method] Retrieves a plugin from this component s collection by its pluginId  
		* @param pluginId String 
		* @returns Ext.plugin.Abstract plugin instance. 
		*/
		static getPlugin( pluginId?:string ): Ext.plugin.IAbstract;

		/** [Method] Gets the current XY position of the component s underlying element  
		* @param local Boolean If true the element's left and top are returned instead of page XY. 
		* @returns Number[] The XY position of the element (e.g., [100, 200]) 
		*/
		static getPosition( local?:boolean ): number[];

		/** [Method] Returns the value of publishes  
		* @returns String/String[]/Object 
		*/
		static getPublishes(): any;

		/** [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th  
		* @param deep Object 
		*/
		static getRefItems( deep?:any ): void;

		/** [Method] Used by ComponentQuery and the up method to find the owning Component in the linkage hierarchy  */
		static getRefOwner(): void;

		/** [Method] Returns the value of reference  
		* @returns String 
		*/
		static getReference(): string;

		/** [Method] Returns an object holding the descendants of this view keyed by their reference  
		* @returns Object An object with each child reference. This will be null if this container has no descendants with a reference specified. 
		*/
		static getReferences(): any;

		/** [Method] Returns a region object that defines the area of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" properties. 
		*/
		static getRegion(): Ext.util.IRegion;

		/** [Method] Returns the x scroll position for this component  
		* @returns Number 
		*/
		static getScrollX(): number;

		/** [Method] Returns the y scroll position for this component  
		* @returns Number 
		*/
		static getScrollY(): number;

		/** [Method] Returns the value of scrollable  
		* @returns Boolean/String/Object 
		*/
		static getScrollable(): any;

		/** [Method] Returns the value of session  
		* @returns Boolean/Object/Ext.data.Session 
		*/
		static getSession(): any;

		/** [Method] Gets the current size of the component s underlying element  
		* @param contentSize Boolean true to get the width/size minus borders and padding 
		* @returns Object An object containing the element's size: 
		*/
		static getSize( contentSize?:boolean ): any;

		/** [Method] Returns an object that describes how this component s width and height are managed  
		* @param ownerCtSizeModel Object 
		* @returns Object The size model for this component. 
		*/
		static getSizeModel( ownerCtSizeModel?:any ): any;

		/** [Method] Return the actual tabIndex for this Focusable  
		* @returns Number tabIndex attribute value 
		*/
		static getTabIndex(): number;

		/** [Method] Returns the value of twoWayBindable  
		* @returns String/String[]/Object 
		*/
		static getTwoWayBindable(): any;

		/** [Method] Returns the value of viewModel  
		* @returns String/Object/Ext.app.ViewModel 
		*/
		static getViewModel(): any;

		/** [Method] Returns the content region of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" member data. 
		*/
		static getViewRegion(): Ext.util.IRegion;

		/** [Method] Gets the current width of the component s underlying element  
		* @returns Number 
		*/
		static getWidth(): number;

		/** [Method] Gets the current X position of the DOM element based on page coordinates  
		* @returns Number The X position of the element 
		*/
		static getX(): number;

		/** [Method] Gets the xtype for this component as registered with Ext ComponentManager  
		* @returns String The xtype 
		*/
		static getXType(): string;

		/** [Method] Returns this Component s xtype hierarchy as a slash delimited string  
		* @returns String The xtype hierarchy string 
		*/
		static getXTypes(): string;

		/** [Method] Gets the current position of the DOM element based on page coordinates  
		* @returns Number[] The XY position of the element 
		*/
		static getXY(): number[];

		/** [Method] Gets the current Y position of the DOM element based on page coordinates  
		* @returns Number The Y position of the element 
		*/
		static getY(): number;

		/** [Method] Returns the current animation if this object has any effects actively running or queued else returns false  
		* @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false 
		*/
		static hasActiveFx(): any;

		/** [Method] Checks if the specified CSS class exists on this element s DOM node  
		* @param className String The CSS class to check for. 
		* @returns Boolean true if the class exists, else false. 
		*/
		static hasCls( className?:string ): boolean;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Checks if there is currently a specified uiCls  
		* @param cls String The cls to check. 
		*/
		static hasUICls( cls?:string ): void;

		/** [Method] Hides this Component setting it to invisible using the configured hideMode  
		* @returns Ext.Component this 
		*/
		static hide(): Ext.IComponent;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Initialize any events on this component */
		static initEvents(): void;

		/** [Method] Template method to do any Focusable related initialization that does not involve event listeners creation  */
		static initFocusable(): void;

		/** [Method] Template method to do any event listener initialization for a Focusable  */
		static initFocusableEvents(): void;

		/** [Method] Called by getInherited to initialize the inheritedState the first time it is requested  
		* @param inheritedState Object 
		* @param inheritedStateInner Object 
		*/
		static initInheritedState( inheritedState?:any, inheritedStateInner?:any ): void;

		/** [Method] This method is called to initialize the items collection  */
		static initItems(): void;

		/** [Method] Inserts a Component into this Container at a specified index  
		* @param index Number The index at which the Component will be inserted into the Container's items collection 
		* @param component Ext.Component/Object/Ext.Component[]/Object[] The child Component or config object to insert. Ext uses lazy rendering, and will only render the inserted Component should it become necessary. A Component config object may be passed in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the inserted Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted. You can pass an array of Component instances and config objects. For a list of all available xtypes, see Ext.enums.Widget. 
		* @returns Ext.Component component The Component (or config object) that was inserted with the Container's default config values applied. 
		*/
		static insert( index?:number, component?:any ): Ext.IComponent;

		/** [Method] Inserts docked item s to the panel at the indicated position  
		* @param pos Number The index at which the Component will be inserted 
		* @param items Object/Object[] The Component or array of components to add. The components must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left'). 
		*/
		static insertDocked( pos?:number, items?:any ): void;

		/** [Method] Tests whether this Component matches a ComponentQuery selector string  
		* @param selector String The selector string to test against. 
		* @returns Boolean true if this Component matches the selector. 
		*/
		static is( selector?:string ): boolean;

		/** [Method] Determines whether this Component is an ancestor of the passed Component  
		* @param possibleDescendant Ext.Component The Component to test for presence within this Component's subtree. 
		*/
		static isAncestor( possibleDescendant?:Ext.IComponent ): void;

		/** [Method] Determines whether this component is the descendant of a passed component  
		* @param ancestor Ext.Component A Component which may contain this Component. 
		* @returns Boolean true if the component is the descendant of the passed component, otherwise false. 
		*/
		static isDescendantOf( ancestor?:Ext.IComponent ): boolean;

		/** [Method] Method to determine whether this Component is currently disabled  
		* @returns Boolean the disabled state of this Component. 
		*/
		static isDisabled(): boolean;

		/** [Method] Method to determine whether this Component is draggable  
		* @returns Boolean the draggable state of this component. 
		*/
		static isDraggable(): boolean;

		/** [Method] Method to determine whether this Component is droppable  
		* @returns Boolean the droppable state of this component. 
		*/
		static isDroppable(): boolean;

		/** [Method] Method to determine whether this Component is floating  
		* @returns Boolean the floating state of this component. 
		*/
		static isFloating(): boolean;

		/** [Method] Determine if this Focusable can receive focus at this time  
		* @param deep Boolean Optionally determine if the container itself is focusable, or if container's focus is delegated to a child component and that child is focusable. 
		* @returns Boolean True if component is focusable, false if not. 
		*/
		static isFocusable( deep?:boolean ): boolean;

		/** [Method] Method to determine whether this Component is currently set to hidden  
		* @returns Boolean the hidden state of this Component. 
		*/
		static isHidden(): boolean;

		/** [Method] Determines whether this Component is the root of a layout  */
		static isLayoutRoot(): void;

		/** [Method] Returns true if layout is suspended for this component  
		* @returns Boolean true layout of this component is suspended. 
		*/
		static isLayoutSuspended(): boolean;

		/** [Method] Returns masked state for this Component  
		* @param deep Boolean True to look up this Component's parent masked state. 
		* @returns Boolean True if masked, false otherwise. 
		*/
		static isMasked( deep?:boolean ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Returns true if this component is visible  
		* @param deep Object 
		* @returns Boolean true if this component is visible, false otherwise. 
		*/
		static isVisible( deep?:any ): boolean;

		/** [Method] Tests whether or not this Component is of a specific xtype  
		* @param xtype String The xtype to check for this Component 
		* @param shallow Boolean true to check whether this Component is directly of the specified xtype, false to check whether this Component is descended from the xtype. 
		* @returns Boolean true if this component descends from the specified xtype, false otherwise. 
		*/
		static isXType( xtype?:string, shallow?:boolean ): boolean;

		/** [Method] Gets the controller that controls this view  
		* @param skipThis Boolean true to not consider the controller directly attached to this view (if it exists). 
		* @returns Ext.app.ViewController The controller. null if no controller is found. 
		*/
		static lookupController( skipThis?:boolean ): Ext.app.IViewController;

		/** [Method] Gets a reference to a child specified using the reference configuration  
		* @param key String The name of the reference. 
		* @returns Ext.Component The referenced component or null if it is not found. 
		*/
		static lookupReference( key?:string ): Ext.IComponent;

		/** [Method] Returns the Ext data Session for this instance  
		* @param skipThis Boolean Pass true to ignore a session configured on this instance and only consider an inherited session. 
		* @returns Ext.data.Session 
		*/
		static lookupSession( skipThis?:boolean ): Ext.data.ISession;

		/** [Method] Returns the Ext app ViewModel for this instance  
		* @param skipThis Boolean Pass true to ignore a viewModel configured on this instance and only consider an inherited view model. 
		* @returns Ext.app.ViewModel 
		*/
		static lookupViewModel( skipThis?:boolean ): Ext.app.IViewModel;

		/** [Method] Masks this component with a semi opaque layer and makes the contents unavailable to clicks  
		* @param msg String A message to show in the center of the mask layer. 
		* @param msgCls String A CSS class name to use on the message element in the center of the layer. 
		*/
		static mask( msg?:string, msgCls?:string ): void;

		/** [Method] Fits the window within its current container and automatically replaces the maximize tool button with the restore 
		* @param animate Boolean Pass true to animate this Window to full size. 
		* @returns Ext.window.Window this 
		*/
		static maximize( animate?:boolean ): Ext.window.IWindow;

		/** [Method] Placeholder method for minimizing the window  
		* @returns Ext.window.Window this 
		*/
		static minimize(): Ext.window.IWindow;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Moves a Component within the Container  
		* @param fromIdx Number/Ext.Component The index/component to move. 
		* @param toIdx Number The new index for the Component. 
		* @returns Ext.Component component The Component that was moved. 
		*/
		static move( fromIdx?:any, toIdx?:number ): Ext.IComponent;

		/** [Method] Moves the given item into this container following after  
		* @param item Ext.Component The item to move. May be a component configuration object. 
		* @param after Ext.Component The reference component. May be null. 
		* @returns Ext.Component The moved item. 
		*/
		static moveAfter( item?:Ext.IComponent, after?:Ext.IComponent ): Ext.IComponent;

		/** [Method] Moves the given item into this container in front of before  
		* @param item Object/Ext.Component The item to move. May be a component configuration object. 
		* @param before Ext.Component The reference component. May be null. 
		* @returns Ext.Component The moved item. 
		*/
		static moveBefore( item?:any, before?:Ext.IComponent ): Ext.IComponent;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] A method to find a child component after the passed child parameter  
		* @param child Ext.Component The child to use as a starting point to find the next child. 
		* @param selector String A Ext.ComponentQuery selector to find the next child. This will return the next child matching this selector. This parameter is optional. 
		* @returns Ext.Component The next child found, null if no child found. 
		*/
		static nextChild( child?:Ext.IComponent, selector?:string ): Ext.IComponent;

		/** [Method] Returns the next node in the Component tree in tree traversal order  
		* @param selector String A ComponentQuery selector to filter the following nodes. 
		* @returns Ext.Component The next node (or the next node which matches the selector). Returns null if there is no matching node. 
		*/
		static nextNode( selector?:string ): Ext.IComponent;

		/** [Method] Returns the next sibling of this Component  
		* @param selector String A ComponentQuery selector to filter the following items. 
		* @returns Ext.Component The next sibling (or the next sibling which matches the selector). Returns null if there is no matching sibling. 
		*/
		static nextSibling( selector?:string ): Ext.IComponent;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] This method is invoked after a new Component has been added  
		* @param component Ext.Component 
		* @param position Number 
		*/
		static onAdd( component?:Ext.IComponent, position?:number ): void;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  
		* @param container Object 
		* @param pos Object 
		* @param instanced Object 
		*/
		static onAdded( container?:any, pos?:any, instanced?:any ): void;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] This method is invoked before adding a new child Component  
		* @param item Ext.Component 
		*/
		static onBeforeAdd( item?:Ext.IComponent ): void;

		/** [Method] Invoked when this component has first achieved size  */
		static onBoxReady(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		static onDestroy(): void;

		/** [Method] Allows addition of behavior to the disable operation  */
		static onDisable(): void;

		/** [Method] Invoked after a docked item is added to the Panel  
		* @param component Ext.Component 
		*/
		static onDockedAdd( component?:Ext.IComponent ): void;

		/** [Method] Invoked after a docked item is removed from the Panel  
		* @param component Ext.Component 
		*/
		static onDockedRemove( component?:Ext.IComponent ): void;

		/** [Method] Allows addition of behavior to the enable operation  */
		static onEnable(): void;

		/** [Method] Called when focus enters this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		static onFocusEnter( e?:Ext.event.IEvent ): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		static onFocusLeave( e?:Ext.event.IEvent ): void;

		/** [Method] Allows addition of behavior to the hide operation  
		* @param animateTarget Object 
		* @param cb Object 
		* @param scope Object 
		*/
		static onHide( animateTarget?:any, cb?:any, scope?:any ): void;

		/** [Method] Called after the component is moved this method is empty by default but can be implemented by any subclass that need  */
		static onPosition(): void;

		/** [Method] This method is invoked after a new Component has been removed  
		* @param component Ext.Component 
		* @param autoDestroy Boolean 
		*/
		static onRemove( component?:Ext.IComponent, autoDestroy?:boolean ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param destroying Object 
		*/
		static onRemoved( destroying?:any ): void;

		/** [Method] Called when the component is resized  */
		static onResize(): void;

		/** [Method] Invoked when a scroll operation is completed via this component s scroller  
		* @param x Number The current x position 
		* @param y Number The current y position 
		*/
		static onScrollEnd( x?:number, y?:number ): void;

		/** [Method] Invoked when this component is scrolled via its scroller  
		* @param x Number The current x position 
		* @param y Number The current y position 
		*/
		static onScrollMove( x?:number, y?:number ): void;

		/** [Method] Invoked when a scroll is initiated on this component via its scroller  
		* @param x Number The current x position 
		* @param y Number The current y position 
		*/
		static onScrollStart( x?:number, y?:number ): void;

		/** [Method] Allows addition of behavior to the show operation  */
		static onShow(): void;

		/** [Method] Invoked after the afterShow method is complete  
		* @param callback Function 
		* @param scope Object 
		*/
		static onShowComplete( callback?:any, scope?:any ): void;

		/** [Method] Template method to do any post blur processing  
		* @param e Ext.event.Event The event object 
		*/
		static postBlur( e?:Ext.event.IEvent ): void;

		/** [Method] Template method to do any post focus processing  
		* @param e Ext.event.Event The event object 
		*/
		static postFocus( e?:Ext.event.IEvent ): void;

		/** [Method] A method to find a child component before the passed child parameter  
		* @param child Ext.Component The child to use as a starting point to find the previous child. 
		* @param selector String A Ext.ComponentQuery selector to find the previous child. This will return the first child matching this selector. This parameter is optional. 
		* @returns Ext.Component The previous child found, null if no child found. 
		*/
		static prevChild( child?:Ext.IComponent, selector?:string ): Ext.IComponent;

		/** [Method] Returns the previous node in the Component tree in tree traversal order  
		* @param selector String A ComponentQuery selector to filter the preceding nodes. 
		* @returns Ext.Component The previous node (or the previous node which matches the selector). Returns null if there is no matching node. 
		*/
		static previousNode( selector?:string ): Ext.IComponent;

		/** [Method] Returns the previous sibling of this Component  
		* @param selector String A ComponentQuery selector to filter the preceding items. 
		* @returns Ext.Component The previous sibling (or the previous sibling which matches the selector). Returns null if there is no matching sibling. 
		*/
		static previousSibling( selector?:string ): Ext.IComponent;

		/** [Method] Displays a message box with a progress bar  
		* @param title String The title bar text 
		* @param message String The message box body text 
		* @param progressText String The text to display inside the progress bar 
		* @returns Ext.window.MessageBox this 
		*/
		static progress( title?:string, message?:string, progressText?:string ): Ext.window.IMessageBox;

		/** [Method] Displays a message box with OK and Cancel buttons prompting the user to enter some text comparable to JavaScript s p  
		* @param title String The title bar text 
		* @param message String The message box body text 
		* @param fn Function The callback function invoked after the message box is closed. See show method for details. 
		* @param scope Object The scope (this reference) in which the callback is executed. 
		* @param multiline Boolean/Number True to create a multiline textbox using the defaultTextHeight property, or the height in pixels to create the textbox/ 
		* @param value String Default value of the text input element 
		* @returns Ext.window.MessageBox this 
		*/
		static prompt( title?:string, message?:string, fn?:any, scope?:any, multiline?:any, value?:string ): Ext.window.IMessageBox;

		/** [Method] Publish this components state to the ViewModel  
		* @param property String The name of the property to update. 
		* @param value Object The value of property. Only needed if property is given. 
		*/
		static publishState( property?:string, value?:any ): void;

		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned. 
		* @returns Ext.Component[] Components which matched the selector 
		*/
		static query( selector?:string ): Ext.IComponent[];

		/** [Method] Retrieves all descendant components which match the passed function  
		* @param fn Function The matcher function. It will be called with a single argument, the component being tested. 
		* @param scope Object The scope in which to run the function. If not specified, it will default to the active component. 
		* @returns Ext.Component[] Components matched by the passed function 
		*/
		static queryBy( fn?:any, scope?:any ): Ext.IComponent[];

		/** [Method] Finds a component at any level under this container matching the id itemId  
		* @param id String The id to find 
		* @returns Ext.Component The matching id, null if not found 
		*/
		static queryById( id?:string ): Ext.IComponent;

		/** [Method] Called by Component doAutoRender Register a Container configured floating true with this Component s ZIndexManager  
		* @param cmp Object 
		*/
		static registerFloatingItem( cmp?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a component from this container  
		* @param component Object 
		* @param autoDestroy Object 
		* @returns Ext.Component component The Component that was removed. 
		*/
		static remove( component?:any, autoDestroy?:any ): Ext.IComponent;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes all components from this container  
		* @param autoDestroy Boolean True to automatically invoke the removed Component's Ext.Component.destroy function. Defaults to the value of this Container's autoDestroy config. 
		* @returns Ext.Component[] Array of the removed components 
		*/
		static removeAll( autoDestroy?:boolean ): Ext.IComponent[];

		/** [Method] Remove any anchor to this element  
		* @returns Ext.util.Positionable this 
		*/
		static removeAnchor(): Ext.util.IPositionable;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a CSS class from the body element  
		* @param cls String The class to remove 
		* @returns Ext.panel.Panel this 
		*/
		static removeBodyCls( cls?:string ): Ext.panel.IPanel;

		/** [Method] Removes a CSS class from the top level element representing this component  
		* @param cls String/String[] The CSS class name to remove. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		static removeClass( cls?:any ): Ext.IComponent;

		/** [Method] Removes a CSS class from the top level element representing this component  
		* @param cls String/String[] The CSS class name to remove. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		static removeCls( cls?:any ): Ext.IComponent;

		/** [Method] Removes a cls to the uiCls array which will also call removeUIClsFromElement and removes it from all elements of thi  
		* @param cls String/String[] A string or an array of strings to remove to the uiCls. 
		*/
		static removeClsWithUI( cls?:any ): void;

		/** [Method] Removes the docked item from the panel  
		* @param item Ext.Component The Component to remove. 
		* @param autoDestroy Boolean Destroy the component after removal. 
		*/
		static removeDocked( item?:Ext.IComponent, autoDestroy?:boolean ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Method which removes a specified UI  uiCls from the components element  
		* @param cls Object 
		*/
		static removeUIClsFromElement( cls?:any ): void;

		/** [Method] Renders the Component into the passed HTML element  
		* @param container Ext.dom.Element/HTMLElement/String The element this Component should be rendered into. If it is being created from existing markup, this should be omitted. 
		* @param position String/Number The element ID or DOM node index within the container before which this component will be inserted (defaults to appending to the end of the container) 
		*/
		static render( container?:any, position?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Returns the default listener scope for a satellite of this component  
		* @param satellite Ext.mixin.Observable 
		* @param defaultScope Object 
		* @returns Object The listener scope 
		*/
		static resolveSatelliteListenerScope( satellite?:Ext.mixin.IObservable, defaultScope?:any ): any;

		/** [Method] Restores a maximized window back to its original size and position prior to being maximized and also replaces the re  
		* @param animate Boolean Pass true to animate the restore. 
		* @returns Ext.window.Window this 
		*/
		static restore( animate?:boolean ): Ext.window.IWindow;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Conditionally saves a single property from this object to the given state object  
		* @param propName String The name of the property to save. 
		* @param state Object The state object in to which to save the property. 
		* @param stateName String The name to use for the property in state. 
		* @returns Boolean True if the property was saved, false if not. 
		*/
		static savePropToState( propName?:string, state?:any, stateName?:string ): boolean;

		/** [Method] Gathers additional named properties of the instance and adds their current values to the passed state object  
		* @param propNames String/String[] The name (or array of names) of the property to save. 
		* @param state Object The state object in to which to save the property values. 
		* @returns Object state 
		*/
		static savePropsToState( propNames?:any, state?:any ): any;

		/** [Method] Saves the state of the object to the persistence store  */
		static saveState(): void;

		/** [Method] Scrolls this Component by the passed delta values optionally animating  
		* @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties. 
		* @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object. 
		* @param animate Boolean/Object Animate flag/config object if the delta values were passed separately. 
		*/
		static scrollBy( deltaX?:any, deltaY?:any, animate?:any ): void;

		/** [Method] Scrolls this component to the specified x and y coordinates  
		* @param x Number 
		* @param y Number 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		*/
		static scrollTo( x?:number, y?:number, animate?:any ): void;

		/** [Method] Ensures that all effects queued after sequenceFx is called on this object are run in sequence  
		* @returns Object this 
		*/
		static sequenceFx(): any;

		/** [Method] Sets a component as the active layout item  
		* @param item Ext.Component/Number/String The component, component id, itemId, or index of component. 
		* @returns Ext.Component the activated component or false when nothing activated. False is returned also when trying to activate an already active item. 
		*/
		static setActiveItem( item?:any ): Ext.IComponent;

		/** [Method] Sets the value of alwaysOnTop  
		* @param alwaysOnTop Boolean/Number The new value. 
		*/
		static setAlwaysOnTop( alwaysOnTop?:any ): void;

		/** [Method] Sets the overflow on the content element of the component  
		* @param scroll Boolean True to allow the Component to auto scroll. 
		* @returns Ext.Component this 
		*/
		static setAutoScroll( scroll?:boolean ): Ext.IComponent;

		/** [Method] Sets the value of bind  
		* @param bind Object The new value. 
		*/
		static setBind( bind?:any ): void;

		/** [Method] Sets the body style according to the passed parameters  
		* @param style Mixed A full style specification string, or object, or the name of a style property to set. 
		* @param value String If the first param was a style property name, the style property value. 
		* @returns Ext.panel.Panel this 
		*/
		static setBodyStyle( style?:any, value?:string ): Ext.panel.IPanel;

		/** [Method]  
		* @param border String/Number The border, see border. If a falsey value is passed the border will be removed. 
		*/
		static setBorder( border?:any ): void;

		/** [Method] Sets the element s box  
		* @param box Object The box to fill {x, y, width, height} 
		* @returns Ext.util.Positionable this 
		*/
		static setBox( box?:any ): Ext.util.IPositionable;

		/** [Method] Sets the value of childEls  
		* @param childEls Object/String[]/Object[] The new value. 
		*/
		static setChildEls( childEls?:any ): void;

		/** [Method] Collapses or expands the panel  
		* @param collapsed Boolean true to collapse the panel, false to expand it. 
		*/
		static setCollapsed( collapsed?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Sets the value of controller  
		* @param controller String/Object/Ext.app.ViewController The new value. 
		*/
		static setController( controller?:any ): void;

		/** [Method] Sets the value of data  
		* @param data Object The new value. 
		*/
		static setData( data?:any ): void;

		/** [Method] Sets the value of defaultListenerScope  
		* @param defaultListenerScope Boolean The new value. 
		*/
		static setDefaultListenerScope( defaultListenerScope?:boolean ): void;

		/** [Method] Enable or disable the component  
		* @param disabled Boolean true to disable. 
		*/
		static setDisabled( disabled?:boolean ): void;

		/** [Method] Sets the dock position of this component in its parent panel  
		* @param dock Object The dock position. 
		* @returns Ext.Component this 
		*/
		static setDock( dock?:any ): Ext.IComponent;

		/** [Method] Sets the dock position of this component in its parent panel  
		* @param dock Object The dock position. 
		* @returns Ext.Component this 
		*/
		static setDocked( dock?:any ): Ext.IComponent;

		/** [Method] Sets the height of the component  
		* @param height Number The new height to set. This may be one of:  A Number specifying the new height in pixels. A String used to set the CSS height style. undefined to leave the height unchanged. null to clear the height.  
		* @returns Ext.Component this 
		*/
		static setHeight( height?:number ): Ext.IComponent;

		/** [Method] Sets the hidden state of this component  
		* @param hidden Boolean 
		* @returns Ext.Component 
		*/
		static setHidden( hidden?:boolean ): Ext.IComponent;

		/** [Method] Adds the specified icon to the dialog  
		* @param icon String A CSS classname specifying the icon's background image url, or empty string to clear the icon 
		* @param width Number The width of the icon. If not specified, the default is used 
		* @param height Number The height of the icon. If not specified, the default is used 
		* @returns Ext.window.MessageBox this 
		*/
		static setIcon( icon?:string, width?:number, height?:number ): Ext.window.IMessageBox;

		/** [Method] Reconfigures the initially configured layout  
		* @param configuration Object object for the layout 
		*/
		static setLayout( configuration?:any ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] This method allows you to show or hide a LoadMask on top of this component  
		* @param load Boolean/Object/String True to show the default LoadMask, a config object that will be passed to the LoadMask constructor, or a message String to show. False to hide the current LoadMask. 
		* @returns Ext.LoadMask The LoadMask instance that has just been shown. 
		*/
		static setLoading( load?:any ): Ext.ILoadMask;

		/** [Method] Overridden in Ext rtl Component  
		* @param x Object 
		* @returns Ext.util.Positionable this 
		*/
		static setLocalX( x?:any ): Ext.util.IPositionable;

		/** [Method] Overridden in Ext rtl Component  
		* @param x Object 
		* @param y Object 
		* @returns Ext.util.Positionable this 
		*/
		static setLocalXY( x?:any, y?:any ): Ext.util.IPositionable;

		/** [Method] Sets the local y coordinate of this element using CSS style  
		* @param y Object 
		* @returns Ext.util.Positionable this 
		*/
		static setLocalY( y?:any ): Ext.util.IPositionable;

		/** [Method] Sets the margin on the target element  
		* @param margin Number/String The margin to set. See the margin config. 
		*/
		static setMargin( margin?:any ): void;

		/** [Method] Sets the value of maxHeight  
		* @param maxHeight Number The new value. 
		*/
		static setMaxHeight( maxHeight?:number ): void;

		/** [Method] Sets the value of maxWidth  
		* @param maxWidth Number The new value. 
		*/
		static setMaxWidth( maxWidth?:number ): void;

		/** [Method] Sets the value of minHeight  
		* @param minHeight Number The new value. 
		*/
		static setMinHeight( minHeight?:number ): void;

		/** [Method] Sets the value of minWidth  
		* @param minWidth Number The new value. 
		*/
		static setMinWidth( minWidth?:number ): void;

		/** [Method] Sets the overflow x y on the content element of the component  
		* @param overflowX String The overflow-x value. 
		* @param overflowY String The overflow-y value. 
		* @returns Ext.Component this 
		*/
		static setOverflowXY( overflowX?:string, overflowY?:string ): Ext.IComponent;

		/** [Method] Sets the page XY position of the component  
		* @param x Number/Number[] The new x position or an array of [x,y]. 
		* @param y Number The new y position. 
		* @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration. 
		* @returns Ext.Component this 
		*/
		static setPagePosition( x?:any, y?:number, animate?:any ): Ext.IComponent;

		/** [Method] Sets the left and top of the component  
		* @param x Number/Number[]/Object The new left, an array of [x,y], or animation config object containing x and y properties. 
		* @param y Number The new top. 
		* @param animate Boolean/Object If true, the Component is animated into its new position. You may also pass an animation configuration. 
		* @returns Ext.Component this 
		*/
		static setPosition( x?:any, y?:number, animate?:any ): Ext.IComponent;

		/** [Method] Sets the value of publishes  
		* @param publishes String/String[]/Object The new value. 
		*/
		static setPublishes( publishes?:any ): void;

		/** [Method] Sets the value of reference  
		* @param reference String The new value. 
		*/
		static setReference( reference?:string ): void;

		/** [Method] This method changes the region config property for this border region  
		* @param region String The new region value ("north", "south", "east" or "west"). 
		* @returns String The previous value of the region property. 
		*/
		static setRegion( region?:string ): string;

		/** [Method] Sets the x scroll position for this component  
		* @param x Number 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		*/
		static setScrollX( x?:number, animate?:any ): void;

		/** [Method] Sets the y scroll position for this component  
		* @param y Number 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		*/
		static setScrollY( y?:number, animate?:any ): void;

		/** [Method] Sets the value of scrollable  
		* @param scrollable Boolean/String/Object The new value. 
		*/
		static setScrollable( scrollable?:any ): void;

		/** [Method] Sets the value of session  
		* @param session Boolean/Object/Ext.data.Session The new value. 
		*/
		static setSession( session?:any ): void;

		/** [Method] Sets the width and height of this Component  
		* @param width Number/String/Object The new width to set. This may be one of:  A Number specifying the new width in pixels. A String used to set the CSS width style. A size object in the format {width: widthValue, height: heightValue}. undefined to leave the width unchanged.  
		* @param height Number/String The new height to set (not required if a size object is passed as the first arg). This may be one of:  A Number specifying the new height in pixels. A String used to set the CSS height style. Animation may not be used. undefined to leave the height unchanged.  
		* @returns Ext.Component this 
		*/
		static setSize( width?:any, height?:any ): Ext.IComponent;

		/** [Method] Sets the style for this Component s primary element  
		* @param property String/Object The style property to be set, or an object of multiple styles. 
		* @param value String The value to apply to the given property, or null if an object was passed. 
		* @returns Ext.Component this 
		*/
		static setStyle( property?:any, value?:string ): Ext.IComponent;

		/** [Method] Set the tabIndex property for this Focusable  
		* @param newTabIndex Number new tabIndex to set 
		*/
		static setTabIndex( newTabIndex?:number ): void;

		/** [Method] Sets the title of this panel  
		* @param title String The new title 
		*/
		static setTitle( title?:string ): void;

		/** [Method] Sets the value of twoWayBindable  
		* @param twoWayBindable String/String[]/Object The new value. 
		*/
		static setTwoWayBindable( twoWayBindable?:any ): void;

		/** [Method] Sets the UI for the component  
		* @param ui String The new UI for the component. 
		*/
		static setUI( ui?:string ): void;

		/** [Method] Sets the value of viewModel  
		* @param viewModel String/Object/Ext.app.ViewModel The new value. 
		*/
		static setViewModel( viewModel?:any ): void;

		/** [Method] Convenience function to hide or show this component by Boolean  
		* @param visible Boolean true to show, false to hide. 
		* @returns Ext.Component this 
		*/
		static setVisible( visible?:boolean ): Ext.IComponent;

		/** [Method] Sets the weight config property for this component  
		* @param weight Number The new weight value. 
		* @returns Number The previous value of the weight property. 
		*/
		static setWeight( weight?:number ): number;

		/** [Method] Sets the width of the component  
		* @param width Number The new width to set. This may be one of:  A Number specifying the new width in pixels. A String used to set the CSS width style. undefined to leave the width unchanged. null to clear the width.  
		* @returns Ext.Component this 
		*/
		static setWidth( width?:number ): Ext.IComponent;

		/** [Method] Sets the X position of the DOM element based on page coordinates  
		* @param x Object 
		* @param animate Object 
		* @returns Ext.util.Positionable this 
		*/
		static setX( x?:any, animate?:any ): Ext.util.IPositionable;

		/** [Method] Sets the position of the DOM element in page coordinates  
		* @param xy Object 
		* @param animate Object 
		* @returns Ext.util.Positionable this 
		*/
		static setXY( xy?:any, animate?:any ): Ext.util.IPositionable;

		/** [Method] Sets the Y position of the DOM element based on page coordinates  
		* @param y Object 
		* @param animate Object 
		* @returns Ext.util.Positionable this 
		*/
		static setY( y?:any, animate?:any ): Ext.util.IPositionable;

		/** [Method] Displays a new message box or reinitializes an existing message box based on the config options passed in  
		* @param config Object The following config options are supported: 
		* @returns Ext.window.MessageBox this 
		*/
		static show( config?:any ): Ext.window.IMessageBox;

		/** [Method] Displays component at specific xy position  
		* @param x Number/Number[] The new x position or array of [x,y]. 
		* @param y Number The new y position 
		* @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration. 
		* @returns Ext.Component this 
		*/
		static showAt( x?:any, y?:number, animate?:any ): Ext.IComponent;

		/** [Method] Shows this component by the specified Component or Element  
		* @param component Ext.Component/Ext.dom.Element The Ext.Component or Ext.dom.Element to show the component by. 
		* @param position String Alignment position as used by Ext.util.Positionable.getAlignToXY. Defaults to defaultAlign. See alignTo for possible values. 
		* @param offsets Number[] Alignment offsets as used by Ext.util.Positionable.getAlignToXY. See alignTo for possible values. 
		* @returns Ext.Component this 
		*/
		static showBy( component?:any, position?:string, offsets?:number[] ): Ext.IComponent;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that 
		* @returns Ext.dom.Element The Element 
		*/
		static stopAnimation(): Ext.dom.IElement;

		/** [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that 
		* @returns Ext.dom.Element The Element 
		*/
		static stopFx(): Ext.dom.IElement;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Ensures that all effects queued after syncFx is called on this object are run concurrently  
		* @returns Object this 
		*/
		static syncFx(): any;

		/** [Method] Sends this Component to the back of lower z index than any other visible windows 
		* @returns Ext.Component this 
		*/
		static toBack(): Ext.IComponent;

		/** [Method] Brings this floating Component to the front of any other visible floating Components managed by the same ZIndexManag  
		* @param preventFocus Boolean Specify true to prevent the Component from being focused. 
		* @returns Ext.Component this 
		*/
		static toFront( preventFocus?:boolean ): Ext.IComponent;

		/** [Method] Shortcut for performing an expand or collapse based on the current state of the panel  
		* @returns Ext.panel.Panel this 
		*/
		static toggleCollapse(): Ext.panel.IPanel;

		/** [Method] A shortcut method for toggling between maximize and restore based on the current maximized state of the window  
		* @returns Ext.window.Window this 
		*/
		static toggleMaximize(): Ext.window.IWindow;

		/** [Method] Translates the passed page coordinates into left top css values for the element 
		* @param x Number/Array The page x or an array containing [x, y] 
		* @param y Number The page y, required if x is not an array 
		* @returns Object An object with left and top properties. e.g. {left: (value), top: (value)} 
		*/
		static translatePoints( x?:any, y?:number ): any;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes the mask applied by mask */
		static unmask(): void;

		/** [Method] Navigates up the ownership hierarchy searching for an ancestor Container which matches any passed selector or component  
		* @param selector String/Ext.Component The selector component or actual component to test. If not passed the immediate owner/activator is returned. 
		* @param limit String/Number/Ext.Component This may be a selector upon which to stop the upward scan, or a limit of the number of steps, or Component reference to stop on. 
		* @returns Ext.container.Container The matching ancestor Container (or undefined if no match was found). 
		*/
		static up( selector?:any, limit?:any ): Ext.container.IContainer;

		/** [Method] Update the content area of a component  
		* @param htmlOrData String/Object If this component has been configured with a template via the tpl config then it will use this argument as data to populate the template. If this component was not configured with a template, the components content area will be updated via Ext.Element update. 
		* @param loadScripts Boolean Only legitimate when using the html configuration. 
		* @param callback Function Only legitimate when using the html configuration. Callback to execute when scripts have finished loading. 
		*/
		static update( htmlOrData?:any, loadScripts?:boolean, callback?:any ): void;

		/** [Method] Sets the current box measurements of the component s underlying element  
		* @param box Object An object in the format {x, y, width, height} 
		* @returns Ext.Component this 
		*/
		static updateBox( box?:any ): Ext.IComponent;

		/** [Method] Updates this component s layout  
		* @param options Object An object with layout options. 
		*/
		static updateLayout( options?:any ): void;

		/** [Method] Updates a progress style message box s text and progress bar  
		* @param value Number Any number between 0 and 1 (e.g., .5) 
		* @param progressText String The progress text to display inside the progress bar. 
		* @param message String The message box's body text is replaced with the specified string (defaults to undefined so that any existing body text will not get overwritten by default unless a new value is passed in) 
		* @returns Ext.window.MessageBox this 
		*/
		static updateProgress( value?:number, progressText?:string, message?:string ): Ext.window.IMessageBox;

		/** [Method] Traverses the tree rooted at this node in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		static visitPostOrder( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at this node in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		static visitPreOrder( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Displays a message box with an infinitely auto updating progress bar  
		* @param message String The message box body text 
		* @param title String The title bar text 
		* @param config Object A Ext.ProgressBar.wait config object 
		* @returns Ext.window.MessageBox this 
		*/
		static wait( message?:string, title?:string, config?:any ): Ext.window.IMessageBox;

	}

}

declare module Ext {
	export interface IMsg extends Ext.window.IMessageBox {
	}
	export class Msg {
		/** [Property] (Number) */
		static CANCEL: number;

		/** [Property] (String) */
		static ERROR: string;

		/** [Property] (String) */
		static INFO: string;

		/** [Property] (Number) */
		static NO: number;

		/** [Property] (Number) */
		static OK: number;

		/** [Property] (Number) */
		static OKCANCEL: number;

		/** [Property] (String) */
		static QUESTION: string;

		/** [Property] (String) */
		static WARNING: string;

		/** [Property] (Number) */
		static YES: number;

		/** [Property] (Number) */
		static YESNO: number;

		/** [Property] (Number) */
		static YESNOCANCEL: number;

		/** [Property] (Boolean) */
		static _isLayoutRoot: boolean;

		/** [Property] (Ext.dom.Element) */
		static body: Ext.dom.IElement;

		/** [Property] (Object) */
		static buttonText: any;

		/** [Property] (String) */
		static contentPaddingProperty: string;

		/** [Property] (Ext.util.ComponentDragger) */
		static dd: Ext.util.IComponentDragger;

		/** [Property] (String) */
		static defaultBindProperty: string;

		/** [Property] (Number) */
		static defaultTextHeight: number;

		/** [Property] (Ext.Container) */
		static floatParent: Ext.IContainer;

		/** [Property] (Ext.util.MixedCollection) */
		static floatingItems: Ext.util.IMixedCollection;

		/** [Property] (Boolean) */
		static focusable: boolean;

		/** [Property] (Object) */
		static frameSize: any;

		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Object) */
		static initialConfig: any;

		/** [Property] (Boolean) */
		static isComponent: boolean;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Boolean) */
		static isPanel: boolean;

		/** [Property] (Boolean) */
		static isWindow: boolean;

		/** [Property] (Ext.util.AbstractMixedCollection) */
		static items: Ext.util.IAbstractMixedCollection;

		/** [Property] (Boolean) */
		static maskOnDisable: boolean;

		/** [Property] (Number) */
		static minProgressWidth: number;

		/** [Property] (Number) */
		static minPromptWidth: number;

		/** [Property] (Ext.Container) */
		static ownerCt: Ext.IContainer;

		/** [Property] (Boolean) */
		static rendered: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (Ext.ZIndexManager) */
		static zIndexManager: Ext.IZIndexManager;

		/** [Property] (Ext.Container) */
		static zIndexParent: Ext.IContainer;

		/** [Method] Adds Component s to this Container  
		* @param component Ext.Component[]|Object[]/Ext.Component.../Object... Either one or more Components to add or an Array of Components to add. See items for additional information. 
		* @returns Ext.Component[]/Ext.Component The Components that were added. 
		*/
		static add( component?:any ): any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Adds a CSS class to the body element  
		* @param cls String The class to add 
		* @returns Ext.panel.Panel this 
		*/
		static addBodyCls( cls?:string ): Ext.panel.IPanel;

		/** [Method] Adds a CSS class to the top level element representing this component  
		* @param cls String/String[] The CSS class name to add. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		static addClass( cls?:any ): Ext.IComponent;

		/** [Method] Adds a CSS class to the top level element representing this component  
		* @param cls String/String[] The CSS class name to add. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		static addCls( cls?:any ): Ext.IComponent;

		/** [Method] Adds a cls to the uiCls array which will also call addUIClsToElement and adds to all elements of this component  
		* @param classes String/String[] A string or an array of strings to add to the uiCls. 
		* @param skip Boolean true to skip adding it to the class and do it later (via the return). 
		*/
		static addClsWithUI( classes?:any, skip?:boolean ): void;

		/** [Method] Adds docked item s to the container  
		* @param items Object/Object[] The Component or array of components to add. The components must include a 'dock' parameter on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left'). 
		* @param pos Number The index at which the Component will be added 
		* @returns Ext.Component[] The added components. 
		*/
		static addDocked( items?:any, pos?:number ): Ext.IComponent[];

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Save a property to the given state object if it is not its default or configured value  
		* @param state Object The state object. 
		* @param propName String The name of the property on this object to save. 
		* @param value String The value of the state property (defaults to this[propName]). 
		* @returns Object The state object or a new object if state was null and the property was saved. 
		*/
		static addPropertyToState( state?:any, propName?:string, value?:string ): any;

		/** [Method] Add events that will trigger the state to be saved  
		* @param events String/String[] The event name or an array of event names. 
		*/
		static addStateEvents( events?:any ): void;

		/** [Method] Add tools to this panel 
		* @param tools Object[]/Ext.panel.Tool[] The tools to add 
		*/
		static addTool( tools?:any ): void;

		/** [Method] Method which adds a specified UI  uiCls to the components element  
		* @param uiCls String The UI class to add to the element. 
		*/
		static addUIClsToElement( uiCls?:string ): void;

		/** [Method] Invoked after the Panel is Collapsed  */
		static afterCollapse(): void;

		/** [Method] Called by the layout system after the Component has been laid out  */
		static afterComponentLayout(): void;

		/** [Method] Invoked after the Panel is Expanded  */
		static afterExpand(): void;

		/** [Method] Invoked after the Container has laid out and rendered if necessary its child Components  
		* @param layout Ext.layout.container.Container 
		*/
		static afterLayout( layout?:Ext.layout.container.IContainer ): void;

		/** [Method] Template method called after a Component has been positioned  
		* @param x Number 
		* @param y Number 
		*/
		static afterSetPosition( x?:number, y?:number ): void;

		/** [Method] Invoked after the Component is shown after onShow is called 
		* @param animateTarget String/Ext.dom.Element 
		* @param callback Function 
		* @param scope Object 
		*/
		static afterShow( animateTarget?:any, callback?:any, scope?:any ): void;

		/** [Method] Displays a standard read only message box with an OK button comparable to the basic JavaScript alert prompt 
		* @param title String The title bar text 
		* @param message String The message box body text 
		* @param fn Function The callback function invoked after the message box is closed. See show method for details. 
		* @param scope Object The scope (this reference) in which the callback is executed. 
		* @returns Ext.window.MessageBox this 
		*/
		static alert( title?:string, message?:string, fn?:any, scope?:any ): Ext.window.IMessageBox;

		/** [Method] Aligns the element with another element relative to the specified anchor points  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] Element animation config object 
		* @returns Ext.util.Positionable this 
		*/
		static alignTo( element?:any, position?:string, offsets?:number[] ): Ext.util.IPositionable;

		/** [Method] Anchors an element to another element and realigns it when the window is resized  
		* @param anchorToEl Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param alignment String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @param monitorScroll Boolean/Number True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay in milliseconds. 
		* @param callback Function The function to call after the animation finishes 
		* @returns Ext.util.Positionable this 
		*/
		static anchorTo( anchorToEl?:any, alignment?:string, offsets?:number[], animate?:any, monitorScroll?:any, callback?:any ): Ext.util.IPositionable;

		/** [Method] Performs custom animation on this object  
		* @param animObj Object 
		* @returns Object this 
		*/
		static animate( animObj?:any ): any;

		/** [Method] Applies the state to the object  
		* @param state Object 
		*/
		static applyState( state?:any ): void;

		/** [Method] Template method to do any pre blur processing  
		* @param e Ext.event.Event The event object 
		*/
		static beforeBlur( e?:Ext.event.IEvent ): void;

		/** [Method] Occurs before componentLayout is run  
		* @param adjWidth Number The box-adjusted width that was set. 
		* @param adjHeight Number The box-adjusted height that was set. 
		*/
		static beforeComponentLayout( adjWidth?:number, adjHeight?:number ): void;

		/** [Method] Template method to do any pre focus processing  
		* @param e Ext.event.Event The event object 
		*/
		static beforeFocus( e?:Ext.event.IEvent ): void;

		/** [Method] Occurs before componentLayout is run  */
		static beforeLayout(): void;

		/** [Method] Invoked before the Component is shown  */
		static beforeShow(): void;

		/** [Method] Bubbles up the component container hierarchy calling the specified function with each component  
		* @param fn Function The function to call 
		* @param scope Object The scope of the function. Defaults to current node. 
		* @param args Array The args to call the function with. Defaults to passing the current component. 
		* @returns Ext.Component this 
		*/
		static bubble( fn?:any, scope?:any, args?:any[] ): Ext.IComponent;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Cancel any deferred focus on this component */
		static cancelFocus(): void;

		/** [Method] Cascades down the component container heirarchy from this component passed in the first call  calling the specified  
		* @param fn Function The function to call 
		* @param scope Object The scope of the function (defaults to current component) 
		* @param args Array The args to call the function with. The current component always passed as the last argument. 
		* @returns Ext.Container this 
		*/
		static cascade( fn?:any, scope?:any, args?:any[] ): Ext.IContainer;

		/** [Method] Center this Component in its container  
		* @returns Ext.Component this 
		*/
		static center(): Ext.IComponent;

		/** [Method] Retrieves the first direct child of this container which matches the passed selector or component  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching child Ext.Component (or null if no match was found). 
		*/
		static child( selector?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] Clone the current component using the original config values passed into this instance by default  
		* @param overrides Object A new config containing any properties to override in the cloned version. An id property can be passed on this object, otherwise one will be generated to avoid duplicates. 
		* @returns Ext.Component clone The cloned copy of this component 
		*/
		static cloneConfig( overrides?:any ): Ext.IComponent;

		/** [Method] Closes the Panel  */
		static close(): void;

		/** [Method] Collapses the panel body so that the body becomes hidden  
		* @param direction String The direction to collapse towards. Must be one of  Ext.Component.DIRECTION_TOP Ext.Component.DIRECTION_RIGHT Ext.Component.DIRECTION_BOTTOM Ext.Component.DIRECTION_LEFT Defaults to collapseDirection. 
		* @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds. 
		* @returns Ext.panel.Panel this 
		*/
		static collapse( direction?:string, animate?:boolean ): Ext.panel.IPanel;

		/** [Method] Displays a confirmation message box with Yes and No buttons comparable to JavaScript s confirm 
		* @param title String The title bar text 
		* @param message String The message box body text 
		* @param fn Function The callback function invoked after the message box is closed. See show method for details. 
		* @param scope Object The scope (this reference) in which the callback is executed. 
		* @returns Ext.window.MessageBox this 
		*/
		static confirm( title?:string, message?:string, fn?:any, scope?:any ): Ext.window.IMessageBox;

		/** [Method] Determines whether the passed Component is either an immediate child of this Container or whether it is a descendant  
		* @param comp Ext.Component The Component to test. 
		* @param deep Boolean Pass true to test for the Component being a descendant at any level. 
		* @returns Boolean true if the passed Component is contained at the specified level. 
		*/
		static contains( comp?:Ext.IComponent, deep?:boolean ): boolean;

		/** [Method] converts a collapsdDir into an anchor argument for Element slideIn overridden in rtl mode to switch l and r  
		* @param collapseDir Object 
		*/
		static convertCollapseDir( collapseDir?:any ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Disables all child input fields and buttons  
		* @param silent Object 
		* @param fromParent Object 
		*/
		static disable( silent?:any, fromParent?:any ): void;

		/** [Method] This method needs to be called whenever you change something on this component that requires the Component s layout t  
		* @returns Ext.Component this 
		*/
		static doComponentLayout(): Ext.IComponent;

		/** [Method] Moves this floating Component into a constrain region  
		* @param constrainTo String/HTMLElement/Ext.dom.Element/Ext.util.Region The Element or Region into which this Component is to be constrained. Defaults to the element into which this floating Component was rendered. 
		*/
		static doConstrain( constrainTo?:any ): void;

		/** [Method] Manually force this container s layout to be recalculated  
		* @returns Ext.container.Container this 
		*/
		static doLayout(): Ext.container.IContainer;

		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found). 
		*/
		static down( selector?:any ): any;

		/** [Method] Enables all child input fields and buttons  
		* @param silent Object 
		* @param fromParent Object 
		*/
		static enable( silent?:any, fromParent?:any ): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Ensures that this component is attached to document body  
		* @param runLayout Boolean True to run the component's layout. 
		*/
		static ensureAttachedToBody( runLayout?:boolean ): void;

		/** [Method] Expands the panel body so that it becomes visible  
		* @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds. 
		* @returns Ext.panel.Panel this 
		*/
		static expand( animate?:boolean ): Ext.panel.IPanel;

		/** [Method] Find a container above this component at any level by a custom function  
		* @param fn Function The custom function to call with the arguments (container, this component). 
		* @returns Ext.container.Container The first Container for which the custom function returns true 
		*/
		static findParentBy( fn?:any ): Ext.container.IContainer;

		/** [Method] Find a container above this component at any level by xtype or class See also the up method  
		* @param xtype String/Ext.Class The xtype string for a component, or the class of the component directly 
		* @returns Ext.container.Container The first Container which matches the given xtype or class 
		*/
		static findParentByType( xtype?:any ): Ext.container.IContainer;

		/** [Method] Retrieves plugin from this component s collection by its ptype  
		* @param ptype String The Plugin's ptype as specified by the class's alias configuration. 
		* @returns Ext.plugin.Abstract plugin instance. 
		*/
		static findPlugin( ptype?:string ): Ext.plugin.IAbstract;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Try to focus this component  
		* @param selectText Mixed If applicable, true to also select all the text in this component, or an array consisting of start and end (defaults to start) position of selection. 
		* @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds). 
		* @param callback Function Only needed if the delay parameter is used. A function to call upon focus. 
		* @param scope Function Only needed if the delay parameter is used. The scope (this reference) in which to execute the callback. 
		* @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option. If this component is disabled, a closely related component will be focused and that will be returned. 
		*/
		static focus( selectText?:any, delay?:any, callback?:any, scope?:any ): Ext.IComponent;

		/** [Method] Updates this component s layout  
		* @param options Object An object with layout options. 
		*/
		static forceComponentLayout( options?:any ): void;

		/** [Method] Returns the current animation if this object has any effects actively running or queued else returns false  
		* @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false 
		*/
		static getActiveAnimation(): any;

		/** [Method] Gets the x y coordinates to align this element with another element  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @returns Number[] [x, y] 
		*/
		static getAlignToXY( element?:any, position?:string, offsets?:number[] ): number[];

		/** [Method] Returns the value of alwaysOnTop  
		* @returns Boolean/Number 
		*/
		static getAlwaysOnTop(): any;

		/** [Method] Gets the x y coordinates specified by the anchor position on the element  
		* @param anchor String The specified anchor position. See alignTo for details on supported anchor positions. 
		* @param local Boolean True to get the local (element top/left-relative) anchor position instead of page coordinates 
		* @param size Object An object containing the size to use for calculating anchor position {width: (target width), height: (target height)} (defaults to the element's current size) 
		* @returns Number[] [x, y] An array containing the element's x and y coordinates 
		*/
		static getAnchorXY( anchor?:string, local?:boolean, size?:any ): number[];

		/** [Method] Returns the value of bind  
		* @returns Object 
		*/
		static getBind(): any;

		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param contentBox Boolean If true a box for the content of the element is returned. 
		* @param local Boolean If true the element's left and top relative to its offsetParent are returned instead of page x/y. 
		* @returns Object An object in the format 
		*/
		static getBox( contentBox?:boolean, local?:boolean ): any;

		/** [Method] Implements an upward event bubbling policy  */
		static getBubbleTarget(): void;

		/** [Method] Return the immediate child Component in which the passed element is located  
		* @param el Ext.dom.Element/HTMLElement/String The element to test (or ID of element). 
		* @param deep Boolean If true, returns the deepest descendant Component which contains the passed element. 
		* @returns Ext.Component The child item which contains the passed element. 
		*/
		static getChildByElement( el?:any, deep?:boolean ): Ext.IComponent;

		/** [Method] Returns the value of childEls  
		* @returns Object/String[]/Object[] 
		*/
		static getChildEls(): any;

		/** [Method] Returns the current collapsed state of the panel  
		* @returns Boolean/String False when not collapsed, otherwise the value of collapseDirection. 
		*/
		static getCollapsed(): any;

		/** [Method] Attempts a default component lookup see Ext container Container getComponent 
		* @param comp String/Number The component id, itemId or position to find 
		* @returns Ext.Component The component (if found) 
		*/
		static getComponent( comp?:any ): Ext.IComponent;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the content region of this element for purposes of constraining floating children  */
		static getConstrainRegion(): void;

		/** [Method] Returns the X Y vector by which this Positionable s element must be translated to make a best attempt to constrain  
		* @param constrainTo Ext.util.Positionable/HTMLElement/String/Ext.util.Region The Positionable, HTMLElement, element id, or Region into which the element is to be constrained. 
		* @param proposedPosition Number[] A proposed [X, Y] position to test for validity and to produce a vector for instead of using the element's current position 
		* @param proposedSize Number[] A proposed [width, height] size to constrain instead of using the element's current size 
		* @returns Number[]/Boolean If the element needs to be translated, an [X, Y] vector by which this element must be translated. Otherwise, false. 
		*/
		static getConstrainVector( constrainTo?:any, proposedPosition?:number[], proposedSize?:number[] ): any;

		/** [Method] Returns the value of controller  
		* @returns String/Object/Ext.app.ViewController 
		*/
		static getController(): any;

		/** [Method] Returns the value of data  
		* @returns Object 
		*/
		static getData(): any;

		/** [Method] Gets the configured default focus item  */
		static getDefaultFocus(): void;

		/** [Method] Returns the value of defaultListenerScope  
		* @returns Boolean 
		*/
		static getDefaultListenerScope(): boolean;

		/** [Method] Finds a docked component by id itemId or position  
		* @param comp String/Number The id, itemId or position of the docked component (see getComponent for details) 
		* @returns Ext.Component The docked component (if found) 
		*/
		static getDockedComponent( comp?:any ): Ext.IComponent;

		/** [Method] Retrieves an array of all currently docked Components  
		* @param selector String A ComponentQuery selector string to filter the returned items. 
		* @param beforeBody Boolean An optional flag to limit the set of items to only those before the body (true) or after the body (false). All components are returned by default. 
		* @returns Ext.Component[] The array of docked components meeting the specified criteria. 
		*/
		static getDockedItems( selector?:string, beforeBody?:boolean ): Ext.IComponent[];

		/** [Method] Retrieves the top level element representing this component  
		* @returns Ext.dom.Element 
		*/
		static getEl(): Ext.dom.IElement;

		/** [Method] Returns the focus styling holder element associated with this Focusable  
		* @returns Ext.Element The focus styling element. 
		*/
		static getFocusClsEl(): Ext.IElement;

		/** [Method] Returns the focus holder element associated with this Window  
		* @returns Ext.dom.Element/Ext.Component the focus holding element or Component. 
		*/
		static getFocusEl(): any;

		/** [Method] Gets the Header for this panel  
		* @returns Ext.panel.Header 
		*/
		static getHeader(): Ext.panel.IHeader;

		/** [Method] Gets the current height of the component s underlying element  
		* @returns Number 
		*/
		static getHeight(): number;

		/** [Method] Retrieves the id of this component  
		* @returns String 
		*/
		static getId(): string;

		/** [Method] This method returns an object containing the inherited properties for this instance  
		* @param inner Boolean Pass true to return inheritedStateInner instead of the normal inheritedState object. This is only needed internally and should not be passed by user code. 
		* @returns Object The inheritedState object containing inherited properties. 
		*/
		static getInherited( inner?:boolean ): any;

		/** [Method] This method returns the value of a config property that may be inherited from some ancestor  
		* @param property String The name of the config property to return. 
		* @param skipThis Boolean Pass true if the property should be ignored if found on this instance. In other words, true means the property must be inherited and not explicitly set on this instance. 
		* @returns Mixed The value of the requested property. 
		*/
		static getInheritedConfig( property?:string, skipThis?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] This function takes the position argument passed to onRender and returns a DOM element that you can use in the insert  
		* @param position String/Number/Ext.dom.Element/HTMLElement Index, element id or element you want to put this component before. 
		* @returns HTMLElement DOM element that you can use in the insertBefore 
		*/
		static getInsertPosition( position?:any ): HTMLElement;

		/** [Method] Returns the value of itemId assigned to this component or when that is not set returns the value of id  
		* @returns String 
		*/
		static getItemId(): string;

		/** [Method] Returns the layout instance currently associated with this Container  
		* @returns Ext.layout.container.Container The layout 
		*/
		static getLayout(): Ext.layout.container.IContainer;

		/** [Method] Gets the Ext ComponentLoader for this Component  
		* @returns Ext.ComponentLoader The loader instance, null if it doesn't exist. 
		*/
		static getLoader(): Ext.IComponentLoader;

		/** [Method] Overridden in Ext rtl Component  
		* @returns Number The local x coordinate 
		*/
		static getLocalX(): number;

		/** [Method] Overridden in Ext rtl Component  
		* @returns Number[] The local XY position of the element 
		*/
		static getLocalXY(): number[];

		/** [Method] Returns the y coordinate of this element reletive to its offsetParent  
		* @returns Number The local y coordinate 
		*/
		static getLocalY(): number;

		/** [Method] Returns the element which is masked by the mask method or into which the LoadMask is rendered into  */
		static getMaskTarget(): void;

		/** [Method] Returns the value of maxHeight  
		* @returns Number 
		*/
		static getMaxHeight(): number;

		/** [Method] Returns the value of maxWidth  
		* @returns Number 
		*/
		static getMaxWidth(): number;

		/** [Method] Returns the value of minHeight  
		* @returns Number 
		*/
		static getMinHeight(): number;

		/** [Method] Returns the value of minWidth  
		* @returns Number 
		*/
		static getMinWidth(): number;

		/** [Method] Returns the offsets of this element from the passed element  
		* @param offsetsTo Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or element id to get get the offsets from. 
		* @returns Number[] The XY page offsets (e.g. [100, -200]) 
		*/
		static getOffsetsTo( offsetsTo?:any ): number[];

		/** [Method] Retrieves a plugin from this component s collection by its pluginId  
		* @param pluginId String 
		* @returns Ext.plugin.Abstract plugin instance. 
		*/
		static getPlugin( pluginId?:string ): Ext.plugin.IAbstract;

		/** [Method] Gets the current XY position of the component s underlying element  
		* @param local Boolean If true the element's left and top are returned instead of page XY. 
		* @returns Number[] The XY position of the element (e.g., [100, 200]) 
		*/
		static getPosition( local?:boolean ): number[];

		/** [Method] Returns the value of publishes  
		* @returns String/String[]/Object 
		*/
		static getPublishes(): any;

		/** [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th  
		* @param deep Object 
		*/
		static getRefItems( deep?:any ): void;

		/** [Method] Used by ComponentQuery and the up method to find the owning Component in the linkage hierarchy  */
		static getRefOwner(): void;

		/** [Method] Returns the value of reference  
		* @returns String 
		*/
		static getReference(): string;

		/** [Method] Returns an object holding the descendants of this view keyed by their reference  
		* @returns Object An object with each child reference. This will be null if this container has no descendants with a reference specified. 
		*/
		static getReferences(): any;

		/** [Method] Returns a region object that defines the area of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" properties. 
		*/
		static getRegion(): Ext.util.IRegion;

		/** [Method] Returns the x scroll position for this component  
		* @returns Number 
		*/
		static getScrollX(): number;

		/** [Method] Returns the y scroll position for this component  
		* @returns Number 
		*/
		static getScrollY(): number;

		/** [Method] Returns the value of scrollable  
		* @returns Boolean/String/Object 
		*/
		static getScrollable(): any;

		/** [Method] Returns the value of session  
		* @returns Boolean/Object/Ext.data.Session 
		*/
		static getSession(): any;

		/** [Method] Gets the current size of the component s underlying element  
		* @param contentSize Boolean true to get the width/size minus borders and padding 
		* @returns Object An object containing the element's size: 
		*/
		static getSize( contentSize?:boolean ): any;

		/** [Method] Returns an object that describes how this component s width and height are managed  
		* @param ownerCtSizeModel Object 
		* @returns Object The size model for this component. 
		*/
		static getSizeModel( ownerCtSizeModel?:any ): any;

		/** [Method] Return the actual tabIndex for this Focusable  
		* @returns Number tabIndex attribute value 
		*/
		static getTabIndex(): number;

		/** [Method] Returns the value of twoWayBindable  
		* @returns String/String[]/Object 
		*/
		static getTwoWayBindable(): any;

		/** [Method] Returns the value of viewModel  
		* @returns String/Object/Ext.app.ViewModel 
		*/
		static getViewModel(): any;

		/** [Method] Returns the content region of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" member data. 
		*/
		static getViewRegion(): Ext.util.IRegion;

		/** [Method] Gets the current width of the component s underlying element  
		* @returns Number 
		*/
		static getWidth(): number;

		/** [Method] Gets the current X position of the DOM element based on page coordinates  
		* @returns Number The X position of the element 
		*/
		static getX(): number;

		/** [Method] Gets the xtype for this component as registered with Ext ComponentManager  
		* @returns String The xtype 
		*/
		static getXType(): string;

		/** [Method] Returns this Component s xtype hierarchy as a slash delimited string  
		* @returns String The xtype hierarchy string 
		*/
		static getXTypes(): string;

		/** [Method] Gets the current position of the DOM element based on page coordinates  
		* @returns Number[] The XY position of the element 
		*/
		static getXY(): number[];

		/** [Method] Gets the current Y position of the DOM element based on page coordinates  
		* @returns Number The Y position of the element 
		*/
		static getY(): number;

		/** [Method] Returns the current animation if this object has any effects actively running or queued else returns false  
		* @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false 
		*/
		static hasActiveFx(): any;

		/** [Method] Checks if the specified CSS class exists on this element s DOM node  
		* @param className String The CSS class to check for. 
		* @returns Boolean true if the class exists, else false. 
		*/
		static hasCls( className?:string ): boolean;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Checks if there is currently a specified uiCls  
		* @param cls String The cls to check. 
		*/
		static hasUICls( cls?:string ): void;

		/** [Method] Hides this Component setting it to invisible using the configured hideMode  
		* @returns Ext.Component this 
		*/
		static hide(): Ext.IComponent;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Initialize any events on this component */
		static initEvents(): void;

		/** [Method] Template method to do any Focusable related initialization that does not involve event listeners creation  */
		static initFocusable(): void;

		/** [Method] Template method to do any event listener initialization for a Focusable  */
		static initFocusableEvents(): void;

		/** [Method] Called by getInherited to initialize the inheritedState the first time it is requested  
		* @param inheritedState Object 
		* @param inheritedStateInner Object 
		*/
		static initInheritedState( inheritedState?:any, inheritedStateInner?:any ): void;

		/** [Method] This method is called to initialize the items collection  */
		static initItems(): void;

		/** [Method] Inserts a Component into this Container at a specified index  
		* @param index Number The index at which the Component will be inserted into the Container's items collection 
		* @param component Ext.Component/Object/Ext.Component[]/Object[] The child Component or config object to insert. Ext uses lazy rendering, and will only render the inserted Component should it become necessary. A Component config object may be passed in order to avoid the overhead of constructing a real Component object if lazy rendering might mean that the inserted Component will not be rendered immediately. To take advantage of this 'lazy instantiation', set the Ext.Component.xtype config property to the registered type of the Component wanted. You can pass an array of Component instances and config objects. For a list of all available xtypes, see Ext.enums.Widget. 
		* @returns Ext.Component component The Component (or config object) that was inserted with the Container's default config values applied. 
		*/
		static insert( index?:number, component?:any ): Ext.IComponent;

		/** [Method] Inserts docked item s to the panel at the indicated position  
		* @param pos Number The index at which the Component will be inserted 
		* @param items Object/Object[] The Component or array of components to add. The components must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left'). 
		*/
		static insertDocked( pos?:number, items?:any ): void;

		/** [Method] Tests whether this Component matches a ComponentQuery selector string  
		* @param selector String The selector string to test against. 
		* @returns Boolean true if this Component matches the selector. 
		*/
		static is( selector?:string ): boolean;

		/** [Method] Determines whether this Component is an ancestor of the passed Component  
		* @param possibleDescendant Ext.Component The Component to test for presence within this Component's subtree. 
		*/
		static isAncestor( possibleDescendant?:Ext.IComponent ): void;

		/** [Method] Determines whether this component is the descendant of a passed component  
		* @param ancestor Ext.Component A Component which may contain this Component. 
		* @returns Boolean true if the component is the descendant of the passed component, otherwise false. 
		*/
		static isDescendantOf( ancestor?:Ext.IComponent ): boolean;

		/** [Method] Method to determine whether this Component is currently disabled  
		* @returns Boolean the disabled state of this Component. 
		*/
		static isDisabled(): boolean;

		/** [Method] Method to determine whether this Component is draggable  
		* @returns Boolean the draggable state of this component. 
		*/
		static isDraggable(): boolean;

		/** [Method] Method to determine whether this Component is droppable  
		* @returns Boolean the droppable state of this component. 
		*/
		static isDroppable(): boolean;

		/** [Method] Method to determine whether this Component is floating  
		* @returns Boolean the floating state of this component. 
		*/
		static isFloating(): boolean;

		/** [Method] Determine if this Focusable can receive focus at this time  
		* @param deep Boolean Optionally determine if the container itself is focusable, or if container's focus is delegated to a child component and that child is focusable. 
		* @returns Boolean True if component is focusable, false if not. 
		*/
		static isFocusable( deep?:boolean ): boolean;

		/** [Method] Method to determine whether this Component is currently set to hidden  
		* @returns Boolean the hidden state of this Component. 
		*/
		static isHidden(): boolean;

		/** [Method] Determines whether this Component is the root of a layout  */
		static isLayoutRoot(): void;

		/** [Method] Returns true if layout is suspended for this component  
		* @returns Boolean true layout of this component is suspended. 
		*/
		static isLayoutSuspended(): boolean;

		/** [Method] Returns masked state for this Component  
		* @param deep Boolean True to look up this Component's parent masked state. 
		* @returns Boolean True if masked, false otherwise. 
		*/
		static isMasked( deep?:boolean ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Returns true if this component is visible  
		* @param deep Object 
		* @returns Boolean true if this component is visible, false otherwise. 
		*/
		static isVisible( deep?:any ): boolean;

		/** [Method] Tests whether or not this Component is of a specific xtype  
		* @param xtype String The xtype to check for this Component 
		* @param shallow Boolean true to check whether this Component is directly of the specified xtype, false to check whether this Component is descended from the xtype. 
		* @returns Boolean true if this component descends from the specified xtype, false otherwise. 
		*/
		static isXType( xtype?:string, shallow?:boolean ): boolean;

		/** [Method] Gets the controller that controls this view  
		* @param skipThis Boolean true to not consider the controller directly attached to this view (if it exists). 
		* @returns Ext.app.ViewController The controller. null if no controller is found. 
		*/
		static lookupController( skipThis?:boolean ): Ext.app.IViewController;

		/** [Method] Gets a reference to a child specified using the reference configuration  
		* @param key String The name of the reference. 
		* @returns Ext.Component The referenced component or null if it is not found. 
		*/
		static lookupReference( key?:string ): Ext.IComponent;

		/** [Method] Returns the Ext data Session for this instance  
		* @param skipThis Boolean Pass true to ignore a session configured on this instance and only consider an inherited session. 
		* @returns Ext.data.Session 
		*/
		static lookupSession( skipThis?:boolean ): Ext.data.ISession;

		/** [Method] Returns the Ext app ViewModel for this instance  
		* @param skipThis Boolean Pass true to ignore a viewModel configured on this instance and only consider an inherited view model. 
		* @returns Ext.app.ViewModel 
		*/
		static lookupViewModel( skipThis?:boolean ): Ext.app.IViewModel;

		/** [Method] Masks this component with a semi opaque layer and makes the contents unavailable to clicks  
		* @param msg String A message to show in the center of the mask layer. 
		* @param msgCls String A CSS class name to use on the message element in the center of the layer. 
		*/
		static mask( msg?:string, msgCls?:string ): void;

		/** [Method] Fits the window within its current container and automatically replaces the maximize tool button with the restore 
		* @param animate Boolean Pass true to animate this Window to full size. 
		* @returns Ext.window.Window this 
		*/
		static maximize( animate?:boolean ): Ext.window.IWindow;

		/** [Method] Placeholder method for minimizing the window  
		* @returns Ext.window.Window this 
		*/
		static minimize(): Ext.window.IWindow;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Moves a Component within the Container  
		* @param fromIdx Number/Ext.Component The index/component to move. 
		* @param toIdx Number The new index for the Component. 
		* @returns Ext.Component component The Component that was moved. 
		*/
		static move( fromIdx?:any, toIdx?:number ): Ext.IComponent;

		/** [Method] Moves the given item into this container following after  
		* @param item Ext.Component The item to move. May be a component configuration object. 
		* @param after Ext.Component The reference component. May be null. 
		* @returns Ext.Component The moved item. 
		*/
		static moveAfter( item?:Ext.IComponent, after?:Ext.IComponent ): Ext.IComponent;

		/** [Method] Moves the given item into this container in front of before  
		* @param item Object/Ext.Component The item to move. May be a component configuration object. 
		* @param before Ext.Component The reference component. May be null. 
		* @returns Ext.Component The moved item. 
		*/
		static moveBefore( item?:any, before?:Ext.IComponent ): Ext.IComponent;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] A method to find a child component after the passed child parameter  
		* @param child Ext.Component The child to use as a starting point to find the next child. 
		* @param selector String A Ext.ComponentQuery selector to find the next child. This will return the next child matching this selector. This parameter is optional. 
		* @returns Ext.Component The next child found, null if no child found. 
		*/
		static nextChild( child?:Ext.IComponent, selector?:string ): Ext.IComponent;

		/** [Method] Returns the next node in the Component tree in tree traversal order  
		* @param selector String A ComponentQuery selector to filter the following nodes. 
		* @returns Ext.Component The next node (or the next node which matches the selector). Returns null if there is no matching node. 
		*/
		static nextNode( selector?:string ): Ext.IComponent;

		/** [Method] Returns the next sibling of this Component  
		* @param selector String A ComponentQuery selector to filter the following items. 
		* @returns Ext.Component The next sibling (or the next sibling which matches the selector). Returns null if there is no matching sibling. 
		*/
		static nextSibling( selector?:string ): Ext.IComponent;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] This method is invoked after a new Component has been added  
		* @param component Ext.Component 
		* @param position Number 
		*/
		static onAdd( component?:Ext.IComponent, position?:number ): void;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  
		* @param container Object 
		* @param pos Object 
		* @param instanced Object 
		*/
		static onAdded( container?:any, pos?:any, instanced?:any ): void;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] This method is invoked before adding a new child Component  
		* @param item Ext.Component 
		*/
		static onBeforeAdd( item?:Ext.IComponent ): void;

		/** [Method] Invoked when this component has first achieved size  */
		static onBoxReady(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		static onDestroy(): void;

		/** [Method] Allows addition of behavior to the disable operation  */
		static onDisable(): void;

		/** [Method] Invoked after a docked item is added to the Panel  
		* @param component Ext.Component 
		*/
		static onDockedAdd( component?:Ext.IComponent ): void;

		/** [Method] Invoked after a docked item is removed from the Panel  
		* @param component Ext.Component 
		*/
		static onDockedRemove( component?:Ext.IComponent ): void;

		/** [Method] Allows addition of behavior to the enable operation  */
		static onEnable(): void;

		/** [Method] Called when focus enters this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		static onFocusEnter( e?:Ext.event.IEvent ): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		static onFocusLeave( e?:Ext.event.IEvent ): void;

		/** [Method] Allows addition of behavior to the hide operation  
		* @param animateTarget Object 
		* @param cb Object 
		* @param scope Object 
		*/
		static onHide( animateTarget?:any, cb?:any, scope?:any ): void;

		/** [Method] Called after the component is moved this method is empty by default but can be implemented by any subclass that need  */
		static onPosition(): void;

		/** [Method] This method is invoked after a new Component has been removed  
		* @param component Ext.Component 
		* @param autoDestroy Boolean 
		*/
		static onRemove( component?:Ext.IComponent, autoDestroy?:boolean ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param destroying Object 
		*/
		static onRemoved( destroying?:any ): void;

		/** [Method] Called when the component is resized  */
		static onResize(): void;

		/** [Method] Invoked when a scroll operation is completed via this component s scroller  
		* @param x Number The current x position 
		* @param y Number The current y position 
		*/
		static onScrollEnd( x?:number, y?:number ): void;

		/** [Method] Invoked when this component is scrolled via its scroller  
		* @param x Number The current x position 
		* @param y Number The current y position 
		*/
		static onScrollMove( x?:number, y?:number ): void;

		/** [Method] Invoked when a scroll is initiated on this component via its scroller  
		* @param x Number The current x position 
		* @param y Number The current y position 
		*/
		static onScrollStart( x?:number, y?:number ): void;

		/** [Method] Allows addition of behavior to the show operation  */
		static onShow(): void;

		/** [Method] Invoked after the afterShow method is complete  
		* @param callback Function 
		* @param scope Object 
		*/
		static onShowComplete( callback?:any, scope?:any ): void;

		/** [Method] Template method to do any post blur processing  
		* @param e Ext.event.Event The event object 
		*/
		static postBlur( e?:Ext.event.IEvent ): void;

		/** [Method] Template method to do any post focus processing  
		* @param e Ext.event.Event The event object 
		*/
		static postFocus( e?:Ext.event.IEvent ): void;

		/** [Method] A method to find a child component before the passed child parameter  
		* @param child Ext.Component The child to use as a starting point to find the previous child. 
		* @param selector String A Ext.ComponentQuery selector to find the previous child. This will return the first child matching this selector. This parameter is optional. 
		* @returns Ext.Component The previous child found, null if no child found. 
		*/
		static prevChild( child?:Ext.IComponent, selector?:string ): Ext.IComponent;

		/** [Method] Returns the previous node in the Component tree in tree traversal order  
		* @param selector String A ComponentQuery selector to filter the preceding nodes. 
		* @returns Ext.Component The previous node (or the previous node which matches the selector). Returns null if there is no matching node. 
		*/
		static previousNode( selector?:string ): Ext.IComponent;

		/** [Method] Returns the previous sibling of this Component  
		* @param selector String A ComponentQuery selector to filter the preceding items. 
		* @returns Ext.Component The previous sibling (or the previous sibling which matches the selector). Returns null if there is no matching sibling. 
		*/
		static previousSibling( selector?:string ): Ext.IComponent;

		/** [Method] Displays a message box with a progress bar  
		* @param title String The title bar text 
		* @param message String The message box body text 
		* @param progressText String The text to display inside the progress bar 
		* @returns Ext.window.MessageBox this 
		*/
		static progress( title?:string, message?:string, progressText?:string ): Ext.window.IMessageBox;

		/** [Method] Displays a message box with OK and Cancel buttons prompting the user to enter some text comparable to JavaScript s p  
		* @param title String The title bar text 
		* @param message String The message box body text 
		* @param fn Function The callback function invoked after the message box is closed. See show method for details. 
		* @param scope Object The scope (this reference) in which the callback is executed. 
		* @param multiline Boolean/Number True to create a multiline textbox using the defaultTextHeight property, or the height in pixels to create the textbox/ 
		* @param value String Default value of the text input element 
		* @returns Ext.window.MessageBox this 
		*/
		static prompt( title?:string, message?:string, fn?:any, scope?:any, multiline?:any, value?:string ): Ext.window.IMessageBox;

		/** [Method] Publish this components state to the ViewModel  
		* @param property String The name of the property to update. 
		* @param value Object The value of property. Only needed if property is given. 
		*/
		static publishState( property?:string, value?:any ): void;

		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned. 
		* @returns Ext.Component[] Components which matched the selector 
		*/
		static query( selector?:string ): Ext.IComponent[];

		/** [Method] Retrieves all descendant components which match the passed function  
		* @param fn Function The matcher function. It will be called with a single argument, the component being tested. 
		* @param scope Object The scope in which to run the function. If not specified, it will default to the active component. 
		* @returns Ext.Component[] Components matched by the passed function 
		*/
		static queryBy( fn?:any, scope?:any ): Ext.IComponent[];

		/** [Method] Finds a component at any level under this container matching the id itemId  
		* @param id String The id to find 
		* @returns Ext.Component The matching id, null if not found 
		*/
		static queryById( id?:string ): Ext.IComponent;

		/** [Method] Called by Component doAutoRender Register a Container configured floating true with this Component s ZIndexManager  
		* @param cmp Object 
		*/
		static registerFloatingItem( cmp?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a component from this container  
		* @param component Object 
		* @param autoDestroy Object 
		* @returns Ext.Component component The Component that was removed. 
		*/
		static remove( component?:any, autoDestroy?:any ): Ext.IComponent;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes all components from this container  
		* @param autoDestroy Boolean True to automatically invoke the removed Component's Ext.Component.destroy function. Defaults to the value of this Container's autoDestroy config. 
		* @returns Ext.Component[] Array of the removed components 
		*/
		static removeAll( autoDestroy?:boolean ): Ext.IComponent[];

		/** [Method] Remove any anchor to this element  
		* @returns Ext.util.Positionable this 
		*/
		static removeAnchor(): Ext.util.IPositionable;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a CSS class from the body element  
		* @param cls String The class to remove 
		* @returns Ext.panel.Panel this 
		*/
		static removeBodyCls( cls?:string ): Ext.panel.IPanel;

		/** [Method] Removes a CSS class from the top level element representing this component  
		* @param cls String/String[] The CSS class name to remove. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		static removeClass( cls?:any ): Ext.IComponent;

		/** [Method] Removes a CSS class from the top level element representing this component  
		* @param cls String/String[] The CSS class name to remove. 
		* @returns Ext.Component Returns the Component to allow method chaining. 
		*/
		static removeCls( cls?:any ): Ext.IComponent;

		/** [Method] Removes a cls to the uiCls array which will also call removeUIClsFromElement and removes it from all elements of thi  
		* @param cls String/String[] A string or an array of strings to remove to the uiCls. 
		*/
		static removeClsWithUI( cls?:any ): void;

		/** [Method] Removes the docked item from the panel  
		* @param item Ext.Component The Component to remove. 
		* @param autoDestroy Boolean Destroy the component after removal. 
		*/
		static removeDocked( item?:Ext.IComponent, autoDestroy?:boolean ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Method which removes a specified UI  uiCls from the components element  
		* @param cls Object 
		*/
		static removeUIClsFromElement( cls?:any ): void;

		/** [Method] Renders the Component into the passed HTML element  
		* @param container Ext.dom.Element/HTMLElement/String The element this Component should be rendered into. If it is being created from existing markup, this should be omitted. 
		* @param position String/Number The element ID or DOM node index within the container before which this component will be inserted (defaults to appending to the end of the container) 
		*/
		static render( container?:any, position?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Returns the default listener scope for a satellite of this component  
		* @param satellite Ext.mixin.Observable 
		* @param defaultScope Object 
		* @returns Object The listener scope 
		*/
		static resolveSatelliteListenerScope( satellite?:Ext.mixin.IObservable, defaultScope?:any ): any;

		/** [Method] Restores a maximized window back to its original size and position prior to being maximized and also replaces the re  
		* @param animate Boolean Pass true to animate the restore. 
		* @returns Ext.window.Window this 
		*/
		static restore( animate?:boolean ): Ext.window.IWindow;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Conditionally saves a single property from this object to the given state object  
		* @param propName String The name of the property to save. 
		* @param state Object The state object in to which to save the property. 
		* @param stateName String The name to use for the property in state. 
		* @returns Boolean True if the property was saved, false if not. 
		*/
		static savePropToState( propName?:string, state?:any, stateName?:string ): boolean;

		/** [Method] Gathers additional named properties of the instance and adds their current values to the passed state object  
		* @param propNames String/String[] The name (or array of names) of the property to save. 
		* @param state Object The state object in to which to save the property values. 
		* @returns Object state 
		*/
		static savePropsToState( propNames?:any, state?:any ): any;

		/** [Method] Saves the state of the object to the persistence store  */
		static saveState(): void;

		/** [Method] Scrolls this Component by the passed delta values optionally animating  
		* @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties. 
		* @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object. 
		* @param animate Boolean/Object Animate flag/config object if the delta values were passed separately. 
		*/
		static scrollBy( deltaX?:any, deltaY?:any, animate?:any ): void;

		/** [Method] Scrolls this component to the specified x and y coordinates  
		* @param x Number 
		* @param y Number 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		*/
		static scrollTo( x?:number, y?:number, animate?:any ): void;

		/** [Method] Ensures that all effects queued after sequenceFx is called on this object are run in sequence  
		* @returns Object this 
		*/
		static sequenceFx(): any;

		/** [Method] Sets a component as the active layout item  
		* @param item Ext.Component/Number/String The component, component id, itemId, or index of component. 
		* @returns Ext.Component the activated component or false when nothing activated. False is returned also when trying to activate an already active item. 
		*/
		static setActiveItem( item?:any ): Ext.IComponent;

		/** [Method] Sets the value of alwaysOnTop  
		* @param alwaysOnTop Boolean/Number The new value. 
		*/
		static setAlwaysOnTop( alwaysOnTop?:any ): void;

		/** [Method] Sets the overflow on the content element of the component  
		* @param scroll Boolean True to allow the Component to auto scroll. 
		* @returns Ext.Component this 
		*/
		static setAutoScroll( scroll?:boolean ): Ext.IComponent;

		/** [Method] Sets the value of bind  
		* @param bind Object The new value. 
		*/
		static setBind( bind?:any ): void;

		/** [Method] Sets the body style according to the passed parameters  
		* @param style Mixed A full style specification string, or object, or the name of a style property to set. 
		* @param value String If the first param was a style property name, the style property value. 
		* @returns Ext.panel.Panel this 
		*/
		static setBodyStyle( style?:any, value?:string ): Ext.panel.IPanel;

		/** [Method]  
		* @param border String/Number The border, see border. If a falsey value is passed the border will be removed. 
		*/
		static setBorder( border?:any ): void;

		/** [Method] Sets the element s box  
		* @param box Object The box to fill {x, y, width, height} 
		* @returns Ext.util.Positionable this 
		*/
		static setBox( box?:any ): Ext.util.IPositionable;

		/** [Method] Sets the value of childEls  
		* @param childEls Object/String[]/Object[] The new value. 
		*/
		static setChildEls( childEls?:any ): void;

		/** [Method] Collapses or expands the panel  
		* @param collapsed Boolean true to collapse the panel, false to expand it. 
		*/
		static setCollapsed( collapsed?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Sets the value of controller  
		* @param controller String/Object/Ext.app.ViewController The new value. 
		*/
		static setController( controller?:any ): void;

		/** [Method] Sets the value of data  
		* @param data Object The new value. 
		*/
		static setData( data?:any ): void;

		/** [Method] Sets the value of defaultListenerScope  
		* @param defaultListenerScope Boolean The new value. 
		*/
		static setDefaultListenerScope( defaultListenerScope?:boolean ): void;

		/** [Method] Enable or disable the component  
		* @param disabled Boolean true to disable. 
		*/
		static setDisabled( disabled?:boolean ): void;

		/** [Method] Sets the dock position of this component in its parent panel  
		* @param dock Object The dock position. 
		* @returns Ext.Component this 
		*/
		static setDock( dock?:any ): Ext.IComponent;

		/** [Method] Sets the dock position of this component in its parent panel  
		* @param dock Object The dock position. 
		* @returns Ext.Component this 
		*/
		static setDocked( dock?:any ): Ext.IComponent;

		/** [Method] Sets the height of the component  
		* @param height Number The new height to set. This may be one of:  A Number specifying the new height in pixels. A String used to set the CSS height style. undefined to leave the height unchanged. null to clear the height.  
		* @returns Ext.Component this 
		*/
		static setHeight( height?:number ): Ext.IComponent;

		/** [Method] Sets the hidden state of this component  
		* @param hidden Boolean 
		* @returns Ext.Component 
		*/
		static setHidden( hidden?:boolean ): Ext.IComponent;

		/** [Method] Adds the specified icon to the dialog  
		* @param icon String A CSS classname specifying the icon's background image url, or empty string to clear the icon 
		* @param width Number The width of the icon. If not specified, the default is used 
		* @param height Number The height of the icon. If not specified, the default is used 
		* @returns Ext.window.MessageBox this 
		*/
		static setIcon( icon?:string, width?:number, height?:number ): Ext.window.IMessageBox;

		/** [Method] Reconfigures the initially configured layout  
		* @param configuration Object object for the layout 
		*/
		static setLayout( configuration?:any ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] This method allows you to show or hide a LoadMask on top of this component  
		* @param load Boolean/Object/String True to show the default LoadMask, a config object that will be passed to the LoadMask constructor, or a message String to show. False to hide the current LoadMask. 
		* @returns Ext.LoadMask The LoadMask instance that has just been shown. 
		*/
		static setLoading( load?:any ): Ext.ILoadMask;

		/** [Method] Overridden in Ext rtl Component  
		* @param x Object 
		* @returns Ext.util.Positionable this 
		*/
		static setLocalX( x?:any ): Ext.util.IPositionable;

		/** [Method] Overridden in Ext rtl Component  
		* @param x Object 
		* @param y Object 
		* @returns Ext.util.Positionable this 
		*/
		static setLocalXY( x?:any, y?:any ): Ext.util.IPositionable;

		/** [Method] Sets the local y coordinate of this element using CSS style  
		* @param y Object 
		* @returns Ext.util.Positionable this 
		*/
		static setLocalY( y?:any ): Ext.util.IPositionable;

		/** [Method] Sets the margin on the target element  
		* @param margin Number/String The margin to set. See the margin config. 
		*/
		static setMargin( margin?:any ): void;

		/** [Method] Sets the value of maxHeight  
		* @param maxHeight Number The new value. 
		*/
		static setMaxHeight( maxHeight?:number ): void;

		/** [Method] Sets the value of maxWidth  
		* @param maxWidth Number The new value. 
		*/
		static setMaxWidth( maxWidth?:number ): void;

		/** [Method] Sets the value of minHeight  
		* @param minHeight Number The new value. 
		*/
		static setMinHeight( minHeight?:number ): void;

		/** [Method] Sets the value of minWidth  
		* @param minWidth Number The new value. 
		*/
		static setMinWidth( minWidth?:number ): void;

		/** [Method] Sets the overflow x y on the content element of the component  
		* @param overflowX String The overflow-x value. 
		* @param overflowY String The overflow-y value. 
		* @returns Ext.Component this 
		*/
		static setOverflowXY( overflowX?:string, overflowY?:string ): Ext.IComponent;

		/** [Method] Sets the page XY position of the component  
		* @param x Number/Number[] The new x position or an array of [x,y]. 
		* @param y Number The new y position. 
		* @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration. 
		* @returns Ext.Component this 
		*/
		static setPagePosition( x?:any, y?:number, animate?:any ): Ext.IComponent;

		/** [Method] Sets the left and top of the component  
		* @param x Number/Number[]/Object The new left, an array of [x,y], or animation config object containing x and y properties. 
		* @param y Number The new top. 
		* @param animate Boolean/Object If true, the Component is animated into its new position. You may also pass an animation configuration. 
		* @returns Ext.Component this 
		*/
		static setPosition( x?:any, y?:number, animate?:any ): Ext.IComponent;

		/** [Method] Sets the value of publishes  
		* @param publishes String/String[]/Object The new value. 
		*/
		static setPublishes( publishes?:any ): void;

		/** [Method] Sets the value of reference  
		* @param reference String The new value. 
		*/
		static setReference( reference?:string ): void;

		/** [Method] This method changes the region config property for this border region  
		* @param region String The new region value ("north", "south", "east" or "west"). 
		* @returns String The previous value of the region property. 
		*/
		static setRegion( region?:string ): string;

		/** [Method] Sets the x scroll position for this component  
		* @param x Number 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		*/
		static setScrollX( x?:number, animate?:any ): void;

		/** [Method] Sets the y scroll position for this component  
		* @param y Number 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		*/
		static setScrollY( y?:number, animate?:any ): void;

		/** [Method] Sets the value of scrollable  
		* @param scrollable Boolean/String/Object The new value. 
		*/
		static setScrollable( scrollable?:any ): void;

		/** [Method] Sets the value of session  
		* @param session Boolean/Object/Ext.data.Session The new value. 
		*/
		static setSession( session?:any ): void;

		/** [Method] Sets the width and height of this Component  
		* @param width Number/String/Object The new width to set. This may be one of:  A Number specifying the new width in pixels. A String used to set the CSS width style. A size object in the format {width: widthValue, height: heightValue}. undefined to leave the width unchanged.  
		* @param height Number/String The new height to set (not required if a size object is passed as the first arg). This may be one of:  A Number specifying the new height in pixels. A String used to set the CSS height style. Animation may not be used. undefined to leave the height unchanged.  
		* @returns Ext.Component this 
		*/
		static setSize( width?:any, height?:any ): Ext.IComponent;

		/** [Method] Sets the style for this Component s primary element  
		* @param property String/Object The style property to be set, or an object of multiple styles. 
		* @param value String The value to apply to the given property, or null if an object was passed. 
		* @returns Ext.Component this 
		*/
		static setStyle( property?:any, value?:string ): Ext.IComponent;

		/** [Method] Set the tabIndex property for this Focusable  
		* @param newTabIndex Number new tabIndex to set 
		*/
		static setTabIndex( newTabIndex?:number ): void;

		/** [Method] Sets the title of this panel  
		* @param title String The new title 
		*/
		static setTitle( title?:string ): void;

		/** [Method] Sets the value of twoWayBindable  
		* @param twoWayBindable String/String[]/Object The new value. 
		*/
		static setTwoWayBindable( twoWayBindable?:any ): void;

		/** [Method] Sets the UI for the component  
		* @param ui String The new UI for the component. 
		*/
		static setUI( ui?:string ): void;

		/** [Method] Sets the value of viewModel  
		* @param viewModel String/Object/Ext.app.ViewModel The new value. 
		*/
		static setViewModel( viewModel?:any ): void;

		/** [Method] Convenience function to hide or show this component by Boolean  
		* @param visible Boolean true to show, false to hide. 
		* @returns Ext.Component this 
		*/
		static setVisible( visible?:boolean ): Ext.IComponent;

		/** [Method] Sets the weight config property for this component  
		* @param weight Number The new weight value. 
		* @returns Number The previous value of the weight property. 
		*/
		static setWeight( weight?:number ): number;

		/** [Method] Sets the width of the component  
		* @param width Number The new width to set. This may be one of:  A Number specifying the new width in pixels. A String used to set the CSS width style. undefined to leave the width unchanged. null to clear the width.  
		* @returns Ext.Component this 
		*/
		static setWidth( width?:number ): Ext.IComponent;

		/** [Method] Sets the X position of the DOM element based on page coordinates  
		* @param x Object 
		* @param animate Object 
		* @returns Ext.util.Positionable this 
		*/
		static setX( x?:any, animate?:any ): Ext.util.IPositionable;

		/** [Method] Sets the position of the DOM element in page coordinates  
		* @param xy Object 
		* @param animate Object 
		* @returns Ext.util.Positionable this 
		*/
		static setXY( xy?:any, animate?:any ): Ext.util.IPositionable;

		/** [Method] Sets the Y position of the DOM element based on page coordinates  
		* @param y Object 
		* @param animate Object 
		* @returns Ext.util.Positionable this 
		*/
		static setY( y?:any, animate?:any ): Ext.util.IPositionable;

		/** [Method] Displays a new message box or reinitializes an existing message box based on the config options passed in  
		* @param config Object The following config options are supported: 
		* @returns Ext.window.MessageBox this 
		*/
		static show( config?:any ): Ext.window.IMessageBox;

		/** [Method] Displays component at specific xy position  
		* @param x Number/Number[] The new x position or array of [x,y]. 
		* @param y Number The new y position 
		* @param animate Boolean/Object True to animate the Component into its new position. You may also pass an animation configuration. 
		* @returns Ext.Component this 
		*/
		static showAt( x?:any, y?:number, animate?:any ): Ext.IComponent;

		/** [Method] Shows this component by the specified Component or Element  
		* @param component Ext.Component/Ext.dom.Element The Ext.Component or Ext.dom.Element to show the component by. 
		* @param position String Alignment position as used by Ext.util.Positionable.getAlignToXY. Defaults to defaultAlign. See alignTo for possible values. 
		* @param offsets Number[] Alignment offsets as used by Ext.util.Positionable.getAlignToXY. See alignTo for possible values. 
		* @returns Ext.Component this 
		*/
		static showBy( component?:any, position?:string, offsets?:number[] ): Ext.IComponent;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that 
		* @returns Ext.dom.Element The Element 
		*/
		static stopAnimation(): Ext.dom.IElement;

		/** [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that 
		* @returns Ext.dom.Element The Element 
		*/
		static stopFx(): Ext.dom.IElement;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Ensures that all effects queued after syncFx is called on this object are run concurrently  
		* @returns Object this 
		*/
		static syncFx(): any;

		/** [Method] Sends this Component to the back of lower z index than any other visible windows 
		* @returns Ext.Component this 
		*/
		static toBack(): Ext.IComponent;

		/** [Method] Brings this floating Component to the front of any other visible floating Components managed by the same ZIndexManag  
		* @param preventFocus Boolean Specify true to prevent the Component from being focused. 
		* @returns Ext.Component this 
		*/
		static toFront( preventFocus?:boolean ): Ext.IComponent;

		/** [Method] Shortcut for performing an expand or collapse based on the current state of the panel  
		* @returns Ext.panel.Panel this 
		*/
		static toggleCollapse(): Ext.panel.IPanel;

		/** [Method] A shortcut method for toggling between maximize and restore based on the current maximized state of the window  
		* @returns Ext.window.Window this 
		*/
		static toggleMaximize(): Ext.window.IWindow;

		/** [Method] Translates the passed page coordinates into left top css values for the element 
		* @param x Number/Array The page x or an array containing [x, y] 
		* @param y Number The page y, required if x is not an array 
		* @returns Object An object with left and top properties. e.g. {left: (value), top: (value)} 
		*/
		static translatePoints( x?:any, y?:number ): any;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes the mask applied by mask */
		static unmask(): void;

		/** [Method] Navigates up the ownership hierarchy searching for an ancestor Container which matches any passed selector or component  
		* @param selector String/Ext.Component The selector component or actual component to test. If not passed the immediate owner/activator is returned. 
		* @param limit String/Number/Ext.Component This may be a selector upon which to stop the upward scan, or a limit of the number of steps, or Component reference to stop on. 
		* @returns Ext.container.Container The matching ancestor Container (or undefined if no match was found). 
		*/
		static up( selector?:any, limit?:any ): Ext.container.IContainer;

		/** [Method] Update the content area of a component  
		* @param htmlOrData String/Object If this component has been configured with a template via the tpl config then it will use this argument as data to populate the template. If this component was not configured with a template, the components content area will be updated via Ext.Element update. 
		* @param loadScripts Boolean Only legitimate when using the html configuration. 
		* @param callback Function Only legitimate when using the html configuration. Callback to execute when scripts have finished loading. 
		*/
		static update( htmlOrData?:any, loadScripts?:boolean, callback?:any ): void;

		/** [Method] Sets the current box measurements of the component s underlying element  
		* @param box Object An object in the format {x, y, width, height} 
		* @returns Ext.Component this 
		*/
		static updateBox( box?:any ): Ext.IComponent;

		/** [Method] Updates this component s layout  
		* @param options Object An object with layout options. 
		*/
		static updateLayout( options?:any ): void;

		/** [Method] Updates a progress style message box s text and progress bar  
		* @param value Number Any number between 0 and 1 (e.g., .5) 
		* @param progressText String The progress text to display inside the progress bar. 
		* @param message String The message box's body text is replaced with the specified string (defaults to undefined so that any existing body text will not get overwritten by default unless a new value is passed in) 
		* @returns Ext.window.MessageBox this 
		*/
		static updateProgress( value?:number, progressText?:string, message?:string ): Ext.window.IMessageBox;

		/** [Method] Traverses the tree rooted at this node in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		static visitPostOrder( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at this node in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		static visitPreOrder( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Displays a message box with an infinitely auto updating progress bar  
		* @param message String The message box body text 
		* @param title String The title bar text 
		* @param config Object A Ext.ProgressBar.wait config object 
		* @returns Ext.window.MessageBox this 
		*/
		static wait( message?:string, title?:string, config?:any ): Ext.window.IMessageBox;

	}

}

declare module Ext.mixin {
	export interface IBindable extends Ext.IBase {
		/** [Config Option] (Object) */
		bind?: any;
		/** [Config Option] (String/Object/Ext.app.ViewController) */
		controller?: any;
		/** [Config Option] (Boolean) */
		defaultListenerScope?: boolean;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (String) */
		reference?: string;
		/** [Config Option] (Boolean/Object/Ext.data.Session) */
		session?: any;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (String/Object/Ext.app.ViewModel) */
		viewModel?: any;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Method] Returns the value of bind  
		* @returns Object 
		*/
		getBind?(): any;

		/** [Method] Returns the value of controller  
		* @returns String/Object/Ext.app.ViewController 
		*/
		getController?(): any;

		/** [Method] Returns the value of defaultListenerScope  
		* @returns Boolean 
		*/
		getDefaultListenerScope?(): boolean;

		/** [Method] Returns the value of publishes  
		* @returns String/String[]/Object 
		*/
		getPublishes?(): any;

		/** [Method] Returns the value of reference  
		* @returns String 
		*/
		getReference?(): string;

		/** [Method] Returns the value of session  
		* @returns Boolean/Object/Ext.data.Session 
		*/
		getSession?(): any;

		/** [Method] Returns the value of twoWayBindable  
		* @returns String/String[]/Object 
		*/
		getTwoWayBindable?(): any;

		/** [Method] Returns the value of viewModel  
		* @returns String/Object/Ext.app.ViewModel 
		*/
		getViewModel?(): any;

		/** [Method] Called by getInherited to initialize the inheritedState the first time it is requested  
		* @param inheritedState Object 
		*/
		initInheritedState?( inheritedState?:any ): void;

		/** [Method] Gets the controller that controls this view  
		* @param skipThis Boolean true to not consider the controller directly attached to this view (if it exists). 
		* @returns Ext.app.ViewController The controller. null if no controller is found. 
		*/
		lookupController?( skipThis?:boolean ): Ext.app.IViewController;

		/** [Method] Returns the Ext data Session for this instance  
		* @param skipThis Boolean Pass true to ignore a session configured on this instance and only consider an inherited session. 
		* @returns Ext.data.Session 
		*/
		lookupSession?( skipThis?:boolean ): Ext.data.ISession;

		/** [Method] Returns the Ext app ViewModel for this instance  
		* @param skipThis Boolean Pass true to ignore a viewModel configured on this instance and only consider an inherited view model. 
		* @returns Ext.app.ViewModel 
		*/
		lookupViewModel?( skipThis?:boolean ): Ext.app.IViewModel;

		/** [Method] Publish this components state to the ViewModel  
		* @param property String The name of the property to update. 
		* @param value Object The value of property. Only needed if property is given. 
		*/
		publishState?( property?:string, value?:any ): void;

		/** [Method] Sets the value of bind  
		* @param bind Object The new value. 
		*/
		setBind?( bind?:any ): void;

		/** [Method] Sets the value of controller  
		* @param controller String/Object/Ext.app.ViewController The new value. 
		*/
		setController?( controller?:any ): void;

		/** [Method] Sets the value of defaultListenerScope  
		* @param defaultListenerScope Boolean The new value. 
		*/
		setDefaultListenerScope?( defaultListenerScope?:boolean ): void;

		/** [Method] Sets the value of publishes  
		* @param publishes String/String[]/Object The new value. 
		*/
		setPublishes?( publishes?:any ): void;

		/** [Method] Sets the value of reference  
		* @param reference String The new value. 
		*/
		setReference?( reference?:string ): void;

		/** [Method] Sets the value of session  
		* @param session Boolean/Object/Ext.data.Session The new value. 
		*/
		setSession?( session?:any ): void;

		/** [Method] Sets the value of twoWayBindable  
		* @param twoWayBindable String/String[]/Object The new value. 
		*/
		setTwoWayBindable?( twoWayBindable?:any ): void;

		/** [Method] Sets the value of viewModel  
		* @param viewModel String/Object/Ext.app.ViewModel The new value. 
		*/
		setViewModel?( viewModel?:any ): void;

	}

}

declare module Ext.mixin {
	export interface IFactoryable extends Ext.IBase {
		/** [Property] (Object) */
		factoryConfig?: any;

	}

}

declare module Ext.mixin {
	export interface IHookable extends Ext.IMixin {
	}

}

declare module Ext.mixin {
	export interface IIdentifiable extends Ext.IBase {
		/** [Method] Retrieves the id of this component  
		* @returns String id 
		*/
		getId?(): string;

	}

}

declare module Ext.mixin {
	export interface IInheritable extends Ext.IMixin {
		/** [Method] This method returns an object containing the inherited properties for this instance  
		* @param inner Boolean Pass true to return inheritedStateInner instead of the normal inheritedState object. This is only needed internally and should not be passed by user code. 
		* @returns Object The inheritedState object containing inherited properties. 
		*/
		getInherited?( inner?:boolean ): any;

		/** [Method] This method returns the value of a config property that may be inherited from some ancestor  
		* @param property String The name of the config property to return. 
		* @param skipThis Boolean Pass true if the property should be ignored if found on this instance. In other words, true means the property must be inherited and not explicitly set on this instance. 
		* @returns Mixed The value of the requested property. 
		*/
		getInheritedConfig?( property?:string, skipThis?:boolean ): any;

		/** [Method] Used by ComponentQuery and the up method to find the owning Component in the linkage hierarchy  */
		getRefOwner?(): void;

		/** [Method] This method is called to initialize the inheritedState objects for this instance  
		* @param inheritedState Object The state object for this instance. 
		* @param inheritedStateInner Object This object is only provided for containers. 
		*/
		initInheritedState?( inheritedState?:any, inheritedStateInner?:any ): void;

		/** [Method] Gets the Controller or Component that is used as the event root for this view  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Ext.app.ViewController/Ext.container.Container The default listener scope. 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Returns the default listener scope for a satellite of this component  
		* @param satellite Ext.mixin.Observable 
		* @param defaultScope Object 
		* @returns Object The listener scope 
		*/
		resolveSatelliteListenerScope?( satellite?:Ext.mixin.IObservable, defaultScope?:any ): any;

	}

}

declare module Ext {
	export interface IMixin extends Ext.IBase {
	}

}

declare module Ext.mixin {
	export interface IMashup extends Ext.IBase {
	}

}

declare module Ext.mixin {
	export interface IObservable extends Ext.IBase {
		/** [Config Option] (Object) */
		listeners?: any;
		/** [Property] (Object) */
		hasListeners?: any;

		/** [Property] (Boolean) */
		isObservable?: boolean;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}
	export class Observable {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Starts capture on the specified Observable  
		* @param o Ext.util.Observable The Observable to capture events from. 
		* @param fn Function The function to call when an event is fired. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Observable firing the event. 
		*/
		static capture( o?:Ext.util.IObservable, fn?:any, scope?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Sets observability on the passed class constructor  
		* @param c Function The class constructor to make observable. 
		* @param listeners Object An object containing a series of listeners to add. See addListener. 
		*/
		static observe( c?:any, listeners?:any ): void;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

		/** [Method] Removes all added captures from the Observable  
		* @param o Ext.util.Observable The Observable to release 
		*/
		static releaseCapture( o?:Ext.util.IObservable ): void;

	}

}

declare module Ext.mixin {
	export interface IQueryable extends Ext.IBase {
		/** [Method] Retrieves the first direct child of this container which matches the passed selector or component  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching child Ext.Component (or null if no match was found). 
		*/
		child?( selector?:any ): any;

		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found). 
		*/
		down?( selector?:any ): any;

		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned. 
		* @returns Ext.Component[] Components which matched the selector 
		*/
		query?( selector?:string ): Ext.IComponent[];

		/** [Method] Retrieves all descendant components which match the passed function  
		* @param fn Function The matcher function. It will be called with a single argument, the component being tested. 
		* @param scope Object The scope in which to run the function. If not specified, it will default to the active component. 
		* @returns Ext.Component[] Components matched by the passed function 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.IComponent[];

		/** [Method] Finds a component at any level under this container matching the id itemId  
		* @param id String The id to find 
		* @returns Ext.Component The matching id, null if not found 
		*/
		queryById?( id?:string ): Ext.IComponent;

		/** [Method] Traverses the tree rooted at this node in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPostOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at this node in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPreOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

	}

}

declare module Ext.mixin {
	export interface IResponsive extends Ext.IBase {
		/** [Config Option] (Object) */
		responsiveConfig?: any;
		/** [Config Option] (Object) */
		responsiveFormulas?: any;
		/** [Method] This method removes this instance from the Responsive collection  */
		destroy?(): void;

	}

}

declare module Ext.mixin {
	export interface ISelectable extends Ext.IMixin {
		/** [Config Option] (Boolean) */
		allowDeselect?: boolean;
		/** [Config Option] (Boolean) */
		deselectOnContainerClick?: boolean;
		/** [Config Option] (Boolean) */
		disableSelection?: boolean;
		/** [Config Option] (Boolean) */
		locked?: boolean;
		/** [Config Option] (String) */
		mode?: string;
		/** [Method] Deselects any currently selected records and clears all stored selections  */
		clearSelections?(): void;

		/** [Method] Deselects the given record s 
		* @param records Number/Array/Ext.data.Model The record(s) to deselect. Can also be a number to reference by index. 
		* @param suppressEvent Boolean If true the deselect event will not be fired. 
		*/
		deselect?( records?:any, suppressEvent?:boolean ): void;

		/** [Method] Deselects all records  
		* @param supress Object 
		*/
		deselectAll?( supress?:any ): void;

		/** [Method] Deselects a record instance by record instance or index  
		* @param records Ext.data.Model/Number An array of records or an index. 
		* @param suppressEvent Boolean Set to false to not fire a deselect event. 
		*/
		doDeselect?( records?:any, suppressEvent?:boolean ): void;

		/** [Method] Selects a record instance by record instance or index  
		* @param records Ext.data.Model/Number An array of records or an index. 
		* @param keepExisting Boolean 
		* @param suppressEvent Boolean Set to false to not fire a select event. 
		*/
		doSelect?( records?:any, keepExisting?:boolean, suppressEvent?:boolean ): void;

		/** [Method] Returns the value of allowDeselect  
		* @returns Boolean 
		*/
		getAllowDeselect?(): boolean;

		/** [Method] Returns the number of selections  
		* @returns Number 
		*/
		getCount?(): number;

		/** [Method] Returns the value of deselectOnContainerClick  
		* @returns Boolean 
		*/
		getDeselectOnContainerClick?(): boolean;

		/** [Method] Returns the value of disableSelection  
		* @returns Boolean 
		*/
		getDisableSelection?(): boolean;

		/** [Method] Returns the array of previously selected items  
		* @returns Array The previous selection. 
		*/
		getLastSelected?(): any[];

		/** [Method] Returns the value of mode  
		* @returns String 
		*/
		getMode?(): string;

		/** [Method] Returns an array of the currently selected records  
		* @returns Array An array of selected records. 
		*/
		getSelection?(): any[];

		/** [Method] Returns the number of selections  
		* @returns Number 
		*/
		getSelectionCount?(): number;

		/** [Method] Returns the selection mode currently used by this Selectable  
		* @returns String The current mode. 
		*/
		getSelectionMode?(): string;

		/** [Method] Returns true if there is a selected record  
		* @returns Boolean 
		*/
		hasSelection?(): boolean;

		/** [Method] Returns true if the Selectable is currently locked  
		* @returns Boolean True if currently locked 
		*/
		isLocked?(): boolean;

		/** [Method] Returns true if the specified row is selected  
		* @param record Ext.data.Model/Number The record or index of the record to check. 
		* @returns Boolean 
		*/
		isSelected?( record?:any ): boolean;

		/** [Method] Adds the given records to the currently selected set  
		* @param records Ext.data.Model/Array/Number The records to select. 
		* @param keepExisting Boolean If true, the existing selection will be added to (if not, the old selection is replaced). 
		* @param suppressEvent Boolean If true, the select event will not be fired. 
		*/
		select?( records?:any, keepExisting?:boolean, suppressEvent?:boolean ): void;

		/** [Method] Selects all records  
		* @param silent Boolean true to suppress all select events. 
		*/
		selectAll?( silent?:boolean ): void;

		/** [Method] Selects a range of rows if the selection model getDisableSelection is not locked  
		* @param startRecord Number The index of the first row in the range. 
		* @param endRecord Number The index of the last row in the range. 
		* @param keepExisting Boolean true to retain existing selections. 
		*/
		selectRange?( startRecord?:number, endRecord?:number, keepExisting?:boolean ): void;

		/** [Method] Sets the value of allowDeselect  
		* @param allowDeselect Boolean The new value. 
		*/
		setAllowDeselect?( allowDeselect?:boolean ): void;

		/** [Method] Sets the value of deselectOnContainerClick  
		* @param deselectOnContainerClick Boolean The new value. 
		*/
		setDeselectOnContainerClick?( deselectOnContainerClick?:boolean ): void;

		/** [Method] Sets the value of disableSelection  
		* @param disableSelection Boolean The new value. 
		*/
		setDisableSelection?( disableSelection?:boolean ): void;

		/** [Method] This was an internal function accidentally exposed in 1 x and now deprecated  */
		setLastFocused?(): void;

		/** [Method] Sets the value of mode  
		* @param mode String The new value. 
		*/
		setMode?( mode?:string ): void;

		/** [Method] Sets a record as the last focused record  
		* @param newRecord Ext.data.Record 
		* @param oldRecord Ext.data.Record 
		*/
		updateLastFocused?( newRecord?:Ext.data.IRecord, oldRecord?:Ext.data.IRecord ): void;

	}

}

declare module Ext.mixin {
	export interface ITemplatable extends Ext.IMixin {
	}

}

declare module Ext.mixin {
	export interface ITraversable extends Ext.IMixin {
		/** [Method] Returns the parent of this component if it has one  
		* @returns Ext.Component The parent of this component. 
		*/
		getParent?(): Ext.IComponent;

		/** [Method] Returns true if this component has a parent  
		* @returns Boolean true if this component has a parent. 
		*/
		hasParent?(): boolean;

	}

}

declare module Ext {
	export interface INumber {
	}
	export class Number {
		/** [Method] Coerces a given index into a valid index given a length  
		* @param length Number 
		* @param indices Number[] 
		* @param options Object An object with different option flags. 
		* @returns Number[] The normalized [begin, end] array where end is now exclusive such that length = end - begin. Both values are between 0 and the given length and end will not be less-than begin. 
		*/
		static clipIndices( length?:number, indices?:number[], options?:any ): number[];

		/** [Method] Checks whether or not the passed number is within a desired range  
		* @param number Number The number to check 
		* @param min Number The minimum number in the range 
		* @param max Number The maximum number in the range 
		* @returns Number The constrained value if outside the range, otherwise the current value 
		*/
		static constrain( number?:number, min?:number, max?:number ): number;

		/** [Method] Corrects floating point numbers that overflow to a non precise value because of their floating nature for example 0 
		* @param The Number number 
		* @returns Number The correctly rounded number 
		*/
		static correctFloat( The?:number ): number;

		/** [Method] Validate that a value is numeric and convert it to a number if necessary  
		* @param value Object 
		* @param defaultValue Number The value to return if the original value is non-numeric 
		* @returns Number value, if numeric, defaultValue otherwise 
		*/
		static from( value?:any, defaultValue?:number ): number;

		/** [Method] Returns a random integer between the specified range inclusive  
		* @param from Number Lowest value to return. 
		* @param to Number Highest value to return. 
		* @returns Number A random integer within the specified range. 
		*/
		static randomInt( from?:number, to?:number ): number;

		/** [Method] Returns the sign of the given number  
		* @param x Number The number. 
		* @returns Number The sign of the number x, indicating whether the number is positive (1), negative (-1) or zero (0). 
		*/
		static sign( x?:number ): number;

		/** [Method] Snaps the passed number between stopping points based upon a passed increment value  
		* @param value Number The unsnapped value. 
		* @param increment Number The increment by which the value must move. 
		* @param minValue Number The minimum value to which the returned value must be constrained. Overrides the increment. 
		* @param maxValue Number The maximum value to which the returned value must be constrained. Overrides the increment. 
		* @returns Number The value of the nearest snap target. 
		*/
		static snap( value?:number, increment?:number, minValue?:number, maxValue?:number ): number;

		/** [Method] Snaps the passed number between stopping points based upon a passed increment value  
		* @param value Number The unsnapped value. 
		* @param increment Number The increment by which the value must move. 
		* @param minValue Number The minimum value to which the returned value must be constrained. 
		* @param maxValue Number The maximum value to which the returned value must be constrained. 
		* @returns Number The value of the nearest snap target. 
		*/
		static snapInRange( value?:number, increment?:number, minValue?:number, maxValue?:number ): number;

		/** [Method] Formats a number using fixed point notation 
		* @param value Number The number to format 
		* @param precision Number The number of digits to show after the decimal point 
		*/
		static toFixed( value?:number, precision?:number ): void;

	}

}

declare module Ext {
	export interface IObject {
	}
	export class Object {
		/** [Method] Returns a new object with the given object as the prototype chain  
		* @param object Object The prototype chain for the new object. 
		*/
		static chain( object?:any ): void;

		/** [Method] This method removes all keys from the given object  
		* @param object Object The object from which to remove all keys. 
		* @returns Object The given object. 
		*/
		static clear( object?:any ): any;

		/** [Method] Iterates through an object and invokes the given callback function for each iteration  
		* @param object Object The object to iterate 
		* @param fn Function The callback function. 
		* @param scope Object The execution scope (this) of the callback function 
		*/
		static each( object?:any, fn?:any, scope?:any ): void;

		/** [Method] Iterates through an object and invokes the given callback function for each iteration  
		* @param object Object The object to iterate 
		* @param fn Function The callback function. 
		* @param scope Object The execution scope (this) of the callback function 
		*/
		static eachValue( object?:any, fn?:any, scope?:any ): void;

		/** [Method] Shallow compares the contents of 2 objects using strict equality  
		* @param object1 Object 
		* @param object2 Object 
		* @returns Boolean true if the objects are equal. 
		*/
		static equals( object1?:any, object2?:any ): boolean;

		/** [Method] Freezes the given object making it immutable  
		* @param obj Object The object to freeze. 
		* @param deep Boolean Pass true to freeze sub-objects recursively. 
		* @returns Object The given object obj. 
		*/
		static freeze( obj?:any, deep?:boolean ): any;

		/** [Method] Converts a query string back into an object  
		* @param queryString String The query string to decode 
		* @param recursive Boolean Whether or not to recursively decode the string. This format is supported by PHP / Ruby on Rails servers and similar. 
		* @returns Object 
		*/
		static fromQueryString( queryString?:string, recursive?:boolean ): any;

		/** [Method] Returns all keys of the given object as an array  
		* @param object Object 
		* @returns String[] An array of keys from the object or any of its prototypes. 
		*/
		static getAllKeys( object?:any ): string[];

		/** [Method] Returns the first matching key corresponding to the given value  
		* @param object Object 
		* @param value Object The value to find 
		*/
		static getKey( object?:any, value?:any ): void;

		/** [Method] Returns the hasOwnProperty keys of the given object as an array  
		* @param object Object 
		* @returns String[] An array of keys from the object 
		*/
		static getKeys( object?:any ): string[];

		/** [Method] Gets the total number of this object s own properties var size  Ext Object getSize  name  Jacky  loves  
		* @param object Object 
		* @returns Number size 
		*/
		static getSize( object?:any ): number;

		/** [Method] Gets all values of the given object as an array  
		* @param object Object 
		* @returns Array An array of values from the object 
		*/
		static getValues( object?:any ): any[];

		/** [Method] Checks if there are any properties on this object  
		* @param object Object 
		* @returns Boolean true if there no properties on the object. 
		*/
		static isEmpty( object?:any ): boolean;

		/** [Method] Merges any number of objects recursively without referencing them or their children  
		* @param destination Object The object into which all subsequent objects are merged. 
		* @param object Object... Any number of objects to merge into the destination. 
		* @returns Object merged The destination object with all passed objects merged in. 
		*/
		static merge( destination:any, ...object:any[] ): any;

		/** [Method] Converts a name  value pair to an array of objects with support for nested structures  
		* @param name String 
		* @param value Object/Array 
		* @param recursive Boolean True to traverse object recursively 
		* @returns Array 
		*/
		static toQueryObjects( name?:string, value?:any, recursive?:boolean ): any[];

		/** [Method] Takes an object and converts it to an encoded query string  
		* @param object Object The object to encode 
		* @param recursive Boolean Whether or not to interpret the object in recursive format. (PHP / Ruby on Rails servers and similar). 
		* @returns String queryString 
		*/
		static toQueryString( object?:any, recursive?:boolean ): string;

	}

}

declare module Ext {
	export interface IOs extends Ext.env.IOS {
	}
	export class Os {
		/** [Property] (String) */
		static deviceType: string;

		/** [Property] (String) */
		static name: string;

		/** [Property] (Ext.Version) */
		static version: Ext.IVersion;

		/** [Method] A hybrid property can be either accessed as a method call i e  if Ext os is Android 
		* @param name String The OS name to check. 
		* @returns Boolean 
		*/
		static is( name?:string ): boolean;

	}

}

declare module Ext.panel {
	export interface IBar extends Ext.container.IContainer {
		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  
		* @param container Object 
		* @param pos Object 
		* @param instanced Object 
		*/
		onAdded?( container?:any, pos?:any, instanced?:any ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param destroying Object 
		*/
		onRemoved?( destroying?:any ): void;

		/** [Method] Sets the dock position of this component in its parent panel  
		* @param dock Object 
		* @returns Ext.Component this 
		*/
		setDock?( dock?:any ): Ext.IComponent;

	}

}

declare module Ext.panel {
	export interface IDD extends Ext.dd.IDragSource {
		/** [Method] An empty function by default but provided so that you can perform a custom action after an invalid drop has occurred  
		* @param e Event The event object 
		* @param id String The id of the dropped element 
		*/
		afterInvalidDrop?( e?:Event, id?:string ): void;

		/** [Method] overrides Ext dd DragDrop 
		* @param e Object 
		*/
		b4MouseDown?( e?:any ): void;

		/** [Method] Creates the proxy element if it does not yet exist */
		createFrame?(): void;

		/** [Method] Returns a reference to the actual element to drag  
		* @param e Object 
		* @returns HTMLElement the html element 
		*/
		getDragEl?( e?:any ): HTMLElement;

	}

}

declare module Ext.panel {
	export interface IHeader extends Ext.panel.IBar {
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] ('top'/'right'/'bottom'/'left') */
		iconAlign?: any;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Number) */
		itemPosition?: number;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (String/Ext.panel.Title) */
		title?: any;
		/** [Config Option] (String) */
		titleAlign?: string;
		/** [Config Option] (Number) */
		titlePosition?: number;
		/** [Config Option] ('default'/0/1/2) */
		titleRotation?: any;
		/** [Config Option] (Number) */
		weight?: number;
		/** [Property] (Boolean) */
		isHeader?: boolean;

		/** [Method] Add a tool to the header 
		* @param tool Object 
		*/
		addTool?( tool?:any ): void;

		/** [Method] Invoked after the Container has laid out and rendered if necessary its child Components  */
		afterLayout?(): void;

		/** [Method] Occurs before componentLayout is run  */
		beforeLayout?(): void;

		/** [Method] Gets the tools for this header  
		* @returns Ext.panel.Tool[] The tools 
		*/
		getTools?(): Ext.panel.ITool[];

		/** [Method] This method is invoked after a new Component has been added  
		* @param component Object 
		* @param index Object 
		*/
		onAdd?( component?:any, index?:any ): void;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  
		* @param container Object 
		* @param pos Object 
		* @param instanced Object 
		*/
		onAdded?( container?:any, pos?:any, instanced?:any ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param container Object 
		* @param pos Object 
		* @param instanced Object 
		*/
		onRemoved?( container?:any, pos?:any, instanced?:any ): void;

		/** [Method] Sets the dock position of this component in its parent panel  
		* @param dock Object 
		* @returns Ext.Component this 
		*/
		setDock?( dock?:any ): Ext.IComponent;

	}

}

declare module Ext.panel {
	export interface IPanel extends Ext.container.IContainer, Ext.container.IDockingContainer {
		/** [Config Option] (Boolean) */
		animCollapse?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/Object[]) */
		bbar?: any;
		/** [Config Option] (Boolean) */
		bodyBorder?: boolean;
		/** [Config Option] (String/String[]) */
		bodyCls?: any;
		/** [Config Option] (Number/String) */
		bodyPadding?: any;
		/** [Config Option] (String/Object/Function) */
		bodyStyle?: any;
		/** [Config Option] (Boolean) */
		border?: boolean;
		/** [Config Option] (String) */
		buttonAlign?: string;
		/** [Config Option] (Object/Object[]) */
		buttons?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (String) */
		closeAction?: string;
		/** [Config Option] (String) */
		collapseDirection?: string;
		/** [Config Option] (Boolean) */
		collapseFirst?: boolean;
		/** [Config Option] (String) */
		collapseMode?: string;
		/** [Config Option] (Boolean) */
		collapsed?: boolean;
		/** [Config Option] (String) */
		collapsedCls?: string;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Boolean) */
		constrainHeader?: boolean;
		/** [Config Option] (Object/Object[]) */
		dockedItems?: any;
		/** [Config Option] (Boolean/Object) */
		draggable?: any;
		/** [Config Option] (Object/Object[]) */
		fbar?: any;
		/** [Config Option] (Boolean) */
		floatable?: boolean;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Boolean) */
		frameHeader?: boolean;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (Boolean/Object) */
		header?: any;
		/** [Config Option] (String) */
		headerOverCls?: string;
		/** [Config Option] (String) */
		headerPosition?: string;
		/** [Config Option] (Boolean) */
		hideCollapseTool?: boolean;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] ('top'/'right'/'bottom'/'left') */
		iconAlign?: any;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Object/Object[]) */
		lbar?: any;
		/** [Config Option] (Boolean) */
		manageHeight?: boolean;
		/** [Config Option] (String) */
		maskElement?: string;
		/** [Config Option] (Number) */
		minButtonWidth?: number;
		/** [Config Option] (Boolean) */
		overlapHeader?: boolean;
		/** [Config Option] (Ext.Component/Object) */
		placeholder?: any;
		/** [Config Option] (Number) */
		placeholderCollapseHideMode?: number;
		/** [Config Option] (Boolean) */
		preventHeader?: boolean;
		/** [Config Option] (Object/Object[]) */
		rbar?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrapDock?: any;
		/** [Config Option] (Boolean) */
		simpleDrag?: boolean;
		/** [Config Option] (Object/Object[]) */
		tbar?: any;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (String) */
		titleAlign?: string;
		/** [Config Option] (Boolean) */
		titleCollapse?: boolean;
		/** [Config Option] ('default'/0/1/2) */
		titleRotation?: any;
		/** [Config Option] (Object[]/Ext.panel.Tool[]) */
		tools?: any;
		/** [Property] (Ext.dom.Element) */
		body?: Ext.dom.IElement;

		/** [Property] (String) */
		contentPaddingProperty?: string;

		/** [Property] (Ext.dd.DragSource/Ext.util.ComponentDragger) */
		dd?: any;

		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Boolean) */
		isPanel?: boolean;

		/** [Method] Adds a CSS class to the body element  
		* @param cls String The class to add 
		* @returns Ext.panel.Panel this 
		*/
		addBodyCls?( cls?:string ): Ext.panel.IPanel;

		/** [Method] Adds docked item s to the container  
		* @param items Object/Object[] The Component or array of components to add. The components must include a 'dock' parameter on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left'). 
		* @param pos Number The index at which the Component will be added 
		* @returns Ext.Component[] The added components. 
		*/
		addDocked?( items?:any, pos?:number ): Ext.IComponent[];

		/** [Method] Add tools to this panel 
		* @param tools Object[]/Ext.panel.Tool[] The tools to add 
		*/
		addTool?( tools?:any ): void;

		/** [Method] Template method to be implemented in subclasses to add their tools after the collapsible tool  */
		addTools?(): void;

		/** [Method] Method which adds a specified UI  uiCls to the components element  
		* @param uiCls String The UI class to add to the element. 
		*/
		addUIClsToElement?( uiCls?:string ): void;

		/** [Method] Invoked after the Panel is Collapsed  
		* @param animated Boolean 
		*/
		afterCollapse?( animated?:boolean ): void;

		/** [Method] Invoked after the Panel is Expanded  
		* @param animated Boolean 
		*/
		afterExpand?( animated?:boolean ): void;

		/** [Method] Applies the state to the object  
		* @param state Object 
		*/
		applyState?( state?:any ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Closes the Panel  */
		close?(): void;

		/** [Method] Collapses the panel body so that the body becomes hidden  
		* @param direction String The direction to collapse towards. Must be one of  Ext.Component.DIRECTION_TOP Ext.Component.DIRECTION_RIGHT Ext.Component.DIRECTION_BOTTOM Ext.Component.DIRECTION_LEFT Defaults to collapseDirection. 
		* @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds. 
		* @returns Ext.panel.Panel this 
		*/
		collapse?( direction?:string, animate?:boolean ): Ext.panel.IPanel;

		/** [Method] converts a collapsdDir into an anchor argument for Element slideIn overridden in rtl mode to switch l and r  
		* @param collapseDir Object 
		*/
		convertCollapseDir?( collapseDir?:any ): void;

		/** [Method] Expands the panel body so that it becomes visible  
		* @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds. 
		* @returns Ext.panel.Panel this 
		*/
		expand?( animate?:boolean ): Ext.panel.IPanel;

		/** [Method] Returns the current collapsed state of the panel  
		* @returns Boolean/String False when not collapsed, otherwise the value of collapseDirection. 
		*/
		getCollapsed?(): any;

		/** [Method] Attempts a default component lookup see Ext container Container getComponent 
		* @param comp String/Number The component id, itemId or position to find 
		* @returns Ext.Component The component (if found) 
		*/
		getComponent?( comp?:any ): Ext.IComponent;

		/** [Method] Finds a docked component by id itemId or position  
		* @param comp String/Number The id, itemId or position of the docked component (see getComponent for details) 
		* @returns Ext.Component The docked component (if found) 
		*/
		getDockedComponent?( comp?:any ): Ext.IComponent;

		/** [Method] Retrieves an array of all currently docked Components  
		* @param selector String A ComponentQuery selector string to filter the returned items. 
		* @param beforeBody Boolean An optional flag to limit the set of items to only those before the body (true) or after the body (false). All components are returned by default. 
		* @returns Ext.Component[] The array of docked components meeting the specified criteria. 
		*/
		getDockedItems?( selector?:string, beforeBody?:boolean ): Ext.IComponent[];

		/** [Method] Gets the Header for this panel  
		* @returns Ext.panel.Header 
		*/
		getHeader?(): Ext.panel.IHeader;

		/** [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th  
		* @param deep Object 
		*/
		getRefItems?( deep?:any ): void;

		/** [Method] The supplied default state gathering method for the Component class  
		* @returns Object 
		*/
		getState?(): any;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] This method is called to initialize the items collection  */
		initItems?(): void;

		/** [Method] Inserts docked item s to the panel at the indicated position  
		* @param pos Number The index at which the Component will be inserted 
		* @param items Object/Object[] The Component or array of components to add. The components must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left'). 
		*/
		insertDocked?( pos?:number, items?:any ): void;

		/** [Method] Determines whether this Component is the root of a layout  */
		isLayoutRoot?(): void;

		/** [Method] Returns true if this component is visible  
		* @param deep Object 
		* @returns Boolean true if this component is visible, false otherwise. 
		*/
		isVisible?( deep?:any ): boolean;

		/** [Method] Invoked when this component has first achieved size  */
		onBoxReady?(): void;

		/** [Method] Invoked after a docked item is added to the Panel  
		* @param component Ext.Component 
		*/
		onDockedAdd?( component?:Ext.IComponent ): void;

		/** [Method] Invoked after a docked item is removed from the Panel  
		* @param component Ext.Component 
		*/
		onDockedRemove?( component?:Ext.IComponent ): void;

		/** [Method] Allows addition of behavior to the hide operation  
		* @param animateTarget Object 
		* @param cb Object 
		* @param scope Object 
		*/
		onHide?( animateTarget?:any, cb?:any, scope?:any ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param destroying Object 
		*/
		onRemoved?( destroying?:any ): void;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Removes a component from this container  
		* @param component Object 
		* @param autoDestroy Object 
		* @returns Ext.Component component The Component that was removed. 
		*/
		remove?( component?:any, autoDestroy?:any ): Ext.IComponent;

		/** [Method] Removes a CSS class from the body element  
		* @param cls String The class to remove 
		* @returns Ext.panel.Panel this 
		*/
		removeBodyCls?( cls?:string ): Ext.panel.IPanel;

		/** [Method] Removes the docked item from the panel  
		* @param item Ext.Component The Component to remove. 
		* @param autoDestroy Boolean Destroy the component after removal. 
		*/
		removeDocked?( item?:Ext.IComponent, autoDestroy?:boolean ): void;

		/** [Method] Method which removes a specified UI  uiCls from the components element  
		* @param cls Object 
		*/
		removeUIClsFromElement?( cls?:any ): void;

		/** [Method] Sets the body style according to the passed parameters  
		* @param style Mixed A full style specification string, or object, or the name of a style property to set. 
		* @param value String If the first param was a style property name, the style property value. 
		* @returns Ext.panel.Panel this 
		*/
		setBodyStyle?( style?:any, value?:string ): Ext.panel.IPanel;

		/** [Method]  
		* @param border String/Number The border, see border. If a falsey value is passed the border will be removed. 
		*/
		setBorder?( border?:any ): void;

		/** [Method] Collapses or expands the panel  
		* @param collapsed Boolean true to collapse the panel, false to expand it. 
		*/
		setCollapsed?( collapsed?:boolean ): void;

		/** [Method] Sets the title of this panel  
		* @param title String The new title 
		*/
		setTitle?( title?:string ): void;

		/** [Method] Sets the UI for the component  
		* @param ui String The new UI for the component. 
		*/
		setUI?( ui?:string ): void;

		/** [Method] Shortcut for performing an expand or collapse based on the current state of the panel  
		* @returns Ext.panel.Panel this 
		*/
		toggleCollapse?(): Ext.panel.IPanel;

	}

}

declare module Ext {
	export interface IPanel extends Ext.container.IContainer, Ext.container.IDockingContainer {
		/** [Config Option] (Boolean) */
		animCollapse?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/Object[]) */
		bbar?: any;
		/** [Config Option] (Boolean) */
		bodyBorder?: boolean;
		/** [Config Option] (String/String[]) */
		bodyCls?: any;
		/** [Config Option] (Number/String) */
		bodyPadding?: any;
		/** [Config Option] (String/Object/Function) */
		bodyStyle?: any;
		/** [Config Option] (Boolean) */
		border?: boolean;
		/** [Config Option] (String) */
		buttonAlign?: string;
		/** [Config Option] (Object/Object[]) */
		buttons?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (String) */
		closeAction?: string;
		/** [Config Option] (String) */
		collapseDirection?: string;
		/** [Config Option] (Boolean) */
		collapseFirst?: boolean;
		/** [Config Option] (String) */
		collapseMode?: string;
		/** [Config Option] (Boolean) */
		collapsed?: boolean;
		/** [Config Option] (String) */
		collapsedCls?: string;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Boolean) */
		constrainHeader?: boolean;
		/** [Config Option] (Object/Object[]) */
		dockedItems?: any;
		/** [Config Option] (Boolean/Object) */
		draggable?: any;
		/** [Config Option] (Object/Object[]) */
		fbar?: any;
		/** [Config Option] (Boolean) */
		floatable?: boolean;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Boolean) */
		frameHeader?: boolean;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (Boolean/Object) */
		header?: any;
		/** [Config Option] (String) */
		headerOverCls?: string;
		/** [Config Option] (String) */
		headerPosition?: string;
		/** [Config Option] (Boolean) */
		hideCollapseTool?: boolean;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] ('top'/'right'/'bottom'/'left') */
		iconAlign?: any;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Object/Object[]) */
		lbar?: any;
		/** [Config Option] (Boolean) */
		manageHeight?: boolean;
		/** [Config Option] (String) */
		maskElement?: string;
		/** [Config Option] (Number) */
		minButtonWidth?: number;
		/** [Config Option] (Boolean) */
		overlapHeader?: boolean;
		/** [Config Option] (Ext.Component/Object) */
		placeholder?: any;
		/** [Config Option] (Number) */
		placeholderCollapseHideMode?: number;
		/** [Config Option] (Boolean) */
		preventHeader?: boolean;
		/** [Config Option] (Object/Object[]) */
		rbar?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrapDock?: any;
		/** [Config Option] (Boolean) */
		simpleDrag?: boolean;
		/** [Config Option] (Object/Object[]) */
		tbar?: any;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (String) */
		titleAlign?: string;
		/** [Config Option] (Boolean) */
		titleCollapse?: boolean;
		/** [Config Option] ('default'/0/1/2) */
		titleRotation?: any;
		/** [Config Option] (Object[]/Ext.panel.Tool[]) */
		tools?: any;
		/** [Property] (Ext.dom.Element) */
		body?: Ext.dom.IElement;

		/** [Property] (String) */
		contentPaddingProperty?: string;

		/** [Property] (Ext.dd.DragSource/Ext.util.ComponentDragger) */
		dd?: any;

		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Boolean) */
		isPanel?: boolean;

		/** [Method] Adds a CSS class to the body element  
		* @param cls String The class to add 
		* @returns Ext.panel.Panel this 
		*/
		addBodyCls?( cls?:string ): Ext.panel.IPanel;

		/** [Method] Adds docked item s to the container  
		* @param items Object/Object[] The Component or array of components to add. The components must include a 'dock' parameter on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left'). 
		* @param pos Number The index at which the Component will be added 
		* @returns Ext.Component[] The added components. 
		*/
		addDocked?( items?:any, pos?:number ): Ext.IComponent[];

		/** [Method] Add tools to this panel 
		* @param tools Object[]/Ext.panel.Tool[] The tools to add 
		*/
		addTool?( tools?:any ): void;

		/** [Method] Template method to be implemented in subclasses to add their tools after the collapsible tool  */
		addTools?(): void;

		/** [Method] Method which adds a specified UI  uiCls to the components element  
		* @param uiCls String The UI class to add to the element. 
		*/
		addUIClsToElement?( uiCls?:string ): void;

		/** [Method] Invoked after the Panel is Collapsed  
		* @param animated Boolean 
		*/
		afterCollapse?( animated?:boolean ): void;

		/** [Method] Invoked after the Panel is Expanded  
		* @param animated Boolean 
		*/
		afterExpand?( animated?:boolean ): void;

		/** [Method] Applies the state to the object  
		* @param state Object 
		*/
		applyState?( state?:any ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Closes the Panel  */
		close?(): void;

		/** [Method] Collapses the panel body so that the body becomes hidden  
		* @param direction String The direction to collapse towards. Must be one of  Ext.Component.DIRECTION_TOP Ext.Component.DIRECTION_RIGHT Ext.Component.DIRECTION_BOTTOM Ext.Component.DIRECTION_LEFT Defaults to collapseDirection. 
		* @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds. 
		* @returns Ext.panel.Panel this 
		*/
		collapse?( direction?:string, animate?:boolean ): Ext.panel.IPanel;

		/** [Method] converts a collapsdDir into an anchor argument for Element slideIn overridden in rtl mode to switch l and r  
		* @param collapseDir Object 
		*/
		convertCollapseDir?( collapseDir?:any ): void;

		/** [Method] Expands the panel body so that it becomes visible  
		* @param animate Boolean True to animate the transition, else false (defaults to the value of the animCollapse panel config). May also be specified as the animation duration in milliseconds. 
		* @returns Ext.panel.Panel this 
		*/
		expand?( animate?:boolean ): Ext.panel.IPanel;

		/** [Method] Returns the current collapsed state of the panel  
		* @returns Boolean/String False when not collapsed, otherwise the value of collapseDirection. 
		*/
		getCollapsed?(): any;

		/** [Method] Attempts a default component lookup see Ext container Container getComponent 
		* @param comp String/Number The component id, itemId or position to find 
		* @returns Ext.Component The component (if found) 
		*/
		getComponent?( comp?:any ): Ext.IComponent;

		/** [Method] Finds a docked component by id itemId or position  
		* @param comp String/Number The id, itemId or position of the docked component (see getComponent for details) 
		* @returns Ext.Component The docked component (if found) 
		*/
		getDockedComponent?( comp?:any ): Ext.IComponent;

		/** [Method] Retrieves an array of all currently docked Components  
		* @param selector String A ComponentQuery selector string to filter the returned items. 
		* @param beforeBody Boolean An optional flag to limit the set of items to only those before the body (true) or after the body (false). All components are returned by default. 
		* @returns Ext.Component[] The array of docked components meeting the specified criteria. 
		*/
		getDockedItems?( selector?:string, beforeBody?:boolean ): Ext.IComponent[];

		/** [Method] Gets the Header for this panel  
		* @returns Ext.panel.Header 
		*/
		getHeader?(): Ext.panel.IHeader;

		/** [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th  
		* @param deep Object 
		*/
		getRefItems?( deep?:any ): void;

		/** [Method] The supplied default state gathering method for the Component class  
		* @returns Object 
		*/
		getState?(): any;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] This method is called to initialize the items collection  */
		initItems?(): void;

		/** [Method] Inserts docked item s to the panel at the indicated position  
		* @param pos Number The index at which the Component will be inserted 
		* @param items Object/Object[] The Component or array of components to add. The components must include a 'dock' paramater on each component to indicate where it should be docked ('top', 'right', 'bottom', 'left'). 
		*/
		insertDocked?( pos?:number, items?:any ): void;

		/** [Method] Determines whether this Component is the root of a layout  */
		isLayoutRoot?(): void;

		/** [Method] Returns true if this component is visible  
		* @param deep Object 
		* @returns Boolean true if this component is visible, false otherwise. 
		*/
		isVisible?( deep?:any ): boolean;

		/** [Method] Invoked when this component has first achieved size  */
		onBoxReady?(): void;

		/** [Method] Invoked after a docked item is added to the Panel  
		* @param component Ext.Component 
		*/
		onDockedAdd?( component?:Ext.IComponent ): void;

		/** [Method] Invoked after a docked item is removed from the Panel  
		* @param component Ext.Component 
		*/
		onDockedRemove?( component?:Ext.IComponent ): void;

		/** [Method] Allows addition of behavior to the hide operation  
		* @param animateTarget Object 
		* @param cb Object 
		* @param scope Object 
		*/
		onHide?( animateTarget?:any, cb?:any, scope?:any ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param destroying Object 
		*/
		onRemoved?( destroying?:any ): void;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Removes a component from this container  
		* @param component Object 
		* @param autoDestroy Object 
		* @returns Ext.Component component The Component that was removed. 
		*/
		remove?( component?:any, autoDestroy?:any ): Ext.IComponent;

		/** [Method] Removes a CSS class from the body element  
		* @param cls String The class to remove 
		* @returns Ext.panel.Panel this 
		*/
		removeBodyCls?( cls?:string ): Ext.panel.IPanel;

		/** [Method] Removes the docked item from the panel  
		* @param item Ext.Component The Component to remove. 
		* @param autoDestroy Boolean Destroy the component after removal. 
		*/
		removeDocked?( item?:Ext.IComponent, autoDestroy?:boolean ): void;

		/** [Method] Method which removes a specified UI  uiCls from the components element  
		* @param cls Object 
		*/
		removeUIClsFromElement?( cls?:any ): void;

		/** [Method] Sets the body style according to the passed parameters  
		* @param style Mixed A full style specification string, or object, or the name of a style property to set. 
		* @param value String If the first param was a style property name, the style property value. 
		* @returns Ext.panel.Panel this 
		*/
		setBodyStyle?( style?:any, value?:string ): Ext.panel.IPanel;

		/** [Method]  
		* @param border String/Number The border, see border. If a falsey value is passed the border will be removed. 
		*/
		setBorder?( border?:any ): void;

		/** [Method] Collapses or expands the panel  
		* @param collapsed Boolean true to collapse the panel, false to expand it. 
		*/
		setCollapsed?( collapsed?:boolean ): void;

		/** [Method] Sets the title of this panel  
		* @param title String The new title 
		*/
		setTitle?( title?:string ): void;

		/** [Method] Sets the UI for the component  
		* @param ui String The new UI for the component. 
		*/
		setUI?( ui?:string ): void;

		/** [Method] Shortcut for performing an expand or collapse based on the current state of the panel  
		* @returns Ext.panel.Panel this 
		*/
		toggleCollapse?(): Ext.panel.IPanel;

	}

}

declare module Ext.panel {
	export interface IPinnable extends Ext.IMixin {
	}

}

declare module Ext.panel {
	export interface IProxy extends Ext.IBase {
		/** [Config Option] (Boolean) */
		insertProxy?: boolean;
		/** [Config Option] (Boolean) */
		moveOnDrag?: boolean;
		/** [Property] (Ext.panel.Panel) */
		panel?: Ext.panel.IPanel;

		/** [Method] Gets the proxy s element 
		* @returns Ext.dom.Element The proxy's element 
		*/
		getEl?(): Ext.dom.IElement;

		/** [Method] Gets the proxy s ghost Panel 
		* @returns Ext.panel.Panel The proxy's ghost Panel 
		*/
		getGhost?(): Ext.panel.IPanel;

		/** [Method] Gets the proxy element  
		* @returns Ext.dom.Element The proxy's element 
		*/
		getProxy?(): Ext.dom.IElement;

		/** [Method] Hides the proxy */
		hide?(): void;

		/** [Method] Moves the proxy to a different position in the DOM  
		* @param parentNode HTMLElement The proxy's parent DOM node 
		* @param before HTMLElement The sibling node before which the proxy should be inserted. Defaults to the parent's last child if not specified. 
		*/
		moveProxy?( parentNode?:HTMLElement, before?:HTMLElement ): void;

		/** [Method] Shows the proxy */
		show?(): void;

	}

}

declare module Ext.dd {
	export interface IPanelProxy extends Ext.IBase {
		/** [Config Option] (Boolean) */
		insertProxy?: boolean;
		/** [Config Option] (Boolean) */
		moveOnDrag?: boolean;
		/** [Property] (Ext.panel.Panel) */
		panel?: Ext.panel.IPanel;

		/** [Method] Gets the proxy s element 
		* @returns Ext.dom.Element The proxy's element 
		*/
		getEl?(): Ext.dom.IElement;

		/** [Method] Gets the proxy s ghost Panel 
		* @returns Ext.panel.Panel The proxy's ghost Panel 
		*/
		getGhost?(): Ext.panel.IPanel;

		/** [Method] Gets the proxy element  
		* @returns Ext.dom.Element The proxy's element 
		*/
		getProxy?(): Ext.dom.IElement;

		/** [Method] Hides the proxy */
		hide?(): void;

		/** [Method] Moves the proxy to a different position in the DOM  
		* @param parentNode HTMLElement The proxy's parent DOM node 
		* @param before HTMLElement The sibling node before which the proxy should be inserted. Defaults to the parent's last child if not specified. 
		*/
		moveProxy?( parentNode?:HTMLElement, before?:HTMLElement ): void;

		/** [Method] Shows the proxy */
		show?(): void;

	}

}

declare module Ext.panel {
	export interface ITable extends Ext.panel.IPanel, Ext.grid.locking.ILockable {
		/** [Config Option] (Boolean) */
		allowDeselect?: boolean;
		/** [Config Option] (Boolean) */
		autoLoad?: boolean;
		/** [Config Option] (Boolean) */
		bufferedRenderer?: boolean;
		/** [Config Option] (Boolean) */
		columnLines?: boolean;
		/** [Config Option] (Ext.grid.column.Column[]/Object) */
		columns?: any;
		/** [Config Option] (Boolean) */
		deferRowRender?: boolean;
		/** [Config Option] (Boolean) */
		disableSelection?: boolean;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Boolean) */
		enableColumnHide?: boolean;
		/** [Config Option] (Boolean) */
		enableColumnMove?: boolean;
		/** [Config Option] (Boolean) */
		enableColumnResize?: boolean;
		/** [Config Option] (Boolean) */
		enableLocking?: boolean;
		/** [Config Option] (Ext.grid.feature.Feature[]/Object[]/Ext.enums.Feature[]) */
		features?: any;
		/** [Config Option] (Boolean) */
		forceFit?: boolean;
		/** [Config Option] (Boolean) */
		hideHeaders?: boolean;
		/** [Config Option] (Object) */
		layout?: any;
		/** [Config Option] (Number) */
		leadingBufferZone?: number;
		/** [Config Option] (Boolean) */
		multiColumnSort?: boolean;
		/** [Config Option] (Boolean) */
		multiSelect?: boolean;
		/** [Config Option] (Number) */
		numFromEdge?: number;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Boolean) */
		reserveScrollbar?: boolean;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (String/Boolean) */
		scroll?: any;
		/** [Config Option] (Boolean) */
		sealedColumns?: boolean;
		/** [Config Option] (Ext.selection.Model/Object/String) */
		selModel?: any;
		/** [Config Option] (String) */
		selType?: string;
		/** [Config Option] (Ext.data.Model) */
		selection?: Ext.data.IModel;
		/** [Config Option] (Boolean) */
		simpleSelect?: boolean;
		/** [Config Option] (Boolean) */
		sortableColumns?: boolean;
		/** [Config Option] (Ext.data.Store/String/Object) */
		store?: any;
		/** [Config Option] (Number) */
		trailingBufferZone?: number;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Boolean) */
		variableRowHeight?: boolean;
		/** [Config Option] (Ext.view.Table) */
		view?: Ext.view.ITable;
		/** [Config Option] (Object) */
		viewConfig?: any;
		/** [Config Option] (String) */
		viewType?: string;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (Boolean) */
		hasView?: boolean;

		/** [Property] (Boolean) */
		optimizedColumnMove?: boolean;

		/** [Method] Invoked after the Panel is Collapsed  */
		afterCollapse?(): void;

		/** [Method] Invoked after the Panel is Expanded  */
		afterExpand?(): void;

		/** [Method] Applies the state to the object  
		* @param state Object 
		*/
		applyState?( state?:any ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Disables interaction with and masks this grid s column headers  */
		disableColumnHeaders?(): void;

		/** [Method] Enables interaction with and unmasks this grid s column headers after a call to disableColumnHeaders */
		enableColumnHeaders?(): void;

		/** [Method] Scrolls the specified record into view  
		* @param record Number/String/Ext.data.Model The record, record id, or the zero-based position in the dataset to scroll to. 
		* @param options Object An object containing options to modify the operation. 
		*/
		ensureVisible?( record?:any, options?:any ): void;

		/** [Method] Try to focus this component  
		* @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option. If this component is disabled, a closely related component will be focused and that will be returned. 
		*/
		focus?(): Ext.IComponent;

		/** [Method] Returns an array of all columns which exist in the grid s View visible or not  
		* @returns Ext.grid.column.Column[] columns An array of columns. Returns an empty array if no columns are found. 
		*/
		getColumns?(): Ext.grid.column.IColumn[];

		/** [Method] Gets the headercontainer for this grid  tree  
		* @returns Ext.grid.header.Container headercontainer Note: While a locked grid / tree will return an instance of Ext.grid.locking.HeaderContainer you will code to the Ext.grid.header.Container API. 
		*/
		getHeaderContainer?(): Ext.grid.header.IContainer;

		/** [Method] Returns the value of scrollable  
		* @returns Boolean/String/Object 
		*/
		getScrollable?(): any;

		/** [Method] Returns the grid s selection  
		* @returns Ext.data.Model[] The selected records 
		*/
		getSelection?(): Ext.data.IModel[];

		/** [Method] Returns the selection model being used by this grid s view  
		* @returns Ext.selection.Model The selection model being used by this grid's view. 
		*/
		getSelectionModel?(): Ext.selection.IModel;

		/** [Method] The supplied default state gathering method for the Component class  
		* @returns Object 
		*/
		getState?(): any;

		/** [Method] Returns the store associated with this Panel  
		* @returns Ext.data.Store The store 
		*/
		getStore?(): Ext.data.IStore;

		/** [Method] Gets the view for this panel  
		* @returns Ext.view.Table 
		*/
		getView?(): Ext.view.ITable;

		/** [Method] Returns an array of the visible columns in the grid  
		* @returns Ext.grid.column.Column[] columns An array of visible columns. Returns an empty array if no visible columns are found. 
		*/
		getVisibleColumns?(): Ext.grid.column.IColumn[];

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Reconfigures the grid or tree with a new store and or columns  
		* @param store Ext.data.Store/Object The new store instance or store config. You can pass null if no new store. 
		* @param columns Object[] An array of column configs 
		*/
		reconfigure?( store?:any, columns?:any[] ): void;

		/** [Method] Sets the value of selection  
		* @param selection Ext.data.Model The new value. 
		*/
		setSelection?( selection?:Ext.data.IModel ): void;

		/** [Method] A convenience method that fires reconfigure with the store param  
		* @param store Ext.data.Store The new store. 
		*/
		setStore?( store?:Ext.data.IStore ): void;

		/** [Method] Synchronizes the row heights between the locked and non locked portion of the grid for each row  */
		syncRowHeights?(): void;

	}

}

declare module Ext.panel {
	export interface ITitle extends Ext.IComponent {
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] ('top'/'right'/'bottom'/'left') */
		iconAlign?: any;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (0/1/2) */
		rotation?: any;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] ('left'/'center'/'right') */
		textAlign?: any;
		/** [Method] Called by the layout system after the Component has been laid out  */
		afterComponentLayout?(): void;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  
		* @param container Object 
		* @param pos Object 
		* @param instanced Object 
		*/
		onAdded?( container?:any, pos?:any, instanced?:any ): void;

		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

	}

}

declare module Ext.panel {
	export interface ITool extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Function/String) */
		callback?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] (Function) */
		handler?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		stopEvent?: boolean;
		/** [Config Option] (Ext.Component) */
		toolOwner?: Ext.IComponent;
		/** [Config Option] (String/Object) */
		tooltip?: any;
		/** [Config Option] (String) */
		tooltipType?: string;
		/** [Config Option] (String) */
		type?: string;
		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (Boolean) */
		isTool?: boolean;

		/** [Method] inherit docs */
		afterRender?(): void;

		/** [Method]  */
		initComponent?(): void;

		/** [Method] inherit docs */
		onDestroy?(): void;

		/** [Method] Sets the type of the tool  
		* @param type String The new type. See the type config. 
		* @returns Ext.panel.Tool this 
		*/
		setType?( type?:string ): Ext.panel.ITool;

	}

}

declare module Ext.perf {
	export interface IAccumulator extends Ext.IBase {
	}

}

declare module Ext.perf {
	export interface IMonitor extends Ext.IBase {
	}
	export class Monitor {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext {
	export interface IPerf extends Ext.IBase {
	}
	export class Perf {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.picker {
	export interface IColor extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		allowReselect?: boolean;
		/** [Config Option] (String) */
		clickEvent?: string;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (String) */
		value?: string;
		/** [Property] (String[]) */
		colors?: string[];

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Method] Clears any selection and sets the value to null  */
		clear?(): void;

		/** [Method] Get the currently selected color value  
		* @returns String value The selected value. Null if nothing is selected. 
		*/
		getValue?(): string;

		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

		/** [Method] Selects the specified color in the picker fires the select event  
		* @param color String A valid 6-digit color hex code (# will be stripped if included) 
		* @param suppressEvent Boolean True to stop the select event from firing. 
		*/
		select?( color?:string, suppressEvent?:boolean ): void;

	}

}

declare module Ext {
	export interface IColorPalette extends Ext.IComponent {
		/** [Config Option] (Boolean) */
		allowReselect?: boolean;
		/** [Config Option] (String) */
		clickEvent?: string;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (String) */
		value?: string;
		/** [Property] (String[]) */
		colors?: string[];

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Method] Clears any selection and sets the value to null  */
		clear?(): void;

		/** [Method] Get the currently selected color value  
		* @returns String value The selected value. Null if nothing is selected. 
		*/
		getValue?(): string;

		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

		/** [Method] Selects the specified color in the picker fires the select event  
		* @param color String A valid 6-digit color hex code (# will be stripped if included) 
		* @param suppressEvent Boolean True to stop the select event from firing. 
		*/
		select?( color?:string, suppressEvent?:boolean ): void;

	}

}

declare module Ext.picker {
	export interface IDate extends Ext.IComponent {
		/** [Config Option] (String) */
		ariaTitle?: string;
		/** [Config Option] (String) */
		ariaTitleDateFormat?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String/Boolean) */
		border?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String[]) */
		dayNames?: string[];
		/** [Config Option] (Boolean) */
		disableAnim?: boolean;
		/** [Config Option] (String) */
		disabledCellCls?: string;
		/** [Config Option] (String[]) */
		disabledDates?: string[];
		/** [Config Option] (RegExp) */
		disabledDatesRE?: RegExp;
		/** [Config Option] (String) */
		disabledDatesText?: string;
		/** [Config Option] (Number[]) */
		disabledDays?: number[];
		/** [Config Option] (String) */
		disabledDaysText?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Function) */
		handler?: any;
		/** [Config Option] (Object) */
		keyNavConfig?: any;
		/** [Config Option] (String) */
		longDayFormat?: string;
		/** [Config Option] (Date) */
		maxDate?: any;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date) */
		minDate?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (String[]) */
		monthNames?: string[];
		/** [Config Option] (String) */
		monthYearFormat?: string;
		/** [Config Option] (String) */
		monthYearText?: string;
		/** [Config Option] (String) */
		nextText?: string;
		/** [Config Option] (String) */
		prevText?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (Boolean) */
		showToday?: boolean;
		/** [Config Option] (Number) */
		startDay?: number;
		/** [Config Option] (String) */
		todayText?: string;
		/** [Config Option] (String) */
		todayTip?: string;
		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Method] Gets a single character to represent the day of the week 
		* @param value Object 
		* @returns String The character 
		*/
		getDayInitial?( value?:any ): string;

		/** [Method] Keep the tree structure correct for Ext form field Picker input fields which poke a pickerField reference down into  */
		getRefOwner?(): void;

		/** [Method] Gets the current selected value of the date field 
		* @returns Date The selected date 
		*/
		getValue?(): any;

		/** [Method] Hides the month picker if it s visible  
		* @param animate Boolean Indicates whether to animate this action. If the animate parameter is not specified, the behavior will use disableAnim to determine whether to animate or not. 
		* @returns Ext.picker.Date this 
		*/
		hideMonthPicker?( animate?:boolean ): Ext.picker.IDate;

		/** [Method] private inherit docs */
		initComponent?(): void;

		/** [Method] Sets the current value to today  
		* @returns Ext.picker.Date this 
		*/
		selectToday?(): Ext.picker.IDate;

		/** [Method] Replaces any existing disabled dates with new values and refreshes the DatePicker  
		* @param disabledDates String[]/RegExp An array of date strings (see the disabledDates config for details on supported values), or a JavaScript regular expression used to disable a pattern of dates. 
		* @returns Ext.picker.Date this 
		*/
		setDisabledDates?( disabledDates?:any ): Ext.picker.IDate;

		/** [Method] Replaces any existing disabled days by index 0 6 with new values and refreshes the DatePicker  
		* @param disabledDays Number[] An array of disabled day indexes. See the disabledDays config for details on supported values. 
		* @returns Ext.picker.Date this 
		*/
		setDisabledDays?( disabledDays?:number[] ): Ext.picker.IDate;

		/** [Method] Replaces any existing maxDate with the new value and refreshes the DatePicker  
		* @param value Date The maximum date that can be selected 
		* @returns Ext.picker.Date this 
		*/
		setMaxDate?( value?:any ): Ext.picker.IDate;

		/** [Method] Replaces any existing minDate with the new value and refreshes the DatePicker  
		* @param value Date The minimum date that can be selected 
		* @returns Ext.picker.Date this 
		*/
		setMinDate?( value?:any ): Ext.picker.IDate;

		/** [Method] Sets the value of the date field 
		* @param value Date The date to set 
		* @returns Ext.picker.Date this 
		*/
		setValue?( value?:any ): Ext.picker.IDate;

		/** [Method] Show the month picker 
		* @param animate Boolean Indicates whether to animate this action. If the animate parameter is not specified, the behavior will use disableAnim to determine whether to animate or not. 
		* @returns Ext.picker.Date this 
		*/
		showMonthPicker?( animate?:boolean ): Ext.picker.IDate;

		/** [Method] Show the next month  
		* @param e Object 
		* @returns Ext.picker.Date this 
		*/
		showNextMonth?( e?:any ): Ext.picker.IDate;

		/** [Method] Show the next year  
		* @returns Ext.picker.Date this 
		*/
		showNextYear?(): Ext.picker.IDate;

		/** [Method] Show the previous month  
		* @param e Object 
		* @returns Ext.picker.Date this 
		*/
		showPrevMonth?( e?:any ): Ext.picker.IDate;

		/** [Method] Show the previous year  
		* @returns Ext.picker.Date this 
		*/
		showPrevYear?(): Ext.picker.IDate;

	}

}

declare module Ext {
	export interface IDatePicker extends Ext.IComponent {
		/** [Config Option] (String) */
		ariaTitle?: string;
		/** [Config Option] (String) */
		ariaTitleDateFormat?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String/Boolean) */
		border?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String[]) */
		dayNames?: string[];
		/** [Config Option] (Boolean) */
		disableAnim?: boolean;
		/** [Config Option] (String) */
		disabledCellCls?: string;
		/** [Config Option] (String[]) */
		disabledDates?: string[];
		/** [Config Option] (RegExp) */
		disabledDatesRE?: RegExp;
		/** [Config Option] (String) */
		disabledDatesText?: string;
		/** [Config Option] (Number[]) */
		disabledDays?: number[];
		/** [Config Option] (String) */
		disabledDaysText?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Function) */
		handler?: any;
		/** [Config Option] (Object) */
		keyNavConfig?: any;
		/** [Config Option] (String) */
		longDayFormat?: string;
		/** [Config Option] (Date) */
		maxDate?: any;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date) */
		minDate?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (String[]) */
		monthNames?: string[];
		/** [Config Option] (String) */
		monthYearFormat?: string;
		/** [Config Option] (String) */
		monthYearText?: string;
		/** [Config Option] (String) */
		nextText?: string;
		/** [Config Option] (String) */
		prevText?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (Boolean) */
		showToday?: boolean;
		/** [Config Option] (Number) */
		startDay?: number;
		/** [Config Option] (String) */
		todayText?: string;
		/** [Config Option] (String) */
		todayTip?: string;
		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Method] Gets a single character to represent the day of the week 
		* @param value Object 
		* @returns String The character 
		*/
		getDayInitial?( value?:any ): string;

		/** [Method] Keep the tree structure correct for Ext form field Picker input fields which poke a pickerField reference down into  */
		getRefOwner?(): void;

		/** [Method] Gets the current selected value of the date field 
		* @returns Date The selected date 
		*/
		getValue?(): any;

		/** [Method] Hides the month picker if it s visible  
		* @param animate Boolean Indicates whether to animate this action. If the animate parameter is not specified, the behavior will use disableAnim to determine whether to animate or not. 
		* @returns Ext.picker.Date this 
		*/
		hideMonthPicker?( animate?:boolean ): Ext.picker.IDate;

		/** [Method] private inherit docs */
		initComponent?(): void;

		/** [Method] Sets the current value to today  
		* @returns Ext.picker.Date this 
		*/
		selectToday?(): Ext.picker.IDate;

		/** [Method] Replaces any existing disabled dates with new values and refreshes the DatePicker  
		* @param disabledDates String[]/RegExp An array of date strings (see the disabledDates config for details on supported values), or a JavaScript regular expression used to disable a pattern of dates. 
		* @returns Ext.picker.Date this 
		*/
		setDisabledDates?( disabledDates?:any ): Ext.picker.IDate;

		/** [Method] Replaces any existing disabled days by index 0 6 with new values and refreshes the DatePicker  
		* @param disabledDays Number[] An array of disabled day indexes. See the disabledDays config for details on supported values. 
		* @returns Ext.picker.Date this 
		*/
		setDisabledDays?( disabledDays?:number[] ): Ext.picker.IDate;

		/** [Method] Replaces any existing maxDate with the new value and refreshes the DatePicker  
		* @param value Date The maximum date that can be selected 
		* @returns Ext.picker.Date this 
		*/
		setMaxDate?( value?:any ): Ext.picker.IDate;

		/** [Method] Replaces any existing minDate with the new value and refreshes the DatePicker  
		* @param value Date The minimum date that can be selected 
		* @returns Ext.picker.Date this 
		*/
		setMinDate?( value?:any ): Ext.picker.IDate;

		/** [Method] Sets the value of the date field 
		* @param value Date The date to set 
		* @returns Ext.picker.Date this 
		*/
		setValue?( value?:any ): Ext.picker.IDate;

		/** [Method] Show the month picker 
		* @param animate Boolean Indicates whether to animate this action. If the animate parameter is not specified, the behavior will use disableAnim to determine whether to animate or not. 
		* @returns Ext.picker.Date this 
		*/
		showMonthPicker?( animate?:boolean ): Ext.picker.IDate;

		/** [Method] Show the next month  
		* @param e Object 
		* @returns Ext.picker.Date this 
		*/
		showNextMonth?( e?:any ): Ext.picker.IDate;

		/** [Method] Show the next year  
		* @returns Ext.picker.Date this 
		*/
		showNextYear?(): Ext.picker.IDate;

		/** [Method] Show the previous month  
		* @param e Object 
		* @returns Ext.picker.Date this 
		*/
		showPrevMonth?( e?:any ): Ext.picker.IDate;

		/** [Method] Show the previous year  
		* @returns Ext.picker.Date this 
		*/
		showPrevYear?(): Ext.picker.IDate;

	}

}

declare module Ext.picker {
	export interface IMonth extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		cancelText?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		okText?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (Boolean) */
		showButtons?: boolean;
		/** [Config Option] (Date/Number[]) */
		value?: any;
		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Method] Modify the year display by passing an offset  
		* @param offset Number The offset to move by. 
		*/
		adjustYear?( offset?:number ): void;

		/** [Method] Gets the selected value  
		* @returns Number[] The selected value 
		*/
		getValue?(): number[];

		/** [Method] Checks whether the picker has a selection 
		* @returns Boolean Returns true if both a month and year have been selected 
		*/
		hasSelection?(): boolean;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Set the value for the picker  
		* @param value Date/Number[] The value to set. It can be a Date object, where the month/year will be extracted, or it can be an array, with the month as the first index and the year as the second. 
		* @returns Ext.picker.Month this 
		*/
		setValue?( value?:any ): Ext.picker.IMonth;

	}

}

declare module Ext {
	export interface IMonthPicker extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		cancelText?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		okText?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (Boolean) */
		showButtons?: boolean;
		/** [Config Option] (Date/Number[]) */
		value?: any;
		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Method] Modify the year display by passing an offset  
		* @param offset Number The offset to move by. 
		*/
		adjustYear?( offset?:number ): void;

		/** [Method] Gets the selected value  
		* @returns Number[] The selected value 
		*/
		getValue?(): number[];

		/** [Method] Checks whether the picker has a selection 
		* @returns Boolean Returns true if both a month and year have been selected 
		*/
		hasSelection?(): boolean;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Set the value for the picker  
		* @param value Date/Number[] The value to set. It can be a Date object, where the month/year will be extracted, or it can be an array, with the month as the first index and the year as the second. 
		* @returns Ext.picker.Month this 
		*/
		setValue?( value?:any ): Ext.picker.IMonth;

	}

}

declare module Ext.picker {
	export interface ITime extends Ext.view.IBoundList {
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Date) */
		maxValue?: any;
		/** [Config Option] (Date) */
		minValue?: any;
		/** [Method] private */
		initComponent?(): void;

		/** [Method] Set the maxValue and update the list of available times  
		* @param value Date 
		*/
		setMaxValue?( value?:any ): void;

		/** [Method] Set the minValue and update the list of available times  
		* @param value Date 
		*/
		setMinValue?( value?:any ): void;

		/** [Method] Update the list of available times in the list to be constrained within the minValue and maxValue  */
		updateList?(): void;

	}

}

declare module Ext.plugin {
	export interface IAbstract extends Ext.IBase {
		/** [Config Option] (String) */
		pluginId?: string;
		/** [Config Option] (String|Array) */
		stateEvents?: any;
		/** [Property] (Boolean) */
		isPlugin?: boolean;

		/** [Method] The applyState method is invoked by the client Component s State mixin after initComponent method has been run for th  
		* @param state Object The current plugin state object to be applied. 
		* @param allState Object The current aggregate state of the Component and all plugins. 
		*/
		applyState?( state?:any, allState?:any ): void;

		/** [Method] Creates clone of the plugin  
		* @param overrideCfg Object Additional config for the derived plugin. 
		*/
		clonePlugin?( overrideCfg?:any ): void;

		/** [Method] The destroy method is invoked by the owning Component at the time the Component is being destroyed  */
		destroy?(): void;

		/** [Method] The base implementation just sets the plugin s disabled flag to true Plugin subclasses which need more complex proce  */
		disable?(): void;

		/** [Method] The base implementation just sets the plugin s disabled flag to false Plugin subclasses which need more complex proc  */
		enable?(): void;

		/** [Method] Returns the component to which this plugin is attached  
		* @returns Ext.Component Owner component. 
		*/
		getCmp?(): Ext.IComponent;

		/** [Method] The getState method is invoked by the client Component s State mixin when one or more of the the specified stateEvent  
		* @returns Object state 
		*/
		getState?(): any;

		/** [Method] The init method is invoked after initComponent method has been run for the client Component  
		* @param client Ext.Component The client Component which owns this plugin. 
		*/
		init?( client?:Ext.IComponent ): void;

		/** [Method] Sets the component to which this plugin is attached  
		* @param cmp Ext.Component Owner component. 
		*/
		setCmp?( cmp?:Ext.IComponent ): void;

	}

}

declare module Ext {
	export interface IAbstractPlugin extends Ext.IBase {
		/** [Config Option] (String) */
		pluginId?: string;
		/** [Config Option] (String|Array) */
		stateEvents?: any;
		/** [Property] (Boolean) */
		isPlugin?: boolean;

		/** [Method] The applyState method is invoked by the client Component s State mixin after initComponent method has been run for th  
		* @param state Object The current plugin state object to be applied. 
		* @param allState Object The current aggregate state of the Component and all plugins. 
		*/
		applyState?( state?:any, allState?:any ): void;

		/** [Method] Creates clone of the plugin  
		* @param overrideCfg Object Additional config for the derived plugin. 
		*/
		clonePlugin?( overrideCfg?:any ): void;

		/** [Method] The destroy method is invoked by the owning Component at the time the Component is being destroyed  */
		destroy?(): void;

		/** [Method] The base implementation just sets the plugin s disabled flag to true Plugin subclasses which need more complex proce  */
		disable?(): void;

		/** [Method] The base implementation just sets the plugin s disabled flag to false Plugin subclasses which need more complex proc  */
		enable?(): void;

		/** [Method] Returns the component to which this plugin is attached  
		* @returns Ext.Component Owner component. 
		*/
		getCmp?(): Ext.IComponent;

		/** [Method] The getState method is invoked by the client Component s State mixin when one or more of the the specified stateEvent  
		* @returns Object state 
		*/
		getState?(): any;

		/** [Method] The init method is invoked after initComponent method has been run for the client Component  
		* @param client Ext.Component The client Component which owns this plugin. 
		*/
		init?( client?:Ext.IComponent ): void;

		/** [Method] Sets the component to which this plugin is attached  
		* @param cmp Ext.Component Owner component. 
		*/
		setCmp?( cmp?:Ext.IComponent ): void;

	}

}

declare module Ext.plugin {
	export interface IAbstractClipboard extends Ext.plugin.IAbstract {
		/** [Config Option] (Object) */
		formats?: any;
		/** [Config Option] (String/String[]) */
		memory?: any;
		/** [Config Option] (String/String[]) */
		source?: any;
		/** [Config Option] (String) */
		system?: string;
		/** [Method] The destroy method is invoked by the owning Component at the time the Component is being destroyed  */
		destroy?(): void;

		/** [Method] Returns the value of formats  
		* @returns Object 
		*/
		getFormats?(): any;

		/** [Method] Returns the value of memory  
		* @returns String/String[] 
		*/
		getMemory?(): any;

		/** [Method] Returns the value of source  
		* @returns String/String[] 
		*/
		getSource?(): any;

		/** [Method] Returns the value of system  
		* @returns String 
		*/
		getSystem?(): string;

		/** [Method] This method returns the selected data in text format  
		* @param format String The name of the format (i.e., "text"). 
		* @param erase Boolean Pass true to erase (cut) the data, false to just copy. 
		* @returns String The data in text format. 
		*/
		getTextData?( format?:string, erase?:boolean ): string;

		/** [Method] The init method is invoked after initComponent method has been run for the client Component  
		* @param comp Object 
		*/
		init?( comp?:any ): void;

		/** [Method] This method pastes the given text data  
		* @param data Object The data in the indicated format. 
		* @param format String The name of the format (i.e., "text"). 
		*/
		putTextData?( data?:any, format?:string ): void;

		/** [Method] Sets the value of formats  
		* @param formats Object The new value. 
		*/
		setFormats?( formats?:any ): void;

		/** [Method] Sets the value of memory  
		* @param memory String/String[] The new value. 
		*/
		setMemory?( memory?:any ): void;

		/** [Method] Sets the value of source  
		* @param source String/String[] The new value. 
		*/
		setSource?( source?:any ): void;

		/** [Method] Sets the value of system  
		* @param system String The new value. 
		*/
		setSystem?( system?:string ): void;

	}

}

declare module Ext.plugin {
	export interface ILazyItems extends Ext.plugin.IAbstract {
		/** [Method] The init method is invoked after initComponent method has been run for the client Component  
		* @param comp Object 
		*/
		init?( comp?:any ): void;

	}

}

declare module Ext.plugin {
	export interface IManager extends Ext.IBase {
	}
	export class Manager {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Creates a new Plugin from the specified config object using the config object s ptype to determine the class to insta  
		* @param config Object A configuration object for the Plugin you wish to create. 
		* @param defaultType Function The constructor to provide the default Plugin type if the config object does not contain a ptype. (Optional if the config contains a ptype). 
		* @returns Ext.Component The newly instantiated Plugin. 
		*/
		static create( config?:any, defaultType?:any ): Ext.IComponent;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext {
	export interface IPluginManager extends Ext.IBase {
	}
	export class PluginManager {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Creates a new Plugin from the specified config object using the config object s ptype to determine the class to insta  
		* @param config Object A configuration object for the Plugin you wish to create. 
		* @param defaultType Function The constructor to provide the default Plugin type if the config object does not contain a ptype. (Optional if the config contains a ptype). 
		* @returns Ext.Component The newly instantiated Plugin. 
		*/
		static create( config?:any, defaultType?:any ): Ext.IComponent;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext {
	export interface IPluginMgr extends Ext.IBase {
	}
	export class PluginMgr {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Creates a new Plugin from the specified config object using the config object s ptype to determine the class to insta  
		* @param config Object A configuration object for the Plugin you wish to create. 
		* @param defaultType Function The constructor to provide the default Plugin type if the config object does not contain a ptype. (Optional if the config contains a ptype). 
		* @returns Ext.Component The newly instantiated Plugin. 
		*/
		static create( config?:any, defaultType?:any ): Ext.IComponent;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.plugin {
	export interface IResponsive extends Ext.mixin.IResponsive {
	}

}

declare module Ext.plugin {
	export interface IViewport extends Ext.plugin.IResponsive {
	}

}

declare module Ext {
	export interface IProgressBar extends Ext.IComponent {
		/** [Config Option] (Boolean/Object) */
		animate?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		textEl?: any;
		/** [Config Option] (String/Ext.XTemplate) */
		textTpl?: any;
		/** [Config Option] (Number) */
		value?: number;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Method] Returns the value of textTpl  
		* @returns String/Ext.XTemplate 
		*/
		getTextTpl?(): any;

		/** [Method] Returns the value of value  
		* @returns Number 
		*/
		getValue?(): number;

		/** [Method] Returns true if the progress bar is currently in a wait operation 
		* @returns Boolean True if waiting, else false 
		*/
		isWaiting?(): boolean;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

		/** [Method] Resets the progress bar value to 0 and text to empty string  
		* @param hide Boolean True to hide the progress bar. 
		* @returns Ext.ProgressBar this 
		*/
		reset?( hide?:boolean ): Ext.IProgressBar;

		/** [Method] Sets the value of textTpl  
		* @param textTpl String/Ext.XTemplate The new value. 
		*/
		setTextTpl?( textTpl?:any ): void;

		/** [Method] Sets the value of value  
		* @param value Number The new value. 
		*/
		setValue?( value?:number ): void;

		/** [Method] Updates the progress bar value and optionally its text  
		* @param value Number A floating point value between 0 and 1 (e.g., .5) 
		* @param text String The string to display in the progress text element 
		* @param animate Boolean Whether to animate the transition of the progress bar. If this value is not specified, the default for the class is used 
		* @returns Ext.ProgressBar this 
		*/
		updateProgress?( value?:number, text?:string, animate?:boolean ): Ext.IProgressBar;

		/** [Method] Updates the progress bar text  
		* @param text String The string to display in the progress text element 
		* @returns Ext.ProgressBar this 
		*/
		updateText?( text?:string ): Ext.IProgressBar;

		/** [Method] Initiates an auto updating progress bar  
		* @param config Object Configuration options 
		* @returns Ext.ProgressBar this 
		*/
		wait?( config?:any ): Ext.IProgressBar;

	}

}

declare module Ext {
	export interface IProgressBarWidget extends Ext.IWidget {
		/** [Config Option] (Boolean) */
		animate?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String/Ext.XTemplate) */
		textTpl?: any;
		/** [Config Option] (Number) */
		value?: number;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Array) */
		template?: any[];

		/** [Method]  
		* @param width Object 
		*/
		doSetWidth?( width?:any ): void;

		/** [Method] Returns the value of animate  
		* @returns Boolean 
		*/
		getAnimate?(): boolean;

		/** [Method] Returns the value of baseCls  
		* @returns String 
		*/
		getBaseCls?(): string;

		/** [Method] Returns the value of text  
		* @returns String 
		*/
		getText?(): string;

		/** [Method] Returns the value of textCls  
		* @returns String 
		*/
		getTextCls?(): string;

		/** [Method] Returns the value of textTpl  
		* @returns String/Ext.XTemplate 
		*/
		getTextTpl?(): any;

		/** [Method] Returns the value of ui  
		* @returns String 
		*/
		getUi?(): string;

		/** [Method] Returns the value of value  
		* @returns Number 
		*/
		getValue?(): number;

		/** [Method] Sets the value of animate  
		* @param animate Boolean The new value. 
		*/
		setAnimate?( animate?:boolean ): void;

		/** [Method] Sets the value of baseCls  
		* @param baseCls String The new value. 
		*/
		setBaseCls?( baseCls?:string ): void;

		/** [Method] Sets the value of text  
		* @param text String The new value. 
		*/
		setText?( text?:string ): void;

		/** [Method] Sets the value of textCls  
		* @param textCls String The new value. 
		*/
		setTextCls?( textCls?:string ): void;

		/** [Method] Sets the value of textTpl  
		* @param textTpl String/Ext.XTemplate The new value. 
		*/
		setTextTpl?( textTpl?:any ): void;

		/** [Method] Sets the value of ui  
		* @param ui String The new value. 
		*/
		setUi?( ui?:string ): void;

		/** [Method] Sets the value of value  
		* @param value Number The new value. 
		*/
		setValue?( value?:number ): void;

	}

}

declare module Ext.resizer {
	export interface IBorderSplitter extends Ext.resizer.ISplitter {
		/** [Config Option] (String/Ext.panel.Panel) */
		collapseTarget?: any;
		/** [Method] Returns the config object with an xclass property for the splitter tracker  */
		getTrackerConfig?(): void;

	}

}

declare module Ext.resizer {
	export interface IBorderSplitterTracker extends Ext.resizer.ISplitterTracker {
		/** [Method] ensure the tracker is enabled store boxes of previous and next components and calculate the constrain region 
		* @param e Object 
		*/
		onBeforeStart?( e?:any ): void;

	}

}

declare module Ext.resizer {
	export interface IHandle extends Ext.IComponent {
		/** [Config Option] ("north"/"south"/"east"/"west"/"center") */
		region?: any;
	}

}

declare module Ext.resizer {
	export interface IResizer extends Ext.IBase, Ext.util.IObservable {
		/** [Config Option] (Ext.dom.Element/Ext.util.Region) */
		constrainTo?: any;
		/** [Config Option] (Boolean) */
		dynamic?: boolean;
		/** [Config Option] (String) */
		handles?: string;
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (Number) */
		heightIncrement?: number;
		/** [Config Option] (Number) */
		maxHeight?: number;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		pinned?: boolean;
		/** [Config Option] (Boolean) */
		preserveRatio?: boolean;
		/** [Config Option] (Ext.dom.Element/Ext.Component) */
		target?: any;
		/** [Config Option] (Boolean) */
		transparent?: boolean;
		/** [Config Option] (Number) */
		width?: number;
		/** [Config Option] (Number) */
		widthIncrement?: number;
		/** [Property] (Ext.dom.Element) */
		el?: Ext.dom.IElement;

		/** [Property] (Ext.dom.Element/Ext.Component) */
		originalTarget?: any;

		/** [Property] (Ext.resizer.ResizeTracker) */
		resizeTracker?: Ext.resizer.IResizeTracker;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the element that was configured with the el or target config property  
		* @returns Ext.dom.Element element 
		*/
		getEl?(): Ext.dom.IElement;

		/** [Method] Returns the element or component that was configured with the target config property  
		* @returns Ext.dom.Element/Ext.Component 
		*/
		getTarget?(): any;

		/** [Method] Perform a manual resize and fires the resize event  
		* @param width Number 
		* @param height Number 
		*/
		resizeTo?( width?:number, height?:number ): void;

	}

}

declare module Ext {
	export interface IResizable extends Ext.IBase, Ext.util.IObservable {
		/** [Config Option] (Ext.dom.Element/Ext.util.Region) */
		constrainTo?: any;
		/** [Config Option] (Boolean) */
		dynamic?: boolean;
		/** [Config Option] (String) */
		handles?: string;
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (Number) */
		heightIncrement?: number;
		/** [Config Option] (Number) */
		maxHeight?: number;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		pinned?: boolean;
		/** [Config Option] (Boolean) */
		preserveRatio?: boolean;
		/** [Config Option] (Ext.dom.Element/Ext.Component) */
		target?: any;
		/** [Config Option] (Boolean) */
		transparent?: boolean;
		/** [Config Option] (Number) */
		width?: number;
		/** [Config Option] (Number) */
		widthIncrement?: number;
		/** [Property] (Ext.dom.Element) */
		el?: Ext.dom.IElement;

		/** [Property] (Ext.dom.Element/Ext.Component) */
		originalTarget?: any;

		/** [Property] (Ext.resizer.ResizeTracker) */
		resizeTracker?: Ext.resizer.IResizeTracker;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the element that was configured with the el or target config property  
		* @returns Ext.dom.Element element 
		*/
		getEl?(): Ext.dom.IElement;

		/** [Method] Returns the element or component that was configured with the target config property  
		* @returns Ext.dom.Element/Ext.Component 
		*/
		getTarget?(): any;

		/** [Method] Perform a manual resize and fires the resize event  
		* @param width Number 
		* @param height Number 
		*/
		resizeTo?( width?:number, height?:number ): void;

	}

}

declare module Ext.resizer {
	export interface IResizeTracker extends Ext.dd.IDragTracker {
		/** [Config Option] (Ext.util.Region/Ext.dom.Element) */
		constrainTo?: any;
		/** [Method] Create a proxy for this resizer 
		* @param target Ext.Component/Ext.dom.Element The target 
		* @returns Ext.dom.Element A proxy element 
		*/
		createProxy?( target?:any ): Ext.dom.IElement;

		/** [Method] Template method which should be overridden by each DragTracker instance  
		* @param e Object 
		*/
		onBeforeStart?( e?:any ): void;

		/** [Method] Template method which should be overridden by each DragTracker instance  
		* @param e Object 
		*/
		onDrag?( e?:any ): void;

		/** [Method] Template method which should be overridden by each DragTracker instance  
		* @param e Object 
		*/
		onEnd?( e?:any ): void;

		/** [Method] Template method which should be overridden by each DragTracker instance  
		* @param e Object 
		*/
		onStart?( e?:any ): void;

	}

}

declare module Ext.resizer {
	export interface ISplitter extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		collapseOnDblClick?: boolean;
		/** [Config Option] (String/Ext.panel.Panel) */
		collapseTarget?: any;
		/** [Config Option] (String) */
		collapsedCls?: string;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (Number) */
		defaultSplitMax?: number;
		/** [Config Option] (Number) */
		defaultSplitMin?: number;
		/** [Config Option] (Boolean) */
		performCollapse?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Number) */
		size?: number;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Object) */
		tracker?: any;
		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (String) */
		orientation?: string;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Returns the config object with an xclass property for the splitter tracker  */
		getTrackerConfig?(): void;

		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

		/** [Method] Work around IE bug  
		* @returns Ext.Component this 
		*/
		setSize?(): Ext.IComponent;

	}

}

declare module Ext.resizer {
	export interface ISplitterTracker extends Ext.dd.IDragTracker {
		/** [Method] ensure the tracker is enabled store boxes of previous and next components and calculate the constrain region 
		* @param e Object 
		*/
		onBeforeStart?( e?:any ): void;

		/** [Method] Track the proxy and set the proper XY coordinates while constraining the drag 
		* @param e Object 
		*/
		onDrag?( e?:any ): void;

		/** [Method] perform the resize and remove the proxy class from the splitter el 
		* @param e Object 
		*/
		onEnd?( e?:any ): void;

		/** [Method] We move the splitter el  
		* @param e Object 
		*/
		onStart?( e?:any ): void;

	}

}

declare module Ext.scroll {
	export interface IDomScroller extends Ext.scroll.IScroller {
		/** [Method] Returns the maximum scroll position for this scroller 
		* @returns Object position 
		*/
		getMaxPosition?(): any;

		/** [Method] Returns the maximum scroll position for this scroller for scrolling that is initiated by the user via mouse or touch  
		* @returns Object position 
		*/
		getMaxUserPosition?(): any;

		/** [Method] Returns the current scroll position 
		* @returns Object an object with x and y properties 
		*/
		getPosition?(): any;

		/** [Method] Returns the size of the scrollable content 
		* @returns Object size 
		*/
		getSize?(): any;

	}

}

declare module Ext.scroll {
	export interface IIndicator extends Ext.IWidget {
		/** [Config Option] (Number) */
		hideDelay?: number;
		/** [Config Option] (Number) */
		minLength?: number;
		/** [Method] Returns the value of hideDelay  
		* @returns Number 
		*/
		getHideDelay?(): number;

		/** [Method] Returns the value of minLength  
		* @returns Number 
		*/
		getMinLength?(): number;

		/** [Method] Hides this scroll indicator */
		hide?(): void;

		/** [Method] Sets the value of hideDelay  
		* @param hideDelay Number The new value. 
		*/
		setHideDelay?( hideDelay?:number ): void;

		/** [Method] Sets the value of minLength  
		* @param minLength Number The new value. 
		*/
		setMinLength?( minLength?:number ): void;

		/** [Method] Sets the value of this scroll indicator  
		* @param value Number The scroll position on the configured axis 
		*/
		setValue?( value?:number ): void;

		/** [Method] Shows this scroll indicator */
		show?(): void;

	}

}

declare module Ext.scroll {
	export interface IScroller extends Ext.IEvented, Ext.mixin.IFactoryable {
		/** [Config Option] ('auto'/'vertical'/'horizontal'/'both') */
		direction?: any;
		/** [Config Option] (Boolean) */
		directionLock?: boolean;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		element?: any;
		/** [Config Option] (Boolean/Object) */
		indicators?: any;
		/** [Config Option] (Object) */
		momentumEasing?: any;
		/** [Config Option] (Boolean) */
		rtl?: boolean;
		/** [Config Option] (Boolean/String) */
		x?: any;
		/** [Config Option] (Boolean/String) */
		y?: any;
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Method] Adds a partner scroller  
		* @param partner Ext.scroll.Scroller 
		* @param axis String The axis to synchronize ('x', 'y', or 'both') 
		*/
		addPartner?( partner?:Ext.scroll.IScroller, axis?:string ): void;

		/** [Method] Returns the value of direction  
		* @returns 'auto'/'vertical'/'horizontal'/'both' 
		*/
		getDirection?(): any;

		/** [Method] Returns the value of directionLock  
		* @returns Boolean 
		*/
		getDirectionLock?(): boolean;

		/** [Method] Returns the value of disabled  
		* @returns Boolean 
		*/
		getDisabled?(): boolean;

		/** [Method] Returns the value of element  
		* @returns String/HTMLElement/Ext.dom.Element 
		*/
		getElement?(): any;

		/** [Method] Returns the value of indicators  
		* @returns Boolean/Object 
		*/
		getIndicators?(): any;

		/** [Method] Returns the maximum scroll position for this scroller 
		* @returns Object position 
		*/
		getMaxPosition?(): any;

		/** [Method] Returns the maximum scroll position for this scroller for scrolling that is initiated by the user via mouse or touch  
		* @returns Object position 
		*/
		getMaxUserPosition?(): any;

		/** [Method] Returns the value of momentumEasing  
		* @returns Object 
		*/
		getMomentumEasing?(): any;

		/** [Method] Returns the current scroll position 
		* @returns Object an object with x and y properties 
		*/
		getPosition?(): any;

		/** [Method] Returns this scroller  
		* @returns Ext.scroll.Scroller this 
		*/
		getScroller?(): Ext.scroll.IScroller;

		/** [Method] Returns the size of the scrollable content 
		* @returns Object size 
		*/
		getSize?(): any;

		/** [Method] Returns the value of x  
		* @returns Boolean/String 
		*/
		getX?(): any;

		/** [Method] Returns the value of y  
		* @returns Boolean/String 
		*/
		getY?(): any;

		/** [Method] Refreshes the scroller size and maxPosition  
		* @param immediate Boolean true to refresh immediately. By default refreshes are deferred until the next idle event to ensure any pending writes have been flushed to the dom and any reflows have taken place. 
		* @returns Ext.scroll.Scroller this 
		*/
		refresh?( immediate?:boolean ): Ext.scroll.IScroller;

		/** [Method] Scrolls by the passed delta values optionally animating  
		* @param deltaX Number/Number[]/Object Either the x delta, an Array specifying x and y deltas or an object with "x" and "y" properties. 
		* @param deltaY Number/Boolean/Object Either the y delta, or an animate flag or config object. 
		* @param animate Boolean/Object Animate flag/config object if the delta values were passed separately. 
		*/
		scrollBy?( deltaX?:any, deltaY?:any, animate?:any ): void;

		/** [Method] Scrolls to the given position  
		* @param x Number The scroll position on the x axis. 
		* @param y Number The scroll position on the y axis. 
		* @param animation Boolean/Object Whether or not to animate the scrolling to the new position. 
		* @returns Ext.scroll.Scroller this 
		*/
		scrollTo?( x?:number, y?:number, animation?:any ): Ext.scroll.IScroller;

		/** [Method] Sets the value of direction  
		* @param direction 'auto'/'vertical'/'horizontal'/'both' The new value. 
		*/
		setDirection?( direction?:any ): void;

		/** [Method] Sets the value of directionLock  
		* @param directionLock Boolean The new value. 
		*/
		setDirectionLock?( directionLock?:boolean ): void;

		/** [Method] Sets the value of disabled  
		* @param disabled Boolean The new value. 
		*/
		setDisabled?( disabled?:boolean ): void;

		/** [Method] Sets the value of element  
		* @param element String/HTMLElement/Ext.dom.Element The new value. 
		*/
		setElement?( element?:any ): void;

		/** [Method] Sets the value of indicators  
		* @param indicators Boolean/Object The new value. 
		*/
		setIndicators?( indicators?:any ): void;

		/** [Method] Sets the value of momentumEasing  
		* @param momentumEasing Object The new value. 
		*/
		setMomentumEasing?( momentumEasing?:any ): void;

		/** [Method] Sets the value of x  
		* @param x Boolean/String The new value. 
		*/
		setX?( x?:any ): void;

		/** [Method] Sets the value of y  
		* @param y Boolean/String The new value. 
		*/
		setY?( y?:any ): void;

	}
	export class Scroller {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Creates and returns an appropriate Scroller instance for the current device  
		* @param config Object Configuration options for the Scroller 
		* @returns Ext.scroll.Scroller 
		*/
		static create( config?:any ): Ext.scroll.IScroller;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.scroll {
	export interface ITouchScroller extends Ext.scroll.IScroller {
		/** [Config Option] (Boolean/Object) */
		indicators?: any;
		/** [Config Option] (Object) */
		momentumEasing?: any;
		/** [Config Option] (Number/Object) */
		slotSnapSize?: any;
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of indicators  
		* @returns Boolean 
		*/
		getIndicators?(): boolean;

		/** [Method] Returns the value of momentumEasing  
		* @returns Object 
		*/
		getMomentumEasing?(): any;

		/** [Method] Returns the current scroll position 
		* @returns Object an object with x and y properties 
		*/
		getPosition?(): any;

		/** [Method] Returns the value of size  
		* @returns Object 
		*/
		getSize?(): any;

		/** [Method] Returns the value of slotSnapSize  
		* @returns Number/Object 
		*/
		getSlotSnapSize?(): any;

		/** [Method] Refreshes the scroller size and maxPosition  
		* @param immediate Object 
		* @param options Object 
		* @returns Ext.scroll.Scroller this 
		*/
		refresh?( immediate?:any, options?:any ): Ext.scroll.IScroller;

		/** [Method] Sets the value of indicators  
		* @param indicators Boolean The new value. 
		*/
		setIndicators?( indicators?:boolean ): void;

		/** [Method] Sets the value of momentumEasing  
		* @param momentumEasing Object The new value. 
		*/
		setMomentumEasing?( momentumEasing?:any ): void;

		/** [Method] Sets the value of size  
		* @param size Object The new value. 
		*/
		setSize?( size?:any ): void;

		/** [Method] Sets the value of slotSnapSize  
		* @param slotSnapSize Number/Object The new value. 
		*/
		setSlotSnapSize?( slotSnapSize?:any ): void;

	}

}

declare module Ext.selection {
	export interface ICellModel extends Ext.selection.IDataViewModel {
		/** [Config Option] (Boolean) */
		enableKeyNav?: boolean;
		/** [Config Option] ("SINGLE") */
		mode?: string;
		/** [Config Option] (Boolean) */
		preventWrap?: boolean;
		/** [Property] (Boolean) */
		deselectOnContainerClick?: boolean;

		/** [Method] Returns the current position in the format row row column column  */
		getCurrentPosition?(): void;

		/** [Method] Returns the current position in the format row row column column  
		* @returns Ext.grid.CellContext A CellContext object describing the current cell. 
		*/
		getPosition?(): Ext.grid.ICellContext;

		/** [Method] Selects a cell by row  column  
		* @param pos Object An object with row and column properties 
		*/
		select?( pos?:any ): void;

		/** [Method] Sets the current position  
		* @param position Ext.grid.CellContext/Object The position to set. May be an object of the form {row:1, column:2} 
		* @param suppressEvent Boolean True to suppress selection events 
		*/
		setCurrentPosition?( position?:any, suppressEvent?:boolean ): void;

		/** [Method] Sets the current position  
		* @param position Ext.grid.CellContext/Object The position to set. May be an object of the form {row:1, column:2} 
		* @param suppressEvent Boolean True to suppress selection events 
		*/
		setPosition?( position?:any, suppressEvent?:boolean ): void;

	}

}

declare module Ext.selection {
	export interface ICheckboxModel extends Ext.selection.IRowModel {
		/** [Config Option] (Boolean) */
		allowDeselect?: boolean;
		/** [Config Option] (Boolean) */
		checkOnly?: boolean;
		/** [Config Option] (String) */
		checkSelector?: string;
		/** [Config Option] (Number/String) */
		injectCheckbox?: any;
		/** [Config Option] ("SINGLE"/"SIMPLE"/"MULTI") */
		mode?: any;
		/** [Config Option] (Boolean) */
		showHeaderCheckbox?: boolean;
		/** [Method] Allows multiple views to be controlled by one selection model  
		* @param view Object 
		*/
		beforeViewRender?( view?:any ): void;

		/** [Method] cleanup  */
		destroy?(): void;

		/** [Method] Retrieve a configuration to be used in a HeaderContainer  */
		getHeaderConfig?(): void;

		/** [Method] Toggle between selecting all and deselecting all when clicking on a checkbox header  
		* @param headerCt Object 
		* @param header Object 
		* @param e Object 
		*/
		onHeaderClick?( headerCt?:any, header?:any, e?:any ): void;

		/** [Method] Generates the HTML to be rendered in the injected checkbox column for each row  
		* @param value Object 
		* @param metaData Object 
		* @param record Object 
		* @param rowIndex Object 
		* @param colIndex Object 
		* @param store Object 
		* @param view Object 
		*/
		renderer?( value?:any, metaData?:any, record?:any, rowIndex?:any, colIndex?:any, store?:any, view?:any ): void;

	}

}

declare module Ext.selection {
	export interface IDataViewModel extends Ext.selection.IModel {
		/** [Config Option] (Boolean) */
		enableKeyNav?: boolean;
		/** [Method] cleanup  */
		destroy?(): void;

	}

}

declare module Ext.selection {
	export interface IModel extends Ext.mixin.IObservable, Ext.util.IStoreHolder, Ext.mixin.IFactoryable {
		/** [Config Option] (Boolean) */
		allowDeselect?: boolean;
		/** [Config Option] (Boolean) */
		ignoreRightMouseSelection?: boolean;
		/** [Config Option] ("SINGLE"/"SIMPLE"/"MULTI") */
		mode?: any;
		/** [Config Option] (Boolean) */
		pruneRemoved?: boolean;
		/** [Config Option] (Boolean) */
		toggleOnClick?: boolean;
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Boolean) */
		isSelectionModel?: boolean;

		/** [Method] Allows multiple views to be controlled by one selection model  
		* @param view Ext.view.View The View passes itself 
		*/
		beforeViewRender?( view?:Ext.view.IView ): void;

		/** [Method] Binds a store to this instance  
		* @param store Ext.data.AbstractStore/String The store to bind or ID of the store. When no store given (or when null or undefined passed), unbinds the existing store. 
		*/
		bindStore?( store?:any ): void;

		/** [Method] Binds listeners for this component to the store  
		* @param store Ext.data.AbstractStore The store to bind to 
		*/
		bindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

		/** [Method] Deselects a record instance by record instance or index  
		* @param records Ext.data.Model[]/Number An array of records or an index 
		* @param suppressEvent Boolean True to not fire a deselect event 
		*/
		deselect?( records?:any, suppressEvent?:boolean ): void;

		/** [Method] Deselects all records in the view  
		* @param suppressEvent Boolean True to suppress any deselect events 
		*/
		deselectAll?( suppressEvent?:boolean ): void;

		/** [Method] Deselects a range of rows if the selection model is not locked  
		* @param startRow Ext.data.Model/Number The record or index of the first row in the range 
		* @param endRow Ext.data.Model/Number The record or index of the last row in the range 
		*/
		deselectRange?( startRow?:any, endRow?:any ): void;

		/** [Method] cleanup  */
		destroy?(): void;

		/** [Method] Returns the count of selected records  
		* @returns Number The number of selected records 
		*/
		getCount?(): number;

		/** [Method] Returns an array of the currently selected records  
		* @returns Ext.data.Model[] The selected records 
		*/
		getSelection?(): Ext.data.IModel[];

		/** [Method] Returns the current selectionMode  
		* @returns String The selectionMode: 'SINGLE', 'MULTI' or 'SIMPLE'. 
		*/
		getSelectionMode?(): string;

		/** [Method] Gets the listeners to bind to a new store  
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?(): any;

		/** [Method] Returns true if there are any a selected records  
		* @returns Boolean 
		*/
		hasSelection?(): boolean;

		/** [Method] Returns true if the selections are locked  
		* @returns Boolean 
		*/
		isLocked?(): boolean;

		/** [Method] Returns true if the specified row is selected  
		* @param from Ext.data.Model/Number The start of the range to check. 
		* @param to Ext.data.Model/Number The end of the range to check. 
		* @returns Boolean 
		*/
		isRangeSelected?( from?:any, to?:any ): boolean;

		/** [Method] Returns true if the specified row is selected  
		* @param record Ext.data.Model/Number The record or index of the record to check 
		* @returns Boolean 
		*/
		isSelected?( record?:any ): boolean;

		/** [Method] On bind of a new store we need to refresh against what is in the new store  
		* @param store Object 
		* @param initial Object 
		*/
		onBindStore?( store?:any, initial?:any ): void;

		/** [Method] Called by the owning grid s header container when a column header is activated by the UI clicked or receives a SPAC  */
		onHeaderClick?(): void;

		/** [Method] Template method it is called when an existing store is unbound from the current instance  
		* @param store Ext.data.AbstractStore The store being unbound 
		* @param initial Boolean True if this store is being bound as initialization of the instance. 
		*/
		onUnbindStore?( store?:Ext.data.IAbstractStore, initial?:boolean ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Selects a record instance by record instance or index  
		* @param records Ext.data.Model[]/Number An array of records or an index 
		* @param keepExisting Boolean True to retain existing selections 
		* @param suppressEvent Boolean True to not fire a select event 
		*/
		select?( records?:any, keepExisting?:boolean, suppressEvent?:boolean ): void;

		/** [Method] Selects all records in the view  
		* @param suppressEvent Boolean True to suppress any select events 
		*/
		selectAll?( suppressEvent?:boolean ): void;

		/** [Method] Selects a range of rows if the selection model is not locked  
		* @param startRow Ext.data.Model/Number The record or index of the first row in the range 
		* @param endRow Ext.data.Model/Number The record or index of the last row in the range 
		* @param keepExisting Boolean True to retain existing selections 
		*/
		selectRange?( startRow?:any, endRow?:any, keepExisting?:boolean ): void;

		/** [Method] Locks the current selection and disables any changes from happening to the selection  
		* @param locked Boolean True to lock, false to unlock. 
		*/
		setLocked?( locked?:boolean ): void;

		/** [Method] Sets the current selectionMode  
		* @param selMode String 'SINGLE', 'MULTI' or 'SIMPLE'. 
		*/
		setSelectionMode?( selMode?:string ): void;

		/** [Method] Unbinds listeners from this component to the store  
		* @param store Ext.data.AbstractStore The store to unbind from 
		*/
		unbindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

	}

}

declare module Ext {
	export interface IAbstractSelectionModel extends Ext.mixin.IObservable, Ext.util.IStoreHolder, Ext.mixin.IFactoryable {
		/** [Config Option] (Boolean) */
		allowDeselect?: boolean;
		/** [Config Option] (Boolean) */
		ignoreRightMouseSelection?: boolean;
		/** [Config Option] ("SINGLE"/"SIMPLE"/"MULTI") */
		mode?: any;
		/** [Config Option] (Boolean) */
		pruneRemoved?: boolean;
		/** [Config Option] (Boolean) */
		toggleOnClick?: boolean;
		/** [Property] (Object) */
		factoryConfig?: any;

		/** [Property] (Boolean) */
		isSelectionModel?: boolean;

		/** [Method] Allows multiple views to be controlled by one selection model  
		* @param view Ext.view.View The View passes itself 
		*/
		beforeViewRender?( view?:Ext.view.IView ): void;

		/** [Method] Binds a store to this instance  
		* @param store Ext.data.AbstractStore/String The store to bind or ID of the store. When no store given (or when null or undefined passed), unbinds the existing store. 
		*/
		bindStore?( store?:any ): void;

		/** [Method] Binds listeners for this component to the store  
		* @param store Ext.data.AbstractStore The store to bind to 
		*/
		bindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

		/** [Method] Deselects a record instance by record instance or index  
		* @param records Ext.data.Model[]/Number An array of records or an index 
		* @param suppressEvent Boolean True to not fire a deselect event 
		*/
		deselect?( records?:any, suppressEvent?:boolean ): void;

		/** [Method] Deselects all records in the view  
		* @param suppressEvent Boolean True to suppress any deselect events 
		*/
		deselectAll?( suppressEvent?:boolean ): void;

		/** [Method] Deselects a range of rows if the selection model is not locked  
		* @param startRow Ext.data.Model/Number The record or index of the first row in the range 
		* @param endRow Ext.data.Model/Number The record or index of the last row in the range 
		*/
		deselectRange?( startRow?:any, endRow?:any ): void;

		/** [Method] cleanup  */
		destroy?(): void;

		/** [Method] Returns the count of selected records  
		* @returns Number The number of selected records 
		*/
		getCount?(): number;

		/** [Method] Returns an array of the currently selected records  
		* @returns Ext.data.Model[] The selected records 
		*/
		getSelection?(): Ext.data.IModel[];

		/** [Method] Returns the current selectionMode  
		* @returns String The selectionMode: 'SINGLE', 'MULTI' or 'SIMPLE'. 
		*/
		getSelectionMode?(): string;

		/** [Method] Gets the listeners to bind to a new store  
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?(): any;

		/** [Method] Returns true if there are any a selected records  
		* @returns Boolean 
		*/
		hasSelection?(): boolean;

		/** [Method] Returns true if the selections are locked  
		* @returns Boolean 
		*/
		isLocked?(): boolean;

		/** [Method] Returns true if the specified row is selected  
		* @param from Ext.data.Model/Number The start of the range to check. 
		* @param to Ext.data.Model/Number The end of the range to check. 
		* @returns Boolean 
		*/
		isRangeSelected?( from?:any, to?:any ): boolean;

		/** [Method] Returns true if the specified row is selected  
		* @param record Ext.data.Model/Number The record or index of the record to check 
		* @returns Boolean 
		*/
		isSelected?( record?:any ): boolean;

		/** [Method] On bind of a new store we need to refresh against what is in the new store  
		* @param store Object 
		* @param initial Object 
		*/
		onBindStore?( store?:any, initial?:any ): void;

		/** [Method] Called by the owning grid s header container when a column header is activated by the UI clicked or receives a SPAC  */
		onHeaderClick?(): void;

		/** [Method] Template method it is called when an existing store is unbound from the current instance  
		* @param store Ext.data.AbstractStore The store being unbound 
		* @param initial Boolean True if this store is being bound as initialization of the instance. 
		*/
		onUnbindStore?( store?:Ext.data.IAbstractStore, initial?:boolean ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Selects a record instance by record instance or index  
		* @param records Ext.data.Model[]/Number An array of records or an index 
		* @param keepExisting Boolean True to retain existing selections 
		* @param suppressEvent Boolean True to not fire a select event 
		*/
		select?( records?:any, keepExisting?:boolean, suppressEvent?:boolean ): void;

		/** [Method] Selects all records in the view  
		* @param suppressEvent Boolean True to suppress any select events 
		*/
		selectAll?( suppressEvent?:boolean ): void;

		/** [Method] Selects a range of rows if the selection model is not locked  
		* @param startRow Ext.data.Model/Number The record or index of the first row in the range 
		* @param endRow Ext.data.Model/Number The record or index of the last row in the range 
		* @param keepExisting Boolean True to retain existing selections 
		*/
		selectRange?( startRow?:any, endRow?:any, keepExisting?:boolean ): void;

		/** [Method] Locks the current selection and disables any changes from happening to the selection  
		* @param locked Boolean True to lock, false to unlock. 
		*/
		setLocked?( locked?:boolean ): void;

		/** [Method] Sets the current selectionMode  
		* @param selMode String 'SINGLE', 'MULTI' or 'SIMPLE'. 
		*/
		setSelectionMode?( selMode?:string ): void;

		/** [Method] Unbinds listeners from this component to the store  
		* @param store Ext.data.AbstractStore The store to unbind from 
		*/
		unbindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

	}

}

declare module Ext.selection {
	export interface IRowModel extends Ext.selection.IDataViewModel {
		/** [Config Option] (Boolean) */
		enableKeyNav?: boolean;
		/** [Property] (Boolean) */
		deselectOnContainerClick?: boolean;

		/** [Method] Returns position of the first selected cell in the selection in the format row row column column  */
		getCurrentPosition?(): void;

		/** [Method] Selects the record immediately following the currently selected record  
		* @param keepExisting Boolean True to retain existing selections 
		* @param suppressEvent Boolean Set to false to not fire a select event 
		* @returns Boolean true if there is a next record, else false 
		*/
		selectNext?( keepExisting?:boolean, suppressEvent?:boolean ): boolean;

		/** [Method] Selects the record that precedes the currently selected record  
		* @param keepExisting Boolean True to retain existing selections 
		* @param suppressEvent Boolean Set to false to not fire a select event 
		* @returns Boolean true if there is a previous record, else false 
		*/
		selectPrevious?( keepExisting?:boolean, suppressEvent?:boolean ): boolean;

	}

}

declare module Ext.selection {
	export interface ITreeModel extends Ext.selection.IRowModel {
		/** [Config Option] (Boolean) */
		selectOnExpanderClick?: boolean;
		/** [Method] Gets the listeners to bind to a new store  
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?(): any;

	}

}

declare module Ext.slider {
	export interface IMulti extends Ext.form.field.IBase {
		/** [Config Option] (Object/Boolean) */
		animate?: any;
		/** [Config Option] (Boolean) */
		clickToChange?: boolean;
		/** [Config Option] (Boolean) */
		constrainThumbs?: boolean;
		/** [Config Option] (Number/Boolean) */
		decimalPrecision?: any;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Number) */
		keyIncrement?: number;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Function) */
		tipText?: any;
		/** [Config Option] (Object/Boolean) */
		useTips?: any;
		/** [Config Option] (Number) */
		value?: number;
		/** [Config Option] (Number[]) */
		values?: number[];
		/** [Config Option] (Boolean) */
		vertical?: boolean;
		/** [Config Option] (Boolean) */
		zeroBasedSnapping?: boolean;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Boolean) */
		dragging?: boolean;

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (Array) */
		thumbs?: any[];

		/** [Method] Creates a new thumb and adds it to the slider 
		* @param value Number The initial value to set on the thumb. 
		* @returns Ext.slider.Thumb The thumb 
		*/
		addThumb?( value?:number ): Ext.slider.IThumb;

		/** [Method] private */
		beforeDestroy?(): void;

		/** [Method] Base field checkChange method will fire change event with signature common to all fields but Slider fires the same  */
		checkChange?(): void;

		/** [Method] private override 
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Returns the value that would be included in a standard form submit for this field  
		* @returns String The value to be submitted, or null. 
		*/
		getSubmitValue?(): string;

		/** [Method] Returns the current value of the slider 
		* @param index Number The index of the thumb to return a value for 
		* @returns Number/Number[] The current value of the slider at the given index, or an array of all thumb values if no index is given. 
		*/
		getValue?( index?:number ): any;

		/** [Method] Returns an array of values  one for the location of each thumb 
		* @returns Number[] The set of thumb values 
		*/
		getValues?(): number[];

		/** [Method] private override */
		initComponent?(): void;

		/** [Method] private override */
		initValue?(): void;

		/** [Method] private */
		onDisable?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] private */
		onRender?(): void;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Sets the maximum value for the slider instance  
		* @param val Number The new maximum value 
		*/
		setMaxValue?( val?:number ): void;

		/** [Method] Sets the minimum value for the slider instance  
		* @param val Number The new minimum value 
		*/
		setMinValue?( val?:number ): void;

		/** [Method] Sets the read only state of this field  
		* @param readOnly Object 
		*/
		setReadOnly?( readOnly?:any ): void;

		/** [Method] Synchronizes thumbs position to the proper proportion of the total component width based on the current slider value  */
		syncThumbs?(): void;

	}

}

declare module Ext.slider {
	export interface IMultiSlider extends Ext.form.field.IBase {
		/** [Config Option] (Object/Boolean) */
		animate?: any;
		/** [Config Option] (Boolean) */
		clickToChange?: boolean;
		/** [Config Option] (Boolean) */
		constrainThumbs?: boolean;
		/** [Config Option] (Number/Boolean) */
		decimalPrecision?: any;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Number) */
		keyIncrement?: number;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Function) */
		tipText?: any;
		/** [Config Option] (Object/Boolean) */
		useTips?: any;
		/** [Config Option] (Number) */
		value?: number;
		/** [Config Option] (Number[]) */
		values?: number[];
		/** [Config Option] (Boolean) */
		vertical?: boolean;
		/** [Config Option] (Boolean) */
		zeroBasedSnapping?: boolean;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Boolean) */
		dragging?: boolean;

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Property] (Array) */
		thumbs?: any[];

		/** [Method] Creates a new thumb and adds it to the slider 
		* @param value Number The initial value to set on the thumb. 
		* @returns Ext.slider.Thumb The thumb 
		*/
		addThumb?( value?:number ): Ext.slider.IThumb;

		/** [Method] private */
		beforeDestroy?(): void;

		/** [Method] Base field checkChange method will fire change event with signature common to all fields but Slider fires the same  */
		checkChange?(): void;

		/** [Method] private override 
		* @param fieldData Object 
		* @returns Object The template data 
		*/
		getSubTplData?( fieldData?:any ): any;

		/** [Method] Returns the value that would be included in a standard form submit for this field  
		* @returns String The value to be submitted, or null. 
		*/
		getSubmitValue?(): string;

		/** [Method] Returns the current value of the slider 
		* @param index Number The index of the thumb to return a value for 
		* @returns Number/Number[] The current value of the slider at the given index, or an array of all thumb values if no index is given. 
		*/
		getValue?( index?:number ): any;

		/** [Method] Returns an array of values  one for the location of each thumb 
		* @returns Number[] The set of thumb values 
		*/
		getValues?(): number[];

		/** [Method] private override */
		initComponent?(): void;

		/** [Method] private override */
		initValue?(): void;

		/** [Method] private */
		onDisable?(): void;

		/** [Method] private */
		onEnable?(): void;

		/** [Method] private */
		onRender?(): void;

		/** [Method] Resets the current field value to the originally loaded value and clears any validation messages  */
		reset?(): void;

		/** [Method] Sets the maximum value for the slider instance  
		* @param val Number The new maximum value 
		*/
		setMaxValue?( val?:number ): void;

		/** [Method] Sets the minimum value for the slider instance  
		* @param val Number The new minimum value 
		*/
		setMinValue?( val?:number ): void;

		/** [Method] Sets the read only state of this field  
		* @param readOnly Object 
		*/
		setReadOnly?( readOnly?:any ): void;

		/** [Method] Synchronizes thumbs position to the proper proportion of the total component width based on the current slider value  */
		syncThumbs?(): void;

	}

}

declare module Ext.slider {
	export interface ISingle extends Ext.slider.IMulti {
		/** [Config Option] (Boolean) */
		publishOnComplete?: boolean;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Method] Returns the current value of the slider 
		* @returns Number The current value of the slider 
		*/
		getValue?(): number;

		/** [Method] private override */
		initComponent?(): void;

		/** [Method] Programmatically sets the value of the Slider  
		* @param value Number The value to set the slider to. (This will be constrained within minValue and maxValue) 
		* @param animate Object/Boolean false to not animate. true to use the default animation. This may also be an animate configuration object, see animate. If this configuration is omitted, the animate configuration will be used. 
		* @returns Ext.form.field.Field 
		*/
		setValue?( value?:number, animate?:any ): Ext.form.field.IField;

	}

}

declare module Ext {
	export interface ISlider extends Ext.slider.IMulti {
		/** [Config Option] (Boolean) */
		publishOnComplete?: boolean;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Method] Returns the current value of the slider 
		* @returns Number The current value of the slider 
		*/
		getValue?(): number;

		/** [Method] private override */
		initComponent?(): void;

		/** [Method] Programmatically sets the value of the Slider  
		* @param value Number The value to set the slider to. (This will be constrained within minValue and maxValue) 
		* @param animate Object/Boolean false to not animate. true to use the default animation. This may also be an animate configuration object, see animate. If this configuration is omitted, the animate configuration will be used. 
		* @returns Ext.form.field.Field 
		*/
		setValue?( value?:number, animate?:any ): Ext.form.field.IField;

	}

}

declare module Ext.form {
	export interface ISliderField extends Ext.slider.IMulti {
		/** [Config Option] (Boolean) */
		publishOnComplete?: boolean;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Method] Returns the current value of the slider 
		* @returns Number The current value of the slider 
		*/
		getValue?(): number;

		/** [Method] private override */
		initComponent?(): void;

		/** [Method] Programmatically sets the value of the Slider  
		* @param value Number The value to set the slider to. (This will be constrained within minValue and maxValue) 
		* @param animate Object/Boolean false to not animate. true to use the default animation. This may also be an animate configuration object, see animate. If this configuration is omitted, the animate configuration will be used. 
		* @returns Ext.form.field.Field 
		*/
		setValue?( value?:number, animate?:any ): Ext.form.field.IField;

	}

}

declare module Ext.slider {
	export interface ISingleSlider extends Ext.slider.IMulti {
		/** [Config Option] (Boolean) */
		publishOnComplete?: boolean;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Method] Returns the current value of the slider 
		* @returns Number The current value of the slider 
		*/
		getValue?(): number;

		/** [Method] private override */
		initComponent?(): void;

		/** [Method] Programmatically sets the value of the Slider  
		* @param value Number The value to set the slider to. (This will be constrained within minValue and maxValue) 
		* @param animate Object/Boolean false to not animate. true to use the default animation. This may also be an animate configuration object, see animate. If this configuration is omitted, the animate configuration will be used. 
		* @returns Ext.form.field.Field 
		*/
		setValue?( value?:number, animate?:any ): Ext.form.field.IField;

	}

}

declare module Ext.slider {
	export interface ISlider extends Ext.slider.IMulti {
		/** [Config Option] (Boolean) */
		publishOnComplete?: boolean;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Method] Returns the current value of the slider 
		* @returns Number The current value of the slider 
		*/
		getValue?(): number;

		/** [Method] private override */
		initComponent?(): void;

		/** [Method] Programmatically sets the value of the Slider  
		* @param value Number The value to set the slider to. (This will be constrained within minValue and maxValue) 
		* @param animate Object/Boolean false to not animate. true to use the default animation. This may also be an animate configuration object, see animate. If this configuration is omitted, the animate configuration will be used. 
		* @returns Ext.form.field.Field 
		*/
		setValue?( value?:number, animate?:any ): Ext.form.field.IField;

	}

}

declare module Ext.slider {
	export interface IThumb extends Ext.IBase {
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Ext.slider.MultiSlider) */
		slider?: Ext.slider.IMultiSlider;
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Disables the thumb if it is currently enabled */
		disable?(): void;

		/** [Method] Enables the thumb if it is currently disabled */
		enable?(): void;

		/** [Method] Sets up an Ext dd DragTracker for this thumb */
		initEvents?(): void;

		/** [Method] Renders the thumb into a slider */
		render?(): void;

	}

}

declare module Ext.slider {
	export interface ITip extends Ext.tip.ITip {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Array) */
		offsets?: any[];
		/** [Config Option] (String) */
		position?: string;
		/** [Method] Used to create the text that appears in the Tip s body  
		* @param thumb Ext.slider.Thumb The Thumb that the Tip is attached to 
		* @returns String The text to display in the tip 
		*/
		getText?( thumb?:Ext.slider.IThumb ): string;

	}

}

declare module Ext.slider {
	export interface IWidget extends Ext.IWidget {
		/** [Config Option] (Boolean) */
		clickToChange?: boolean;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Boolean) */
		publishOnComplete?: boolean;
		/** [Config Option] (Object) */
		twoWayBindable?: any;
		/** [Config Option] (Number/Number[]) */
		value?: any;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Object) */
		element?: any;

		/** [Method]  
		* @param height Object 
		*/
		doSetHeight?( height?:any ): void;

		/** [Method] Returns the value of clickToChange  
		* @returns Boolean 
		*/
		getClickToChange?(): boolean;

		/** [Method] Returns the value of maxValue  
		* @returns Number 
		*/
		getMaxValue?(): number;

		/** [Method] Returns the value of minValue  
		* @returns Number 
		*/
		getMinValue?(): number;

		/** [Method] Returns the value of publishOnComplete  
		* @returns Boolean 
		*/
		getPublishOnComplete?(): boolean;

		/** [Method] Returns the value of twoWayBindable  
		* @returns Object 
		*/
		getTwoWayBindable?(): any;

		/** [Method] Returns the value of ui  
		* @returns String 
		*/
		getUi?(): string;

		/** [Method] Returns the current value of the slider 
		* @param index Number The index of the thumb to return a value for 
		* @returns Number/Number[] The current value of the slider at the given index, or an array of all thumb values if no index is given. 
		*/
		getValue?( index?:number ): any;

		/** [Method] Returns an array of values  one for the location of each thumb 
		* @returns Number[] The set of thumb values 
		*/
		getValues?(): number[];

		/** [Method] Returns the value of vertical  
		* @returns Boolean 
		*/
		getVertical?(): boolean;

		/** [Method] Sets the value of clickToChange  
		* @param clickToChange Boolean The new value. 
		*/
		setClickToChange?( clickToChange?:boolean ): void;

		/** [Method] Sets the value of maxValue  
		* @param maxValue Number The new value. 
		*/
		setMaxValue?( maxValue?:number ): void;

		/** [Method] Sets the value of minValue  
		* @param minValue Number The new value. 
		*/
		setMinValue?( minValue?:number ): void;

		/** [Method] Sets the value of publishOnComplete  
		* @param publishOnComplete Boolean The new value. 
		*/
		setPublishOnComplete?( publishOnComplete?:boolean ): void;

		/** [Method] Programmatically sets the value of the Slider  
		* @param index Number/Number[] Index of the thumb to move. Alternatively, it can be an array of values to set for each thumb in the slider. 
		* @param value Number The value to set the slider to. (This will be constrained within minValue and maxValue) 
		* @param animate Boolean Turn on or off animation 
		* @returns Ext.slider.Multi this 
		*/
		setThumbValue?( index?:any, value?:number, animate?:boolean ): Ext.slider.IMulti;

		/** [Method] Sets the value of twoWayBindable  
		* @param twoWayBindable Object The new value. 
		*/
		setTwoWayBindable?( twoWayBindable?:any ): void;

		/** [Method] Sets the value of ui  
		* @param ui String The new value. 
		*/
		setUi?( ui?:string ): void;

		/** [Method] Sets the value of value  
		* @param value Number/Number[] The new value. 
		*/
		setValue?( value?:any ): void;

		/** [Method] Sets the value of vertical  
		* @param vertical Boolean The new value. 
		*/
		setVertical?( vertical?:boolean ): void;

	}

}

declare module Ext.sparkline {
	export interface IBar extends Ext.sparkline.IBarBase {
		/** [Config Option] (String) */
		barColor?: string;
		/** [Config Option] (Number) */
		barSpacing?: number;
		/** [Config Option] (Number) */
		barWidth?: number;
		/** [Config Option] (Boolean) */
		chartRangeClip?: boolean;
		/** [Config Option] (Number) */
		chartRangeMax?: number;
		/** [Config Option] (Number) */
		chartRangeMin?: number;
		/** [Config Option] (Object) */
		colorMap?: any;
		/** [Config Option] (String) */
		negBarColor?: string;
		/** [Config Option] (String) */
		nullColor?: string;
		/** [Config Option] (String[]) */
		stackedBarColor?: string[];
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Config Option] (Boolean) */
		zeroAxis?: boolean;
		/** [Config Option] (String) */
		zeroColor?: string;
		/** [Method] Returns the value of barColor  
		* @returns String 
		*/
		getBarColor?(): string;

		/** [Method] Returns the value of barSpacing  
		* @returns Number 
		*/
		getBarSpacing?(): number;

		/** [Method] Returns the value of barWidth  
		* @returns Number 
		*/
		getBarWidth?(): number;

		/** [Method] Returns the value of chartRangeClip  
		* @returns Boolean 
		*/
		getChartRangeClip?(): boolean;

		/** [Method] Returns the value of chartRangeMax  
		* @returns Number 
		*/
		getChartRangeMax?(): number;

		/** [Method] Returns the value of chartRangeMin  
		* @returns Number 
		*/
		getChartRangeMin?(): number;

		/** [Method] Returns the value of colorMap  
		* @returns Object 
		*/
		getColorMap?(): any;

		/** [Method] Returns the value of negBarColor  
		* @returns String 
		*/
		getNegBarColor?(): string;

		/** [Method] Returns the value of nullColor  
		* @returns String 
		*/
		getNullColor?(): string;

		/** [Method] Returns the value of stackedBarColor  
		* @returns String[] 
		*/
		getStackedBarColor?(): string[];

		/** [Method] Returns the value of tipTpl  
		* @returns Object 
		*/
		getTipTpl?(): any;

		/** [Method] Returns the value of zeroAxis  
		* @returns Boolean 
		*/
		getZeroAxis?(): boolean;

		/** [Method] Returns the value of zeroColor  
		* @returns String 
		*/
		getZeroColor?(): string;

		/** [Method] Sets the value of barColor  
		* @param barColor String The new value. 
		*/
		setBarColor?( barColor?:string ): void;

		/** [Method] Sets the value of barSpacing  
		* @param barSpacing Number The new value. 
		*/
		setBarSpacing?( barSpacing?:number ): void;

		/** [Method] Sets the value of barWidth  
		* @param barWidth Number The new value. 
		*/
		setBarWidth?( barWidth?:number ): void;

		/** [Method] Sets the value of chartRangeClip  
		* @param chartRangeClip Boolean The new value. 
		*/
		setChartRangeClip?( chartRangeClip?:boolean ): void;

		/** [Method] Sets the value of chartRangeMax  
		* @param chartRangeMax Number The new value. 
		*/
		setChartRangeMax?( chartRangeMax?:number ): void;

		/** [Method] Sets the value of chartRangeMin  
		* @param chartRangeMin Number The new value. 
		*/
		setChartRangeMin?( chartRangeMin?:number ): void;

		/** [Method] Sets the value of colorMap  
		* @param colorMap Object The new value. 
		*/
		setColorMap?( colorMap?:any ): void;

		/** [Method] Sets the value of negBarColor  
		* @param negBarColor String The new value. 
		*/
		setNegBarColor?( negBarColor?:string ): void;

		/** [Method] Sets the value of nullColor  
		* @param nullColor String The new value. 
		*/
		setNullColor?( nullColor?:string ): void;

		/** [Method] Sets the value of stackedBarColor  
		* @param stackedBarColor String[] The new value. 
		*/
		setStackedBarColor?( stackedBarColor?:string[] ): void;

		/** [Method] Sets the value of tipTpl  
		* @param tipTpl Object The new value. 
		*/
		setTipTpl?( tipTpl?:any ): void;

		/** [Method] Sets the value of zeroAxis  
		* @param zeroAxis Boolean The new value. 
		*/
		setZeroAxis?( zeroAxis?:boolean ): void;

		/** [Method] Sets the value of zeroColor  
		* @param zeroColor String The new value. 
		*/
		setZeroColor?( zeroColor?:string ): void;

	}

}

declare module Ext.sparkline {
	export interface IBarBase extends Ext.sparkline.IBase {
	}

}

declare module Ext.sparkline {
	export interface IBase extends Ext.IWidget {
		/** [Config Option] (String) */
		fillColor?: string;
		/** [Config Option] (String) */
		highlightColor?: string;
		/** [Config Option] (Number) */
		highlightLighten?: number;
		/** [Config Option] (String) */
		lineColor?: string;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Config Option] (Boolean) */
		tooltipSkipNull?: boolean;
		/** [Config Option] (Number[]) */
		values?: number[];
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Object) */
		element?: any;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method]  
		* @param height Object 
		*/
		doSetHeight?( height?:any ): void;

		/** [Method]  
		* @param width Object 
		*/
		doSetWidth?( width?:any ): void;

		/** [Method] Returns the value of baseCls  
		* @returns String 
		*/
		getBaseCls?(): string;

		/** [Method] Returns the value of defaultPixelsPerValue  
		* @returns Number 
		*/
		getDefaultPixelsPerValue?(): number;

		/** [Method] Returns the value of disableInteraction  
		* @returns Boolean 
		*/
		getDisableInteraction?(): boolean;

		/** [Method] Returns the value of disableTooltips  
		* @returns Boolean 
		*/
		getDisableTooltips?(): boolean;

		/** [Method] Returns the value of enableHighlight  
		* @returns Boolean 
		*/
		getEnableHighlight?(): boolean;

		/** [Method] Returns the value of enableTagOptions  
		* @returns Boolean 
		*/
		getEnableTagOptions?(): boolean;

		/** [Method] Returns the value of fillColor  
		* @returns String 
		*/
		getFillColor?(): string;

		/** [Method] Returns the value of highlightColor  
		* @returns String 
		*/
		getHighlightColor?(): string;

		/** [Method] Returns the value of highlightLighten  
		* @returns Number 
		*/
		getHighlightLighten?(): number;

		/** [Method] Returns the value of lineColor  
		* @returns String 
		*/
		getLineColor?(): string;

		/** [Method] Returns the value of tagValuesAttribute  
		* @returns String 
		*/
		getTagValuesAttribute?(): string;

		/** [Method] Returns the value of tipTpl  
		* @returns String/Ext.XTemplate 
		*/
		getTipTpl?(): any;

		/** [Method] Returns the value of tooltipPrefix  
		* @returns String 
		*/
		getTooltipPrefix?(): string;

		/** [Method] Returns the value of tooltipSkipNull  
		* @returns Boolean 
		*/
		getTooltipSkipNull?(): boolean;

		/** [Method] Returns the value of tooltipSuffix  
		* @returns String 
		*/
		getTooltipSuffix?(): string;

		/** [Method] Returns the value of values  
		* @returns Number[] 
		*/
		getValues?(): number[];

		/** [Method] Sets the value of baseCls  
		* @param baseCls String The new value. 
		*/
		setBaseCls?( baseCls?:string ): void;

		/** [Method] Sets the value of defaultPixelsPerValue  
		* @param defaultPixelsPerValue Number The new value. 
		*/
		setDefaultPixelsPerValue?( defaultPixelsPerValue?:number ): void;

		/** [Method] Sets the value of disableInteraction  
		* @param disableInteraction Boolean The new value. 
		*/
		setDisableInteraction?( disableInteraction?:boolean ): void;

		/** [Method] Sets the value of disableTooltips  
		* @param disableTooltips Boolean The new value. 
		*/
		setDisableTooltips?( disableTooltips?:boolean ): void;

		/** [Method] Sets the value of enableHighlight  
		* @param enableHighlight Boolean The new value. 
		*/
		setEnableHighlight?( enableHighlight?:boolean ): void;

		/** [Method] Sets the value of enableTagOptions  
		* @param enableTagOptions Boolean The new value. 
		*/
		setEnableTagOptions?( enableTagOptions?:boolean ): void;

		/** [Method] Sets the value of fillColor  
		* @param fillColor String The new value. 
		*/
		setFillColor?( fillColor?:string ): void;

		/** [Method] Sets the value of highlightColor  
		* @param highlightColor String The new value. 
		*/
		setHighlightColor?( highlightColor?:string ): void;

		/** [Method] Sets the value of highlightLighten  
		* @param highlightLighten Number The new value. 
		*/
		setHighlightLighten?( highlightLighten?:number ): void;

		/** [Method] Sets the value of lineColor  
		* @param lineColor String The new value. 
		*/
		setLineColor?( lineColor?:string ): void;

		/** [Method] Sets the value of tagValuesAttribute  
		* @param tagValuesAttribute String The new value. 
		*/
		setTagValuesAttribute?( tagValuesAttribute?:string ): void;

		/** [Method] Sets the value of tipTpl  
		* @param tipTpl String/Ext.XTemplate The new value. 
		*/
		setTipTpl?( tipTpl?:any ): void;

		/** [Method] Sets the value of tooltipPrefix  
		* @param tooltipPrefix String The new value. 
		*/
		setTooltipPrefix?( tooltipPrefix?:string ): void;

		/** [Method] Sets the value of tooltipSkipNull  
		* @param tooltipSkipNull Boolean The new value. 
		*/
		setTooltipSkipNull?( tooltipSkipNull?:boolean ): void;

		/** [Method] Sets the value of tooltipSuffix  
		* @param tooltipSuffix String The new value. 
		*/
		setTooltipSuffix?( tooltipSuffix?:string ): void;

		/** [Method] Sets the value of values  
		* @param values Number[] The new value. 
		*/
		setValues?( values?:number[] ): void;

	}

}

declare module Ext.sparkline {
	export interface IBox extends Ext.sparkline.IBase {
		/** [Config Option] (String) */
		boxFillColor?: string;
		/** [Config Option] (String) */
		boxLineColor?: string;
		/** [Config Option] (Number) */
		chartRangeMax?: number;
		/** [Config Option] (Number) */
		chartRangeMin?: number;
		/** [Config Option] (String) */
		medianColor?: string;
		/** [Config Option] (String) */
		outlierFillColor?: string;
		/** [Config Option] (Number) */
		outlierIQR?: number;
		/** [Config Option] (String) */
		outlierLineColor?: string;
		/** [Config Option] (Boolean) */
		raw?: boolean;
		/** [Config Option] (Boolean) */
		showOutliers?: boolean;
		/** [Config Option] (Number) */
		spotRadius?: number;
		/** [Config Option] (Number) */
		target?: number;
		/** [Config Option] (Number) */
		targetColor?: number;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Config Option] (String) */
		whiskerColor?: string;
		/** [Method] Returns the value of boxFillColor  
		* @returns String 
		*/
		getBoxFillColor?(): string;

		/** [Method] Returns the value of boxLineColor  
		* @returns String 
		*/
		getBoxLineColor?(): string;

		/** [Method] Returns the value of chartRangeMax  
		* @returns Number 
		*/
		getChartRangeMax?(): number;

		/** [Method] Returns the value of chartRangeMin  
		* @returns Number 
		*/
		getChartRangeMin?(): number;

		/** [Method] Returns the value of medianColor  
		* @returns String 
		*/
		getMedianColor?(): string;

		/** [Method] Returns the value of outlierFillColor  
		* @returns String 
		*/
		getOutlierFillColor?(): string;

		/** [Method] Returns the value of outlierIQR  
		* @returns Number 
		*/
		getOutlierIQR?(): number;

		/** [Method] Returns the value of outlierLineColor  
		* @returns String 
		*/
		getOutlierLineColor?(): string;

		/** [Method] Returns the value of raw  
		* @returns Boolean 
		*/
		getRaw?(): boolean;

		/** [Method] Returns the value of showOutliers  
		* @returns Boolean 
		*/
		getShowOutliers?(): boolean;

		/** [Method] Returns the value of spotRadius  
		* @returns Number 
		*/
		getSpotRadius?(): number;

		/** [Method] Returns the value of target  
		* @returns Number 
		*/
		getTarget?(): number;

		/** [Method] Returns the value of targetColor  
		* @returns Number 
		*/
		getTargetColor?(): number;

		/** [Method] Returns the value of tipTpl  
		* @returns Object 
		*/
		getTipTpl?(): any;

		/** [Method] Returns the value of tooltipFormatFieldlistKey  
		* @returns String 
		*/
		getTooltipFormatFieldlistKey?(): string;

		/** [Method] Returns the value of whiskerColor  
		* @returns String 
		*/
		getWhiskerColor?(): string;

		/** [Method] Sets the value of boxFillColor  
		* @param boxFillColor String The new value. 
		*/
		setBoxFillColor?( boxFillColor?:string ): void;

		/** [Method] Sets the value of boxLineColor  
		* @param boxLineColor String The new value. 
		*/
		setBoxLineColor?( boxLineColor?:string ): void;

		/** [Method] Sets the value of chartRangeMax  
		* @param chartRangeMax Number The new value. 
		*/
		setChartRangeMax?( chartRangeMax?:number ): void;

		/** [Method] Sets the value of chartRangeMin  
		* @param chartRangeMin Number The new value. 
		*/
		setChartRangeMin?( chartRangeMin?:number ): void;

		/** [Method] Sets the value of medianColor  
		* @param medianColor String The new value. 
		*/
		setMedianColor?( medianColor?:string ): void;

		/** [Method] Sets the value of outlierFillColor  
		* @param outlierFillColor String The new value. 
		*/
		setOutlierFillColor?( outlierFillColor?:string ): void;

		/** [Method] Sets the value of outlierIQR  
		* @param outlierIQR Number The new value. 
		*/
		setOutlierIQR?( outlierIQR?:number ): void;

		/** [Method] Sets the value of outlierLineColor  
		* @param outlierLineColor String The new value. 
		*/
		setOutlierLineColor?( outlierLineColor?:string ): void;

		/** [Method] Sets the value of raw  
		* @param raw Boolean The new value. 
		*/
		setRaw?( raw?:boolean ): void;

		/** [Method] Sets the value of showOutliers  
		* @param showOutliers Boolean The new value. 
		*/
		setShowOutliers?( showOutliers?:boolean ): void;

		/** [Method] Sets the value of spotRadius  
		* @param spotRadius Number The new value. 
		*/
		setSpotRadius?( spotRadius?:number ): void;

		/** [Method] Sets the value of target  
		* @param target Number The new value. 
		*/
		setTarget?( target?:number ): void;

		/** [Method] Sets the value of targetColor  
		* @param targetColor Number The new value. 
		*/
		setTargetColor?( targetColor?:number ): void;

		/** [Method] Sets the value of tipTpl  
		* @param tipTpl Object The new value. 
		*/
		setTipTpl?( tipTpl?:any ): void;

		/** [Method] Sets the value of tooltipFormatFieldlistKey  
		* @param tooltipFormatFieldlistKey String The new value. 
		*/
		setTooltipFormatFieldlistKey?( tooltipFormatFieldlistKey?:string ): void;

		/** [Method] Sets the value of whiskerColor  
		* @param whiskerColor String The new value. 
		*/
		setWhiskerColor?( whiskerColor?:string ): void;

	}

}

declare module Ext.sparkline {
	export interface IBullet extends Ext.sparkline.IBase {
		/** [Config Option] (Number) */
		base?: number;
		/** [Config Option] (String) */
		performanceColor?: string;
		/** [Config Option] (String[]) */
		rangeColors?: string[];
		/** [Config Option] (String) */
		targetColor?: string;
		/** [Config Option] (Number) */
		targetWidth?: number;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Method] Returns the value of base  
		* @returns Number 
		*/
		getBase?(): number;

		/** [Method] Returns the value of performanceColor  
		* @returns String 
		*/
		getPerformanceColor?(): string;

		/** [Method] Returns the value of rangeColors  
		* @returns String[] 
		*/
		getRangeColors?(): string[];

		/** [Method] Returns the value of targetColor  
		* @returns String 
		*/
		getTargetColor?(): string;

		/** [Method] Returns the value of targetWidth  
		* @returns Number 
		*/
		getTargetWidth?(): number;

		/** [Method] Returns the value of tipTpl  
		* @returns Object 
		*/
		getTipTpl?(): any;

		/** [Method] Sets the value of base  
		* @param base Number The new value. 
		*/
		setBase?( base?:number ): void;

		/** [Method] Sets the value of performanceColor  
		* @param performanceColor String The new value. 
		*/
		setPerformanceColor?( performanceColor?:string ): void;

		/** [Method] Sets the value of rangeColors  
		* @param rangeColors String[] The new value. 
		*/
		setRangeColors?( rangeColors?:string[] ): void;

		/** [Method] Sets the value of targetColor  
		* @param targetColor String The new value. 
		*/
		setTargetColor?( targetColor?:string ): void;

		/** [Method] Sets the value of targetWidth  
		* @param targetWidth Number The new value. 
		*/
		setTargetWidth?( targetWidth?:number ): void;

		/** [Method] Sets the value of tipTpl  
		* @param tipTpl Object The new value. 
		*/
		setTipTpl?( tipTpl?:any ): void;

	}

}

declare module Ext.sparkline {
	export interface ICanvasBase extends Ext.IBase {
	}

}

declare module Ext.sparkline {
	export interface ICanvasCanvas extends Ext.sparkline.ICanvasBase {
	}

}

declare module Ext.sparkline {
	export interface IDiscrete extends Ext.sparkline.IBarBase {
		/** [Config Option] (Boolean) */
		chartRangeClip?: boolean;
		/** [Config Option] (Number) */
		chartRangeMax?: number;
		/** [Config Option] (Number) */
		chartRangeMin?: number;
		/** [Config Option] (Number) */
		lineHeight?: number;
		/** [Config Option] (String) */
		thresholdColor?: string;
		/** [Config Option] (Number) */
		thresholdValue?: number;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Method] Returns the value of chartRangeClip  
		* @returns Boolean 
		*/
		getChartRangeClip?(): boolean;

		/** [Method] Returns the value of chartRangeMax  
		* @returns Number 
		*/
		getChartRangeMax?(): number;

		/** [Method] Returns the value of chartRangeMin  
		* @returns Number 
		*/
		getChartRangeMin?(): number;

		/** [Method] Returns the value of lineHeight  
		* @returns Number 
		*/
		getLineHeight?(): number;

		/** [Method] Returns the value of thresholdColor  
		* @returns String 
		*/
		getThresholdColor?(): string;

		/** [Method] Returns the value of thresholdValue  
		* @returns Number 
		*/
		getThresholdValue?(): number;

		/** [Method] Returns the value of tipTpl  
		* @returns Object 
		*/
		getTipTpl?(): any;

		/** [Method] Sets the value of chartRangeClip  
		* @param chartRangeClip Boolean The new value. 
		*/
		setChartRangeClip?( chartRangeClip?:boolean ): void;

		/** [Method] Sets the value of chartRangeMax  
		* @param chartRangeMax Number The new value. 
		*/
		setChartRangeMax?( chartRangeMax?:number ): void;

		/** [Method] Sets the value of chartRangeMin  
		* @param chartRangeMin Number The new value. 
		*/
		setChartRangeMin?( chartRangeMin?:number ): void;

		/** [Method] Sets the value of lineHeight  
		* @param lineHeight Number The new value. 
		*/
		setLineHeight?( lineHeight?:number ): void;

		/** [Method] Sets the value of thresholdColor  
		* @param thresholdColor String The new value. 
		*/
		setThresholdColor?( thresholdColor?:string ): void;

		/** [Method] Sets the value of thresholdValue  
		* @param thresholdValue Number The new value. 
		*/
		setThresholdValue?( thresholdValue?:number ): void;

		/** [Method] Sets the value of tipTpl  
		* @param tipTpl Object The new value. 
		*/
		setTipTpl?( tipTpl?:any ): void;

	}

}

declare module Ext.sparkline {
	export interface ILine extends Ext.sparkline.IBase {
		/** [Config Option] (Number) */
		chartRangeMax?: number;
		/** [Config Option] (Number) */
		chartRangeMaxX?: number;
		/** [Config Option] (Number) */
		chartRangeMin?: number;
		/** [Config Option] (Number) */
		chartRangeMinX?: number;
		/** [Config Option] (Boolean) */
		drawNormalOnTop?: boolean;
		/** [Config Option] (String) */
		highlightLineColor?: string;
		/** [Config Option] (String) */
		highlightSpotColor?: string;
		/** [Config Option] (Number) */
		lineWidth?: number;
		/** [Config Option] (String) */
		maxSpotColor?: string;
		/** [Config Option] (String) */
		minSpotColor?: string;
		/** [Config Option] (String) */
		normalRangeColor?: string;
		/** [Config Option] (Number) */
		normalRangeMax?: number;
		/** [Config Option] (Number) */
		normalRangeMin?: number;
		/** [Config Option] (String) */
		spotColor?: string;
		/** [Config Option] (Number) */
		spotRadius?: number;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Config Option] (Object) */
		valueSpots?: any;
		/** [Method] Returns the value of chartRangeMax  
		* @returns Number 
		*/
		getChartRangeMax?(): number;

		/** [Method] Returns the value of chartRangeMaxX  
		* @returns Number 
		*/
		getChartRangeMaxX?(): number;

		/** [Method] Returns the value of chartRangeMin  
		* @returns Number 
		*/
		getChartRangeMin?(): number;

		/** [Method] Returns the value of chartRangeMinX  
		* @returns Number 
		*/
		getChartRangeMinX?(): number;

		/** [Method] Returns the value of drawNormalOnTop  
		* @returns Boolean 
		*/
		getDrawNormalOnTop?(): boolean;

		/** [Method] Returns the value of highlightLineColor  
		* @returns String 
		*/
		getHighlightLineColor?(): string;

		/** [Method] Returns the value of highlightSpotColor  
		* @returns String 
		*/
		getHighlightSpotColor?(): string;

		/** [Method] Returns the value of lineWidth  
		* @returns Number 
		*/
		getLineWidth?(): number;

		/** [Method] Returns the value of maxSpotColor  
		* @returns String 
		*/
		getMaxSpotColor?(): string;

		/** [Method] Returns the value of minSpotColor  
		* @returns String 
		*/
		getMinSpotColor?(): string;

		/** [Method] Returns the value of normalRangeColor  
		* @returns String 
		*/
		getNormalRangeColor?(): string;

		/** [Method] Returns the value of normalRangeMax  
		* @returns Number 
		*/
		getNormalRangeMax?(): number;

		/** [Method] Returns the value of normalRangeMin  
		* @returns Number 
		*/
		getNormalRangeMin?(): number;

		/** [Method] Returns the value of spotColor  
		* @returns String 
		*/
		getSpotColor?(): string;

		/** [Method] Returns the value of spotRadius  
		* @returns Number 
		*/
		getSpotRadius?(): number;

		/** [Method] Returns the value of tipTpl  
		* @returns Object 
		*/
		getTipTpl?(): any;

		/** [Method] Returns the value of valueSpots  
		* @returns Object 
		*/
		getValueSpots?(): any;

		/** [Method] Sets the value of chartRangeMax  
		* @param chartRangeMax Number The new value. 
		*/
		setChartRangeMax?( chartRangeMax?:number ): void;

		/** [Method] Sets the value of chartRangeMaxX  
		* @param chartRangeMaxX Number The new value. 
		*/
		setChartRangeMaxX?( chartRangeMaxX?:number ): void;

		/** [Method] Sets the value of chartRangeMin  
		* @param chartRangeMin Number The new value. 
		*/
		setChartRangeMin?( chartRangeMin?:number ): void;

		/** [Method] Sets the value of chartRangeMinX  
		* @param chartRangeMinX Number The new value. 
		*/
		setChartRangeMinX?( chartRangeMinX?:number ): void;

		/** [Method] Sets the value of drawNormalOnTop  
		* @param drawNormalOnTop Boolean The new value. 
		*/
		setDrawNormalOnTop?( drawNormalOnTop?:boolean ): void;

		/** [Method] Sets the value of highlightLineColor  
		* @param highlightLineColor String The new value. 
		*/
		setHighlightLineColor?( highlightLineColor?:string ): void;

		/** [Method] Sets the value of highlightSpotColor  
		* @param highlightSpotColor String The new value. 
		*/
		setHighlightSpotColor?( highlightSpotColor?:string ): void;

		/** [Method] Sets the value of lineWidth  
		* @param lineWidth Number The new value. 
		*/
		setLineWidth?( lineWidth?:number ): void;

		/** [Method] Sets the value of maxSpotColor  
		* @param maxSpotColor String The new value. 
		*/
		setMaxSpotColor?( maxSpotColor?:string ): void;

		/** [Method] Sets the value of minSpotColor  
		* @param minSpotColor String The new value. 
		*/
		setMinSpotColor?( minSpotColor?:string ): void;

		/** [Method] Sets the value of normalRangeColor  
		* @param normalRangeColor String The new value. 
		*/
		setNormalRangeColor?( normalRangeColor?:string ): void;

		/** [Method] Sets the value of normalRangeMax  
		* @param normalRangeMax Number The new value. 
		*/
		setNormalRangeMax?( normalRangeMax?:number ): void;

		/** [Method] Sets the value of normalRangeMin  
		* @param normalRangeMin Number The new value. 
		*/
		setNormalRangeMin?( normalRangeMin?:number ): void;

		/** [Method] Sets the value of spotColor  
		* @param spotColor String The new value. 
		*/
		setSpotColor?( spotColor?:string ): void;

		/** [Method] Sets the value of spotRadius  
		* @param spotRadius Number The new value. 
		*/
		setSpotRadius?( spotRadius?:number ): void;

		/** [Method] Sets the value of tipTpl  
		* @param tipTpl Object The new value. 
		*/
		setTipTpl?( tipTpl?:any ): void;

		/** [Method] Sets the value of valueSpots  
		* @param valueSpots Object The new value. 
		*/
		setValueSpots?( valueSpots?:any ): void;

	}

}

declare module Ext.sparkline {
	export interface IPie extends Ext.sparkline.IBase {
		/** [Config Option] (String) */
		borderColor?: string;
		/** [Config Option] (Number) */
		borderWidth?: number;
		/** [Config Option] (Number) */
		offset?: number;
		/** [Config Option] (String[]) */
		sliceColors?: string[];
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Method] Returns the value of borderColor  
		* @returns String 
		*/
		getBorderColor?(): string;

		/** [Method] Returns the value of borderWidth  
		* @returns Number 
		*/
		getBorderWidth?(): number;

		/** [Method] Returns the value of offset  
		* @returns Number 
		*/
		getOffset?(): number;

		/** [Method] Returns the value of sliceColors  
		* @returns String[] 
		*/
		getSliceColors?(): string[];

		/** [Method] Returns the value of tipTpl  
		* @returns Object 
		*/
		getTipTpl?(): any;

		/** [Method] Sets the value of borderColor  
		* @param borderColor String The new value. 
		*/
		setBorderColor?( borderColor?:string ): void;

		/** [Method] Sets the value of borderWidth  
		* @param borderWidth Number The new value. 
		*/
		setBorderWidth?( borderWidth?:number ): void;

		/** [Method] Sets the value of offset  
		* @param offset Number The new value. 
		*/
		setOffset?( offset?:number ): void;

		/** [Method] Sets the value of sliceColors  
		* @param sliceColors String[] The new value. 
		*/
		setSliceColors?( sliceColors?:string[] ): void;

		/** [Method] Sets the value of tipTpl  
		* @param tipTpl Object The new value. 
		*/
		setTipTpl?( tipTpl?:any ): void;

	}

}

declare module Ext.sparkline {
	export interface IRangeMap extends Ext.IBase {
	}

}

declare module Ext.sparkline {
	export interface IShape extends Ext.IBase {
	}

}

declare module Ext.sparkline {
	export interface ITriState extends Ext.sparkline.IBarBase {
		/** [Config Option] (Number) */
		barSpacing?: number;
		/** [Config Option] (Number) */
		barWidth?: number;
		/** [Config Option] (Object) */
		colorMap?: any;
		/** [Config Option] (String) */
		negBarColor?: string;
		/** [Config Option] (String) */
		posBarColor?: string;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Config Option] (String) */
		zeroBarColor?: string;
		/** [Method] Returns the value of barSpacing  
		* @returns Number 
		*/
		getBarSpacing?(): number;

		/** [Method] Returns the value of colorMap  
		* @returns Object 
		*/
		getColorMap?(): any;

		/** [Method] Returns the value of negBarColor  
		* @returns String 
		*/
		getNegBarColor?(): string;

		/** [Method] Returns the value of posBarColor  
		* @returns String 
		*/
		getPosBarColor?(): string;

		/** [Method] Returns the value of tipTpl  
		* @returns Object 
		*/
		getTipTpl?(): any;

		/** [Method] Returns the value of zeroBarColor  
		* @returns String 
		*/
		getZeroBarColor?(): string;

		/** [Method] Sets the value of barSpacing  
		* @param barSpacing Number The new value. 
		*/
		setBarSpacing?( barSpacing?:number ): void;

		/** [Method] Sets the value of barWidth  
		* @param barWidth Number The new value. 
		*/
		setBarWidth?( barWidth?:number ): void;

		/** [Method] Sets the value of colorMap  
		* @param colorMap Object The new value. 
		*/
		setColorMap?( colorMap?:any ): void;

		/** [Method] Sets the value of negBarColor  
		* @param negBarColor String The new value. 
		*/
		setNegBarColor?( negBarColor?:string ): void;

		/** [Method] Sets the value of posBarColor  
		* @param posBarColor String The new value. 
		*/
		setPosBarColor?( posBarColor?:string ): void;

		/** [Method] Sets the value of tipTpl  
		* @param tipTpl Object The new value. 
		*/
		setTipTpl?( tipTpl?:any ): void;

		/** [Method] Sets the value of zeroBarColor  
		* @param zeroBarColor String The new value. 
		*/
		setZeroBarColor?( zeroBarColor?:string ): void;

	}

}

declare module Ext.sparkline {
	export interface IVmlCanvas extends Ext.sparkline.ICanvasBase {
	}

}

declare module Ext.state {
	export interface ICookieProvider extends Ext.state.IProvider {
		/** [Config Option] (String) */
		domain?: string;
		/** [Config Option] (Date) */
		expires?: any;
		/** [Config Option] (String) */
		path?: string;
		/** [Config Option] (Boolean) */
		secure?: boolean;
		/** [Method] private 
		* @param name Object 
		*/
		clear?( name?:any ): void;

		/** [Method] private 
		* @param name Object 
		* @param value Object 
		*/
		set?( name?:any, value?:any ): void;

	}

}

declare module Ext.state {
	export interface ILocalStorageProvider extends Ext.state.IProvider {
		/** [Method] private 
		* @param name Object 
		*/
		clear?( name?:any ): void;

		/** [Method] Sets the value for a key 
		* @param name Object 
		* @param value Object 
		*/
		set?( name?:any, value?:any ): void;

	}

}

declare module Ext.state {
	export interface IManager extends Ext.IBase {
	}
	export class Manager {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Clears a value from the state 
		* @param key String The key name 
		*/
		static clear( key?:string ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns the current value for a key 
		* @param key String The key name 
		* @param defaultValue Object The default value to return if the key lookup does not match 
		* @returns Object The state data 
		*/
		static get( key?:string, defaultValue?:any ): any;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Gets the currently configured state provider 
		* @returns Ext.state.Provider The state provider 
		*/
		static getProvider(): Ext.state.IProvider;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets the value for a key 
		* @param key String The key name 
		* @param value Object The state data 
		*/
		static set( key?:string, value?:any ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Configures the default state provider for your application 
		* @param stateProvider Ext.state.Provider The state provider to set 
		*/
		static setProvider( stateProvider?:Ext.state.IProvider ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.state {
	export interface IProvider extends Ext.IBase, Ext.util.IObservable {
		/** [Config Option] (String) */
		prefix?: string;
		/** [Method] Clears a value from the state 
		* @param name String The key name 
		*/
		clear?( name?:string ): void;

		/** [Method] Decodes a string previously encoded with encodeValue  
		* @param value String The value to decode 
		* @returns Object The decoded value 
		*/
		decodeValue?( value?:string ): any;

		/** [Method] Encodes a value including type information  
		* @param value Object The value to encode 
		* @returns String The encoded value 
		*/
		encodeValue?( value?:any ): string;

		/** [Method] Returns the current value for a key 
		* @param name String The key name 
		* @param defaultValue Object A default value to return if the key's value is not found 
		* @returns Object The state data 
		*/
		get?( name?:string, defaultValue?:any ): any;

		/** [Method] Sets the value for a key 
		* @param name String The key name 
		* @param value Object The value to set 
		*/
		set?( name?:string, value?:any ): void;

	}

}

declare module Ext.state {
	export interface IStateful extends Ext.IBase {
		/** [Config Option] (Number) */
		saveDelay?: number;
		/** [Config Option] (String[]) */
		stateEvents?: string[];
		/** [Config Option] (String) */
		stateId?: string;
		/** [Config Option] (Boolean) */
		stateful?: boolean;
		/** [Method] Add events that will trigger the state to be saved  
		* @param events String/String[] The event name or an array of event names. 
		*/
		addStateEvents?( events?:any ): void;

		/** [Method] Applies the state to the object  
		* @param state Object The state 
		*/
		applyState?( state?:any ): void;

		/** [Method] Destroys this stateful object  */
		destroy?(): void;

		/** [Method] Gets the current state of the object  
		* @returns Object The current state 
		*/
		getState?(): any;

		/** [Method] Conditionally saves a single property from this object to the given state object  
		* @param propName String The name of the property to save. 
		* @param state Object The state object in to which to save the property. 
		* @param stateName String The name to use for the property in state. 
		* @returns Boolean True if the property was saved, false if not. 
		*/
		savePropToState?( propName?:string, state?:any, stateName?:string ): boolean;

		/** [Method] Gathers additional named properties of the instance and adds their current values to the passed state object  
		* @param propNames String/String[] The name (or array of names) of the property to save. 
		* @param state Object The state object in to which to save the property values. 
		* @returns Object state 
		*/
		savePropsToState?( propNames?:any, state?:any ): any;

		/** [Method] Saves the state of the object to the persistence store  */
		saveState?(): void;

	}

}

declare module Ext {
	export interface IString {
	}
	export class String {
		/** [Method] Adds a set of character entity definitions to the set used by htmlEncode and htmlDecode  
		* @param newEntities Object The set of character entities to add to the current definitions. 
		*/
		static addCharacterEntities( newEntities?:any ): void;

		/** [Method] Capitalize the first letter of the given string  
		* @param string String 
		* @returns String 
		*/
		static capitalize( string?:string ): string;

		/** [Method] Creates a RegExp given a string value and optional flags  
		* @param value String/RegExp The String to convert to a RegExp. 
		* @param startsWith Boolean Pass false to allow a match to start anywhere in the string. By default the value will match only at the start of the string. 
		* @param endsWith Boolean Pass false to allow the match to end before the end of the string. By default the value will match only at the end of the string. 
		* @param ignoreCase Boolean Pass false to make the RegExp case sensitive (removes the 'i' flag). 
		* @returns RegExp 
		*/
		static createRegex( value?:any, startsWith?:boolean, endsWith?:boolean, ignoreCase?:boolean ): RegExp;

		/** [Method] Converts a string of characters into a legal parse able JavaScript var name as long as the passed string contains at  
		* @param s String A string to be converted into a var name. 
		* @returns String A legal JavaScript var name. 
		*/
		static createVarName( s?:string ): string;

		/** [Method] Truncate a string and add an ellipsis  to the end if it exceeds the specified length  
		* @param value String The string to truncate. 
		* @param length Number The maximum length to allow before truncating. 
		* @param word Boolean true to try to find a common word break. 
		* @returns String The converted text. 
		*/
		static ellipsis( value?:string, length?:number, word?:boolean ): string;

		/** [Method] Checks if a string ends with a substring 
		* @param s String The original string 
		* @param end String The substring to check 
		* @param ignoreCase Boolean True to ignore the case in the comparison 
		*/
		static endsWith( s?:string, end?:string, ignoreCase?:boolean ): void;

		/** [Method] Escapes the passed string for  and 
		* @param string String The string to escape. 
		* @returns String The escaped string. 
		*/
		static escape( string?:string ): string;

		/** [Method] Escapes the passed string for use in a regular expression  
		* @param string String The string to escape. 
		* @returns String The escaped string. 
		*/
		static escapeRegex( string?:string ): string;

		/** [Method] Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens  
		* @param string String The tokenized string to be formatted. 
		* @param values Mixed... The values to replace tokens {0}, {1}, etc in order. 
		* @returns String The formatted string. 
		*/
		static format( string:string, ...values:any[] ): string;

		/** [Method] Convert certain characters  amp lt  and from their HTML character equivalents  
		* @param value String The string to decode. 
		* @returns String The decoded text. 
		*/
		static htmlDecode( value?:string ): string;

		/** [Method] Convert certain characters  amp lt  and to their HTML character equivalents for literal display in web 
		* @param value String The string to encode. 
		* @returns String The encoded text. 
		*/
		static htmlEncode( value?:string ): string;

		/** [Method] Inserts a substring into a string  
		* @param s String The original string. 
		* @param value String The substring to insert. 
		* @param index Number The index to insert the substring. Negative indexes will insert from the end of the string. Example: Ext.String.insert("abcdefg", "h", -1); // abcdefhg 
		* @returns String The value with the inserted substring 
		*/
		static insert( s?:string, value?:string, index?:number ): string;

		/** [Method] Pads the left side of a string with a specified character  
		* @param string String The original string. 
		* @param size Number The total length of the output string. 
		* @param character String The character with which to pad the original string. 
		* @returns String The padded string. 
		*/
		static leftPad( string?:string, size?:number, character?:string ): string;

		/** [Method] Returns a string with a specified number of repetitions a given string pattern  
		* @param pattern String The pattern to repeat. 
		* @param count Number The number of times to repeat the pattern (may be 0). 
		* @param sep String An option string to separate each pattern. 
		*/
		static repeat( pattern?:string, count?:number, sep?:string ): void;

		/** [Method] Resets the set of character entity definitions used by htmlEncode and htmlDecode back to the default state  */
		static resetCharacterEntities(): void;

		/** [Method] Splits a string of space separated words into an array trimming as needed  
		* @param words String/Array 
		*/
		static splitWords( words?:any ): void;

		/** [Method] Checks if a string starts with a substring 
		* @param s String The original string 
		* @param start String The substring to check 
		* @param ignoreCase Boolean True to ignore the case in the comparison 
		*/
		static startsWith( s?:string, start?:string, ignoreCase?:boolean ): void;

		/** [Method] Utility function that allows you to easily switch a string between two alternating values  
		* @param string String The current string. 
		* @param value String The value to compare to the current string. 
		* @param other String The new value to use if the string already equals the first value passed in. 
		* @returns String The new value. 
		*/
		static toggle( string?:string, value?:string, other?:string ): string;

		/** [Method] Trims whitespace from either end of a string leaving spaces within the string intact  
		* @param string String The string to trim. 
		* @returns String The trimmed string. 
		*/
		static trim( string?:string ): string;

		/** [Method] Uncapitalize the first letter of a given string  
		* @param string String 
		* @returns String 
		*/
		static uncapitalize( string?:string ): string;

		/** [Method] Appends content to the query string of a URL handling logic for whether to place a question mark or ampersand  
		* @param url String The URL to append to. 
		* @param string String The content to append to the URL. 
		* @returns String The resulting URL 
		*/
		static urlAppend( url?:string, string?:string ): string;

	}

}

declare module Ext {
	export interface ISupports {
	}
	export class Supports {
		/** [Property] (Boolean) */
		static Audio: boolean;

		/** [Property] (Boolean) */
		static AudioTag: boolean;

		/** [Property] (Boolean) */
		static BoundingClientRect: boolean;

		/** [Property] (Boolean) */
		static CSS3BorderRadius: boolean;

		/** [Property] (Boolean) */
		static CSS3BoxShadow: boolean;

		/** [Property] (Boolean) */
		static CSS3LinearGradient: boolean;

		/** [Property] (Boolean) */
		static CSSPointerEvents: boolean;

		/** [Property] (Boolean) */
		static Canvas: boolean;

		/** [Property] (Boolean) */
		static ChildContentClearedWhenSettingInnerHTML: boolean;

		/** [Property] (Boolean) */
		static ClassList: boolean;

		/** [Property] (Boolean) */
		static ComputedStyle: boolean;

		/** [Property] (Boolean) */
		static CreateContextualFragment: boolean;

		/** [Property] (Boolean) */
		static Css3DTransforms: boolean;

		/** [Property] (Boolean) */
		static DeviceMotion: boolean;

		/** [Property] (Boolean) */
		static Direct2DBug: boolean;

		/** [Property] (Object) */
		static DisplayChangeInputSelectionBug: any;

		/** [Property] (Object) */
		static DisplayChangeTextAreaSelectionBug: any;

		/** [Property] (Boolean) */
		static EmulatedMouseOver: boolean;

		/** [Property] (Boolean) */
		static Float: boolean;

		/** [Property] (Boolean) */
		static GeoLocation: boolean;

		/** [Property] (Boolean) */
		static Geolocation: boolean;

		/** [Property] (Boolean) */
		static GetPositionPercentage: boolean;

		/** [Property] (Boolean) */
		static Hashchange: boolean;

		/** [Property] (Boolean) */
		static History: boolean;

		/** [Property] (Boolean) */
		static LocalStorage: boolean;

		/** [Property] (Boolean) */
		static MouseEnterLeave: boolean;

		/** [Property] (Boolean) */
		static MouseWheel: boolean;

		/** [Property] (Boolean) */
		static NumericInputPlaceHolder: boolean;

		/** [Property] (Boolean) */
		static Opacity: boolean;

		/** [Property] (Boolean) */
		static Orientation: boolean;

		/** [Property] (Boolean) */
		static OrientationChange: boolean;

		/** [Property] (Boolean) */
		static Placeholder: boolean;

		/** [Property] (Boolean) */
		static Range: boolean;

		/** [Property] (Boolean) */
		static RightMargin: boolean;

		/** [Property] (Boolean) */
		static RotatedBoundingClientRect: boolean;

		/** [Property] (Boolean) */
		static ScrollWidthInlinePaddingBug: boolean;

		/** [Property] (Boolean) */
		static Svg: boolean;

		/** [Property] (Boolean) */
		static TextAreaMaxLength: boolean;

		/** [Property] (Boolean) */
		static Touch: boolean;

		/** [Property] (Boolean) */
		static TouchEvents: boolean;

		/** [Property] (Boolean) */
		static Transitions: boolean;

		/** [Property] (Boolean) */
		static TransparentColor: boolean;

		/** [Property] (Boolean) */
		static Video: boolean;

		/** [Property] (Boolean) */
		static Vml: boolean;

		/** [Property] (Boolean) */
		static XHR2: boolean;

		/** [Property] (Boolean) */
		static XHRUploadProgress: boolean;

		/** [Property] (String) */
		static matchesSelector: string;

	}

}

declare module Ext.tab {
	export interface IBar extends Ext.panel.IBar, Ext.util.IFocusableContainer {
		/** [Config Option] (Boolean) */
		activateOnFocus?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Boolean) */
		ensureActiveVisibleOnChange?: boolean;
		/** [Config Option] (Number) */
		maxTabWidth?: number;
		/** [Config Option] (Number) */
		minTabWidth?: number;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] ('default'/0/1/2) */
		tabRotation?: any;
		/** [Config Option] (Boolean) */
		tabStretchMax?: boolean;
		/** [Property] (Boolean) */
		isTabBar?: boolean;

		/** [Method] Called by the layout system after the Component has been laid out  
		* @param width Object 
		*/
		afterComponentLayout?( width?:any ): void;

		/** [Method] Invoked after the Container has laid out and rendered if necessary its child Components  */
		afterLayout?(): void;

		/** [Method] Ensure the passed tab is visible if using overflow scrolling 
		* @param tab Ext.tab.Tab/Ext.Component/Number The tab, item in the owning Ext.tab.Panel or the index of the item to scroll to. Defaults to the active tab. 
		*/
		ensureTabVisible?( tab?:any ): void;

		/** [Method] Returns the value of activateOnFocus  
		* @returns Boolean 
		*/
		getActivateOnFocus?(): boolean;

		/** [Method] Returns the value of tabRotation  
		* @returns 'default'/0/1/2 
		*/
		getTabRotation?(): any;

		/** [Method] Returns the value of tabStretchMax  
		* @returns Boolean 
		*/
		getTabStretchMax?(): boolean;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] This method is invoked after a new Component has been added  
		* @param tab Object 
		* @param pos Object 
		*/
		onAdd?( tab?:any, pos?:any ): void;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  
		* @param container Object 
		* @param pos Object 
		* @param instanced Object 
		*/
		onAdded?( container?:any, pos?:any, instanced?:any ): void;

		/** [Method] This method is invoked after a new Component has been removed  
		* @param tab Object 
		* @param destroying Object 
		*/
		onRemove?( tab?:any, destroying?:any ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param destroying Object 
		*/
		onRemoved?( destroying?:any ): void;

		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

		/** [Method] Sets the value of activateOnFocus  
		* @param activateOnFocus Boolean The new value. 
		*/
		setActivateOnFocus?( activateOnFocus?:boolean ): void;

		/** [Method] Sets the dock position of this component in its parent panel  
		* @param dock Object 
		* @returns Ext.Component this 
		*/
		setDock?( dock?:any ): Ext.IComponent;

		/** [Method] Sets the value of tabRotation  
		* @param tabRotation 'default'/0/1/2 The new value. 
		*/
		setTabRotation?( tabRotation?:any ): void;

		/** [Method] Sets the value of tabStretchMax  
		* @param tabStretchMax Boolean The new value. 
		*/
		setTabStretchMax?( tabStretchMax?:boolean ): void;

	}

}

declare module Ext.tab {
	export interface IPanel extends Ext.panel.IPanel {
		/** [Config Option] (String/Number) */
		activeItem?: any;
		/** [Config Option] (String/Number/Ext.Component) */
		activeTab?: any;
		/** [Config Option] (Boolean) */
		deferredRender?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number) */
		maxTabWidth?: number;
		/** [Config Option] (Number) */
		minTabWidth?: number;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Boolean) */
		removePanelHeader?: boolean;
		/** [Config Option] (Object) */
		tabBar?: any;
		/** [Config Option] (Number) */
		tabBarHeaderPosition?: number;
		/** [Config Option] ("top"/"bottom"/"left"/"right") */
		tabPosition?: any;
		/** [Config Option] ('default'/0/1/2) */
		tabRotation?: any;
		/** [Config Option] (Boolean) */
		tabStretchMax?: boolean;
		/** [Method] Returns the item that is currently active inside this TabPanel  
		* @returns Ext.Component The currently active item. 
		*/
		getActiveTab?(): Ext.IComponent;

		/** [Method] Returns the Ext tab Bar associated with this tabPanel  
		* @returns Ext.tab.Bar The tabBar for this tabPanel 
		*/
		getTabBar?(): Ext.tab.IBar;

		/** [Method] Returns the value of tabPosition  
		* @returns "top"/"bottom"/"left"/"right" 
		*/
		getTabPosition?(): any;

		/** [Method] Returns the value of tabRotation  
		* @returns 'default'/0/1/2 
		*/
		getTabRotation?(): any;

		/** [Method] Returns the value of tabStretchMax  
		* @returns Boolean 
		*/
		getTabStretchMax?(): boolean;

		/** [Method] inherit docs */
		initComponent?(): void;

		/** [Method] Makes sure we have a Tab for each item added to the TabPanel 
		* @param item Object 
		* @param index Object 
		*/
		onAdd?( item?:any, index?:any ): void;

		/** [Method] Sets a component as the active layout item  
		* @param item Object 
		* @returns Ext.Component the activated component or false when nothing activated. False is returned also when trying to activate an already active item. 
		*/
		setActiveItem?( item?:any ): Ext.IComponent;

		/** [Method] Makes the given card active  
		* @param card String/Number/Ext.Component The card to make active. Either an ID, index or the component itself. 
		* @returns Ext.Component The resulting active child Component. The call may have been vetoed, or otherwise modified by an event listener. 
		*/
		setActiveTab?( card?:any ): Ext.IComponent;

		/** [Method] Sets the value of tabPosition  
		* @param tabPosition "top"/"bottom"/"left"/"right" The new value. 
		*/
		setTabPosition?( tabPosition?:any ): void;

		/** [Method] Sets the value of tabRotation  
		* @param tabRotation 'default'/0/1/2 The new value. 
		*/
		setTabRotation?( tabRotation?:any ): void;

		/** [Method] Sets the value of tabStretchMax  
		* @param tabStretchMax Boolean The new value. 
		*/
		setTabStretchMax?( tabStretchMax?:boolean ): void;

	}

}

declare module Ext {
	export interface ITabPanel extends Ext.panel.IPanel {
		/** [Config Option] (String/Number) */
		activeItem?: any;
		/** [Config Option] (String/Number/Ext.Component) */
		activeTab?: any;
		/** [Config Option] (Boolean) */
		deferredRender?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number) */
		maxTabWidth?: number;
		/** [Config Option] (Number) */
		minTabWidth?: number;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Boolean) */
		removePanelHeader?: boolean;
		/** [Config Option] (Object) */
		tabBar?: any;
		/** [Config Option] (Number) */
		tabBarHeaderPosition?: number;
		/** [Config Option] ("top"/"bottom"/"left"/"right") */
		tabPosition?: any;
		/** [Config Option] ('default'/0/1/2) */
		tabRotation?: any;
		/** [Config Option] (Boolean) */
		tabStretchMax?: boolean;
		/** [Method] Returns the item that is currently active inside this TabPanel  
		* @returns Ext.Component The currently active item. 
		*/
		getActiveTab?(): Ext.IComponent;

		/** [Method] Returns the Ext tab Bar associated with this tabPanel  
		* @returns Ext.tab.Bar The tabBar for this tabPanel 
		*/
		getTabBar?(): Ext.tab.IBar;

		/** [Method] Returns the value of tabPosition  
		* @returns "top"/"bottom"/"left"/"right" 
		*/
		getTabPosition?(): any;

		/** [Method] Returns the value of tabRotation  
		* @returns 'default'/0/1/2 
		*/
		getTabRotation?(): any;

		/** [Method] Returns the value of tabStretchMax  
		* @returns Boolean 
		*/
		getTabStretchMax?(): boolean;

		/** [Method] inherit docs */
		initComponent?(): void;

		/** [Method] Makes sure we have a Tab for each item added to the TabPanel 
		* @param item Object 
		* @param index Object 
		*/
		onAdd?( item?:any, index?:any ): void;

		/** [Method] Sets a component as the active layout item  
		* @param item Object 
		* @returns Ext.Component the activated component or false when nothing activated. False is returned also when trying to activate an already active item. 
		*/
		setActiveItem?( item?:any ): Ext.IComponent;

		/** [Method] Makes the given card active  
		* @param card String/Number/Ext.Component The card to make active. Either an ID, index or the component itself. 
		* @returns Ext.Component The resulting active child Component. The call may have been vetoed, or otherwise modified by an event listener. 
		*/
		setActiveTab?( card?:any ): Ext.IComponent;

		/** [Method] Sets the value of tabPosition  
		* @param tabPosition "top"/"bottom"/"left"/"right" The new value. 
		*/
		setTabPosition?( tabPosition?:any ): void;

		/** [Method] Sets the value of tabRotation  
		* @param tabRotation 'default'/0/1/2 The new value. 
		*/
		setTabRotation?( tabRotation?:any ): void;

		/** [Method] Sets the value of tabStretchMax  
		* @param tabStretchMax Boolean The new value. 
		*/
		setTabStretchMax?( tabStretchMax?:boolean ): void;

	}

}

declare module Ext.tab {
	export interface ITab extends Ext.button.IButton {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (String) */
		closeText?: string;
		/** [Config Option] (String) */
		overCls?: string;
		/** [Config Option] ('default'/0/1/2) */
		rotation?: any;
		/** [Config Option] ("small"/"medium"/"large") */
		scale?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] ('top'/'right'/'bottom'/'left') */
		tabPosition?: any;
		/** [Property] (Boolean) */
		active?: boolean;

		/** [Property] (Boolean) */
		isTab?: boolean;

		/** [Method] inherit docs 
		* @param silent Object 
		*/
		disable?( silent?:any ): void;

		/** [Method] inherit docs 
		* @param silent Object 
		*/
		enable?( silent?:any ): void;

		/** [Method] Returns the value of rotation  
		* @returns 'default'/0/1/2 
		*/
		getRotation?(): any;

		/** [Method] Returns the value of tabPosition  
		* @returns 'top'/'right'/'bottom'/'left' 
		*/
		getTabPosition?(): any;

		/** [Method] This method returns an object which provides substitution parameters for the XTemplate used to create this Button s D  
		* @returns Object Substitution data for a Template. The default implementation which provides data for the default template returns an Object containing the following properties: 
		*/
		getTemplateArgs?(): any;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Method to manage awareness of when components are added to their respective Container firing an added event  
		* @param container Object 
		* @param pos Object 
		* @param instanced Object 
		*/
		onAdded?( container?:any, pos?:any, instanced?:any ): void;

		/** [Method] Sets this tab s attached card  
		* @param card Ext.Component The card to set 
		*/
		setCard?( card?:Ext.IComponent ): void;

		/** [Method] Sets the tab as either closable or not  
		* @param closable Boolean Pass false to make the tab not closable. Otherwise the tab will be made closable (eg a close button will appear on the tab) 
		*/
		setClosable?( closable?:boolean ): void;

		/** [Method] Sets the value of rotation  
		* @param rotation 'default'/0/1/2 The new value. 
		*/
		setRotation?( rotation?:any ): void;

		/** [Method] Sets the value of tabPosition  
		* @param tabPosition 'top'/'right'/'bottom'/'left' The new value. 
		*/
		setTabPosition?( tabPosition?:any ): void;

	}

}

declare module Ext {
	export interface ITaskQueue extends Ext.IBase {
	}
	export class TaskQueue {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext {
	export interface ITemplate extends Ext.IBase {
		/** [Config Option] (Boolean) */
		compiled?: boolean;
		/** [Config Option] (Boolean) */
		disableFormats?: boolean;
		/** [Property] (Boolean) */
		isTemplate?: boolean;

		/** [Method] Applies the supplied values to the template and appends the new node s to the specified el  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param values Object/Array The template values. See applyTemplate for details. 
		* @param returnElement Boolean true to return an Ext.Element. 
		* @returns HTMLElement/Ext.dom.Element The new node or Element 
		*/
		append?( el?:any, values?:any, returnElement?:boolean ): any;

		/** [Method] Returns an HTML fragment of this template with the specified values applied  
		* @param values Object/Array The template values. Can be an array if your params are numeric:  var tpl = new Ext.Template('Name: {0}, Age: {1}'); tpl.apply(['John', 25]); or an object:  var tpl = new Ext.Template('Name: {name}, Age: {age}'); tpl.apply({name: 'John', age: 25});  
		* @returns String The HTML fragment 
		*/
		apply?( values?:any ): string;

		/** [Method] Appends the result of this template to the provided output array  
		* @param values Object/Array The template values. See apply. 
		* @param out Array The array to which output is pushed. 
		* @returns Array The given out array. 
		*/
		applyOut?( values?:any, out?:any[] ): any[];

		/** [Method] Alias for apply  
		* @param values Object/Array The template values. Can be an array if your params are numeric:  var tpl = new Ext.Template('Name: {0}, Age: {1}'); tpl.apply(['John', 25]); or an object:  var tpl = new Ext.Template('Name: {name}, Age: {age}'); tpl.apply({name: 'John', age: 25});  
		* @returns String The HTML fragment 
		*/
		applyTemplate?( values?:any ): string;

		/** [Method] Compiles the template into an internal function eliminating the RegEx overhead  
		* @returns Ext.Template this 
		*/
		compile?(): Ext.ITemplate;

		/** [Method] Applies the supplied values to the template and inserts the new node s after el  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param values Object/Array The template values. See applyTemplate for details. 
		* @param returnElement Boolean true to return a Ext.Element. 
		* @returns HTMLElement/Ext.dom.Element The new node or Element 
		*/
		insertAfter?( el?:any, values?:any, returnElement?:boolean ): any;

		/** [Method] Applies the supplied values to the template and inserts the new node s before el  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param values Object/Array The template values. See applyTemplate for details. 
		* @param returnElement Boolean true to return a Ext.Element. 
		* @returns HTMLElement/Ext.dom.Element The new node or Element 
		*/
		insertBefore?( el?:any, values?:any, returnElement?:boolean ): any;

		/** [Method] Applies the supplied values to the template and inserts the new node s as the first child of el  
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param values Object/Array The template values. See applyTemplate for details. 
		* @param returnElement Boolean true to return a Ext.Element. 
		* @returns HTMLElement/Ext.dom.Element The new node or Element 
		*/
		insertFirst?( el?:any, values?:any, returnElement?:boolean ): any;

		/** [Method] Applies the supplied values to the template and overwrites the content of el with the new node s 
		* @param el String/HTMLElement/Ext.dom.Element The context element 
		* @param values Object/Array The template values. See applyTemplate for details. 
		* @param returnElement Boolean true to return a Ext.Element. 
		* @returns HTMLElement/Ext.dom.Element The new node or Element 
		*/
		overwrite?( el?:any, values?:any, returnElement?:boolean ): any;

		/** [Method] Sets the HTML used as the template and optionally compiles it  
		* @param html String 
		* @param compile Boolean True to compile the template. 
		* @returns Ext.Template this 
		*/
		set?( html?:string, compile?:boolean ): Ext.ITemplate;

	}
	export class Template {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Creates a template from the passed element s value display none textarea preferred or innerHTML  
		* @param el String/HTMLElement A DOM element or its id 
		* @param config Object Config object 
		* @returns Ext.Template The created template 
		*/
		static from( el?:any, config?:any ): Ext.ITemplate;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.tip {
	export interface IQuickTip extends Ext.tip.IToolTip {
		/** [Config Option] (Boolean) */
		interceptTitles?: boolean;
		/** [Config Option] (Boolean/Number) */
		shrinkWrapDock?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		target?: any;
		/** [Config Option] (String/Object) */
		text?: any;
		/** [Config Option] (String/Ext.panel.Title) */
		title?: any;
		/** [Method] Hides a visible tip or cancels an impending show for a particular element  
		* @param el String/HTMLElement/Ext.dom.Element The element that is the target of the tip or ID of the element. 
		*/
		cancelShow?( el?:any ): void;

		/** [Method] Hides this tooltip if visible  
		* @returns Ext.Component 
		*/
		hide?(): Ext.IComponent;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Configures a new quick tip instance and assigns it to a target element  
		* @param config Object The config object with the following properties: 
		*/
		register?( config?:any ): void;

		/** [Method] Shows this tooltip at the current event target XY position  
		* @returns Ext.Component 
		*/
		show?(): Ext.IComponent;

		/** [Method] Shows this tip at the specified XY position  
		* @param xy Number[] An array containing the x and y coordinates 
		* @returns Ext.Component 
		*/
		showAt?( xy?:number[] ): Ext.IComponent;

		/** [Method] Removes this quick tip from its element and destroys it  
		* @param el String/HTMLElement/Ext.dom.Element The element from which the quick tip is to be removed or ID of the element. 
		*/
		unregister?( el?:any ): void;

	}

}

declare module Ext {
	export interface IQuickTip extends Ext.tip.IToolTip {
		/** [Config Option] (Boolean) */
		interceptTitles?: boolean;
		/** [Config Option] (Boolean/Number) */
		shrinkWrapDock?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		target?: any;
		/** [Config Option] (String/Object) */
		text?: any;
		/** [Config Option] (String/Ext.panel.Title) */
		title?: any;
		/** [Method] Hides a visible tip or cancels an impending show for a particular element  
		* @param el String/HTMLElement/Ext.dom.Element The element that is the target of the tip or ID of the element. 
		*/
		cancelShow?( el?:any ): void;

		/** [Method] Hides this tooltip if visible  
		* @returns Ext.Component 
		*/
		hide?(): Ext.IComponent;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Configures a new quick tip instance and assigns it to a target element  
		* @param config Object The config object with the following properties: 
		*/
		register?( config?:any ): void;

		/** [Method] Shows this tooltip at the current event target XY position  
		* @returns Ext.Component 
		*/
		show?(): Ext.IComponent;

		/** [Method] Shows this tip at the specified XY position  
		* @param xy Number[] An array containing the x and y coordinates 
		* @returns Ext.Component 
		*/
		showAt?( xy?:number[] ): Ext.IComponent;

		/** [Method] Removes this quick tip from its element and destroys it  
		* @param el String/HTMLElement/Ext.dom.Element The element from which the quick tip is to be removed or ID of the element. 
		*/
		unregister?( el?:any ): void;

	}

}

declare module Ext.tip {
	export interface IQuickTipManager extends Ext.IBase {
	}
	export class QuickTipManager {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Destroys the QuickTips instance  */
		static destroy(): void;

		/** [Method] Disables quick tips globally  */
		static disable(): void;

		/** [Method] Enables quick tips globally  */
		static enable(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Gets the single QuickTip instance used to show tips from all registered elements  
		* @returns Ext.tip.QuickTip 
		*/
		static getQuickTip(): Ext.tip.IQuickTip;

		/** [Method] Initializes the global QuickTips instance and prepare any quick tips  
		* @param autoRender Boolean True to render the QuickTips container immediately to preload images. 
		* @param config Object config object for the created QuickTip. By default, the QuickTip class is instantiated, but this can be changed by supplying an xtype property or a className property in this object. All other properties on this object are configuration for the created component. 
		*/
		static init( autoRender?:boolean, config?:any ): void;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Returns true if quick tips are enabled else false  
		* @returns Boolean 
		*/
		static isEnabled(): boolean;

		/** [Method] Configures a new quick tip instance and assigns it to a target element  
		* @param config Object The config object with the following properties: 
		*/
		static register( config?:any ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Alias of register  */
		static tips(): void;

		/** [Method] Removes any registered quick tip from the target element and destroys it  
		* @param el String/HTMLElement/Ext.dom.Element The element from which the quick tip is to be removed or ID of the element. 
		*/
		static unregister( el?:any ): void;

	}

}

declare module Ext {
	export interface IQuickTips extends Ext.IBase {
	}
	export class QuickTips {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Destroys the QuickTips instance  */
		static destroy(): void;

		/** [Method] Disables quick tips globally  */
		static disable(): void;

		/** [Method] Enables quick tips globally  */
		static enable(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Gets the single QuickTip instance used to show tips from all registered elements  
		* @returns Ext.tip.QuickTip 
		*/
		static getQuickTip(): Ext.tip.IQuickTip;

		/** [Method] Initializes the global QuickTips instance and prepare any quick tips  
		* @param autoRender Boolean True to render the QuickTips container immediately to preload images. 
		* @param config Object config object for the created QuickTip. By default, the QuickTip class is instantiated, but this can be changed by supplying an xtype property or a className property in this object. All other properties on this object are configuration for the created component. 
		*/
		static init( autoRender?:boolean, config?:any ): void;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Returns true if quick tips are enabled else false  
		* @returns Boolean 
		*/
		static isEnabled(): boolean;

		/** [Method] Configures a new quick tip instance and assigns it to a target element  
		* @param config Object The config object with the following properties: 
		*/
		static register( config?:any ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Alias of register  */
		static tips(): void;

		/** [Method] Removes any registered quick tip from the target element and destroys it  
		* @param el String/HTMLElement/Ext.dom.Element The element from which the quick tip is to be removed or ID of the element. 
		*/
		static unregister( el?:any ): void;

	}

}

declare module Ext.tip {
	export interface ITip extends Ext.panel.IPanel {
		/** [Config Option] (Boolean/String/HTMLElement/Ext.dom.Element) */
		autoRender?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (String) */
		closeAction?: string;
		/** [Config Option] (Boolean) */
		constrainPosition?: boolean;
		/** [Config Option] (String) */
		defaultAlign?: string;
		/** [Config Option] (Boolean) */
		focusOnToFront?: boolean;
		/** [Config Option] (Boolean) */
		frameHeader?: boolean;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean/String) */
		shadow?: any;
		/** [Config Option] (Number) */
		width?: number;
		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Shows this tip at the specified XY position  
		* @param xy Number[] An array containing the x and y coordinates 
		* @returns Ext.Component 
		*/
		showAt?( xy?:number[] ): Ext.IComponent;

	}

}

declare module Ext {
	export interface ITip extends Ext.panel.IPanel {
		/** [Config Option] (Boolean/String/HTMLElement/Ext.dom.Element) */
		autoRender?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (String) */
		closeAction?: string;
		/** [Config Option] (Boolean) */
		constrainPosition?: boolean;
		/** [Config Option] (String) */
		defaultAlign?: string;
		/** [Config Option] (Boolean) */
		focusOnToFront?: boolean;
		/** [Config Option] (Boolean) */
		frameHeader?: boolean;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean/String) */
		shadow?: any;
		/** [Config Option] (Number) */
		width?: number;
		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Shows this tip at the specified XY position  
		* @param xy Number[] An array containing the x and y coordinates 
		* @returns Ext.Component 
		*/
		showAt?( xy?:number[] ): Ext.IComponent;

	}

}

declare module Ext.tip {
	export interface IToolTip extends Ext.tip.ITip {
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (Number) */
		anchorOffset?: number;
		/** [Config Option] (Boolean) */
		anchorToTarget?: boolean;
		/** [Config Option] (Boolean) */
		autoHide?: boolean;
		/** [Config Option] (String) */
		delegate?: string;
		/** [Config Option] (Number) */
		dismissDelay?: number;
		/** [Config Option] (Number) */
		fadeOutDuration?: number;
		/** [Config Option] (String) */
		hideAction?: string;
		/** [Config Option] (Number) */
		hideDelay?: number;
		/** [Config Option] (Number[]) */
		mouseOffset?: number[];
		/** [Config Option] (Number) */
		showDelay?: number;
		/** [Config Option] (HTMLElement/Ext.dom.Element/String) */
		target?: any;
		/** [Config Option] (Boolean) */
		trackMouse?: boolean;
		/** [Property] (HTMLElement) */
		triggerElement?: HTMLElement;

		/** [Method] Template method called after a Component has been positioned  
		* @param x Object 
		* @param y Object 
		*/
		afterSetPosition?( x?:any, y?:any ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Hides this tooltip if visible  
		* @returns Ext.Component 
		*/
		hide?(): Ext.IComponent;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Allows addition of behavior to the disable operation  */
		onDisable?(): void;

		/** [Method] Allows addition of behavior to the hide operation  */
		onHide?(): void;

		/** [Method] Template method called when this Component s DOM structure is created  
		* @param ct Object 
		* @param position Object 
		*/
		onRender?( ct?:any, position?:any ): void;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Binds this ToolTip to the specified element  
		* @param target String/HTMLElement/Ext.dom.Element The Element, HTMLElement, or ID of an element to bind to 
		*/
		setTarget?( target?:any ): void;

		/** [Method] Shows this tooltip at the current event target XY position  
		* @param xy Object 
		* @returns Ext.Component 
		*/
		show?( xy?:any ): Ext.IComponent;

		/** [Method] Shows this tip at the specified XY position  
		* @param xy Number[] An array containing the x and y coordinates 
		* @returns Ext.Component 
		*/
		showAt?( xy?:number[] ): Ext.IComponent;

	}

}

declare module Ext {
	export interface IToolTip extends Ext.tip.ITip {
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (Number) */
		anchorOffset?: number;
		/** [Config Option] (Boolean) */
		anchorToTarget?: boolean;
		/** [Config Option] (Boolean) */
		autoHide?: boolean;
		/** [Config Option] (String) */
		delegate?: string;
		/** [Config Option] (Number) */
		dismissDelay?: number;
		/** [Config Option] (Number) */
		fadeOutDuration?: number;
		/** [Config Option] (String) */
		hideAction?: string;
		/** [Config Option] (Number) */
		hideDelay?: number;
		/** [Config Option] (Number[]) */
		mouseOffset?: number[];
		/** [Config Option] (Number) */
		showDelay?: number;
		/** [Config Option] (HTMLElement/Ext.dom.Element/String) */
		target?: any;
		/** [Config Option] (Boolean) */
		trackMouse?: boolean;
		/** [Property] (HTMLElement) */
		triggerElement?: HTMLElement;

		/** [Method] Template method called after a Component has been positioned  
		* @param x Object 
		* @param y Object 
		*/
		afterSetPosition?( x?:any, y?:any ): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Hides this tooltip if visible  
		* @returns Ext.Component 
		*/
		hide?(): Ext.IComponent;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Allows addition of behavior to the disable operation  */
		onDisable?(): void;

		/** [Method] Allows addition of behavior to the hide operation  */
		onHide?(): void;

		/** [Method] Template method called when this Component s DOM structure is created  
		* @param ct Object 
		* @param position Object 
		*/
		onRender?( ct?:any, position?:any ): void;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Binds this ToolTip to the specified element  
		* @param target String/HTMLElement/Ext.dom.Element The Element, HTMLElement, or ID of an element to bind to 
		*/
		setTarget?( target?:any ): void;

		/** [Method] Shows this tooltip at the current event target XY position  
		* @param xy Object 
		* @returns Ext.Component 
		*/
		show?( xy?:any ): Ext.IComponent;

		/** [Method] Shows this tip at the specified XY position  
		* @param xy Number[] An array containing the x and y coordinates 
		* @returns Ext.Component 
		*/
		showAt?( xy?:number[] ): Ext.IComponent;

	}

}

declare module Ext.toolbar {
	export interface IBreadcrumb extends Ext.IContainer, Ext.util.IFocusableContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		buttonUI?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		overflowHandler?: string;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Ext.data.TreeModel/String) */
		selection?: any;
		/** [Config Option] (Boolean) */
		showIcons?: boolean;
		/** [Config Option] (Boolean) */
		showMenuIcons?: boolean;
		/** [Config Option] (Ext.data.TreeStore) */
		store?: Ext.data.ITreeStore;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Boolean) */
		useSplitButtons?: boolean;
		/** [Method] Called by the layout system after the Component has been laid out  */
		afterComponentLayout?(): void;

		/** [Method] Returns the value of buttonUI  
		* @returns String 
		*/
		getButtonUI?(): string;

		/** [Method] Returns the value of displayField  
		* @returns String 
		*/
		getDisplayField?(): string;

		/** [Method] Returns the value of overflowHandler  
		* @returns String 
		*/
		getOverflowHandler?(): string;

		/** [Method] Returns the currently selected node  
		* @returns Ext.data.TreeModel node The selected node (or null if there is no selection). 
		*/
		getSelection?(): Ext.data.ITreeModel;

		/** [Method] Returns the value of showIcons  
		* @returns Boolean 
		*/
		getShowIcons?(): boolean;

		/** [Method] Returns the value of showMenuIcons  
		* @returns Boolean 
		*/
		getShowMenuIcons?(): boolean;

		/** [Method] Returns the value of store  
		* @returns Ext.data.TreeStore 
		*/
		getStore?(): Ext.data.ITreeStore;

		/** [Method] Returns the value of useSplitButtons  
		* @returns Boolean 
		*/
		getUseSplitButtons?(): boolean;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Sets the value of buttonUI  
		* @param buttonUI String The new value. 
		*/
		setButtonUI?( buttonUI?:string ): void;

		/** [Method] Sets the value of displayField  
		* @param displayField String The new value. 
		*/
		setDisplayField?( displayField?:string ): void;

		/** [Method] Sets the value of overflowHandler  
		* @param overflowHandler String The new value. 
		*/
		setOverflowHandler?( overflowHandler?:string ): void;

		/** [Method] Selects the passed node in the breadcrumb component  
		* @param node Ext.data.TreeModel The node in the breadcrumb store to select as the active node. 
		* @returns Ext.toolbar.Breadcrumb this The breadcrumb component 
		*/
		setSelection?( node?:Ext.data.ITreeModel ): Ext.toolbar.IBreadcrumb;

		/** [Method] Sets the value of showIcons  
		* @param showIcons Boolean The new value. 
		*/
		setShowIcons?( showIcons?:boolean ): void;

		/** [Method] Sets the value of showMenuIcons  
		* @param showMenuIcons Boolean The new value. 
		*/
		setShowMenuIcons?( showMenuIcons?:boolean ): void;

		/** [Method] Sets the value of store  
		* @param store Ext.data.TreeStore The new value. 
		*/
		setStore?( store?:Ext.data.ITreeStore ): void;

		/** [Method] Sets the value of useSplitButtons  
		* @param useSplitButtons Boolean The new value. 
		*/
		setUseSplitButtons?( useSplitButtons?:boolean ): void;

	}

}

declare module Ext.toolbar {
	export interface IFill extends Ext.IComponent {
		/** [Config Option] (Number) */
		flex?: number;
		/** [Property] (Boolean) */
		isFill?: boolean;

	}

}

declare module Ext.toolbar {
	export interface IItem extends Ext.IComponent {
		/** [Config Option] (String) */
		overflowText?: string;
		/** [Method] Disable the component  */
		disable?(): void;

		/** [Method] Enable the component */
		enable?(): void;

		/** [Method] Try to focus this component  
		* @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option. If this component is disabled, a closely related component will be focused and that will be returned. 
		*/
		focus?(): Ext.IComponent;

	}

}

declare module Ext.toolbar {
	export interface IPaging extends Ext.toolbar.IToolbar, Ext.util.IStoreHolder {
		/** [Config Option] (String) */
		afterPageText?: string;
		/** [Config Option] (String) */
		beforePageText?: string;
		/** [Config Option] (Boolean) */
		displayInfo?: boolean;
		/** [Config Option] (String) */
		displayMsg?: string;
		/** [Config Option] (String) */
		emptyMsg?: string;
		/** [Config Option] (String) */
		firstText?: string;
		/** [Config Option] (Number) */
		inputItemWidth?: number;
		/** [Config Option] (String) */
		lastText?: string;
		/** [Config Option] (String) */
		nextText?: string;
		/** [Config Option] (Boolean) */
		prependButtons?: boolean;
		/** [Config Option] (String) */
		prevText?: string;
		/** [Config Option] (String) */
		refreshText?: string;
		/** [Config Option] (Ext.data.Store/String) */
		store?: any;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Method] Binds a store to this instance  
		* @param store Ext.data.AbstractStore/String The store to bind or ID of the store. When no store given (or when null or undefined passed), unbinds the existing store. 
		*/
		bindStore?( store?:any ): void;

		/** [Method] Binds listeners for this component to the store  
		* @param store Ext.data.AbstractStore The store to bind to 
		*/
		bindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

		/** [Method] Refresh the current page has the same effect as clicking the refresh button  
		* @returns Boolean true if the load was passed to the store. 
		*/
		doRefresh?(): boolean;

		/** [Method] Gets the current store instance  
		* @returns Ext.data.AbstractStore The store, null if one does not exist. 
		*/
		getStore?(): Ext.data.IAbstractStore;

		/** [Method] Gets the listeners to bind to a new store  
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?(): any;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Move to the first page has the same effect as clicking the first button  
		* @returns Boolean true if the load was passed to the store. 
		*/
		moveFirst?(): boolean;

		/** [Method] Move to the last page has the same effect as clicking the last button  
		* @returns Boolean true if the load was passed to the store. 
		*/
		moveLast?(): boolean;

		/** [Method] Move to the next page has the same effect as clicking the next button  
		* @returns Boolean true if the load was passed to the store. 
		*/
		moveNext?(): boolean;

		/** [Method] Move to the previous page has the same effect as clicking the previous button  
		* @returns Boolean true if the load was passed to the store. 
		*/
		movePrevious?(): boolean;

		/** [Method] Template method it is called when a new store is bound to the current instance  */
		onBindStore?(): void;

		/** [Method] Template method it is called when an existing store is unbound from the current instance  
		* @param store Ext.data.AbstractStore The store being unbound 
		* @param initial Boolean True if this store is being bound as initialization of the instance. 
		*/
		onUnbindStore?( store?:Ext.data.IAbstractStore, initial?:boolean ): void;

		/** [Method] Sets the store to the specified store  
		* @param store Object 
		*/
		setStore?( store?:any ): void;

		/** [Method] Unbinds listeners from this component to the store  
		* @param store Ext.data.AbstractStore The store to unbind from 
		*/
		unbindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

	}

}

declare module Ext {
	export interface IPagingToolbar extends Ext.toolbar.IToolbar, Ext.util.IStoreHolder {
		/** [Config Option] (String) */
		afterPageText?: string;
		/** [Config Option] (String) */
		beforePageText?: string;
		/** [Config Option] (Boolean) */
		displayInfo?: boolean;
		/** [Config Option] (String) */
		displayMsg?: string;
		/** [Config Option] (String) */
		emptyMsg?: string;
		/** [Config Option] (String) */
		firstText?: string;
		/** [Config Option] (Number) */
		inputItemWidth?: number;
		/** [Config Option] (String) */
		lastText?: string;
		/** [Config Option] (String) */
		nextText?: string;
		/** [Config Option] (Boolean) */
		prependButtons?: boolean;
		/** [Config Option] (String) */
		prevText?: string;
		/** [Config Option] (String) */
		refreshText?: string;
		/** [Config Option] (Ext.data.Store/String) */
		store?: any;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Method] Binds a store to this instance  
		* @param store Ext.data.AbstractStore/String The store to bind or ID of the store. When no store given (or when null or undefined passed), unbinds the existing store. 
		*/
		bindStore?( store?:any ): void;

		/** [Method] Binds listeners for this component to the store  
		* @param store Ext.data.AbstractStore The store to bind to 
		*/
		bindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

		/** [Method] Refresh the current page has the same effect as clicking the refresh button  
		* @returns Boolean true if the load was passed to the store. 
		*/
		doRefresh?(): boolean;

		/** [Method] Gets the current store instance  
		* @returns Ext.data.AbstractStore The store, null if one does not exist. 
		*/
		getStore?(): Ext.data.IAbstractStore;

		/** [Method] Gets the listeners to bind to a new store  
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?(): any;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Move to the first page has the same effect as clicking the first button  
		* @returns Boolean true if the load was passed to the store. 
		*/
		moveFirst?(): boolean;

		/** [Method] Move to the last page has the same effect as clicking the last button  
		* @returns Boolean true if the load was passed to the store. 
		*/
		moveLast?(): boolean;

		/** [Method] Move to the next page has the same effect as clicking the next button  
		* @returns Boolean true if the load was passed to the store. 
		*/
		moveNext?(): boolean;

		/** [Method] Move to the previous page has the same effect as clicking the previous button  
		* @returns Boolean true if the load was passed to the store. 
		*/
		movePrevious?(): boolean;

		/** [Method] Template method it is called when a new store is bound to the current instance  */
		onBindStore?(): void;

		/** [Method] Template method it is called when an existing store is unbound from the current instance  
		* @param store Ext.data.AbstractStore The store being unbound 
		* @param initial Boolean True if this store is being bound as initialization of the instance. 
		*/
		onUnbindStore?( store?:Ext.data.IAbstractStore, initial?:boolean ): void;

		/** [Method] Sets the store to the specified store  
		* @param store Object 
		*/
		setStore?( store?:any ): void;

		/** [Method] Unbinds listeners from this component to the store  
		* @param store Ext.data.AbstractStore The store to unbind from 
		*/
		unbindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

	}

}

declare module Ext.toolbar {
	export interface ISeparator extends Ext.toolbar.IItem {
		/** [Config Option] (String) */
		baseCls?: string;
	}

}

declare module Ext.toolbar {
	export interface ISpacer extends Ext.IComponent {
		/** [Config Option] (String) */
		baseCls?: string;
	}

}

declare module Ext.toolbar {
	export interface ITextItem extends Ext.toolbar.IItem {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Method] Updates this item s text setting the text to be used as innerHTML  
		* @param text String The text to display (html accepted). 
		*/
		setText?( text?:string ): void;

	}

}

declare module Ext.toolbar {
	export interface IToolbar extends Ext.container.IContainer, Ext.util.IFocusableContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultButtonUI?: string;
		/** [Config Option] (String) */
		defaultFieldUI?: string;
		/** [Config Option] (String) */
		defaultFooterButtonUI?: string;
		/** [Config Option] (String) */
		defaultFooterFieldUI?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		enableOverflow?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		overflowHandler?: string;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
		/** [Property] (Boolean) */
		isToolbar?: boolean;

		/** [Method] Adds element s to the toolbar this function takes a variable number of arguments of mixed type and adds them to t  
		* @param args Ext.Component.../Object.../String.../HTMLElement... The following types of arguments are all valid:  config: A valid button config object HTMLElement: Any standard HTML element Field: Any form field Item: Any subclass of Ext.toolbar.Item String: Any generic string (gets wrapped in a Ext.toolbar.TextItem). Note that there are a few special strings that are treated differently as explained next:  '-': Creates a separator element ' ': Creates a spacer element '-&gt;': Creates a fill element  
		* @returns Ext.Component[]/Ext.Component The Components that were added. 
		*/
		add?( args?:any ): any;

		/** [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th  
		* @param deep Object 
		*/
		getRefItems?( deep?:any ): void;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Inserts a Component into this Container at a specified index  
		* @param index Number The index at which the Component will be inserted. 
		* @param component Ext.Component/Object/String/HTMLElement See add method for overview of possible values. 
		* @returns Ext.Component The component that was inserted. 
		*/
		insert?( index?:number, component?:any ): Ext.IComponent;

		/** [Method] This method is invoked after a new Component has been added  
		* @param component Object 
		*/
		onAdd?( component?:any ): void;

		/** [Method] This method is invoked before adding a new child Component  
		* @param component Object 
		*/
		onBeforeAdd?( component?:any ): void;

		/** [Method] This method is invoked after a new Component has been removed  
		* @param c Object 
		*/
		onRemove?( c?:any ): void;

	}

}

declare module Ext {
	export interface IToolbar extends Ext.container.IContainer, Ext.util.IFocusableContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultButtonUI?: string;
		/** [Config Option] (String) */
		defaultFieldUI?: string;
		/** [Config Option] (String) */
		defaultFooterButtonUI?: string;
		/** [Config Option] (String) */
		defaultFooterFieldUI?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		enableOverflow?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		overflowHandler?: string;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
		/** [Property] (Boolean) */
		isToolbar?: boolean;

		/** [Method] Adds element s to the toolbar this function takes a variable number of arguments of mixed type and adds them to t  
		* @param args Ext.Component.../Object.../String.../HTMLElement... The following types of arguments are all valid:  config: A valid button config object HTMLElement: Any standard HTML element Field: Any form field Item: Any subclass of Ext.toolbar.Item String: Any generic string (gets wrapped in a Ext.toolbar.TextItem). Note that there are a few special strings that are treated differently as explained next:  '-': Creates a separator element ' ': Creates a spacer element '-&gt;': Creates a fill element  
		* @returns Ext.Component[]/Ext.Component The Components that were added. 
		*/
		add?( args?:any ): any;

		/** [Method] Used by ComponentQuery child and down to retrieve all of the items which can potentially be considered a child of th  
		* @param deep Object 
		*/
		getRefItems?( deep?:any ): void;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Inserts a Component into this Container at a specified index  
		* @param index Number The index at which the Component will be inserted. 
		* @param component Ext.Component/Object/String/HTMLElement See add method for overview of possible values. 
		* @returns Ext.Component The component that was inserted. 
		*/
		insert?( index?:number, component?:any ): Ext.IComponent;

		/** [Method] This method is invoked after a new Component has been added  
		* @param component Object 
		*/
		onAdd?( component?:any ): void;

		/** [Method] This method is invoked before adding a new child Component  
		* @param component Object 
		*/
		onBeforeAdd?( component?:any ): void;

		/** [Method] This method is invoked after a new Component has been removed  
		* @param c Object 
		*/
		onRemove?( c?:any ): void;

	}

}

declare module Ext.tree {
	export interface IColumn extends Ext.grid.column.IColumn {
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Boolean) */
		hideable?: boolean;
		/** [Config Option] (Boolean) */
		lockable?: boolean;
		/** [Config Option] (String) */
		tdCls?: string;
		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

	}

}

declare module Ext.tree {
	export interface INavigationModel extends Ext.grid.INavigationModel {
	}

}

declare module Ext.tree {
	export interface IPanel extends Ext.panel.ITable {
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (Boolean) */
		folderSort?: boolean;
		/** [Config Option] (Boolean) */
		hideHeaders?: boolean;
		/** [Config Option] (Boolean) */
		lines?: boolean;
		/** [Config Option] (Ext.data.Model/Ext.data.TreeModel/Object) */
		root?: any;
		/** [Config Option] (Boolean) */
		rootVisible?: boolean;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (Boolean) */
		singleExpand?: boolean;
		/** [Config Option] (Ext.data.TreeStore) */
		store?: Ext.data.ITreeStore;
		/** [Config Option] (Boolean) */
		useArrows?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
		/** [Method] Collapse all nodes 
		* @param callback Function A function to execute when the collapse finishes. 
		* @param scope Object The scope of the callback function 
		*/
		collapseAll?( callback?:any, scope?:any ): void;

		/** [Method] Collapses a record that is loaded in the tree  
		* @param record Ext.data.Model The record to collapse 
		* @param deep Boolean True to collapse nodes all the way up the tree hierarchy. 
		* @param callback Function The function to run after the collapse is completed 
		* @param scope Object The scope of the callback function. 
		*/
		collapseNode?( record?:Ext.data.IModel, deep?:boolean, callback?:any, scope?:any ): void;

		/** [Method] Expand the tree to the path of a particular node then scroll it into view  
		* @param path String The path to bring into view. The path may be absolute, including a leading separator and starting from the root node id, or relative with no leading separator, starting from an existing node in the tree. 
		* @param options Object An object containing options to modify the operation. 
		*/
		ensureVisible?( path?:string, options?:any ): void;

		/** [Method] Expand all nodes 
		* @param callback Function A function to execute when the expand finishes. 
		* @param scope Object The scope of the callback function 
		*/
		expandAll?( callback?:any, scope?:any ): void;

		/** [Method] Expands a record that is loaded in the tree  
		* @param record Ext.data.Model The record to expand 
		* @param deep Boolean True to expand nodes all the way down the tree hierarchy. 
		* @param callback Function The function to run after the expand is completed 
		* @param scope Object The scope of the callback function. 
		*/
		expandNode?( record?:Ext.data.IModel, deep?:boolean, callback?:any, scope?:any ): void;

		/** [Method] Expand the tree to the path of a particular node  
		* @param path String The path to expand. The path may be absolute, including a leading separator and starting from the root node id, or relative with no leading separator, starting from an existing node in the tree. 
		* @param options Object An object containing options to modify the operation. 
		*/
		expandPath?( path?:string, options?:any ): void;

		/** [Method] Retrieve an array of checked records  
		* @returns Ext.data.TreeModel[] An array containing the checked records 
		*/
		getChecked?(): Ext.data.ITreeModel[];

		/** [Method] Returns the root node for this tree  
		* @returns Ext.data.TreeModel 
		*/
		getRootNode?(): Ext.data.ITreeModel;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Expand the tree to the path of a particular node then select it  
		* @param path String The path to expand. The path may be absolute, including a leading separator and starting from the root node id, or relative with no leading separator, starting from an existing node in the tree. 
		* @param field String The field to get the data from. Defaults to the model idProperty. 
		* @param separator String A separator to use. 
		* @param callback Function A function to execute when the select finishes. 
		* @param scope Object The scope of the callback function 
		*/
		selectPath?( path?:string, field?:string, separator?:string, callback?:any, scope?:any ): void;

		/** [Method] Sets root node of this tree  
		* @param root Ext.data.TreeModel/Object 
		* @returns Ext.data.TreeModel The new root 
		*/
		setRootNode?( root?:any ): Ext.data.ITreeModel;

	}

}

declare module Ext.tree {
	export interface ITreePanel extends Ext.panel.ITable {
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (Boolean) */
		folderSort?: boolean;
		/** [Config Option] (Boolean) */
		hideHeaders?: boolean;
		/** [Config Option] (Boolean) */
		lines?: boolean;
		/** [Config Option] (Ext.data.Model/Ext.data.TreeModel/Object) */
		root?: any;
		/** [Config Option] (Boolean) */
		rootVisible?: boolean;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (Boolean) */
		singleExpand?: boolean;
		/** [Config Option] (Ext.data.TreeStore) */
		store?: Ext.data.ITreeStore;
		/** [Config Option] (Boolean) */
		useArrows?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
		/** [Method] Collapse all nodes 
		* @param callback Function A function to execute when the collapse finishes. 
		* @param scope Object The scope of the callback function 
		*/
		collapseAll?( callback?:any, scope?:any ): void;

		/** [Method] Collapses a record that is loaded in the tree  
		* @param record Ext.data.Model The record to collapse 
		* @param deep Boolean True to collapse nodes all the way up the tree hierarchy. 
		* @param callback Function The function to run after the collapse is completed 
		* @param scope Object The scope of the callback function. 
		*/
		collapseNode?( record?:Ext.data.IModel, deep?:boolean, callback?:any, scope?:any ): void;

		/** [Method] Expand the tree to the path of a particular node then scroll it into view  
		* @param path String The path to bring into view. The path may be absolute, including a leading separator and starting from the root node id, or relative with no leading separator, starting from an existing node in the tree. 
		* @param options Object An object containing options to modify the operation. 
		*/
		ensureVisible?( path?:string, options?:any ): void;

		/** [Method] Expand all nodes 
		* @param callback Function A function to execute when the expand finishes. 
		* @param scope Object The scope of the callback function 
		*/
		expandAll?( callback?:any, scope?:any ): void;

		/** [Method] Expands a record that is loaded in the tree  
		* @param record Ext.data.Model The record to expand 
		* @param deep Boolean True to expand nodes all the way down the tree hierarchy. 
		* @param callback Function The function to run after the expand is completed 
		* @param scope Object The scope of the callback function. 
		*/
		expandNode?( record?:Ext.data.IModel, deep?:boolean, callback?:any, scope?:any ): void;

		/** [Method] Expand the tree to the path of a particular node  
		* @param path String The path to expand. The path may be absolute, including a leading separator and starting from the root node id, or relative with no leading separator, starting from an existing node in the tree. 
		* @param options Object An object containing options to modify the operation. 
		*/
		expandPath?( path?:string, options?:any ): void;

		/** [Method] Retrieve an array of checked records  
		* @returns Ext.data.TreeModel[] An array containing the checked records 
		*/
		getChecked?(): Ext.data.ITreeModel[];

		/** [Method] Returns the root node for this tree  
		* @returns Ext.data.TreeModel 
		*/
		getRootNode?(): Ext.data.ITreeModel;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Expand the tree to the path of a particular node then select it  
		* @param path String The path to expand. The path may be absolute, including a leading separator and starting from the root node id, or relative with no leading separator, starting from an existing node in the tree. 
		* @param field String The field to get the data from. Defaults to the model idProperty. 
		* @param separator String A separator to use. 
		* @param callback Function A function to execute when the select finishes. 
		* @param scope Object The scope of the callback function 
		*/
		selectPath?( path?:string, field?:string, separator?:string, callback?:any, scope?:any ): void;

		/** [Method] Sets root node of this tree  
		* @param root Ext.data.TreeModel/Object 
		* @returns Ext.data.TreeModel The new root 
		*/
		setRootNode?( root?:any ): Ext.data.ITreeModel;

	}

}

declare module Ext {
	export interface ITreePanel extends Ext.panel.ITable {
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (Boolean) */
		folderSort?: boolean;
		/** [Config Option] (Boolean) */
		hideHeaders?: boolean;
		/** [Config Option] (Boolean) */
		lines?: boolean;
		/** [Config Option] (Ext.data.Model/Ext.data.TreeModel/Object) */
		root?: any;
		/** [Config Option] (Boolean) */
		rootVisible?: boolean;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (Boolean) */
		singleExpand?: boolean;
		/** [Config Option] (Ext.data.TreeStore) */
		store?: Ext.data.ITreeStore;
		/** [Config Option] (Boolean) */
		useArrows?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
		/** [Method] Collapse all nodes 
		* @param callback Function A function to execute when the collapse finishes. 
		* @param scope Object The scope of the callback function 
		*/
		collapseAll?( callback?:any, scope?:any ): void;

		/** [Method] Collapses a record that is loaded in the tree  
		* @param record Ext.data.Model The record to collapse 
		* @param deep Boolean True to collapse nodes all the way up the tree hierarchy. 
		* @param callback Function The function to run after the collapse is completed 
		* @param scope Object The scope of the callback function. 
		*/
		collapseNode?( record?:Ext.data.IModel, deep?:boolean, callback?:any, scope?:any ): void;

		/** [Method] Expand the tree to the path of a particular node then scroll it into view  
		* @param path String The path to bring into view. The path may be absolute, including a leading separator and starting from the root node id, or relative with no leading separator, starting from an existing node in the tree. 
		* @param options Object An object containing options to modify the operation. 
		*/
		ensureVisible?( path?:string, options?:any ): void;

		/** [Method] Expand all nodes 
		* @param callback Function A function to execute when the expand finishes. 
		* @param scope Object The scope of the callback function 
		*/
		expandAll?( callback?:any, scope?:any ): void;

		/** [Method] Expands a record that is loaded in the tree  
		* @param record Ext.data.Model The record to expand 
		* @param deep Boolean True to expand nodes all the way down the tree hierarchy. 
		* @param callback Function The function to run after the expand is completed 
		* @param scope Object The scope of the callback function. 
		*/
		expandNode?( record?:Ext.data.IModel, deep?:boolean, callback?:any, scope?:any ): void;

		/** [Method] Expand the tree to the path of a particular node  
		* @param path String The path to expand. The path may be absolute, including a leading separator and starting from the root node id, or relative with no leading separator, starting from an existing node in the tree. 
		* @param options Object An object containing options to modify the operation. 
		*/
		expandPath?( path?:string, options?:any ): void;

		/** [Method] Retrieve an array of checked records  
		* @returns Ext.data.TreeModel[] An array containing the checked records 
		*/
		getChecked?(): Ext.data.ITreeModel[];

		/** [Method] Returns the root node for this tree  
		* @returns Ext.data.TreeModel 
		*/
		getRootNode?(): Ext.data.ITreeModel;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Expand the tree to the path of a particular node then select it  
		* @param path String The path to expand. The path may be absolute, including a leading separator and starting from the root node id, or relative with no leading separator, starting from an existing node in the tree. 
		* @param field String The field to get the data from. Defaults to the model idProperty. 
		* @param separator String A separator to use. 
		* @param callback Function A function to execute when the select finishes. 
		* @param scope Object The scope of the callback function 
		*/
		selectPath?( path?:string, field?:string, separator?:string, callback?:any, scope?:any ): void;

		/** [Method] Sets root node of this tree  
		* @param root Ext.data.TreeModel/Object 
		* @returns Ext.data.TreeModel The new root 
		*/
		setRootNode?( root?:any ): Ext.data.ITreeModel;

	}

}

declare module Ext.tree.plugin {
	export interface ITreeViewDragDrop extends Ext.plugin.IAbstract {
		/** [Config Option] (Boolean) */
		allowContainerDrops?: boolean;
		/** [Config Option] (Boolean) */
		allowParentInserts?: boolean;
		/** [Config Option] (Boolean) */
		appendOnly?: boolean;
		/** [Config Option] (Object/Boolean) */
		containerScroll?: any;
		/** [Config Option] (String) */
		ddGroup?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		dragGroup?: string;
		/** [Config Option] (String) */
		dragText?: string;
		/** [Config Option] (Object) */
		dragZone?: any;
		/** [Config Option] (String) */
		dropGroup?: string;
		/** [Config Option] (Object) */
		dropZone?: any;
		/** [Config Option] (Boolean) */
		enableDrag?: boolean;
		/** [Config Option] (Boolean) */
		enableDrop?: boolean;
		/** [Config Option] (Number) */
		expandDelay?: number;
		/** [Config Option] (String) */
		nodeHighlightColor?: string;
		/** [Config Option] (Boolean) */
		nodeHighlightOnDrop?: boolean;
		/** [Config Option] (Boolean) */
		nodeHighlightOnRepair?: boolean;
		/** [Config Option] (Boolean) */
		sortOnDrop?: boolean;
	}

}

declare module Ext.tree {
	export interface IView extends Ext.view.ITable {
		/** [Config Option] (Boolean) */
		loadMask?: boolean;
		/** [Config Option] (String) */
		loadingCls?: string;
		/** [Config Option] (Boolean) */
		rootVisible?: boolean;
		/** [Config Option] (Object/Ext.selection.DataViewModel) */
		selectionModel?: any;
		/** [Config Option] (Boolean) */
		stripeRows?: boolean;
		/** [Property] (Boolean) */
		isTreeView?: boolean;

		/** [Method] Called by the layout system after the Component has been laid out  
		* @param width Object 
		* @param height Object 
		* @param prevWidth Object 
		* @param prevHeight Object 
		*/
		afterComponentLayout?( width?:any, height?:any, prevWidth?:any, prevHeight?:any ): void;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Collapses a record that is loaded in the view  
		* @param record Ext.data.Model The record to collapse 
		* @param deep Boolean True to collapse nodes all the way up the tree hierarchy. 
		* @param callback Function The function to run after the collapse is completed 
		* @param scope Object The scope of the callback function. 
		*/
		collapse?( record?:Ext.data.IModel, deep?:boolean, callback?:any, scope?:any ): void;

		/** [Method] Expands a record that is loaded in the view  
		* @param record Ext.data.Model The record to expand 
		* @param deep Boolean True to expand nodes all the way down the tree hierarchy. 
		* @param callback Function The function to run after the expand is completed 
		* @param scope Object The scope of the callback function. 
		*/
		expand?( record?:Ext.data.IModel, deep?:boolean, callback?:any, scope?:any ): void;

		/** [Method] Returns the value of selectionModel  
		* @returns Object 
		*/
		getSelectionModel?(): any;

		/** [Method] Gets the listeners to bind to a new store  
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?(): any;

		/** [Method] Template method it is called when a new store is bound to the current instance  
		* @param store Object 
		* @param initial Object 
		* @param propName Object 
		* @param oldStore Object 
		*/
		onBindStore?( store?:any, initial?:any, propName?:any, oldStore?:any ): void;

		/** [Method] Sets the value of selectionModel  
		* @param selectionModel Object The new value. 
		*/
		setSelectionModel?( selectionModel?:any ): void;

		/** [Method] Toggles a record between expanded and collapsed  
		* @param record Ext.data.Model 
		* @param deep Boolean True to collapse nodes all the way up the tree hierarchy. 
		* @param callback Function The function to run after the expand/collapse is completed 
		* @param scope Object The scope of the callback function. 
		*/
		toggle?( record?:Ext.data.IModel, deep?:boolean, callback?:any, scope?:any ): void;

	}

}

declare module Ext.tree {
	export interface IViewDragZone extends Ext.view.IDragZone {
		/** [Method] Template method called upon mousedown  
		* @param e Object 
		* @param record Object 
		*/
		isPreventDrag?( e?:any, record?:any ): void;

	}

}

declare module Ext.tree {
	export interface IViewDropZone extends Ext.view.IDropZone {
		/** [Config Option] (Boolean) */
		allowContainerDrops?: boolean;
		/** [Config Option] (Boolean) */
		allowParentInserts?: boolean;
		/** [Config Option] (Boolean) */
		appendOnly?: boolean;
		/** [Config Option] (Number) */
		expandDelay?: number;
		/** [Method] Moved out of the DropZone without dropping  */
		notifyOut?(): void;

		/** [Method] This will be called is allowContainerDrops is set  
		* @param dragZone Object 
		* @param e Object 
		* @param data Object 
		* @returns Boolean True if the drop was valid, else false 
		*/
		onContainerDrop?( dragZone?:any, e?:any, data?:any ): boolean;

		/** [Method] The mouse is past the end of all nodes or there are no nodes  
		* @param dd Object 
		* @param e Object 
		* @param data Object 
		* @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated 
		*/
		onContainerOver?( dd?:any, e?:any, data?:any ): string;

		/** [Method] The mouse is no longer over a tree node so dropping is not valid 
		* @param n Object 
		* @param dd Object 
		* @param e Object 
		* @param data Object 
		*/
		onNodeOut?( n?:any, dd?:any, e?:any, data?:any ): void;

		/** [Method] The mouse is over a View node 
		* @param node Object 
		* @param dragZone Object 
		* @param e Object 
		* @param data Object 
		* @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated 
		*/
		onNodeOver?( node?:any, dragZone?:any, e?:any, data?:any ): string;

	}

}

declare module Ext.util {
	export interface IAbstractMixedCollection extends Ext.IBase, Ext.util.IObservable {
		/** [Config Option] (Boolean) */
		allowFunctions?: boolean;
		/** [Property] (Boolean) */
		isMixedCollection?: boolean;

		/** [Method] Adds an item to the collection  
		* @param key String/Object The key to associate with the item, or the new item. If a getKey implementation was specified for this MixedCollection, or if the key of the stored items is in a property called id, the MixedCollection will be able to derive the key for the new item. In this case just pass the new item in this parameter. 
		* @param obj Object The item to add. Note that when adding a value that is iterable, it must be wrapped in brackets, i.e.: c.add([[1, 2]]);  This will be needed for any value that is iterable, i.e., an array, arguments object, HTML collections, etc. 
		* @returns Object The item added. 
		*/
		add?( key?:any, obj?:any ): any;

		/** [Method] Adds all elements of an Array or an Object to the collection  
		* @param objs Object/Array An Object containing properties which will be added to the collection, or an Array of values, each of which are added to the collection. Functions references will be added to the collection if allowFunctions has been set to true. 
		*/
		addAll?( objs?:any ): void;

		/** [Method] Removes all items from the collection  */
		clear?(): void;

		/** [Method] Creates a shallow copy of this collection 
		* @returns Ext.util.MixedCollection 
		*/
		clone?(): Ext.util.IMixedCollection;

		/** [Method] Collects unique values of a particular property in this MixedCollection 
		* @param property String The property to collect on 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param allowBlank Boolean Pass true to allow null, undefined or empty string values 
		* @returns Array The unique values 
		*/
		collect?( property?:string, root?:string, allowBlank?:boolean ): any[];

		/** [Method] Returns true if the collection contains the passed Object as an item  
		* @param o Object The Object to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as an item. 
		*/
		contains?( o?:any ): boolean;

		/** [Method] Returns true if the collection contains the passed Object as a key  
		* @param key String The key to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as a key. 
		*/
		containsKey?( key?:string ): boolean;

		/** [Method] Executes the specified function once for every item in the collection  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current item in the iteration. 
		*/
		each?( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		eachKey?( fn?:any, scope?:any ): void;

		/** [Method] Filters the objects in this collection by a set of Filters or by a single property value pair with optional paramete  
		* @param property Ext.util.Filter[]/String A property on your objects, or an array of Filter objects 
		* @param value String/RegExp Either string that the property values should start with or a RegExp to test against the property 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		filter?( property?:any, value?:any, anyMatch?:boolean, caseSensitive?:boolean ): Ext.util.IMixedCollection;

		/** [Method] Filter by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @returns Ext.util.MixedCollection The new filtered collection 
		*/
		filterBy?( fn?:any, scope?:any ): Ext.util.IMixedCollection;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  */
		find?(): void;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  
		* @param fn Function The selection function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		* @returns Object The first item in the collection which returned true from the selection function, or null if none was found. 
		*/
		findBy?( fn?:any, scope?:any ): any;

		/** [Method] Finds the index of the first matching object in this collection by a specific property value  
		* @param property String The name of a property on your objects. 
		* @param value String/RegExp A string that the property values should start with or a RegExp to test against the property. 
		* @param start Number The index to start searching at. 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @returns Number The matched index or -1 
		*/
		findIndex?( property?:string, value?:any, start?:number, anyMatch?:boolean, caseSensitive?:boolean ): number;

		/** [Method] Find the index of the first matching object in this collection by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this MixedCollection. 
		* @param start Number The index to start searching at. 
		* @returns Number The matched index or -1 
		*/
		findIndexBy?( fn?:any, scope?:any, start?:number ): number;

		/** [Method] Returns the first item in the collection  
		* @returns Object the first item in the collection.. 
		*/
		first?(): any;

		/** [Method] Returns the item associated with the passed key OR index  
		* @param key String/Number The key or index of the item. 
		* @returns Object If the item is found, returns the item. If the item was not found, returns undefined. If an item was found, but is a Class, returns null. 
		*/
		get?( key?:any ): any;

		/** [Method] Returns the item at the specified index  
		* @param index Number The index of the item. 
		* @returns Object The item at the specified index. 
		*/
		getAt?( index?:number ): any;

		/** [Method] Returns the item associated with the passed key  
		* @param key String/Number The key of the item. 
		* @returns Object The item associated with the passed key. 
		*/
		getByKey?( key?:any ): any;

		/** [Method] Returns the number of items in the collection  
		* @returns Number the number of items in the collection. 
		*/
		getCount?(): number;

		/** [Method] A function which will be called passing a newly added object when the object is added without a separate id  
		* @param item Object The item for which to find the key. 
		* @returns Object The key for the passed item. 
		*/
		getKey?( item?:any ): any;

		/** [Method] Returns a range of items in this collection 
		* @param startIndex Number The starting index. Defaults to 0. 
		* @param endIndex Number The ending index. Defaults to the last item. 
		* @returns Array An array of items 
		*/
		getRange?( startIndex?:number, endIndex?:number ): any[];

		/** [Method] Returns index within the collection of the passed Object  
		* @param o Object The item to find the index of. 
		* @returns Number index of the item. Returns -1 if not found. 
		*/
		indexOf?( o?:any ): number;

		/** [Method] Returns index within the collection of the passed key  
		* @param key String The key to find the index of. 
		* @returns Number index of the key. 
		*/
		indexOfKey?( key?:string ): number;

		/** [Method] Inserts an item at the specified index in the collection  
		* @param index Number The index to insert the item at. 
		* @param key String/Object/String[]/Object[] The key to associate with the new item, or the item itself. May also be an array of either to insert multiple items at once. 
		* @param o Object/Object[] If the second parameter was a key, the new item. May also be an array to insert multiple items at once. 
		* @returns Object The item inserted or an array of items inserted. 
		*/
		insert?( index?:number, key?:any, o?:any ): any;

		/** [Method] Returns the last item in the collection  
		* @returns Object the last item in the collection.. 
		*/
		last?(): any;

		/** [Method] Remove an item from the collection  
		* @param o Object The item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		remove?( o?:any ): any;

		/** [Method] Remove all items in the collection  
		* @param items Array An array of items to be removed. 
		* @returns Ext.util.MixedCollection this object 
		*/
		removeAll?( items?:any[] ): Ext.util.IMixedCollection;

		/** [Method] Remove an item from a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		removeAt?( index?:number ): any;

		/** [Method] Removes an item associated with the passed key fom the collection  
		* @param key String The key of the item to remove. If null is passed, all objects which yielded no key from the configured getKey function are removed. 
		* @returns Object Only returned if removing at a specified key. The item removed or false if no item was removed. 
		*/
		removeAtKey?( key?:string ): any;

		/** [Method] Remove a range of items starting at a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @param removeCount Number The nuber of items to remove beginning at the specified index. 
		* @returns Object The last item removed or false if no item was removed. 
		*/
		removeRange?( index?:number, removeCount?:number ): any;

		/** [Method] Replaces an item in the collection  
		* @param key String The key associated with the item to replace, or the replacement item. If you supplied a getKey implementation for this MixedCollection, or if the key of your stored items is in a property called id, then the MixedCollection will be able to derive the key of the replacement item. If you want to replace an item with one having the same key value, then just pass the replacement item in this parameter. 
		* @param o Object {Object} o (optional) If the first parameter passed was a key, the item to associate with that key. 
		* @returns Object The new item. 
		*/
		replace?( key?:string, o?:any ): any;

		/** [Method] Collects all of the values of the given property and returns their sum 
		* @param property String The property to sum by 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param start Number The record index to start at 
		* @param end Number The record index to end at 
		* @returns Number The total 
		*/
		sum?( property?:string, root?:string, start?:number, end?:number ): number;

		/** [Method] Change the key for an existing item in the collection  
		* @param oldKey Object The old key 
		* @param newKey Object The new key 
		*/
		updateKey?( oldKey?:any, newKey?:any ): void;

	}

}

declare module Ext.util {
	export interface IAnimate extends Ext.IBase {
		/** [Method] Performs custom animation on this object  
		* @param config Object Configuration for Ext.fx.Anim. Note that the to config is required. 
		* @returns Object this 
		*/
		animate?( config?:any ): any;

		/** [Method] Returns the current animation if this object has any effects actively running or queued else returns false  
		* @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false 
		*/
		getActiveAnimation?(): any;

		/** [Method] Returns the current animation if this object has any effects actively running or queued else returns false  
		* @returns Ext.fx.Anim/Boolean Anim if element has active effects, else false 
		*/
		hasActiveFx?(): any;

		/** [Method] Ensures that all effects queued after sequenceFx is called on this object are run in sequence  
		* @returns Object this 
		*/
		sequenceFx?(): any;

		/** [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that 
		* @returns Ext.dom.Element The Element 
		*/
		stopAnimation?(): Ext.dom.IElement;

		/** [Method] Stops any running effects and clears this object s internal effects queue if it contains any additional effects that 
		* @returns Ext.dom.Element The Element 
		*/
		stopFx?(): Ext.dom.IElement;

		/** [Method] Ensures that all effects queued after syncFx is called on this object are run concurrently  
		* @returns Object this 
		*/
		syncFx?(): any;

	}

}

declare module Ext.util {
	export interface IBag extends Ext.IBase {
		/** [Property] (Number) */
		generation?: number;

		/** [Property] (Number) */
		length?: number;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.util {
	export interface IBase64 extends Ext.IBase {
	}
	export class Base64 {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Decodes given base64 formatted string 
		* @param input Object 
		* @returns string 
		*/
		static decode( input?:any ): string;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Encodes given string in to base64 formatted string 
		* @param input Object 
		* @returns string 
		*/
		static encode( input?:any ): string;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.util {
	export interface ICache {
		/** [Config Option] (Number) */
		maxSize?: number;
		/** [Property] (Number) */
		count?: number;

		/** [Method] Removes all items from this cache  */
		clear?(): void;

		/** [Method] Calls the given function fn for each item in the cache  
		* @param fn Function The function to call for each cache item. 
		* @param scope Object The this pointer to use for fn. 
		*/
		each?( fn?:any, scope?:any ): void;

		/** [Method] This method is called internally from get when the cache is full and the least recently used LRU item has been remo  
		* @param key String The cache lookup key for the item being removed. 
		* @param value Object The cache value (returned by miss) for the item being removed. 
		*/
		evict?( key?:string, value?:any ): void;

		/** [Method] Finds an item in this cache and returns its value  
		* @param key String The cache key of the item. 
		* @param args Object... Arguments for the miss method should it be needed. 
		* @returns Object The cached object. 
		*/
		get?( key:string, ...args:any[] ): any;

		/** [Method] This method is called by get when the key is not found in the cache  
		* @param key String The cache lookup key for the item. 
		* @param args Object... Any other arguments originally passed to get. 
		*/
		miss?( key:string, ...args:any[] ): void;

	}

}

declare module Ext.util {
	export interface IClickRepeater extends Ext.util.IObservable {
		/** [Config Option] (Boolean) */
		accelerate?: boolean;
		/** [Config Option] (Number) */
		delay?: number;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		el?: any;
		/** [Config Option] (Number) */
		interval?: number;
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Config Option] (Boolean) */
		preventDefault?: boolean;
		/** [Config Option] (Boolean) */
		stopDefault?: boolean;
		/** [Method] Disables the repeater and stops events from firing  
		* @param force Object 
		*/
		disable?( force?:any ): void;

		/** [Method] Enables the repeater and allows events to fire  */
		enable?(): void;

		/** [Method] Convenience function for setting disabled enabled by boolean  
		* @param disabled Boolean 
		*/
		setDisabled?( disabled?:boolean ): void;

	}

}

declare module Ext.util {
	export interface ICollection extends Ext.IBase, Ext.mixin.IObservable {
		/** [Config Option] (Function) */
		decoder?: any;
		/** [Config Option] (String) */
		defaultSortDirection?: string;
		/** [Config Option] (Object) */
		extraKeys?: any;
		/** [Config Option] (Array/Ext.util.FilterCollection) */
		filters?: any;
		/** [Config Option] (Object) */
		grouper?: any;
		/** [Config Option] (Ext.util.GroupCollection) */
		groups?: Ext.util.IGroupCollection;
		/** [Config Option] (Function) */
		keyFn?: any;
		/** [Config Option] (Number) */
		multiSortLimit?: number;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (Array/Ext.util.SorterCollection) */
		sorters?: any;
		/** [Config Option] (Ext.util.Collection) */
		source?: Ext.util.ICollection;
		/** [Property] (Boolean) */
		filtered?: boolean;

		/** [Property] (Number) */
		generation?: number;

		/** [Property] (Boolean) */
		grouped?: boolean;

		/** [Property] (Boolean) */
		isCollection?: boolean;

		/** [Property] (Number) */
		length?: number;

		/** [Property] (Boolean) */
		sorted?: boolean;

		/** [Property] (Number) */
		updating?: number;

		/** [Method] Adds an item to the collection  
		* @param item Object/Object[] The item or items to add. 
		* @returns Object/Object[] The item or items added. 
		*/
		add?( item?:any ): any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Returns the result of the specified aggregation operation against all items in this collection  
		* @param property String The name of the property to aggregate from each item. 
		* @param operation String/Function The operation to perform. 
		* @param begin Number The index of the first item in items to include in the aggregation. 
		* @param end Number The index at which to stop aggregating items. The item at this index will not be included in the aggregation. 
		* @param scope Object The this pointer to use if operation is a function. Defaults to this collection. 
		* @returns Object 
		*/
		aggregate?( property?:string, operation?:any, begin?:number, end?:number, scope?:any ): any;

		/** [Method] See aggregate  
		* @param property String The name of the property to aggregate from each item. 
		* @param operation String/Function The operation to perform. 
		* @param scope Object The this pointer to use if operation is a function. Defaults to this collection. 
		* @returns Object 
		*/
		aggregateByGroup?( property?:string, operation?:any, scope?:any ): any;

		/** [Method] Averages property values from some or all of the items in this collection  
		* @param property String The name of the property to average from each item. 
		* @param begin Number The index of the first item to include in the average. 
		* @param end Number The index at which to stop averaging items. The item at this index will not be included in the average. 
		* @returns Object The result of averaging the specified property from the indicated items. 
		*/
		average?( property?:string, begin?:number, end?:number ): any;

		/** [Method] See average  
		* @param property String The name of the property to average from each item. 
		* @returns Object The result of average, partitioned by group. See aggregateByGroup. 
		*/
		averageByGroup?( property?:string ): any;

		/** [Method] This method is called to indicate the start of multiple changes to the collection  */
		beginUpdate?(): void;

		/** [Method] Determines the minimum and maximum values for the specified property over some or all of the items in this collection  
		* @param property String The name of the property from each item. 
		* @param begin Number The index of the first item to include in the bounds. 
		* @param end Number The index at which to stop in items. The item at this index will not be included in the bounds. 
		* @returns Array An array [min, max] with the minimum and maximum of the specified property. 
		*/
		bounds?( property?:string, begin?:number, end?:number ): any[];

		/** [Method] See bounds  
		* @param property String The name of the property from each item. 
		* @returns Object The result of bounds, partitioned by group. See aggregateByGroup. 
		*/
		boundsByGroup?( property?:string ): any;

		/** [Method] Removes all items from the collection  */
		clear?(): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Creates a shallow copy of this collection 
		* @returns Ext.util.Collection 
		*/
		clone?(): Ext.util.ICollection;

		/** [Method] Collects unique values of a particular property in this Collection  
		* @param property String The property to collect on 
		* @param root String 'root' property to extract the first argument from. This is used mainly when summing fields in records, where the fields are all stored inside the 'data' object 
		* @param allowNull Boolean Pass true to include null, undefined or empty string values. 
		* @returns Array The unique values 
		*/
		collect?( property?:string, root?:string, allowNull?:boolean ): any[];

		/** [Method] Returns true if the collection contains the passed Object as an item  
		* @param item Object The Object to look for in the collection. 
		* @returns Boolean true if the collection contains the Object as an item. 
		*/
		contains?( item?:any ): boolean;

		/** [Method] Returns true if the collection contains the passed Object as a key  
		* @param key String The key to look for in the collection. 
		* @returns Boolean True if the collection contains the Object as a key. 
		*/
		containsKey?( key?:string ): boolean;

		/** [Method] Determines the number of items in the collection  
		* @returns Number The number of items. 
		*/
		count?(): number;

		/** [Method] See count  
		* @returns Object The result of count, partitioned by group. See aggregateByGroup. 
		*/
		countByGroup?(): any;

		/** [Method] Creates a new collection that is a filtered subset of this collection  
		* @param property Ext.util.Filter[]/String/Function A property on your objects, an array of Filter objects or a filter function. 
		* @param value Object If property is a function, this argument is the "scope" (or "this" pointer) for the function. Otherwise this is either a RegExp to test property values or the value with which to compare. 
		* @param anyMatch Boolean True to match any part of the string, not just the beginning. 
		* @param caseSensitive Boolean True for case sensitive comparison. 
		* @param exactMatch Boolean true to force exact match (^ and $ characters added to the regex). 
		* @returns Ext.util.Collection The new, filtered collection. 
		*/
		createFiltered?( property?:any, value?:any, anyMatch?:boolean, caseSensitive?:boolean, exactMatch?:boolean ): Ext.util.ICollection;

		/** [Method] This method is an alias for decodeItems but is called when items are being removed  */
		decodeRemoveItems?(): void;

		/** [Method] Destroys this collection  */
		destroy?(): void;

		/** [Method] Executes the specified function once for every item in the collection  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this collection. 
		*/
		each?( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every key in the collection passing each key and its associated item as th  
		* @param fn Function The function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this collection. 
		*/
		eachKey?( fn?:any, scope?:any ): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] This method is called after modifications are complete on a collection  */
		endUpdate?(): void;

		/** [Method] Finds the items with the minimum and maximum for the specified property over some or all of the items in this collect  
		* @param property String The name of the property from each item. 
		* @param begin Number The index of the first item to include. 
		* @param end Number The index at which to stop in items. The item at this index will not be included. 
		* @returns Array An array [minItem, maxItem] with the items that have the minimum and maximum of the specified property. 
		*/
		extremes?( property?:string, begin?:number, end?:number ): any[];

		/** [Method] See extremes  
		* @param property String The name of the property from each item. 
		* @returns Object The result of extremes, partitioned by group. See aggregateByGroup. 
		*/
		extremesByGroup?( property?:string ): any;

		/** [Method] Filter by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this Collection. 
		* @returns Ext.util.Collection The new filtered collection 
		*/
		filterBy?( fn?:any, scope?:any ): Ext.util.ICollection;

		/** [Method] Finds the first matching object in this collection by a specific property value  
		* @param property String The name of a property on your objects. 
		* @param value String/RegExp A string that the property values should start with or a RegExp to test against the property. 
		* @param start Number The index to start searching at. 
		* @param startsWith Boolean Pass false to allow a match start anywhere in the string. By default the value will match only at the start of the string. 
		* @param endsWith Boolean Pass false to allow the match to end before the end of the string. By default the value will match only at the end of the string. 
		* @param ignoreCase Boolean Pass false to make the RegExp case sensitive (removes the 'i' flag). 
		* @returns Object The first item in the collection which matches the criteria or null if none was found. 
		*/
		find?( property?:string, value?:any, start?:number, startsWith?:boolean, endsWith?:boolean, ignoreCase?:boolean ): any;

		/** [Method] Returns the first item in the collection which elicits a true return value from the passed selection function  
		* @param fn Function The selection function to execute for each item. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this collection. 
		* @param start Number The index at which to start searching. 
		* @returns Object The first item in the collection which returned true from the selection function, or null if none was found. 
		*/
		findBy?( fn?:any, scope?:any, start?:number ): any;

		/** [Method] Finds the index of the first matching object in this collection by a specific property value  
		* @param property String The name of a property on your objects. 
		* @param value String/RegExp A string that the property values should start with or a RegExp to test against the property. 
		* @param start Number The index to start searching at. 
		* @param startsWith Boolean Pass false to allow a match start anywhere in the string. By default the value will match only at the start of the string. 
		* @param endsWith Boolean Pass false to allow the match to end before the end of the string. By default the value will match only at the end of the string. 
		* @param ignoreCase Boolean Pass false to make the RegExp case sensitive (removes the 'i' flag). 
		* @returns Number The matched index or -1 if not found. 
		*/
		findIndex?( property?:string, value?:any, start?:number, startsWith?:boolean, endsWith?:boolean, ignoreCase?:boolean ): number;

		/** [Method] Find the index of the first matching object in this collection by a function  
		* @param fn Function The function to be called. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to this collection. 
		* @param start Number The index at which to start searching. 
		* @returns Number The matched index or -1 
		*/
		findIndexBy?( fn?:any, scope?:any, start?:number ): number;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the first item in the collection  
		* @param grouped Boolean true to extract the first item in each group. Only applies if a grouper is active in the collection. 
		* @returns Object The first item in the collection. If the grouped parameter is passed, see aggregateByGroup for information on the return type. 
		*/
		first?( grouped?:boolean ): any;

		/** [Method] Returns the item associated with the passed key  
		* @param key String/Number The key of the item. 
		* @returns Object The item associated with the passed key. 
		*/
		get?( key?:any ): any;

		/** [Method] Returns the item at the specified index  
		* @param index Number The index of the item. 
		* @returns Object The item at the specified index. 
		*/
		getAt?( index?:number ): any;

		/** [Method] Returns the value of autoFilter  
		* @returns Boolean 
		*/
		getAutoFilter?(): boolean;

		/** [Method] Returns the value of autoSort  
		* @returns Boolean 
		*/
		getAutoSort?(): boolean;

		/** [Method] Returns the item associated with the passed key  
		* @param key String/Number The key of the item. 
		* @returns Object The item associated with the passed key. 
		*/
		getByKey?( key?:any ): any;

		/** [Method] Returns the number of items in the collection  
		* @returns Number the number of items in the collection. 
		*/
		getCount?(): number;

		/** [Method] Returns the value of decoder  
		* @returns Function 
		*/
		getDecoder?(): any;

		/** [Method] Returns the value of defaultSortDirection  
		* @returns String 
		*/
		getDefaultSortDirection?(): string;

		/** [Method] Returns the value of extraKeys  
		* @returns Object 
		*/
		getExtraKeys?(): any;

		/** [Method] Returns the filter function  
		* @returns Function sortFn The sort function. 
		*/
		getFilterFn?(): any;

		/** [Method] Returns the Ext util FilterCollection  
		* @param autoCreate Object Pass false to disable auto-creation of the collection. 
		* @returns Ext.util.FilterCollection The collection of filters. 
		*/
		getFilters?( autoCreate?:any ): Ext.util.IFilterCollection;

		/** [Method] Returns the value of grouper  
		* @returns Object 
		*/
		getGrouper?(): any;

		/** [Method] A function which will be called passing an object belonging to this collection  
		* @param item Object The item. 
		* @returns Object The key for the passed item. 
		*/
		getKey?( item?:any ): any;

		/** [Method] Returns the value of multiSortLimit  
		* @returns Number 
		*/
		getMultiSortLimit?(): number;

		/** [Method] Returns a range of items in this collection 
		* @param begin Number The index of the first item to get. 
		* @param end Number The ending index. The item at this index is not included. 
		* @returns Array An array of items 
		*/
		getRange?( begin?:number, end?:number ): any[];

		/** [Method] Returns the value of rootProperty  
		* @returns String 
		*/
		getRootProperty?(): string;

		/** [Method] Returns an up to date sort function  
		* @returns Function The sort function. 
		*/
		getSortFn?(): any;

		/** [Method] Returns the Ext util SorterCollection  
		* @param autoCreate Object Pass false to disable auto-creation of the collection. 
		* @returns Ext.util.SorterCollection The collection of sorters. 
		*/
		getSorters?( autoCreate?:any ): Ext.util.ISorterCollection;

		/** [Method] Returns all unfiltered items in the Collection when the Collection has been filtered  
		* @returns Ext.util.Collection items All unfiltered items (or null when the Collection is not filtered) 
		*/
		getSource?(): Ext.util.ICollection;

		/** [Method] Returns an array of values for the specified sub property  
		* @param property String The property to collect on 
		* @param root String 'root' property to extract the first argument from. This is used mainly when operating on fields in records, where the fields are all stored inside the 'data' object. 
		* @param start Number The index of the first item to include. 
		* @param end Number The index at which to stop getting values. The value of this item is not included. 
		* @returns Array The values. 
		*/
		getValues?( property?:string, root?:string, start?:number, end?:number ): any[];

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Returns index within the collection of the passed Object  
		* @param item Object The item to find. 
		* @returns Number The index of the item or -1 if not found. 
		*/
		indexOf?( item?:any ): number;

		/** [Method] Returns index within the collection of the passed key  
		* @param key Object The key to find. 
		* @returns Number The index of the item or -1 if not found. 
		*/
		indexOfKey?( key?:any ): number;

		/** [Method] Inserts one or more items to the collection  
		* @param index Number The index at which to insert the item(s). 
		* @param item Object/Object[] The item or items to add. 
		* @returns Object/Object[] The item or items added. 
		*/
		insert?( index?:number, item?:any ): any;

		/** [Method] This method can be used to conveniently test whether an individual item would be removed due to the current filter  
		* @param item Object The item to test. 
		* @returns Boolean The value true if the item would be "removed" from the collection due to filters or false otherwise. 
		*/
		isItemFiltered?( item?:any ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] This method should be called when an item in this collection has been modified  
		* @param item Object The item that was modified. 
		* @param modified String[] The names of the modified properties of the item. 
		* @param oldKey String/Number Passed if the item's key was also modified. 
		*/
		itemChanged?( item?:any, modified?:string[], oldKey?:any ): void;

		/** [Method] Returns the last item in the collection  
		* @param grouped Boolean true to extract the first item in each group. Only applies if a grouper is active in the collection. 
		* @returns Object The last item in the collection. If the grouped parameter is passed, see aggregateByGroup for information on the return type. 
		*/
		last?( grouped?:boolean ): any;

		/** [Method] Determines the maximum value for the specified property over some or all of the items in this collection  
		* @param property String The name of the property from each item. 
		* @param begin Number The index of the first item to include in the maximum. 
		* @param end Number The index at which to stop in items. The item at this index will not be included in the maximum. 
		* @returns Object The maximum of the specified property from the indicated items. 
		*/
		max?( property?:string, begin?:number, end?:number ): any;

		/** [Method] See max  
		* @param property String The name of the property from each item. 
		* @returns Object The result of max, partitioned by group. See aggregateByGroup. 
		*/
		maxByGroup?( property?:string ): any;

		/** [Method] Finds the item with the maximum value for the specified property over some or all of the items in this collection  
		* @param property String The name of the property from each item. 
		* @param begin Number The index of the first item to include in the maximum. 
		* @param end Number The index at which to stop in items. The item at this index will not be included in the maximum. 
		* @returns Object The item with the maximum of the specified property from the indicated items. 
		*/
		maxItem?( property?:string, begin?:number, end?:number ): any;

		/** [Method] See maxItem  
		* @param property String The name of the property from each item. 
		* @returns Object The result of maxItem, partitioned by group. See aggregateByGroup. 
		*/
		maxItemByGroup?( property?:string ): any;

		/** [Method] Determines the minimum value for the specified property over some or all of the items in this collection  
		* @param property String The name of the property from each item. 
		* @param begin Number The index of the first item to include in the minimum. 
		* @param end Number The index at which to stop in items. The item at this index will not be included in the minimum. 
		* @returns Object The minimum of the specified property from the indicated items. 
		*/
		min?( property?:string, begin?:number, end?:number ): any;

		/** [Method] See min  
		* @param property String The name of the property from each item. 
		* @returns Object The result of min, partitioned by group. See aggregateByGroup. 
		*/
		minByGroup?( property?:string ): any;

		/** [Method] Finds the item with the minimum value for the specified property over some or all of the items in this collection  
		* @param property String The name of the property from each item. 
		* @param begin Number The index of the first item to include in the minimum. 
		* @param end Number The index at which to stop in items. The item at this index will not be included in the minimum. 
		* @returns Object The item with the minimum of the specified property from the indicated items. 
		*/
		minItem?( property?:string, begin?:number, end?:number ): any;

		/** [Method] See minItem  
		* @param property String The name of the property from each item. 
		* @returns Object The result of minItem, partitioned by group. See aggregateByGroup. 
		*/
		minItemByGroup?( property?:string ): any;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Called after a change of the filter is complete  
		* @param filters Ext.util.FilterCollection The filters collection. 
		*/
		onFilterChange?( filters?:Ext.util.IFilterCollection ): void;

		/** [Method] Called after a change of the sort is complete  
		* @param sorters Ext.util.SorterCollection The sorters collection. 
		*/
		onSortChange?( sorters?:Ext.util.ISorterCollection ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Remove an item from the collection  
		* @param item Object/Object[] The item or items to remove. 
		* @returns Number The number of items removed. 
		*/
		remove?( item?:any ): number;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Remove all items in the collection  
		* @returns Ext.util.Collection This object. 
		*/
		removeAll?(): Ext.util.ICollection;

		/** [Method] Remove an item from a specified index in the collection  
		* @param index Number The index within the collection of the item to remove. 
		* @param count Number The number of items to remove. 
		* @returns Object/Number If count was 1 and the item was removed, that item is returned. Otherwise the number of items removed is returned. 
		*/
		removeAt?( index?:number, count?:number ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes the item associated with the passed key from the collection  
		* @param key String The key of the item to remove. 
		* @returns Object Only returned if removing at a specified key. The item removed or false if no item was removed. 
		*/
		removeByKey?( key?:string ): any;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Adds an item to the collection while removing any existing items  
		* @param item Object/Object[] The item or items to add. 
		* @returns Object/Object[] The item or items added. 
		*/
		replaceAll?( item?:any ): any;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of autoFilter  
		* @param autoFilter Boolean The new value. 
		*/
		setAutoFilter?( autoFilter?:boolean ): void;

		/** [Method] Sets the value of autoSort  
		* @param autoSort Boolean The new value. 
		*/
		setAutoSort?( autoSort?:boolean ): void;

		/** [Method] Sets the value of decoder  
		* @param decoder Function The new value. 
		*/
		setDecoder?( decoder?:any ): void;

		/** [Method] Sets the value of defaultSortDirection  
		* @param defaultSortDirection String The new value. 
		*/
		setDefaultSortDirection?( defaultSortDirection?:string ): void;

		/** [Method] Sets the value of extraKeys  
		* @param extraKeys Object The new value. 
		*/
		setExtraKeys?( extraKeys?:any ): void;

		/** [Method] Sets the value of filters  
		* @param filters Array/Ext.util.FilterCollection The new value. 
		*/
		setFilters?( filters?:any ): void;

		/** [Method] Sets the value of grouper  
		* @param grouper Object The new value. 
		*/
		setGrouper?( grouper?:any ): void;

		/** [Method] Sets the value of groups  
		* @param groups Ext.util.GroupCollection The new value. 
		*/
		setGroups?( groups?:Ext.util.IGroupCollection ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of multiSortLimit  
		* @param multiSortLimit Number The new value. 
		*/
		setMultiSortLimit?( multiSortLimit?:number ): void;

		/** [Method] Sets the value of rootProperty  
		* @param rootProperty String The new value. 
		*/
		setRootProperty?( rootProperty?:string ): void;

		/** [Method] Sets the value of sorters  
		* @param sorters Array/Ext.util.SorterCollection The new value. 
		*/
		setSorters?( sorters?:any ): void;

		/** [Method] Sets the value of source  
		* @param source Ext.util.Collection The new value. 
		*/
		setSource?( source?:Ext.util.ICollection ): void;

		/** [Method] Updates the sorters collection and triggers sorting of this Sortable  
		* @param property String/Function/Ext.util.Sorter[] Either the name of a property (such as a field of a Ext.data.Model in a Store), an array of configurations for Ext.util.Sorter instances or just a comparison function. 
		* @param direction String The direction by which to sort the data. This parameter is only valid when property is a String, otherwise the second parameter is the mode. 
		* @param mode String Where to put new sorters in the collection. This should be one the following values:  **replace** : The new sorter(s) become the sole sorter set for this Sortable. This is the most useful call mode to programmatically sort by multiple fields. **prepend** : The new sorters are inserted as the primary sorters. The sorter collection length must be controlled by the developer. **multi** : Similar to **prepend** the new sorters are inserted at the front of the collection of sorters. Following the insertion, however, this mode trims the sorter collection to enforce the multiSortLimit config. This is useful for implementing intuitive "Sort by this" user interfaces. **append** : The new sorters are added at the end of the collection.  
		* @returns Ext.util.Collection This instance. 
		*/
		sort?( property?:any, direction?:string, mode?:string ): Ext.util.ICollection;

		/** [Method] Sorts the collection by a single sorter function 
		* @param sorterFn Function The function to sort by 
		*/
		sortBy?( sorterFn?:any ): void;

		/** [Method] This method will sort an array based on the currently configured sorters  
		* @param data Array The array you want to have sorted. 
		* @returns Array The array you passed after it is sorted. 
		*/
		sortData?( data?:any[] ): any[];

		/** [Method] Sorts the items of the collection using the supplied function  
		* @param sortFn Function The function by which to sort the items. 
		*/
		sortItems?( sortFn?:any ): void;

		/** [Method] This method is basically the same as the JavaScript Array splice method  
		* @param index Number The index at which to add or remove items. 
		* @param toRemove Number/Object[] The number of items to remove or an array of the items to remove. 
		* @param toAdd Object[] The items to insert at the given index. 
		*/
		splice?( index?:number, toRemove?:any, toAdd?:any[] ): void;

		/** [Method] Sums property values from some or all of the items in this collection  
		* @param property String The name of the property to sum from each item. 
		* @param begin Number The index of the first item to include in the sum. 
		* @param end Number The index at which to stop summing items. The item at this index will not be included in the sum. 
		* @returns Object The result of summing the specified property from the indicated items. 
		*/
		sum?( property?:string, begin?:number, end?:number ): any;

		/** [Method] See sum  
		* @param property String The name of the property to sum from each item. 
		* @returns Object The result of sum, partitioned by group. See aggregateByGroup. 
		*/
		sumByGroup?( property?:string ): any;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] This method calls the supplied function fn between beginUpdate and endUpdate calls  
		* @param fn Function The function to call that will modify this collection. 
		* @param scope Object The this pointer to use when calling fn. 
		* @returns Object Returns the value returned from fn (typically undefined). 
		*/
		update?( fn?:any, scope?:any ): any;

		/** [Method] Change the key for an existing item in the collection  
		* @param item Object The item whose key has changed. The item should be a member of this collection. 
		* @param oldKey String The old key for the item. 
		*/
		updateKey?( item?:any, oldKey?:string ): void;

	}

}

declare module Ext.util {
	export interface ICollectionKey extends Ext.IBase, Ext.mixin.IIdentifiable {
		/** [Config Option] (Function/String) */
		keyFn?: any;
		/** [Config Option] (String) */
		property?: string;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Property] (String) */
		name?: string;

		/** [Method] Returns the item or if not unique possibly array of items that have the given key  
		* @param key Mixed The key that will match the keyFn return value or value of the specified property. 
		* @returns Object 
		*/
		get?( key?:any ): any;

		/** [Method] Returns the value of collection  
		* @returns Object 
		*/
		getCollection?(): any;

		/** [Method] Retrieves the id of this component  
		* @returns String id 
		*/
		getId?(): string;

		/** [Method] Returns the value of keyFn  
		* @returns Function/String 
		*/
		getKeyFn?(): any;

		/** [Method] Returns the value of property  
		* @returns String 
		*/
		getProperty?(): string;

		/** [Method] Returns the value of unique  
		* @returns Boolean 
		*/
		getUnique?(): boolean;

		/** [Method] Returns the index of the item with the given key in the collection  
		* @param key Mixed The key that will match the keyFn return value or value of the specified property. 
		* @param startAt Number The index at which to start. Only occurrences beyond this index are returned. 
		* @returns Number The index of the first item with the given key beyond the given startAt index or -1 if there are no such items. 
		*/
		indexOf?( key?:any, startAt?:number ): number;

		/** [Method] Sets the value of collection  
		* @param collection Object The new value. 
		*/
		setCollection?( collection?:any ): void;

		/** [Method] Sets the value of keyFn  
		* @param keyFn Function/String The new value. 
		*/
		setKeyFn?( keyFn?:any ): void;

		/** [Method] Sets the value of property  
		* @param property String The new value. 
		*/
		setProperty?( property?:string ): void;

		/** [Method] Sets the value of rootProperty  
		* @param rootProperty String The new value. 
		*/
		setRootProperty?( rootProperty?:string ): void;

		/** [Method] Sets the value of unique  
		* @param unique Boolean The new value. 
		*/
		setUnique?( unique?:boolean ): void;

		/** [Method] Change the key for an existing item in the collection  
		* @param item Object The item whose key has changed. 
		* @param oldKey String The old key for the item. 
		*/
		updateKey?( item?:any, oldKey?:string ): void;

	}

}

declare module Ext.util {
	export interface IComponentDragger extends Ext.dd.IDragTracker {
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Boolean) */
		constrainDelegate?: boolean;
		/** [Config Option] (String/Ext.dom.Element) */
		delegate?: any;
		/** [Method] Move either the ghost Component or the target Component to its new position on drag 
		* @param e Object 
		*/
		onDrag?( e?:any ): void;

		/** [Method] Template method which should be overridden by each DragTracker instance  
		* @param e Object 
		*/
		onEnd?( e?:any ): void;

		/** [Method] Template method which should be overridden by each DragTracker instance  
		* @param e Object 
		*/
		onStart?( e?:any ): void;

	}

}

declare module Ext.util {
	export interface ICookies extends Ext.IBase {
	}
	export class Cookies {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes a cookie with the provided name from the browser if found by setting its expiration date to sometime in the p  
		* @param name String The name of the cookie to remove 
		* @param path String The path for the cookie. This must be included if you included a path while setting the cookie. 
		*/
		static clear( name?:string, path?:string ): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Retrieves cookies that are accessible by the current page  
		* @param name String The name of the cookie to get 
		* @returns Object Returns the cookie value for the specified name; null if the cookie name does not exist. 
		*/
		static get( name?:string ): any;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Creates a cookie with the specified name and value  
		* @param name String The name of the cookie to set. 
		* @param value Object The value to set for the cookie. 
		* @param expires Object Specify an expiration date the cookie is to persist until. Note that the specified Date object will be converted to Greenwich Mean Time (GMT). 
		* @param path String Setting a path on the cookie restricts access to pages that match that path. Defaults to all pages ('/'). 
		* @param domain String Setting a domain restricts access to pages on a given domain (typically used to allow cookie access across subdomains). For example, "sencha.com" will create a cookie that can be accessed from any subdomain of sencha.com, including www.sencha.com, support.sencha.com, etc. 
		* @param secure Boolean Specify true to indicate that the cookie should only be accessible via SSL on a page using the HTTPS protocol. Defaults to false. Note that this will only work if the page calling this code uses the HTTPS protocol, otherwise the cookie will be created with default options. 
		*/
		static set( name?:string, value?:any, expires?:any, path?:string, domain?:string, secure?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.util {
	export interface ICSS extends Ext.IBase {
	}
	export class CSS {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Creates a rule  
		* @param styleSheet CSSStyleSheet The StyleSheet to create the rule in as returned from createStyleSheet. 
		* @param selector String The selector to target the rule. 
		* @param property String The cssText specification eg "color:red;font-weight:bold;text-decoration:underline" 
		* @returns CSSStyleRule The created rule 
		*/
		static createRule( styleSheet?:CSSStyleSheet, selector?:string, property?:string ): CSSStyleRule;

		/** [Method] Creates a stylesheet from a text blob of rules  
		* @param cssText String The text containing the css rules 
		* @param id String An id to add to the stylesheet for later removal 
		* @returns CSSStyleSheet 
		*/
		static createStyleSheet( cssText?:string, id?:string ): CSSStyleSheet;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Gets an an individual CSS rule by selector s  
		* @param selector String/String[] The CSS selector or an array of selectors to try. The first selector that is found is returned. 
		* @param refreshCache Boolean true to refresh the internal cache if you have recently updated any rules or added styles dynamically 
		* @returns CSSStyleRule The CSS rule or null if one is not found 
		*/
		static getRule( selector?:any, refreshCache?:boolean ): CSSStyleRule;

		/** [Method] Gets all css rules for the document 
		* @param refreshCache Boolean true to refresh the internal cache 
		* @returns Object An object (hash) of rules indexed by selector 
		*/
		static getRules( refreshCache?:boolean ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Refresh the rule cache if you have dynamically added stylesheets 
		* @returns Object An object (hash) of rules indexed by selector 
		*/
		static refreshCache(): any;

		/** [Method] Removes a style or link tag by id 
		* @param id String The id of the tag 
		*/
		static removeStyleSheet( id?:string ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Dynamically swaps an existing stylesheet reference for a new one 
		* @param id String The id of an existing link tag to remove 
		* @param url String The href of the new stylesheet to include 
		*/
		static swapStyleSheet( id?:string, url?:string ): void;

		/** [Method] Updates a rule property 
		* @param selector String/String[] If it's an array it tries each selector until it finds one. Stops immediately once one is found. 
		* @param property String The css property or a cssText specification eg "color:red;font-weight:bold;text-decoration:underline" 
		* @param value String The new value for the property 
		* @returns Boolean true If a rule was found and updated 
		*/
		static updateRule( selector?:any, property?:string, value?:string ): boolean;

	}

}

declare module Ext.util {
	export interface ICSV extends Ext.util.IDelimitedValue {
	}
	export class CSV {
		/** [Config Option] (String) */
		static delimiter: string;
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Decodes a string of encoded values into an array of rows  
		* @param input String The string to parse. 
		* @param delimiter String The column delimiter to use if the default value of delimiter is not desired. 
		* @returns String[][] An array of rows where each row is an array of Strings. 
		*/
		static decode( input?:string, delimiter?:string ): String[][];

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Converts a two dimensional array into an encoded string  
		* @param input Mixed[][] An array of row data arrays. 
		* @param delimiter String The column delimiter to use if the default value of delimiter is not desired. 
		* @returns String A string in which data items are separated by delimiter characters, and rows are separated by lineBreak characters. 
		*/
		static encode( input?:any[][], delimiter?:string ): string;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.util {
	export interface IDelayedTask {
		/** [Property] (Number) */
		id?: number;

		/** [Method] Cancel the last queued timeout */
		cancel?(): void;

		/** [Method] By default cancels any pending timeout and queues a new one  
		* @param newDelay Number The milliseconds to delay 
		* @param newFn Function Overrides function passed to constructor 
		* @param newScope Object Overrides scope passed to constructor. Remember that if no scope is specified, this will refer to the browser window. 
		* @param newArgs Array Overrides args passed to constructor 
		*/
		delay?( newDelay?:number, newFn?:any, newScope?:any, newArgs?:any[] ): void;

	}

}

declare module Ext.util {
	export interface IDelimitedValue extends Ext.IBase {
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (String) */
		delimiter?: string;
		/** [Config Option] (String) */
		lineBreak?: string;
		/** [Config Option] (String) */
		quote?: string;
		/** [Method] Decodes a string of encoded values into an array of rows  
		* @param input String The string to parse. 
		* @param delimiter String The column delimiter to use if the default value of delimiter is not desired. 
		* @returns String[][] An array of rows where each row is an array of Strings. 
		*/
		decode?( input?:string, delimiter?:string ): String[][];

		/** [Method] Converts a two dimensional array into an encoded string  
		* @param input Mixed[][] An array of row data arrays. 
		* @param delimiter String The column delimiter to use if the default value of delimiter is not desired. 
		* @returns String A string in which data items are separated by delimiter characters, and rows are separated by lineBreak characters. 
		*/
		encode?( input?:any[][], delimiter?:string ): string;

	}

}

declare module Ext.util {
	export interface IElementContainer extends Ext.IBase {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of childEls  
		* @returns Object/String[]/Object[] 
		*/
		getChildEls?(): any;

		/** [Method] Sets the value of childEls  
		* @param childEls Object/String[]/Object[] The new value. 
		*/
		setChildEls?( childEls?:any ): void;

	}

}

declare module Ext.util {
	export interface IEvent extends Ext.IBase {
		/** [Property] (Boolean) */
		isEvent?: boolean;

	}

}

declare module Ext.util {
	export interface IFilter extends Ext.IBase {
		/** [Config Option] (Boolean) */
		anyMatch?: boolean;
		/** [Config Option] (Boolean) */
		caseSensitive?: boolean;
		/** [Config Option] (Boolean) */
		disableOnEmpty?: boolean;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Boolean) */
		exactMatch?: boolean;
		/** [Config Option] (Function) */
		filterFn?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String) */
		operator?: string;
		/** [Config Option] (String) */
		property?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (RegExp/Mixed) */
		value?: any;
		/** [Method] Returns the value of anyMatch  
		* @returns Boolean 
		*/
		getAnyMatch?(): boolean;

		/** [Method] Returns the value of caseSensitive  
		* @returns Boolean 
		*/
		getCaseSensitive?(): boolean;

		/** [Method] Returns the value of disableOnEmpty  
		* @returns Boolean 
		*/
		getDisableOnEmpty?(): boolean;

		/** [Method] Returns the value of disabled  
		* @returns Boolean 
		*/
		getDisabled?(): boolean;

		/** [Method] Returns the value of exactMatch  
		* @returns Boolean 
		*/
		getExactMatch?(): boolean;

		/** [Method] Returns the value of operator  
		* @returns String 
		*/
		getOperator?(): string;

		/** [Method] Returns the value of property  
		* @returns String 
		*/
		getProperty?(): string;

		/** [Method] Returns the value of root  
		* @returns String 
		*/
		getRoot?(): string;

		/** [Method] Returns this filter s state  
		* @returns Object 
		*/
		getState?(): any;

		/** [Method] Returns the value of value  
		* @returns RegExp/Mixed 
		*/
		getValue?(): any;

		/** [Method] Returns this filter s serialized state  
		* @returns Object 
		*/
		serialize?(): any;

		/** [Method] Sets the value of anyMatch  
		* @param anyMatch Boolean The new value. 
		*/
		setAnyMatch?( anyMatch?:boolean ): void;

		/** [Method] Sets the value of caseSensitive  
		* @param caseSensitive Boolean The new value. 
		*/
		setCaseSensitive?( caseSensitive?:boolean ): void;

		/** [Method] Sets the value of disableOnEmpty  
		* @param disableOnEmpty Boolean The new value. 
		*/
		setDisableOnEmpty?( disableOnEmpty?:boolean ): void;

		/** [Method] Sets the value of disabled  
		* @param disabled Boolean The new value. 
		*/
		setDisabled?( disabled?:boolean ): void;

		/** [Method] Sets the value of exactMatch  
		* @param exactMatch Boolean The new value. 
		*/
		setExactMatch?( exactMatch?:boolean ): void;

		/** [Method] Sets the value of filterFn  
		* @param filterFn Function The new value. 
		*/
		setFilterFn?( filterFn?:any ): void;

		/** [Method] Sets the value of id  
		* @param id String The new value. 
		*/
		setId?( id?:string ): void;

		/** [Method] Sets the value of operator  
		* @param operator String The new value. 
		*/
		setOperator?( operator?:string ): void;

		/** [Method] Sets the value of property  
		* @param property String The new value. 
		*/
		setProperty?( property?:string ): void;

		/** [Method] Sets the value of root  
		* @param root String The new value. 
		*/
		setRoot?( root?:string ): void;

		/** [Method] Sets the value of value  
		* @param value RegExp/Mixed The new value. 
		*/
		setValue?( value?:any ): void;

	}
	export class Filter {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Creates a single filter function which encapsulates the passed Filter array or Collection  
		* @param filters Ext.util.Filter[]/Ext.util.Collection The filters from which to create a filter function. 
		* @returns Function A function, which when passed a candidate object returns true if the candidate passes all the specified Filters. 
		*/
		static createFilterFn( filters?:any ): any;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.util {
	export interface IFilterCollection extends Ext.util.ICollection {
		/** [Property] (Object) */
		filterFn?: any;

		/** [Method] This method is an alias for decodeItems but is called when items are being removed  
		* @param args Object 
		* @param index Object 
		*/
		decodeRemoveItems?( args?:any, index?:any ): void;

		/** [Method] This method will filter an array based on the currently configured filters  
		* @param data Array The array you want to have filtered. 
		* @returns Array The array you passed after it is filtered. 
		*/
		filterData?( data?:any[] ): any[];

		/** [Method] Returns the filter function  
		* @returns Function The filter function. 
		*/
		getFilterFn?(): any;

		/** [Method] This method can be used to conveniently test whether an individual item would be removed due to the current filter  
		* @param item Object 
		* @returns Boolean The value true if the item would be "removed" from the collection due to filters or false otherwise. 
		*/
		isItemFiltered?( item?:any ): boolean;

	}

}

declare module Ext.util {
	export interface IFloating extends Ext.IBase {
		/** [Config Option] (Boolean/Number) */
		alwaysOnTop?: any;
		/** [Config Option] (Boolean) */
		animateShadow?: boolean;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Boolean) */
		fixed?: boolean;
		/** [Config Option] (Boolean) */
		focusOnToFront?: boolean;
		/** [Config Option] (Boolean) */
		modal?: boolean;
		/** [Config Option] (String/Boolean) */
		shadow?: any;
		/** [Config Option] (Number) */
		shadowOffset?: number;
		/** [Config Option] (Boolean) */
		shim?: boolean;
		/** [Property] (Ext.ZIndexManager) */
		zIndexManager?: Ext.IZIndexManager;

		/** [Property] (Ext.Container) */
		zIndexParent?: Ext.IContainer;

		/** [Method] Center this Component in its container  
		* @returns Ext.Component this 
		*/
		center?(): Ext.IComponent;

		/** [Method] Moves this floating Component into a constrain region  
		* @param constrainTo String/HTMLElement/Ext.dom.Element/Ext.util.Region The Element or Region into which this Component is to be constrained. Defaults to the element into which this floating Component was rendered. 
		*/
		doConstrain?( constrainTo?:any ): void;

		/** [Method] Returns the value of alwaysOnTop  
		* @returns Boolean/Number 
		*/
		getAlwaysOnTop?(): any;

		/** [Method] Sets the value of alwaysOnTop  
		* @param alwaysOnTop Boolean/Number The new value. 
		*/
		setAlwaysOnTop?( alwaysOnTop?:any ): void;

		/** [Method] Sends this Component to the back of lower z index than any other visible windows 
		* @returns Ext.Component this 
		*/
		toBack?(): Ext.IComponent;

		/** [Method] Brings this floating Component to the front of any other visible floating Components managed by the same ZIndexManag  
		* @param preventFocus Boolean Specify true to prevent the Component from being focused. 
		* @returns Ext.Component this 
		*/
		toFront?( preventFocus?:boolean ): Ext.IComponent;

	}

}

declare module Ext.util {
	export interface IFocusable extends Ext.IBase {
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Method] Template method to do any pre blur processing  
		* @param e Ext.event.Event The event object 
		*/
		beforeBlur?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method to do any pre focus processing  
		* @param e Ext.event.Event The event object 
		*/
		beforeFocus?( e?:Ext.event.IEvent ): void;

		/** [Method] Cancel any deferred focus on this component */
		cancelFocus?(): void;

		/** [Method] Try to focus this component  
		* @param selectText Mixed If applicable, true to also select all the text in this component, or an array consisting of start and end (defaults to start) position of selection. 
		* @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds). 
		* @param callback Function Only needed if the delay parameter is used. A function to call upon focus. 
		* @param scope Function Only needed if the delay parameter is used. The scope (this reference) in which to execute the callback. 
		* @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option. If this component is disabled, a closely related component will be focused and that will be returned. 
		*/
		focus?( selectText?:any, delay?:any, callback?:any, scope?:any ): Ext.IComponent;

		/** [Method] Returns the focus styling holder element associated with this Focusable  
		* @returns Ext.Element The focus styling element. 
		*/
		getFocusClsEl?(): Ext.IElement;

		/** [Method] Returns the focus holder element associated with this Focusable  
		* @returns Ext.Element 
		*/
		getFocusEl?(): Ext.IElement;

		/** [Method] Return the actual tabIndex for this Focusable  
		* @returns Number tabIndex attribute value 
		*/
		getTabIndex?(): number;

		/** [Method] Template method to do any Focusable related initialization that does not involve event listeners creation  */
		initFocusable?(): void;

		/** [Method] Template method to do any event listener initialization for a Focusable  */
		initFocusableEvents?(): void;

		/** [Method] Determine if this Focusable can receive focus at this time  
		* @param deep Boolean Optionally determine if the container itself is focusable, or if container's focus is delegated to a child component and that child is focusable. 
		* @returns Boolean True if component is focusable, false if not. 
		*/
		isFocusable?( deep?:boolean ): boolean;

		/** [Method] Called when focus enters this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		onFocusEnter?( e?:Ext.event.IEvent ): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Ext.event.Event 
		*/
		onFocusLeave?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method to do any post blur processing  
		* @param e Ext.event.Event The event object 
		*/
		postBlur?( e?:Ext.event.IEvent ): void;

		/** [Method] Template method to do any post focus processing  
		* @param e Ext.event.Event The event object 
		*/
		postFocus?( e?:Ext.event.IEvent ): void;

		/** [Method] Set the tabIndex property for this Focusable  
		* @param newTabIndex Number new tabIndex to set 
		*/
		setTabIndex?( newTabIndex?:number ): void;

	}

}

declare module Ext.util {
	export interface IFocusableContainer extends Ext.IMixin {
		/** [Config Option] (Number) */
		activeChildTabIndex?: number;
		/** [Config Option] (Boolean) */
		enableFocusableContainer?: boolean;
		/** [Config Option] (Number) */
		inactiveChildTabIndex?: number;
	}

}

declare module Ext.util {
	export interface IFormat extends Ext.IBase {
	}
	export class Format {
		/** [Property] (Boolean) */
		static currencyAtEnd: boolean;

		/** [Property] (Number) */
		static currencyPrecision: number;

		/** [Property] (String) */
		static currencySign: string;

		/** [Property] (String) */
		static decimalSeparator: string;

		/** [Property] (String) */
		static defaultDateFormat: string;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (String) */
		static percentSign: string;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (String) */
		static thousandSeparator: string;

		/** [Method] Formats an object of name value properties as HTML element attribute values suitable for using when creating textual 
		* @param attributes Object An object containing the HTML attributes as properties eg: {height:40, vAlign:'top'} 
		*/
		static attributes( attributes?:any ): void;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Alias for Ext String capitalize  
		* @param string String 
		* @returns String 
		*/
		static capitalize( string?:string ): string;

		/** [Method] Format a number as a currency  
		* @param value Number/String The numeric value to format 
		* @param sign String The currency sign to use (defaults to currencySign) 
		* @param decimals Number The number of decimals to use for the currency (defaults to currencyPrecision) 
		* @param end Boolean True if the currency sign should be at the end of the string (defaults to currencyAtEnd) 
		* @returns String The formatted currency string 
		*/
		static currency( value?:any, sign?:string, decimals?:number, end?:boolean ): string;

		/** [Method] Formats the passed date using the specified format pattern  
		* @param value String/Date The value to format. Strings must conform to the format expected by the JavaScript Date object's parse() method. 
		* @param format String Any valid date format string. Defaults to Ext.Date.defaultFormat. 
		* @returns String The formatted date string. 
		*/
		static date( value?:any, format?:string ): string;

		/** [Method] Returns a date rendering function that can be reused to apply a date format multiple times efficiently  
		* @param format String Any valid date format string. Defaults to Ext.Date.defaultFormat. 
		* @returns Function The date formatting function 
		*/
		static dateRenderer( format?:string ): any;

		/** [Method] Checks a reference and converts it to the default value if it s empty  
		* @param value Object Reference to check 
		* @param defaultValue String The value to insert of it's undefined. 
		* @returns String 
		*/
		static defaultValue( value?:any, defaultValue?:string ): string;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Alias for Ext String ellipsis  
		* @param value String The string to truncate. 
		* @param length Number The maximum length to allow before truncating. 
		* @param word Boolean true to try to find a common word break. 
		* @returns String The converted text. 
		*/
		static ellipsis( value?:string, length?:number, word?:boolean ): string;

		/** [Method] Alias for Ext String escape  
		* @param string String The string to escape. 
		* @returns String The escaped string. 
		*/
		static escape( string?:string ): string;

		/** [Method] Alias for Ext String escapeRegex  
		* @param string String The string to escape. 
		* @returns String The escaped string. 
		*/
		static escapeRegex( string?:string ): string;

		/** [Method] Simple format for a file size xxx bytes xxx KB xxx MB 
		* @param size Number/String The numeric value to format 
		* @returns String The formatted file size 
		*/
		static fileSize( size?:any ): string;

		/** [Method] Alias for Ext String format  
		* @param string String The tokenized string to be formatted. 
		* @param values Mixed... The values to replace tokens {0}, {1}, etc in order. 
		* @returns String The formatted string. 
		*/
		static format( string:string, ...values:any[] ): string;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Returns the given number as a base 16 string at least digits in length  
		* @param value Number The number to format in hex. 
		* @param digits Number 
		* @returns string 
		*/
		static hex( value?:number, digits?:number ): string;

		/** [Method] Alias for Ext String htmlDecode  
		* @param value String The string to decode. 
		* @returns String The decoded text. 
		*/
		static htmlDecode( value?:string ): string;

		/** [Method] Alias for Ext String htmlEncode  
		* @param value String The string to encode. 
		* @returns String The encoded text. 
		*/
		static htmlEncode( value?:string ): string;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Alias for Ext String leftPad  
		* @param string String The original string. 
		* @param size Number The total length of the output string. 
		* @param character String The character with which to pad the original string. 
		* @returns String The padded string. 
		*/
		static leftPad( string?:string, size?:number, character?:string ): string;

		/** [Method] Converts a string to all lower case letters  
		* @param value String The text to convert 
		* @returns String The converted text 
		*/
		static lowercase( value?:string ): string;

		/** [Method] It does simple math for use in a template for example  var tpl  new Ext Template  value 10 value math 10  
		* @returns Function A function that operates on the passed value. 
		*/
		static math(): any;

		/** [Method] Converts newline characters to the HTML tag lt br gt  
		* @param v String The string value to format. 
		* @returns String The string with embedded &lt;br/&gt; tags in place of newlines. 
		*/
		static nl2br( v?:string ): string;

		/** [Method] Formats the passed number according to the passed format string  
		* @param v Number The number to format. 
		* @param formatString String The way you would like to format this text. 
		* @returns String The formatted number. 
		*/
		static number( v?:number, formatString?:string ): string;

		/** [Method] Returns a number rendering function that can be reused to apply a number format multiple times efficiently  
		* @param format String Any valid number format string for number 
		* @returns Function The number formatting function 
		*/
		static numberRenderer( format?:string ): any;

		/** [Method] Returns this result value orValue  The usefulness of this formatter method is in templates  
		* @param value Boolean The "if" value. 
		* @param orValue Mixed 
		*/
		static or( value?:boolean, orValue?:any ): void;

		/** [Method] Parses a number or string representing margin sizes into an object  
		* @param box Number/String The encoded margins 
		* @returns Object An object with margin sizes for top, right, bottom and left 
		*/
		static parseBox( box?:any ): any;

		/** [Method] Formats the passed number as a percentage according to the passed format string  
		* @param value Number The percentage to format. 
		* @param formatString String See number for details. 
		* @returns String The formatted percentage. 
		*/
		static percent( value?:number, formatString?:string ): string;

		/** [Method] If value is a number returns the argument from that index  
		* @param value Boolean The "if" value. 
		* @param firstValue Mixed 
		* @param secondValue Mixed 
		*/
		static pick( value?:boolean, firstValue?:any, secondValue?:any ): void;

		/** [Method] Selectively return the plural form of a word based on a numeric value  
		* @param value Number The value to compare against 
		* @param singular String The singular form of the word 
		* @param plural String The plural form of the word (defaults to the singular form with an "s" appended) 
		* @returns String output The pluralized output of the passed singular form 
		*/
		static plural( value?:number, singular?:string, plural?:string ): string;

		/** [Method] Rounds the passed number to the required decimal precision  
		* @param value Number/String The numeric value to round. 
		* @param precision Number The number of decimal places to which to round the first parameter's value. If undefined the value is passed to Math.round otherwise the value is returned unmodified. 
		* @returns Number The rounded value. 
		*/
		static round( value?:any, precision?:number ): number;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Strips all script tags  
		* @param value Object The text from which to strip script tags 
		* @returns String The stripped text 
		*/
		static stripScripts( value?:any ): string;

		/** [Method] Strips all HTML tags  
		* @param value Object The text from which to strip tags 
		* @returns String The stripped text 
		*/
		static stripTags( value?:any ): string;

		/** [Method] Returns a substring from within an original string  
		* @param value String The original text 
		* @param start Number The start index of the substring 
		* @param length Number The length of the substring 
		* @returns String The substring 
		*/
		static substr( value?:string, start?:number, length?:number ): string;

		/** [Method] Alias for Ext String toggle  
		* @param string String The current string. 
		* @param value String The value to compare to the current string. 
		* @param other String The new value to use if the string already equals the first value passed in. 
		* @returns String The new value. 
		*/
		static toggle( string?:string, value?:string, other?:string ): string;

		/** [Method] Alias for Ext String trim  
		* @param string String The string to trim. 
		* @returns String The trimmed string. 
		*/
		static trim( string?:string ): string;

		/** [Method] Alias for Ext String uncapitalize  
		* @param string String 
		* @returns String 
		*/
		static uncapitalize( string?:string ): string;

		/** [Method] Checks a reference and converts it to empty string if it is undefined  
		* @param value Object Reference to check 
		* @returns Object Empty string if converted, otherwise the original value 
		*/
		static undef( value?:any ): any;

		/** [Method] Converts a string to all upper case letters  
		* @param value String The text to convert 
		* @returns String The converted text 
		*/
		static uppercase( value?:string ): string;

		/** [Method] Format a number as US currency  
		* @param value Number/String The numeric value to format 
		* @returns String The formatted currency string 
		*/
		static usMoney( value?:any ): string;

	}

}

declare module Ext.util {
	export interface IGroup extends Ext.util.ICollection {
		/** [Method] Returns the value of groupKey  
		* @returns Object 
		*/
		getGroupKey?(): any;

		/** [Method] Sets the value of groupKey  
		* @param groupKey Object The new value. 
		*/
		setGroupKey?( groupKey?:any ): void;

	}

}

declare module Ext.util {
	export interface IGroupCollection extends Ext.util.ICollection {
		/** [Config Option] (Object) */
		grouper?: any;
		/** [Method] Destroys this collection  */
		destroy?(): void;

		/** [Method] Returns the value of grouper  
		* @returns Object 
		*/
		getGrouper?(): any;

		/** [Method] Returns the value of itemRoot  
		* @returns Object 
		*/
		getItemRoot?(): any;

		/** [Method] A function which will be called passing an object belonging to this collection  
		* @param item Object 
		* @returns Object The key for the passed item. 
		*/
		getKey?( item?:any ): any;

		/** [Method] Sets the value of grouper  
		* @param grouper Object The new value. 
		*/
		setGrouper?( grouper?:any ): void;

		/** [Method] Sets the value of itemRoot  
		* @param itemRoot Object The new value. 
		*/
		setItemRoot?( itemRoot?:any ): void;

	}

}

declare module Ext.util {
	export interface IGrouper extends Ext.util.ISorter {
		/** [Config Option] (Function) */
		groupFn?: any;
		/** [Config Option] (String) */
		property?: string;
		/** [Config Option] (String) */
		sortProperty?: string;
		/** [Method] Returns the value of groupFn  
		* @returns Function 
		*/
		getGroupFn?(): any;

		/** [Method] Returns the value for grouping to be used  
		* @param item Ext.data.Model The Model instance 
		* @returns String 
		*/
		getGroupString?( item?:Ext.data.IModel ): string;

		/** [Method] Returns the value of sortProperty  
		* @returns String 
		*/
		getSortProperty?(): string;

		/** [Method] Sets the value of groupFn  
		* @param groupFn Function The new value. 
		*/
		setGroupFn?( groupFn?:any ): void;

		/** [Method] Sets the value of sortProperty  
		* @param sortProperty String The new value. 
		*/
		setSortProperty?( sortProperty?:string ): void;

	}

}

declare module Ext.util {
	export interface IHashMap extends Ext.IBase, Ext.mixin.IObservable {
		/** [Config Option] (Function) */
		keyFn?: any;
		/** [Method] Adds an item to the collection  
		* @param key String/Object The key to associate with the item, or the new item. If a getKey implementation was specified for this HashMap, or if the key of the stored items is in a property called id, the HashMap will be able to derive the key for the new item. In this case just pass the new item in this parameter. 
		* @param o Object The item to add. 
		* @returns Object The item added. 
		*/
		add?( key?:any, o?:any ): any;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Removes all items from the hash  
		* @returns Ext.util.HashMap this 
		*/
		clear?(): Ext.util.IHashMap;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] Performs a shallow copy on this hash  
		* @returns Ext.util.HashMap The new hash object. 
		*/
		clone?(): Ext.util.IHashMap;

		/** [Method] Checks whether a value exists in the hash  
		* @param value Object The value to check for. 
		* @returns Boolean True if the value exists in the dictionary. 
		*/
		contains?( value?:any ): boolean;

		/** [Method] Checks whether a key exists in the hash  
		* @param key String The key to check for. 
		* @returns Boolean True if they key exists in the hash. 
		*/
		containsKey?( key?:string ): boolean;

		/** [Method] Executes the specified function once for each item in the hash  
		* @param fn Function The function to execute. 
		* @param scope Object The scope to execute in. Defaults to this. 
		* @returns Ext.util.HashMap this 
		*/
		each?( fn?:any, scope?:any ): Ext.util.IHashMap;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Retrieves an item with a particular key  
		* @param key String The key to lookup. 
		* @returns Object The value at that key. If it doesn't exist, undefined is returned. 
		*/
		get?( key?:string ): any;

		/** [Method] Gets the number of items in the hash  
		* @returns Number The number of items in the hash. 
		*/
		getCount?(): number;

		/** [Method] Extracts the key from an object  
		* @param o Object The object to get the key from 
		* @returns String The key to use. 
		*/
		getKey?( o?:any ): string;

		/** [Method] Returns the value of keyFn  
		* @returns Function 
		*/
		getKeyFn?(): any;

		/** [Method] Return all of the keys in the hash  
		* @returns Array An array of keys. 
		*/
		getKeys?(): any[];

		/** [Method] Return all of the values in the hash  
		* @returns Array An array of values. 
		*/
		getValues?(): any[];

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Remove an item from the hash  
		* @param o Object The value of the item to remove. 
		* @returns Boolean True if the item was successfully removed. 
		*/
		remove?( o?:any ): boolean;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Remove an item from the hash  
		* @param key String The key to remove. 
		* @returns Boolean True if the item was successfully removed. 
		*/
		removeAtKey?( key?:string ): boolean;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Replaces an item in the hash  
		* @param key String The key of the item. 
		* @param value Object The new value for the item. 
		* @returns Object The new value of the item. 
		*/
		replace?( key?:string, value?:any ): any;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] Sets the value of keyFn  
		* @param keyFn Function The new value. 
		*/
		setKeyFn?( keyFn?:any ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.util {
	export interface IHistory extends Ext.IBase, Ext.util.IObservable {
	}
	export class History {
		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (Boolean) */
		static useTopWindow: boolean;

		/** [Method] Add a new token to the history stack  
		* @param token String The value that defines a particular application-specific history state 
		* @param preventDuplicates Boolean When true, if the passed token matches the current token it will not save a new history step. Set to false if the same state can be saved more than once at the same history stack location. 
		*/
		static add( token?:string, preventDuplicates?:boolean ): void;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Programmatically steps back one step in browser history equivalent to the user pressing the Back button */
		static back(): void;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Programmatically steps forward one step in browser history equivalent to the user pressing the Forward button */
		static forward(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Retrieves the currently active history token  
		* @returns String The token 
		*/
		static getToken(): string;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Initializes the global History instance  
		* @param onReady Function A callback function that will be called once the history component is fully initialized. 
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to the browser window. 
		*/
		static init( onReady?:any, scope?:any ): void;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext {
	export interface IHistory extends Ext.IBase, Ext.util.IObservable {
	}
	export class History {
		/** [Property] (Object) */
		static hasListeners: any;

		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Boolean) */
		static isObservable: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Property] (Boolean) */
		static useTopWindow: boolean;

		/** [Method] Add a new token to the history stack  
		* @param token String The value that defines a particular application-specific history state 
		* @param preventDuplicates Boolean When true, if the passed token matches the current token it will not save a new history step. Set to false if the same state can be saved more than once at the same history stack location. 
		*/
		static add( token?:string, preventDuplicates?:boolean ): void;

		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static addBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addListener( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static addManagedListener( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Programmatically steps back one step in browser history equivalent to the user pressing the Back button */
		static back(): void;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Removes all listeners for this object including the managed listeners */
		static clearListeners(): void;

		/** [Method] Removes all managed listeners for this object  */
		static clearManagedListeners(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		static enableBubble( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		static fireAction( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEvent( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		static fireEventArgs( eventName?:string, args?:any[] ): boolean;

		/** [Method] Programmatically steps forward one step in browser history equivalent to the user pressing the Forward button */
		static forward(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Retrieves the currently active history token  
		* @returns String The token 
		*/
		static getToken(): string;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		static hasListener( eventName?:string ): boolean;

		/** [Method] Initializes the global History instance  
		* @param onReady Function A callback function that will be called once the history component is fully initialized. 
		* @param scope Object The scope (this reference) in which the callback is executed. Defaults to the browser window. 
		*/
		static init( onReady?:any, scope?:any ): void;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		static isSuspended( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static mon( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static mun( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		static on( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		static onBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		static relayEvents( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeAfterListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static removeBeforeListener( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static removeListener( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		static removeManagedListener( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		static resolveListenerScope( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		static resumeEvent( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		static resumeEvents( discardQueue?:boolean ): void;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		static setListeners( listeners?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		static suspendEvent( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		static suspendEvents( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		static un( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unAfter( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		static unBefore( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.util {
	export interface IInflector extends Ext.IBase {
	}
	export class Inflector {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Returns the correct Model name for a given string  
		* @param word String The word to classify 
		* @returns String The classified version of the word 
		*/
		static classify( word?:string ): string;

		/** [Method] Removes all registered pluralization rules */
		static clearPlurals(): void;

		/** [Method] Removes all registered singularization rules */
		static clearSingulars(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Returns true if the given word is transnumeral the word is its own singular and plural form  e g  
		* @param word String The word to test 
		* @returns Boolean True if the word is transnumeral 
		*/
		static isTransnumeral( word?:string ): boolean;

		/** [Method] Ordinalizes a given number by adding a prefix such as st nd rd or th based on the last digit of the number  
		* @param number Number The number to ordinalize 
		* @returns String The ordinalized number 
		*/
		static ordinalize( number?:number ): string;

		/** [Method] Adds a new pluralization rule to the Inflector  
		* @param matcher RegExp The matcher regex 
		* @param replacer String The replacement string, which can reference matches from the matcher argument 
		*/
		static plural( matcher?:RegExp, replacer?:string ): void;

		/** [Method] Returns the pluralized form of a word e g  
		* @param word String The word to pluralize 
		* @returns String The pluralized form of the word 
		*/
		static pluralize( word?:string ): string;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Adds a new singularization rule to the Inflector  
		* @param matcher RegExp The matcher regex 
		* @param replacer String The replacement string, which can reference matches from the matcher argument 
		*/
		static singular( matcher?:RegExp, replacer?:string ): void;

		/** [Method] Returns the singularized form of a word e g  
		* @param word String The word to singularize 
		* @returns String The singularized form of the word 
		*/
		static singularize( word?:string ): string;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.util {
	export interface IKeyMap extends Ext.IBase {
		/** [Config Option] (Object/Object[][]) */
		binding?: any;
		/** [Config Option] (String) */
		eventName?: string;
		/** [Config Option] (Boolean) */
		ignoreInputFields?: boolean;
		/** [Config Option] (Function) */
		processEvent?: any;
		/** [Config Option] (Object) */
		processEventScope?: any;
		/** [Config Option] (Ext.Component/Ext.dom.Element/HTMLElement/String) */
		target?: any;
		/** [Property] (Ext.event.Event) */
		lastKeyEvent?: Ext.event.IEvent;

		/** [Method] Add a new binding to this KeyMap  
		* @param binding Object/Object[] A single KeyMap config or an array of configs. The following config object properties are supported: 
		*/
		addBinding?( binding?:any ): void;

		/** [Method] Destroys the KeyMap instance and removes all handlers  
		* @param removeTarget Boolean True to also remove the target 
		*/
		destroy?( removeTarget?:boolean ): void;

		/** [Method] Disable this KeyMap */
		disable?(): void;

		/** [Method] Enables this KeyMap */
		enable?(): void;

		/** [Method] Returns true if this KeyMap is enabled 
		* @returns Boolean 
		*/
		isEnabled?(): boolean;

		/** [Method] Shorthand for adding a single key listener  
		* @param key Number/Number[]/Object Either the numeric key code, array of key codes or an object with the following options: {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)} 
		* @param fn Function The function to call 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		on?( key?:any, fn?:any, scope?:any ): void;

		/** [Method] Remove a binding from this KeyMap  
		* @param binding Object See for options 
		*/
		removeBinding?( binding?:any ): void;

		/** [Method] Convenience function for setting disabled enabled by boolean  
		* @param disabled Boolean 
		*/
		setDisabled?( disabled?:boolean ): void;

		/** [Method] Shorthand for removing a single key listener  
		* @param key Number/Number[]/Object Either the numeric key code, array of key codes or an object with the following options: {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)} 
		* @param fn Function The function to call 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		un?( key?:any, fn?:any, scope?:any ): void;

	}

}

declare module Ext {
	export interface IKeyMap extends Ext.IBase {
		/** [Config Option] (Object/Object[][]) */
		binding?: any;
		/** [Config Option] (String) */
		eventName?: string;
		/** [Config Option] (Boolean) */
		ignoreInputFields?: boolean;
		/** [Config Option] (Function) */
		processEvent?: any;
		/** [Config Option] (Object) */
		processEventScope?: any;
		/** [Config Option] (Ext.Component/Ext.dom.Element/HTMLElement/String) */
		target?: any;
		/** [Property] (Ext.event.Event) */
		lastKeyEvent?: Ext.event.IEvent;

		/** [Method] Add a new binding to this KeyMap  
		* @param binding Object/Object[] A single KeyMap config or an array of configs. The following config object properties are supported: 
		*/
		addBinding?( binding?:any ): void;

		/** [Method] Destroys the KeyMap instance and removes all handlers  
		* @param removeTarget Boolean True to also remove the target 
		*/
		destroy?( removeTarget?:boolean ): void;

		/** [Method] Disable this KeyMap */
		disable?(): void;

		/** [Method] Enables this KeyMap */
		enable?(): void;

		/** [Method] Returns true if this KeyMap is enabled 
		* @returns Boolean 
		*/
		isEnabled?(): boolean;

		/** [Method] Shorthand for adding a single key listener  
		* @param key Number/Number[]/Object Either the numeric key code, array of key codes or an object with the following options: {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)} 
		* @param fn Function The function to call 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		on?( key?:any, fn?:any, scope?:any ): void;

		/** [Method] Remove a binding from this KeyMap  
		* @param binding Object See for options 
		*/
		removeBinding?( binding?:any ): void;

		/** [Method] Convenience function for setting disabled enabled by boolean  
		* @param disabled Boolean 
		*/
		setDisabled?( disabled?:boolean ): void;

		/** [Method] Shorthand for removing a single key listener  
		* @param key Number/Number[]/Object Either the numeric key code, array of key codes or an object with the following options: {key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)} 
		* @param fn Function The function to call 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the browser window. 
		*/
		un?( key?:any, fn?:any, scope?:any ): void;

	}

}

declare module Ext.util {
	export interface IKeyNav extends Ext.IBase {
		/** [Config Option] (String) */
		defaultEventAction?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String) */
		eventName?: string;
		/** [Config Option] (Boolean) */
		forceKeyDown?: boolean;
		/** [Config Option] (Boolean) */
		ignoreInputFields?: boolean;
		/** [Config Option] (Ext.util.KeyMap) */
		keyMap?: Ext.util.IKeyMap;
		/** [Config Option] (Function) */
		processEvent?: any;
		/** [Config Option] (Object) */
		processEventScope?: any;
		/** [Config Option] (Ext.Component/Ext.dom.Element/HTMLElement/String) */
		target?: any;
		/** [Property] (Ext.event.Event) */
		lastKeyEvent?: Ext.event.IEvent;

		/** [Method] Destroy this KeyNav  
		* @param removeEl Boolean Pass true to remove the element associated with this KeyNav. 
		*/
		destroy?( removeEl?:boolean ): void;

		/** [Method] Disables this KeyNav  */
		disable?(): void;

		/** [Method] Enables this KeyNav  */
		enable?(): void;

		/** [Method] Convenience function for setting disabled enabled by boolean  
		* @param disabled Boolean 
		*/
		setDisabled?( disabled?:boolean ): void;

	}

}

declare module Ext {
	export interface IKeyNav extends Ext.IBase {
		/** [Config Option] (String) */
		defaultEventAction?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String) */
		eventName?: string;
		/** [Config Option] (Boolean) */
		forceKeyDown?: boolean;
		/** [Config Option] (Boolean) */
		ignoreInputFields?: boolean;
		/** [Config Option] (Ext.util.KeyMap) */
		keyMap?: Ext.util.IKeyMap;
		/** [Config Option] (Function) */
		processEvent?: any;
		/** [Config Option] (Object) */
		processEventScope?: any;
		/** [Config Option] (Ext.Component/Ext.dom.Element/HTMLElement/String) */
		target?: any;
		/** [Property] (Ext.event.Event) */
		lastKeyEvent?: Ext.event.IEvent;

		/** [Method] Destroy this KeyNav  
		* @param removeEl Boolean Pass true to remove the element associated with this KeyNav. 
		*/
		destroy?( removeEl?:boolean ): void;

		/** [Method] Disables this KeyNav  */
		disable?(): void;

		/** [Method] Enables this KeyNav  */
		enable?(): void;

		/** [Method] Convenience function for setting disabled enabled by boolean  
		* @param disabled Boolean 
		*/
		setDisabled?( disabled?:boolean ): void;

	}

}

declare module Ext.util {
	export interface ILocalStorage extends Ext.IBase {
		/** [Config Option] (Number) */
		flushDelay?: number;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (Boolean) */
		lazyKeys?: boolean;
		/** [Config Option] (String) */
		prefix?: string;
		/** [Config Option] (Boolean) */
		session?: boolean;
		/** [Property] (Boolean) */
		destroyed?: boolean;

		/** [Property] (Boolean) */
		supported?: boolean;

		/** [Method] Removes all of the keys of this storage  */
		clear?(): void;

		/** [Method] Destroys this instance and for legacy IE ensures data is flushed to persistent storage  */
		destroy?(): void;

		/** [Method] Returns the value associated with the given key  
		* @param key String The key. 
		* @returns String The value associated with the given key. 
		*/
		getItem?( key?:string ): string;

		/** [Method] Returns the keys for this storage  
		* @returns String[] The keys for this storage. This array should be considered as readonly. 
		*/
		getKeys?(): string[];

		/** [Method] Returns the specified key given its index  
		* @param index Number The index of the desired key. 
		* @returns String The key. 
		*/
		key?( index?:number ): string;

		/** [Method] Call this method when finished with an instance returned by get instead of calling destroy  */
		release?(): void;

		/** [Method] Removes the value associated with the given key  
		* @param key String The key. 
		*/
		removeItem?( key?:string ): void;

		/** [Method] This method ensures the content of the store is saved to the underlying storage  
		* @param delay Number 
		*/
		save?( delay?:number ): void;

		/** [Method] Sets the value associated with the given key  
		* @param key String The key. 
		* @param value String The new associated value for key. 
		*/
		setItem?( key?:string, value?:string ): void;

	}
	export class LocalStorage {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Returns a shared instance of the desired local store given its id  
		* @param id String/Object The id of the desired instance or a config object with an id property at a minimum. 
		* @returns Ext.util.LocalStorage The desired instance, created if needed. 
		*/
		static get( id?:any ): Ext.util.ILocalStorage;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.util {
	export interface ILruCache extends Ext.util.IHashMap {
		/** [Config Option] (Number) */
		maxSize?: number;
		/** [Method] Adds an item to the collection  
		* @param key Object 
		* @param newValue Object 
		* @returns Object The item added. 
		*/
		add?( key?:any, newValue?:any ): any;

		/** [Method] Removes all items from the hash  
		* @param initial Object 
		* @returns Ext.util.HashMap this 
		*/
		clear?( initial?:any ): Ext.util.IHashMap;

		/** [Method] Performs a shallow copy on this haLruCachesh  
		* @returns Ext.util.HashMap The new hash object. 
		*/
		clone?(): Ext.util.IHashMap;

		/** [Method] Executes the specified function once for each item in the cache  
		* @param fn Function The function to execute. 
		* @param scope Object The scope (this reference) to execute in. Defaults to this LruCache. 
		* @param reverse Boolean Pass true to iterate the list in reverse (most recent first) order. 
		* @returns Ext.util.LruCache this 
		*/
		each?( fn?:any, scope?:any, reverse?:boolean ): Ext.util.ILruCache;

		/** [Method] Retrieves an item with a particular key  
		* @param key Object 
		* @returns Object The value at that key. If it doesn't exist, undefined is returned. 
		*/
		get?( key?:any ): any;

		/** [Method] Returns the value of maxSize  
		* @returns Number 
		*/
		getMaxSize?(): number;

		/** [Method] Purge the least recently used entries if the maxSize has been exceeded  */
		prune?(): void;

		/** [Method] Sets the value of maxSize  
		* @param maxSize Number The new value. 
		*/
		setMaxSize?( maxSize?:number ): void;

	}

}

declare module Ext.util {
	export interface IMemento extends Ext.IBase {
		/** [Property] (Object) */
		target?: any;

		/** [Method] Captures the specified properties from the target object in this memento  
		* @param props String/String[] The property or array of properties to capture. 
		* @param target Object The object from which to capture properties. 
		*/
		capture?( props?:any, target?:any ): void;

		/** [Method] Removes the specified properties from this memento  
		* @param props String/String[] The property or array of properties to remove. 
		*/
		remove?( props?:any ): void;

		/** [Method] Restores the specified properties from this memento to the target object  
		* @param props String/String[] The property or array of properties to restore. 
		* @param clear Boolean True to remove the restored properties from this memento or false to keep them (default is true). 
		* @param target Object The object to which to restore properties. 
		*/
		restore?( props?:any, clear?:boolean, target?:any ): void;

		/** [Method] Restores all captured properties in this memento to the target object  
		* @param clear Boolean True to remove the restored properties from this memento or false to keep them (default is true). 
		* @param target Object The object to which to restore properties. 
		*/
		restoreAll?( clear?:boolean, target?:any ): void;

	}

}

declare module Ext.util {
	export interface IMixedCollection extends Ext.util.IAbstractMixedCollection, Ext.util.ISortable {
		/** [Config Option] (Boolean) */
		allowFunctions?: boolean;
		/** [Method] Calculates the insertion index of the new item based upon the comparison function passed or the current sort order  
		* @param newItem Object The new object to find the insertion position of. 
		* @param sorterFn Function The function to sort by. This is the same as the sorting function passed to sortBy. It accepts 2 items from this MixedCollection, and returns -1 0, or 1 depending on the relative sort positions of the 2 compared items. If omitted, a function generated from the currently defined set of sorters will be used. 
		* @returns Number The insertion point to add the new item into this MixedCollection at using insert 
		*/
		findInsertionIndex?( newItem?:any, sorterFn?:any ): number;

		/** [Method] Returns a comparator function which compares two items and returns 1 0 or 1 depending on the currently defined set  */
		generateComparator?(): void;

		/** [Method] Gets the first sorter from the sorters collection excluding any groupers that may be in place 
		* @returns Ext.util.Sorter The sorter, null if none exist 
		*/
		getFirstSorter?(): Ext.util.ISorter;

		/** [Method] Returns the number of Sorters which apply to this Sortable  */
		getSorterCount?(): void;

		/** [Method] Returns the value of sorters  
		* @returns Ext.util.Sorter[]/Object[] 
		*/
		getSorters?(): any;

		/** [Method] Reorders each of the items based on a mapping from old index to new index  
		* @param mapping Object Mapping from old item index to new item index 
		*/
		reorder?( mapping?:any ): void;

		/** [Method] Sets the value of sorters  
		* @param sorters Ext.util.Sorter[]/Object[] The new value. 
		*/
		setSorters?( sorters?:any ): void;

		/** [Method] Updates the sorters collection and triggers sorting of this Sortable  
		* @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations. 
		* @param direction String The overall direction to sort the data by. 
		* @param insertionPosition String Where to put the new sorter in the collection of sorters. This may take the following values:  replace : This means that the new sorter(s) becomes the sole sorter set for this Sortable. This is the most useful call mode  to programatically sort by multiple fields. prepend : This means that the new sorters are inserted as the primary sorters, unchanged, and the sorter list length must be controlled by the developer. multi : This is mainly useful for implementing intuitive "Sort by this" user interfaces such as the GridPanel's column sorting UI. This mode is only supported when passing a property name and a direction. This means that the new sorter is becomes the primary sorter. If the sorter was already the primary sorter, the direction  of sort is toggled if no direction parameter is specified. The number of sorters maintained is limited by the multiSortLimit configuration. append : This means that the new sorter becomes the last sorter.  
		* @returns Ext.util.Sorter[] The new sorters. 
		*/
		sort?( sorters?:any, direction?:string, insertionPosition?:string ): Ext.util.ISorter[];

		/** [Method] Sorts the collection by a single sorter function 
		* @param sorterFn Function The function to sort by 
		*/
		sortBy?( sorterFn?:any ): void;

		/** [Method] Sorts this collection by keys  
		* @param direction String 'ASC' or 'DESC'. Defaults to 'ASC'. 
		* @param fn Function Comparison function that defines the sort order. Defaults to sorting by case insensitive string. 
		*/
		sortByKey?( direction?:string, fn?:any ): void;

	}

}

declare module Ext.util {
	export interface IObjectTemplate extends Ext.IBase {
		/** [Method] Applies the given context object to this template and returns a new object with the appropriate pieces replaced  
		* @param context Object The data used to populate the template. 
		* @returns Object 
		*/
		apply?( context?:any ): any;

		/** [Method] Compiles the given template into an apply method that is ready to run  
		* @param template Mixed 
		* @returns Function 
		*/
		compile?( template?:any ): any;

	}
	export class ObjectTemplate {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Creates an ObjectTemplate given a config object or instance  
		* @param template Object/Ext.util.ObjectTemplate The template object. 
		* @param options Object 
		* @returns Ext.util.ObjectTemplate 
		*/
		static create( template?:any, options?:any ): Ext.util.IObjectTemplate;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.util {
	export interface IObservable extends Ext.mixin.IObservable {
	}
	export class Observable {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Starts capture on the specified Observable  
		* @param o Ext.util.Observable The Observable to capture events from. 
		* @param fn Function The function to call when an event is fired. 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Observable firing the event. 
		*/
		static capture( o?:Ext.util.IObservable, fn?:any, scope?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Sets observability on the passed class constructor  
		* @param c Function The class constructor to make observable. 
		* @param listeners Object An object containing a series of listeners to add. See addListener. 
		*/
		static observe( c?:any, listeners?:any ): void;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

		/** [Method] Removes all added captures from the Observable  
		* @param o Ext.util.Observable The Observable to release 
		*/
		static releaseCapture( o?:Ext.util.IObservable ): void;

	}

}

declare module Ext.util {
	export interface IOffset extends Ext.IBase {
	}

}

declare module Ext.util {
	export interface IOperators {
	}

}

declare module Ext.util.paintmonitor {
	export interface IAbstract extends Ext.IBase {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of args  
		* @returns Array 
		*/
		getArgs?(): any[];

		/** [Method] Returns the value of callback  
		* @returns Object 
		*/
		getCallback?(): any;

		/** [Method] Returns the value of element  
		* @returns Object 
		*/
		getElement?(): any;

		/** [Method] Returns the value of scope  
		* @returns Object 
		*/
		getScope?(): any;

		/** [Method] Sets the value of args  
		* @param args Array The new value. 
		*/
		setArgs?( args?:any[] ): void;

		/** [Method] Sets the value of callback  
		* @param callback Object The new value. 
		*/
		setCallback?( callback?:any ): void;

		/** [Method] Sets the value of element  
		* @param element Object The new value. 
		*/
		setElement?( element?:any ): void;

		/** [Method] Sets the value of scope  
		* @param scope Object The new value. 
		*/
		setScope?( scope?:any ): void;

	}

}

declare module Ext.util.paintmonitor {
	export interface ICssAnimation extends Ext.util.paintmonitor.IAbstract {
	}

}

declare module Ext.util {
	export interface IPaintMonitor extends Ext.IBase {
	}

}

declare module Ext.util.paintmonitor {
	export interface IOverflowChange extends Ext.util.paintmonitor.IAbstract {
	}

}

declare module Ext.util {
	export interface IPoint extends Ext.util.IRegion {
		/** [Method] Copy a new instance of this point  
		* @returns Ext.util.Point The new point. 
		*/
		clone?(): Ext.util.IPoint;

		/** [Method] Clones this Point  
		* @returns Ext.util.Point The new point. 
		*/
		copy?(): Ext.util.IPoint;

		/** [Method] Copy the x and y values of another point  object to this point itself  
		* @param point Ext.util.Point/Object . 
		* @returns Ext.util.Point This point. 
		*/
		copyFrom?( point?:any ): Ext.util.IPoint;

		/** [Method] Returns true if the passed point is within a certain distance of this point  
		* @param point Ext.util.Point/Object The point to check with, either an instance of Ext.util.Point or an object with x and y properties. 
		* @param threshold Object/Number Can be either an object with x and y properties or a number. 
		* @returns Boolean 
		*/
		isCloseTo?( point?:any, threshold?:any ): boolean;

		/** [Method] Determins whether this Point contained by the passed Region Component or element  
		* @param region Ext.util.Region/Ext.Component/Ext.dom.Element/HTMLElement The rectangle to check that this Point is within. 
		* @returns Boolean 
		*/
		isContainedBy?( region?:any ): boolean;

		/** [Method] Returns true if this point is close to another one  
		* @returns Boolean 
		*/
		isWithin?(): boolean;

		/** [Method] Compare this point with another point when the x and y values of both points are rounded  
		* @param point Ext.util.Point/Object The point to compare with, either an instance of Ext.util.Point or an object with x and y properties. 
		* @returns Boolean 
		*/
		roundedEquals?( point?:any ): boolean;

		/** [Method] Returns a human eye friendly string that represents this point useful for debugging  
		* @returns String For example Point[12,8]. 
		*/
		toString?(): string;

		/** [Method] Alias for translateBy 
		* @param x Ext.util.Offset/Object Object containing the x and y properties. Or the x value is using the two argument form. 
		* @param y Number The y value unless using an Offset object. 
		* @returns Ext.util.Region this This Region 
		*/
		translate?( x?:any, y?:number ): Ext.util.IRegion;

	}
	export class Point {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Returns a new point from an object that has x and y properties if that object is not an instance of Ext util Point  
		* @param object Object 
		* @returns Ext.util.Point 
		*/
		static from( object?:any ): Ext.util.IPoint;

		/** [Method] Returns a new instance of Ext util Point based on the pageX  pageY values of the given event  
		* @param e Event The event. 
		* @returns Ext.util.Point 
		*/
		static fromEvent( e?:Event ): Ext.util.IPoint;

		/** [Method] Returns a new instance of Ext util Point based on the pageX  pageY values of the given touch  
		* @param touch Event 
		* @returns Ext.util.Point 
		*/
		static fromTouch( touch?:Event ): Ext.util.IPoint;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.util {
	export interface IPositionable extends Ext.IBase {
		/** [Method] Aligns the element with another element relative to the specified anchor points  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] Element animation config object 
		* @returns Ext.util.Positionable this 
		*/
		alignTo?( element?:any, position?:string, offsets?:number[] ): Ext.util.IPositionable;

		/** [Method] Anchors an element to another element and realigns it when the window is resized  
		* @param anchorToEl Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param alignment String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @param animate Boolean/Object true for the default animation or a standard Element animation config object 
		* @param monitorScroll Boolean/Number True to monitor body scroll and reposition. If this parameter is a number, it is used as the buffer delay in milliseconds. 
		* @param callback Function The function to call after the animation finishes 
		* @returns Ext.util.Positionable this 
		*/
		anchorTo?( anchorToEl?:any, alignment?:string, offsets?:number[], animate?:any, monitorScroll?:any, callback?:any ): Ext.util.IPositionable;

		/** [Method] Gets the x y coordinates to align this element with another element  
		* @param element Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or id of the element to align to. 
		* @param position String The position to align to 
		* @param offsets Number[] Offset the positioning by [x, y] 
		* @returns Number[] [x, y] 
		*/
		getAlignToXY?( element?:any, position?:string, offsets?:number[] ): number[];

		/** [Method] Gets the x y coordinates specified by the anchor position on the element  
		* @param anchor String The specified anchor position. See alignTo for details on supported anchor positions. 
		* @param local Boolean True to get the local (element top/left-relative) anchor position instead of page coordinates 
		* @param size Object An object containing the size to use for calculating anchor position {width: (target width), height: (target height)} (defaults to the element's current size) 
		* @returns Number[] [x, y] An array containing the element's x and y coordinates 
		*/
		getAnchorXY?( anchor?:string, local?:boolean, size?:any ): number[];

		/** [Method] Return an object defining the area of this Element which can be passed to setBox to set another Element s size locati  
		* @param contentBox Boolean If true a box for the content of the element is returned. 
		* @param local Boolean If true the element's left and top relative to its offsetParent are returned instead of page x/y. 
		* @returns Object An object in the format 
		*/
		getBox?( contentBox?:boolean, local?:boolean ): any;

		/** [Method] Returns the content region of this element for purposes of constraining floating children  */
		getConstrainRegion?(): void;

		/** [Method] Returns the X Y vector by which this Positionable s element must be translated to make a best attempt to constrain  
		* @param constrainTo Ext.util.Positionable/HTMLElement/String/Ext.util.Region The Positionable, HTMLElement, element id, or Region into which the element is to be constrained. 
		* @param proposedPosition Number[] A proposed [X, Y] position to test for validity and to produce a vector for instead of using the element's current position 
		* @param proposedSize Number[] A proposed [width, height] size to constrain instead of using the element's current size 
		* @returns Number[]/Boolean If the element needs to be translated, an [X, Y] vector by which this element must be translated. Otherwise, false. 
		*/
		getConstrainVector?( constrainTo?:any, proposedPosition?:number[], proposedSize?:number[] ): any;

		/** [Method] Returns the x coordinate of this element reletive to its offsetParent  
		* @returns Number The local x coordinate 
		*/
		getLocalX?(): number;

		/** [Method] Returns the x and y coordinates of this element relative to its offsetParent  
		* @returns Number[] The local XY position of the element 
		*/
		getLocalXY?(): number[];

		/** [Method] Returns the y coordinate of this element reletive to its offsetParent  
		* @returns Number The local y coordinate 
		*/
		getLocalY?(): number;

		/** [Method] Returns the offsets of this element from the passed element  
		* @param offsetsTo Ext.util.Positionable/HTMLElement/String The Positionable, HTMLElement, or element id to get get the offsets from. 
		* @returns Number[] The XY page offsets (e.g. [100, -200]) 
		*/
		getOffsetsTo?( offsetsTo?:any ): number[];

		/** [Method] Returns a region object that defines the area of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" properties. 
		*/
		getRegion?(): Ext.util.IRegion;

		/** [Method] Returns the content region of this element  
		* @returns Ext.util.Region A Region containing "top, left, bottom, right" member data. 
		*/
		getViewRegion?(): Ext.util.IRegion;

		/** [Method] Gets the current X position of the DOM element based on page coordinates  
		* @returns Number The X position of the element 
		*/
		getX?(): number;

		/** [Method] Gets the current position of the DOM element based on page coordinates  
		* @returns Number[] The XY position of the element 
		*/
		getXY?(): number[];

		/** [Method] Gets the current Y position of the DOM element based on page coordinates  
		* @returns Number The Y position of the element 
		*/
		getY?(): number;

		/** [Method] Move the element relative to its current position  
		* @param direction String Possible values are:  "l" (or "left") "r" (or "right") "t" (or "top", or "up") "b" (or "bottom", or "down")  
		* @param distance Number How far to move the element in pixels 
		*/
		move?( direction?:string, distance?:number ): void;

		/** [Method] Remove any anchor to this element  
		* @returns Ext.util.Positionable this 
		*/
		removeAnchor?(): Ext.util.IPositionable;

		/** [Method] Sets the element s box  
		* @param box Object The box to fill {x, y, width, height} 
		* @returns Ext.util.Positionable this 
		*/
		setBox?( box?:any ): Ext.util.IPositionable;

		/** [Method] Sets the local x coordinate of this element using CSS style  
		* @param x Number The x coordinate. A value of null sets the left style to 'auto'. 
		* @returns Ext.util.Positionable this 
		*/
		setLocalX?( x?:number ): Ext.util.IPositionable;

		/** [Method] Sets the local x and y coordinates of this element using CSS style  
		* @param x Number/Array The x coordinate or an array containing [x, y]. A value of null sets the left style to 'auto' 
		* @param y Number The y coordinate, required if x is not an array. A value of null sets the top style to 'auto' 
		* @returns Ext.util.Positionable this 
		*/
		setLocalXY?( x?:any, y?:number ): Ext.util.IPositionable;

		/** [Method] Sets the local y coordinate of this element using CSS style  
		* @param y Number The y coordinate. A value of null sets the top style to 'auto'. 
		* @returns Ext.util.Positionable this 
		*/
		setLocalY?( y?:number ): Ext.util.IPositionable;

		/** [Method] Sets the X position of the DOM element based on page coordinates  
		* @param The Number X position 
		* @returns Ext.util.Positionable this 
		*/
		setX?( The?:number ): Ext.util.IPositionable;

		/** [Method] Sets the position of the DOM element in page coordinates  
		* @param pos Number[] Contains X &amp; Y [x, y] values for new position (coordinates are page-based) 
		* @returns Ext.util.Positionable this 
		*/
		setXY?( pos?:number[] ): Ext.util.IPositionable;

		/** [Method] Sets the Y position of the DOM element based on page coordinates  
		* @param The Number Y position 
		* @returns Ext.util.Positionable this 
		*/
		setY?( The?:number ): Ext.util.IPositionable;

		/** [Method] Translates the passed page coordinates into left top css values for the element 
		* @param x Number/Array The page x or an array containing [x, y] 
		* @param y Number The page y, required if x is not an array 
		* @returns Object An object with left and top properties. e.g. {left: (value), top: (value)} 
		*/
		translatePoints?( x?:any, y?:number ): any;

	}

}

declare module Ext.util {
	export interface IProtoElement extends Ext.IBase {
		/** [Property] (String) */
		clsProp?: string;

		/** [Property] (String) */
		removedProp?: string;

		/** [Property] (Boolean) */
		styleIsText?: boolean;

		/** [Property] (String) */
		styleProp?: string;

		/** [Method] Adds class to the element  
		* @param cls String One or more classnames separated with spaces. 
		* @returns Ext.util.ProtoElement this 
		*/
		addCls?( cls?:string ): Ext.util.IProtoElement;

		/** [Method] Indicates that the current state of the object has been flushed to the DOM so we need to track any subsequent changes */
		flush?(): void;

		/** [Method] True if the element has given class  
		* @param cls String 
		* @returns Boolean 
		*/
		hasCls?( cls?:string ): boolean;

		/** [Method] Removes class from the element  
		* @param cls String One or more classnames separated with spaces. 
		* @returns Ext.util.ProtoElement this 
		*/
		removeCls?( cls?:string ): Ext.util.IProtoElement;

		/** [Method] Adds styles to the element  
		* @param prop String/Object The style property to be set, or an object of multiple styles. 
		* @param value String The value to apply to the given property. 
		* @returns Ext.util.ProtoElement this 
		*/
		setStyle?( prop?:any, value?:string ): Ext.util.IProtoElement;

		/** [Method] Writes style and class properties to given object  
		* @param to Object 
		* @returns Object to 
		*/
		writeTo?( to?:any ): any;

	}

}

declare module Ext.util {
	export interface IQueue extends Ext.IBase {
		/** [Method] Removes all items from the collection  */
		clear?(): void;

		/** [Method] Returns the number of items in the collection  
		* @returns Number the number of items in the collection. 
		*/
		getCount?(): number;

		/** [Method] Remove an item from the collection  
		* @param obj Object The item to remove. 
		* @returns Object The item removed or false if no item was removed. 
		*/
		remove?( obj?:any ): any;

	}

}

declare module Ext.util {
	export interface IRegion extends Ext.IBase {
		/** [Method] Modifies the current region to be adjusted by offsets  
		* @param top Number top offset 
		* @param right Number right offset 
		* @param bottom Number bottom offset 
		* @param left Number left offset 
		* @returns Ext.util.Region this 
		*/
		adjust?( top?:number, right?:number, bottom?:number, left?:number ): Ext.util.IRegion;

		/** [Method] Modifies the current region to be constrained to the targetRegion  
		* @param targetRegion Ext.util.Region 
		* @returns Ext.util.Region this 
		*/
		constrainTo?( targetRegion?:Ext.util.IRegion ): Ext.util.IRegion;

		/** [Method] Checks if this region completely contains the region that is passed in  
		* @param region Ext.util.Region 
		* @returns Boolean 
		*/
		contains?( region?:Ext.util.IRegion ): boolean;

		/** [Method] Create a copy of this Region  
		* @returns Ext.util.Region 
		*/
		copy?(): Ext.util.IRegion;

		/** [Method] Copy the values of another Region to this Region 
		* @param p Ext.util.Region The region to copy from. 
		* @returns Ext.util.Region This Region 
		*/
		copyFrom?( p?:Ext.util.IRegion ): Ext.util.IRegion;

		/** [Method] Check whether this region is equivalent to the given region 
		* @param region Ext.util.Region The region to compare with 
		* @returns Boolean 
		*/
		equals?( region?:Ext.util.IRegion ): boolean;

		/** [Method] Get the offset amount of a point outside the region 
		* @param axis String 
		* @param p Ext.util.Point the point 
		* @returns Ext.util.Offset 
		*/
		getOutOfBoundOffset?( axis?:string, p?:Ext.util.IPoint ): Ext.util.IOffset;

		/** [Method] Get the offset amount on the x axis 
		* @param p Number the offset 
		* @returns Number 
		*/
		getOutOfBoundOffsetX?( p?:number ): number;

		/** [Method] Get the offset amount on the y axis 
		* @param p Number the offset 
		* @returns Number 
		*/
		getOutOfBoundOffsetY?( p?:number ): number;

		/** [Method] Checks if this region intersects the region passed in  
		* @param region Ext.util.Region 
		* @returns Ext.util.Region/Boolean Returns the intersected region or false if there is no intersection. 
		*/
		intersect?( region?:Ext.util.IRegion ): any;

		/** [Method] Check whether the point  offset is out of bound 
		* @param axis String 
		* @param p Ext.util.Point/Number the point / offset 
		* @returns Boolean 
		*/
		isOutOfBound?( axis?:string, p?:any ): boolean;

		/** [Method] Check whether the offset is out of bound in the x axis 
		* @param p Number the offset 
		* @returns Boolean 
		*/
		isOutOfBoundX?( p?:number ): boolean;

		/** [Method] Check whether the offset is out of bound in the y axis 
		* @param p Number the offset 
		* @returns Boolean 
		*/
		isOutOfBoundY?( p?:number ): boolean;

		/** [Method] Round all the properties of this region 
		* @returns Ext.util.Region this This Region 
		*/
		round?(): Ext.util.IRegion;

		/** [Method] Translate this Region by the given offset amount 
		* @param x Ext.util.Offset/Object Object containing the x and y properties. Or the x value is using the two argument form. 
		* @param y Number The y value unless using an Offset object. 
		* @returns Ext.util.Region this This Region 
		*/
		translateBy?( x?:any, y?:number ): Ext.util.IRegion;

		/** [Method] Returns the smallest region that contains the current AND targetRegion  
		* @param region Ext.util.Region 
		* @returns Ext.util.Region a new region 
		*/
		union?( region?:Ext.util.IRegion ): Ext.util.IRegion;

	}
	export class Region {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Creates a Region from a box Object which contains four numeric properties top right bottom and left  
		* @param o Object An object with top, right, bottom and left properties. 
		* @returns Ext.util.Region region The Region constructed based on the passed object 
		*/
		static from( o?:any ): Ext.util.IRegion;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Retrieves an Ext util Region for a particular element  
		* @param el String/HTMLElement/Ext.dom.Element An element ID, htmlElement or Ext.Element representing an element in the document. 
		* @returns Ext.util.Region region 
		*/
		static getRegion( el?:any ): Ext.util.IRegion;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.util {
	export interface IRenderable extends Ext.IBase {
		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Ensures that this component is attached to document body  
		* @param runLayout Boolean True to run the component's layout. 
		*/
		ensureAttachedToBody?( runLayout?:boolean ): void;

		/** [Method] This function takes the position argument passed to onRender and returns a DOM element that you can use in the insert  
		* @param position String/Number/Ext.dom.Element/HTMLElement Index, element id or element you want to put this component before. 
		* @returns HTMLElement DOM element that you can use in the insertBefore 
		*/
		getInsertPosition?( position?:any ): HTMLElement;

		/** [Method] Initialized the renderData to be used when rendering the renderTpl  
		* @returns Object Object with keys and values that are going to be applied to the renderTpl 
		*/
		initRenderData?(): any;

		/** [Method] Template method called when this Component s DOM structure is created  
		* @param parentNode Ext.dom.Element The parent Element in which this Component's encapsulating element is contained. 
		* @param containerIdx Number The index within the parent Container's child collection of this Component. 
		*/
		onRender?( parentNode?:Ext.dom.IElement, containerIdx?:number ): void;

		/** [Method] Renders the Component into the passed HTML element  
		* @param container Ext.dom.Element/HTMLElement/String The element this Component should be rendered into. If it is being created from existing markup, this should be omitted. 
		* @param position String/Number The element ID or DOM node index within the container before which this component will be inserted (defaults to appending to the end of the container) 
		*/
		render?( container?:any, position?:any ): void;

	}

}

declare module Ext.util {
	export interface ISchedulable extends Ext.IBase {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] This method returns the Scheduler for this item  
		* @returns Ext.util.Scheduler 
		*/
		getScheduler?(): Ext.util.IScheduler;

		/** [Method] Schedules this item with the associated Ext util Scheduler  */
		schedule?(): void;

		/** [Method] This method should be overridden by items that have dependencies to insert  */
		sort?(): void;

		/** [Method] Unschedules this item with the associated Ext util Scheduler  */
		unschedule?(): void;

	}

}

declare module Ext.util {
	export interface IScheduler extends Ext.IBase, Ext.mixin.IObservable {
		/** [Config Option] (String/Function) */
		preSort?: any;
		/** [Config Option] (Number) */
		tickDelay?: number;
		/** [Method] Appends an after event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Appends a before event handler  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		addBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addListener?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] The addManagedListener method is used when some object call it A  is listening to an event on another observable o  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		addManagedListener?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] This method should be called when items become busy or idle  
		* @param adjustment Number Should be 1 or -1 only to indicate transition to busy state or from busy state, respectively. 
		*/
		adjustBusy?( adjustment?:number ): void;

		/** [Method] Removes all listeners for this object including the managed listeners */
		clearListeners?(): void;

		/** [Method] Removes all managed listeners for this object  */
		clearManagedListeners?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Enables events fired by this Observable to bubble up an owner hierarchy by calling this getBubbleTarget  if present  
		* @param eventNames String/String[] The event name to bubble, or an Array of event names. 
		*/
		enableBubble?( eventNames?:any ): void;

		/** [Method] Fires the specified event with the passed parameters and executes a function action 
		* @param eventName String The name of the event to fire. 
		* @param args Array Arguments to pass to handlers and to the action function. 
		* @param fn Function The action function. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object Event options for the action function. Accepts any of the options of addListener 
		* @param order String The order to call the action function relative too the event handlers ('before' or 'after'). Note that this option is simply used to sort the action function relative to the event handlers by "priority". An order of 'before' is equivalent to a priority of 99.5, while an order of 'after' is equivalent to a priority of -99.5. See the priority option of addListener for more details. 
		*/
		fireAction?( eventName?:string, args?:any[], fn?:any, scope?:any, options?:any, order?:string ): void;

		/** [Method] Fires the specified event with the passed parameters minus the event name plus the options object passed to addList  
		* @param eventName String The name of the event to fire. 
		* @param args Object... Variable number of parameters are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEvent?( eventName:string, ...args:any[] ): boolean;

		/** [Method] Fires the specified event with the passed parameter list  
		* @param eventName String The name of the event to fire. 
		* @param args Object[] An array of parameters which are passed to handlers. 
		* @returns Boolean returns false if any of the handlers return false otherwise it returns true. 
		*/
		fireEventArgs?( eventName?:string, args?:any[] ): boolean;

		/** [Method] Returns the value of preSort  
		* @returns String/Function 
		*/
		getPreSort?(): any;

		/** [Method] Returns the value of tickDelay  
		* @returns Number 
		*/
		getTickDelay?(): number;

		/** [Method] Checks to see if this object has any listeners for a specified event or whether the event bubbles  
		* @param eventName String The name of the event to check for 
		* @returns Boolean true if the event is being listened for or bubbles, else false 
		*/
		hasListener?( eventName?:string ): boolean;

		/** [Method] Returns true if this object contains one or more busy items  
		* @returns Boolean 
		*/
		isBusy?(): boolean;

		/** [Method] Returns true if this object contains no busy items  
		* @returns Boolean 
		*/
		isIdle?(): boolean;

		/** [Method] Checks if all events or a specific event is suspended  
		* @param event String The name of the specific event to check 
		* @returns Boolean true if events are suspended 
		*/
		isSuspended?( event?:string ): boolean;

		/** [Method] Shorthand for addManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item to which to add a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function/String If the ename parameter was an event name, this is the handler function or the name of a method on the specified scope. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		* @param options Object If the ename parameter was an event name, this is the addListener options. 
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = myButton.mon({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		mon?( item?:any, ename?:any, fn?:any, scope?:any, options?:any ): any;

		/** [Method] Shorthand for removeManagedListener  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		mun?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] This method can be called to force the delivery of any scheduled items  */
		notify?(): void;

		/** [Method] The on method is shorthand for addListener  
		* @param eventName String/Object The name of the event to listen for. May also be an object who's property names are event names. 
		* @param fn Function/String The method the event invokes or the name of the method within the specified scope. Will be called with arguments given to Ext.util.Observable.fireEvent plus the options parameter described below. 
		* @param scope Object The scope (this reference) in which the handler function is executed. If omitted, defaults to the object which fired the event. 
		* @param options Object An object containing handler configuration.  Note: The options object will also be passed as the last argument to every event handler.  This object may contain any of the following properties: 
		* @param order String A shortcut for the order event option. Provided for backward compatibility.  Please use the priority event option instead.  Combining Options  Using the options argument, it is possible to combine different types of listeners:  A delayed, one-time listener.  myPanel.on('hide', this.handleClick, this, {  single: true,  delay: 100 }); Attaching multiple handlers in 1 call  The method also allows for a single argument to be passed which is a config object containing properties which specify multiple handlers and handler configs.  grid.on({  itemclick: 'onItemClick',  itemcontextmenu: grid.onItemContextmenu,  destroy: {  fn: function () {  // function called within the 'altCmp' scope instead of grid  },  scope: altCmp // unique scope for the destroy handler  },  scope: grid  // default scope - provided for example clarity }); Delegate  This is a configuration option that you can pass along when registering a handler for an event to assist with event delegation. By setting this configuration option to a simple selector, the target element will be filtered to look for a descendant of the target. For example:  var panel = Ext.create({  xtype: 'panel',  renderTo: document.body,  title: 'Delegate Handler Example',  frame: true,  height: 220,  width: 220,  html: '&lt;h1 class="myTitle"&gt;BODY TITLE&lt;/h1&gt;Body content' }); // The click handler will only be called when the click occurs on the // delegate: h1.myTitle ("h1" tag with class "myTitle") panel.on({  click: function (e) {  console.log(e.getTarget().innerHTML);  },  element: 'body',  delegate: 'h1.myTitle' });  
		* @returns Object Only when the destroyable option is specified.  A Destroyable object. An object which implements the destroy method which removes all listeners added in this call. For example:  this.btnListeners = = myButton.on({  destroyable: true  mouseover:  function() { console.log('mouseover'); },  mouseout: function() { console.log('mouseout'); },  click:  function() { console.log('click'); } }); And when those listeners need to be removed:  Ext.destroy(this.btnListeners); or  this.btnListeners.destroy();  
		*/
		on?( eventName?:any, fn?:any, scope?:any, options?:any, order?:string ): any;

		/** [Method] Alias for addAfterListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for addBeforeListener  
		* @param eventName String/String[]/Object The name of the event to listen for. 
		* @param fn Function/String The method the event invokes. 
		* @param scope Object The scope for fn. 
		* @param options Object An object containing handler configuration. 
		*/
		onBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Relays selected events from the specified Observable as if the events were fired by this  
		* @param origin Object The Observable whose events this object is to relay. 
		* @param events String[] Array of event names to relay. 
		* @param prefix String A common prefix to prepend to the event names. For example: this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Now the grid will forward 'load' and 'clear' events of store as 'storeload' and 'storeclear'. 
		* @returns Object A Destroyable object. An object which implements the destroy method which, when destroyed, removes all relayers. For example: this.storeRelayers = this.relayEvents(this.getStore(), ['load', 'clear'], 'store');  Can be undone by calling Ext.destroy(this.storeRelayers);  or  this.store.relayers.destroy(); 
		*/
		relayEvents?( origin?:any, events?:string[], prefix?:string ): any;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeAfterListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes a before event handler  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		removeBeforeListener?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Removes an event handler  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		removeListener?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Removes listeners that were added by the mon method  
		* @param item Ext.util.Observable/Ext.dom.Element The item from which to remove a listener/listeners. 
		* @param ename Object/String The event name, or an object containing event name properties. 
		* @param fn Function If the ename parameter was an event name, this is the handler function. 
		* @param scope Object If the ename parameter was an event name, this is the scope (this reference) in which the handler function is executed. 
		*/
		removeManagedListener?( item?:any, ename?:any, fn?:any, scope?:any ): void;

		/** [Method] Gets the default scope for firing late bound events string names with no scope attached at runtime  
		* @param defaultScope Object The default scope to return if none is found. 
		* @returns Object The default event scope 
		*/
		resolveListenerScope?( defaultScope?:any ): any;

		/** [Method] Resumes firing of the named event s 
		* @param eventName String... Multiple event names to resume. 
		*/
		resumeEvent?( ...eventName:any[] ): void;

		/** [Method] Resumes firing events see suspendEvents 
		* @param discardQueue Boolean true to prevent any previously queued events from firing while we were suspended. See suspendEvents. 
		*/
		resumeEvents?( discardQueue?:boolean ): void;

		/** [Method] An alias for addListener  
		* @param listeners Object The listeners 
		*/
		setListeners?( listeners?:any ): void;

		/** [Method] Sets the value of preSort  
		* @param preSort String/Function The new value. 
		*/
		setPreSort?( preSort?:any ): void;

		/** [Method] Sets the value of tickDelay  
		* @param tickDelay Number The new value. 
		*/
		setTickDelay?( tickDelay?:number ): void;

		/** [Method] Adds one item to the sorted items array  
		* @param item Object The item to add. 
		* @returns Ext.util.Scheduler This instance. 
		*/
		sortItem?( item?:any ): Ext.util.IScheduler;

		/** [Method] Adds multiple items to the sorted items array  
		* @param items Object/Object[] The items to add. If this is an object, the values are considered the items and the keys are ignored. 
		* @returns Ext.util.Scheduler This instance. 
		*/
		sortItems?( items?:any ): Ext.util.IScheduler;

		/** [Method] Suspends firing of the named event s 
		* @param eventName String... Multiple event names to suspend. 
		*/
		suspendEvent?( ...eventName:any[] ): void;

		/** [Method] Suspends the firing of all events  
		* @param queueSuspended Boolean true to queue up suspended events to be fired after the resumeEvents call instead of discarding all suspended events. 
		*/
		suspendEvents?( queueSuspended?:boolean ): void;

		/** [Method] Shorthand for removeListener  
		* @param eventName String The type of event the handler was associated with. 
		* @param fn Function The handler to remove. This must be a reference to the function passed into the addListener call. 
		* @param scope Object The scope originally specified for the handler. It must be the same as the scope argument specified in the original call to Ext.util.Observable.addListener or the listener will not be removed.  Convenience Syntax  You can use the {link addListener addListener destroyable: true} config option in place of calling un(). For example:  var listeners = cmp.on({  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide,  destroyable: true }); // Remove listeners listeners.destroy(); // or cmp.un(  scope: cmp,  afterrender: cmp.onAfterrender,  beforehide: cmp.onBeforeHide ); Exception - DOM event handlers using the element config option  You must go directly through the element to detach an event handler attached using the addListener element option.  panel.on({  element: 'body',  click: 'onBodyCLick' }); panel.body.un({  click: 'onBodyCLick' });  
		*/
		un?( eventName?:string, fn?:any, scope?:any ): void;

		/** [Method] Alias for removeAfterListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unAfter?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

		/** [Method] Alias for removeBeforeListener  
		* @param eventName String/String[]/Object The name of the event the handler was associated with. 
		* @param fn Function/String The handler to remove. 
		* @param scope Object The scope originally specified for fn. 
		* @param options Object Extra options object. 
		*/
		unBefore?( eventName?:any, fn?:any, scope?:any, options?:any ): void;

	}

}

declare module Ext.util.sizemonitor {
	export interface IAbstract extends Ext.IBase, Ext.mixin.ITemplatable {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of args  
		* @returns Array 
		*/
		getArgs?(): any[];

		/** [Method] Returns the value of callback  
		* @returns Object 
		*/
		getCallback?(): any;

		/** [Method] Returns the value of element  
		* @returns Object 
		*/
		getElement?(): any;

		/** [Method] Returns the value of scope  
		* @returns Object 
		*/
		getScope?(): any;

		/** [Method] Sets the value of args  
		* @param args Array The new value. 
		*/
		setArgs?( args?:any[] ): void;

		/** [Method] Sets the value of callback  
		* @param callback Object The new value. 
		*/
		setCallback?( callback?:any ): void;

		/** [Method] Sets the value of element  
		* @param element Object The new value. 
		*/
		setElement?( element?:any ): void;

		/** [Method] Sets the value of scope  
		* @param scope Object The new value. 
		*/
		setScope?( scope?:any ): void;

	}

}

declare module Ext.util.sizemonitor {
	export interface IDefault extends Ext.util.sizemonitor.IAbstract {
	}

}

declare module Ext.util {
	export interface ISizeMonitor extends Ext.IBase {
	}

}

declare module Ext.util.sizemonitor {
	export interface IOverflowChange extends Ext.util.sizemonitor.IAbstract {
	}

}

declare module Ext.util.sizemonitor {
	export interface IScroll extends Ext.util.sizemonitor.IAbstract {
	}

}

declare module Ext.util {
	export interface ISortable extends Ext.IBase {
		/** [Config Option] (String) */
		defaultSortDirection?: string;
		/** [Config Option] (Number) */
		multiSortLimit?: number;
		/** [Config Option] (String) */
		sortRoot?: string;
		/** [Config Option] (Ext.util.Sorter[]/Object[]) */
		sorters?: any;
		/** [Property] (Boolean) */
		isSortable?: boolean;

		/** [Method] Returns a comparator function which compares two items and returns 1 0 or 1 depending on the currently defined set  */
		generateComparator?(): void;

		/** [Method] Gets the first sorter from the sorters collection excluding any groupers that may be in place 
		* @returns Ext.util.Sorter The sorter, null if none exist 
		*/
		getFirstSorter?(): Ext.util.ISorter;

		/** [Method] Returns the number of Sorters which apply to this Sortable  */
		getSorterCount?(): void;

		/** [Method] Returns the value of sorters  
		* @returns Ext.util.Sorter[]/Object[] 
		*/
		getSorters?(): any;

		/** [Method] Sets the value of sorters  
		* @param sorters Ext.util.Sorter[]/Object[] The new value. 
		*/
		setSorters?( sorters?:any ): void;

		/** [Method] Updates the sorters collection and triggers sorting of this Sortable  
		* @param sorters String/Ext.util.Sorter[] Either a string name of one of the fields in this Store's configured Model, or an array of sorter configurations. 
		* @param direction String The overall direction to sort the data by. 
		* @param insertionPosition String Where to put the new sorter in the collection of sorters. This may take the following values:  replace : This means that the new sorter(s) becomes the sole sorter set for this Sortable. This is the most useful call mode  to programatically sort by multiple fields. prepend : This means that the new sorters are inserted as the primary sorters, unchanged, and the sorter list length must be controlled by the developer. multi : This is mainly useful for implementing intuitive "Sort by this" user interfaces such as the GridPanel's column sorting UI. This mode is only supported when passing a property name and a direction. This means that the new sorter is becomes the primary sorter. If the sorter was already the primary sorter, the direction  of sort is toggled if no direction parameter is specified. The number of sorters maintained is limited by the multiSortLimit configuration. append : This means that the new sorter becomes the last sorter.  
		* @returns Ext.util.Sorter[] The new sorters. 
		*/
		sort?( sorters?:any, direction?:string, insertionPosition?:string ): Ext.util.ISorter[];

	}
	export class Sortable {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Creates a single comparator function which encapsulates the passed Sorter array  
		* @param sorters Ext.util.Sorter[] The sorter set for which to create a comparator function 
		* @returns Function a function, which when passed two comparable objects returns the result of the whole sorter comparator functions. 
		*/
		static createComparator( sorters?:Ext.util.ISorter[] ): any;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.util {
	export interface ISorter extends Ext.IBase {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Mixed) */
		id?: any;
		/** [Config Option] (String) */
		property?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (Function) */
		sorterFn?: any;
		/** [Config Option] (Function) */
		transform?: any;
		/** [Method] Returns the value of direction  
		* @returns String 
		*/
		getDirection?(): string;

		/** [Method] Returns the value of property  
		* @returns String 
		*/
		getProperty?(): string;

		/** [Method] Returns the value of root  
		* @returns String 
		*/
		getRoot?(): string;

		/** [Method] Returns the value of sorterFn  
		* @returns Function 
		*/
		getSorterFn?(): any;

		/** [Method] Returns this filter s state  
		* @returns Object 
		*/
		getState?(): any;

		/** [Method] Returns the value of transform  
		* @returns Function 
		*/
		getTransform?(): any;

		/** [Method] Returns this sorter s serialized state  
		* @returns Object 
		*/
		serialize?(): any;

		/** [Method] Sets the value of direction  
		* @param direction String The new value. 
		*/
		setDirection?( direction?:string ): void;

		/** [Method] Sets the value of id  
		* @param id Mixed The new value. 
		*/
		setId?( id?:any ): void;

		/** [Method] Sets the value of property  
		* @param property String The new value. 
		*/
		setProperty?( property?:string ): void;

		/** [Method] Sets the value of root  
		* @param root String The new value. 
		*/
		setRoot?( root?:string ): void;

		/** [Method] Sets the value of sorterFn  
		* @param sorterFn Function The new value. 
		*/
		setSorterFn?( sorterFn?:any ): void;

		/** [Method] Sets the value of transform  
		* @param transform Function The new value. 
		*/
		setTransform?( transform?:any ): void;

		/** [Method] Toggles the direction of this Sorter  */
		toggle?(): void;

	}
	export class Sorter {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Creates a comparator function a function that can be passed to Array sort given one or more Sorter instances  
		* @param sorters Ext.util.Sorter[]/Ext.util.Collection The Sorter instances. 
		* @param nextFn Object The next comparator function to call if all the sorters end with equality. 
		* @returns Function The comparator function. 
		*/
		static createComparator( sorters?:any, nextFn?:any ): any;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.util {
	export interface ISorterCollection extends Ext.util.ICollection {
		/** [Property] (Object) */
		sortFn?: any;

		/** [Method] This method is an alias for decodeItems but is called when items are being removed  
		* @param args Object 
		* @param index Object 
		*/
		decodeRemoveItems?( args?:any, index?:any ): void;

		/** [Method] Returns an up to date sort function  
		* @returns Function The sort function. 
		*/
		getSortFn?(): any;

	}

}

declare module Ext.util {
	export interface IStoreHolder extends Ext.IBase {
		/** [Method] Binds a store to this instance  
		* @param store Ext.data.AbstractStore/String The store to bind or ID of the store. When no store given (or when null or undefined passed), unbinds the existing store. 
		*/
		bindStore?( store?:any ): void;

		/** [Method] Binds listeners for this component to the store  
		* @param store Ext.data.AbstractStore The store to bind to 
		*/
		bindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

		/** [Method] Gets the current store instance  
		* @returns Ext.data.AbstractStore The store, null if one does not exist. 
		*/
		getStore?(): Ext.data.IAbstractStore;

		/** [Method] Gets the listeners to bind to a new store  
		* @param store Ext.data.Store The Store which is being bound to for which a listeners object should be returned. 
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?( store?:Ext.data.IStore ): any;

		/** [Method] Template method it is called when a new store is bound to the current instance  
		* @param store Ext.data.AbstractStore The store being bound 
		* @param initial Boolean True if this store is being bound as initialization of the instance. 
		*/
		onBindStore?( store?:Ext.data.IAbstractStore, initial?:boolean ): void;

		/** [Method] Template method it is called when an existing store is unbound from the current instance  
		* @param store Ext.data.AbstractStore The store being unbound 
		* @param initial Boolean True if this store is being bound as initialization of the instance. 
		*/
		onUnbindStore?( store?:Ext.data.IAbstractStore, initial?:boolean ): void;

		/** [Method] Sets the store to the specified store  
		* @param store Object 
		*/
		setStore?( store?:any ): void;

		/** [Method] Unbinds listeners from this component to the store  
		* @param store Ext.data.AbstractStore The store to unbind from 
		*/
		unbindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

	}

}

declare module Ext.util {
	export interface ITaskManager extends Ext.util.ITaskRunner {
	}
	export class TaskManager {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Destroys this instance stopping all tasks that are currently running  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Creates a new Task instance  
		* @param config Object The config object. For details on the supported properties, see start. 
		* @returns Ext.util.TaskRunner.Task Ext.util.TaskRunner.Task instance, which can be useful for method chaining. 
		*/
		static newTask( config?:any ): Ext.util.taskrunner.ITask;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Starts a new task  
		* @param task Object A config object that supports the following properties: 
		*/
		static start( task?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Stops an existing running task  
		* @param task Object The task to stop 
		* @returns Object The task 
		*/
		static stop( task?:any ): any;

		/** [Method] Stops all tasks that are currently running  */
		static stopAll(): void;

	}

}

declare module Ext {
	export interface ITaskManager extends Ext.util.ITaskRunner {
	}
	export class TaskManager {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Destroys this instance stopping all tasks that are currently running  */
		static destroy(): void;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Creates a new Task instance  
		* @param config Object The config object. For details on the supported properties, see start. 
		* @returns Ext.util.TaskRunner.Task Ext.util.TaskRunner.Task instance, which can be useful for method chaining. 
		*/
		static newTask( config?:any ): Ext.util.taskrunner.ITask;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Starts a new task  
		* @param task Object A config object that supports the following properties: 
		*/
		static start( task?:any ): void;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Stops an existing running task  
		* @param task Object The task to stop 
		* @returns Object The task 
		*/
		static stop( task?:any ): any;

		/** [Method] Stops all tasks that are currently running  */
		static stopAll(): void;

	}

}

declare module Ext.util {
	export interface ITaskRunner extends Ext.IBase {
		/** [Config Option] (Boolean) */
		fireIdleEvent?: boolean;
		/** [Config Option] (Number) */
		interval?: number;
		/** [Method] Destroys this instance stopping all tasks that are currently running  */
		destroy?(): void;

		/** [Method] Creates a new Task instance  
		* @param config Object The config object. For details on the supported properties, see start. 
		* @returns Ext.util.TaskRunner.Task Ext.util.TaskRunner.Task instance, which can be useful for method chaining. 
		*/
		newTask?( config?:any ): Ext.util.taskrunner.ITask;

		/** [Method] Starts a new task  
		* @param task Object A config object that supports the following properties: 
		*/
		start?( task?:any ): void;

		/** [Method] Stops an existing running task  
		* @param task Object The task to stop 
		* @returns Object The task 
		*/
		stop?( task?:any ): any;

		/** [Method] Stops all tasks that are currently running  */
		stopAll?(): void;

	}

}

declare module Ext.util.taskrunner {
	export interface ITask {
		/** [Method] Destroys this instance stopping this task s execution  */
		destroy?(): void;

		/** [Method] Restarts this task clearing it duration expiration and run count  
		* @param interval Number Optionally reset this task's interval. 
		*/
		restart?( interval?:number ): void;

		/** [Method] Starts this task if it is not already started  
		* @param interval Number Optionally reset this task's interval. 
		*/
		start?( interval?:number ): void;

		/** [Method] Stops this task  */
		stop?(): void;

	}

}

declare module Ext.util {
	export interface ITextMetrics extends Ext.IBase {
		/** [Method] Binds this TextMetrics instance to a new element 
		* @param el String/HTMLElement/Ext.dom.Element The element or its ID. 
		*/
		bind?( el?:any ): void;

		/** [Method] Destroy this instance */
		destroy?(): void;

		/** [Method] Returns the measured height of the specified text 
		* @param text String The text to measure 
		* @returns Number height The height in pixels 
		*/
		getHeight?( text?:string ): number;

		/** [Method] Returns the size of the specified text based on the internal element s style and width properties 
		* @param text String The text to measure 
		* @returns Object An object containing the text's size {width: (width), height: (height)} 
		*/
		getSize?( text?:string ): any;

		/** [Method] Returns the measured width of the specified text 
		* @param text String The text to measure 
		* @returns Number width The width in pixels 
		*/
		getWidth?( text?:string ): number;

		/** [Method] Sets a fixed width on the internal measurement element  
		* @param width Number The width to set on the element 
		*/
		setFixedWidth?( width?:number ): void;

	}
	export class TextMetrics {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Destroy the TextMetrics instance created by measure  */
		static destroy(): void;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Measures the size of the specified text 
		* @param el String/HTMLElement The element, dom node or id from which to copy existing CSS styles that can affect the size of the rendered text 
		* @param text String The text to measure 
		* @param fixedWidth Number If the text will be multiline, you have to set a fixed width in order to accurately measure the text height 
		* @returns Object An object containing the text's size {width: (width), height: (height)} 
		*/
		static measure( el?:any, text?:string, fixedWidth?:number ): any;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext.util.translatable {
	export interface IAbstract extends Ext.IEvented {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of easing  
		* @returns Object 
		*/
		getEasing?(): any;

		/** [Method] Returns the value of easingX  
		* @returns Object 
		*/
		getEasingX?(): any;

		/** [Method] Returns the value of easingY  
		* @returns Object 
		*/
		getEasingY?(): any;

		/** [Method] Returns the translatable object s current position  
		* @returns Object position An object with x and y properties 
		*/
		getPosition?(): any;

		/** [Method] Returns the value of useWrapper  
		* @returns Object 
		*/
		getUseWrapper?(): any;

		/** [Method] Sets the value of easing  
		* @param easing Object The new value. 
		*/
		setEasing?( easing?:any ): void;

		/** [Method] Sets the value of easingX  
		* @param easingX Object The new value. 
		*/
		setEasingX?( easingX?:any ): void;

		/** [Method] Sets the value of easingY  
		* @param easingY Object The new value. 
		*/
		setEasingY?( easingY?:any ): void;

		/** [Method] Sets the value of useWrapper  
		* @param useWrapper Object The new value. 
		*/
		setUseWrapper?( useWrapper?:any ): void;

	}

}

declare module Ext.util.translatable {
	export interface ICssPosition extends Ext.util.translatable.IDom {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.util.translatable {
	export interface ICssTransform extends Ext.util.translatable.IDom {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

	}

}

declare module Ext.util.translatable {
	export interface IDom extends Ext.util.translatable.IAbstract {
		/** [Method] Returns the value of element  
		* @returns Object 
		*/
		getElement?(): any;

		/** [Method] Sets the value of element  
		* @param element Object The new value. 
		*/
		setElement?( element?:any ): void;

	}

}

declare module Ext.util {
	export interface ITranslatable extends Ext.IBase {
	}

}

declare module Ext.util.translatable {
	export interface IScrollParent extends Ext.util.translatable.IDom {
		/** [Method] Returns the translatable object s current position  
		* @returns Object position An object with x and y properties 
		*/
		getPosition?(): any;

	}

}

declare module Ext.util.translatable {
	export interface IScrollPosition extends Ext.util.translatable.IDom {
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Returns the value of useWrapper  
		* @returns Boolean 
		*/
		getUseWrapper?(): boolean;

		/** [Method] Sets the value of useWrapper  
		* @param useWrapper Boolean The new value. 
		*/
		setUseWrapper?( useWrapper?:boolean ): void;

	}

}

declare module Ext.util {
	export interface ITSV extends Ext.util.IDelimitedValue {
	}
	export class TSV {
		/** [Config Option] (String) */
		static delimiter: string;
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] Decodes a string of encoded values into an array of rows  
		* @param input String The string to parse. 
		* @param delimiter String The column delimiter to use if the default value of delimiter is not desired. 
		* @returns String[][] An array of rows where each row is an array of Strings. 
		*/
		static decode( input?:string, delimiter?:string ): String[][];

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Converts a two dimensional array into an encoded string  
		* @param input Mixed[][] An array of row data arrays. 
		* @param delimiter String The column delimiter to use if the default value of delimiter is not desired. 
		* @returns String A string in which data items are separated by delimiter characters, and rows are separated by lineBreak characters. 
		*/
		static encode( input?:any[][], delimiter?:string ): string;

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

	}

}

declare module Ext.util {
	export interface IXTemplateCompiler extends Ext.util.IXTemplateParser {
		/** [Method] This method is called to process lt tpl case action gt 
		* @param action Object 
		*/
		doCase?( action?:any ): void;

		/** [Method] This method is called to process lt tpl default gt */
		doDefault?(): void;

		/** [Method] This method is called to process lt tpl else gt */
		doElse?(): void;

		/** [Method] This method is called to process lt tpl elseif action gt 
		* @param action Object 
		* @param actions Object 
		*/
		doElseIf?( action?:any, actions?:any ): void;

		/** [Method] This method is called to process lt tpl gt 
		* @param type Object 
		* @param actions Object 
		*/
		doEnd?( type?:any, actions?:any ): void;

		/** [Method] This method is called to process text 
		* @param text Object 
		*/
		doEval?( text?:any ): void;

		/** [Method] This method is called to process lt tpl exec action gt 
		* @param action Object 
		* @param actions Object 
		*/
		doExec?( action?:any, actions?:any ): void;

		/** [Method] This method is called to process expressions like  expr 
		* @param expr Object 
		*/
		doExpr?( expr?:any ): void;

		/** [Method] This method is called to process lt tpl for action gt 
		* @param action Object 
		* @param actions Object 
		*/
		doFor?( action?:any, actions?:any ): void;

		/** [Method] This method is called to process lt tpl foreach action gt 
		* @param action Object 
		* @param actions Object 
		*/
		doForEach?( action?:any, actions?:any ): void;

		/** [Method] This method is called to process lt tpl if action gt 
		* @param action Object 
		* @param actions Object 
		*/
		doIf?( action?:any, actions?:any ): void;

		/** [Method] This method is called to process lt tpl switch action gt 
		* @param action Object 
		*/
		doSwitch?( action?:any ): void;

		/** [Method] This method is called to process simple tags like tag  
		* @param tag Object 
		*/
		doTag?( tag?:any ): void;

		/** [Method] XTemplateParser callouts 
		* @param text Object 
		*/
		doText?( text?:any ): void;

	}

}

declare module Ext.util {
	export interface IXTemplateParser extends Ext.IBase {
		/** [Property] (Number) */
		level?: number;

		/** [Method] This method is called to process lt tpl case action gt 
		* @param action String 
		* @param actions Object Other actions keyed by the attribute name (such as 'exec'). 
		*/
		doCase?( action?:string, actions?:any ): void;

		/** [Method] This method is called to process lt tpl default gt */
		doDefault?(): void;

		/** [Method] This method is called to process lt tpl else gt */
		doElse?(): void;

		/** [Method] This method is called to process lt tpl elseif action gt 
		* @param action String 
		* @param actions Object Other actions keyed by the attribute name (such as 'exec'). 
		*/
		doElseIf?( action?:string, actions?:any ): void;

		/** [Method] This method is called to process lt tpl gt 
		* @param type String The type of action that is being ended. 
		* @param actions Object The other actions keyed by the attribute name (such as 'exec'). 
		*/
		doEnd?( type?:string, actions?:any ): void;

		/** [Method] This method is called to process text 
		* @param text String 
		*/
		doEval?( text?:string ): void;

		/** [Method] This method is called to process lt tpl exec action gt 
		* @param action String 
		* @param actions Object Other actions keyed by the attribute name. 
		*/
		doExec?( action?:string, actions?:any ): void;

		/** [Method] This method is called to process expressions like  expr 
		* @param expr String The body of the expression (inside "{[" and "]}"). 
		*/
		doExpr?( expr?:string ): void;

		/** [Method] This method is called to process lt tpl for action gt 
		* @param action String 
		* @param actions Object Other actions keyed by the attribute name (such as 'exec'). 
		*/
		doFor?( action?:string, actions?:any ): void;

		/** [Method] This method is called to process lt tpl foreach action gt 
		* @param action String 
		* @param actions Object Other actions keyed by the attribute name (such as 'exec'). 
		*/
		doForEach?( action?:string, actions?:any ): void;

		/** [Method] This method is called to process lt tpl if action gt 
		* @param action String 
		* @param actions Object Other actions keyed by the attribute name (such as 'exec'). 
		*/
		doIf?( action?:string, actions?:any ): void;

		/** [Method] This method is called to process lt tpl switch action gt 
		* @param action String 
		* @param actions Object Other actions keyed by the attribute name (such as 'exec'). 
		*/
		doSwitch?( action?:string, actions?:any ): void;

		/** [Method] This method is called to process simple tags like tag  */
		doTag?(): void;

		/** [Method] This method is called to process a piece of raw text from the tpl  
		* @param text String 
		*/
		doText?( text?:string ): void;

		/** [Method] This method is called to process an empty lt tpl gt */
		doTpl?(): void;

	}

}

declare module Ext.ux.colorpick {
	export interface IButton extends Ext.IComponent, Ext.ux.colorpick.ISelection {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/Object/Ext.app.ViewController) */
		controller?: any;
		/** [Config Option] (Number|String) */
		height?: any;
		/** [Config Option] (Object) */
		listeners?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Number|String) */
		width?: any;
		/** [Property] (String) */
		defaultBindProperty?: string;

	}

}

declare module Ext.ux.colorpick {
	export interface IColorMap extends Ext.container.IContainer {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String/Object/Ext.app.ViewController) */
		controller?: any;
		/** [Config Option] (Object) */
		listeners?: any;
		/** [Property] (Ext.util.AbstractMixedCollection) */
		items?: Ext.util.IAbstractMixedCollection;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Called via data binding whenever selectedColor changes fires colorbindingchanged  
		* @param data Object 
		* @returns Ext.Component this 
		*/
		setPosition?( data?:any ): Ext.IComponent;

	}

}

declare module Ext.ux.colorpick {
	export interface IColorPreview extends Ext.IComponent {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number|String) */
		height?: any;
		/** [Config Option] (String/Object) */
		html?: any;
		/** [Config Option] (String/Object) */
		style?: any;
		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

	}

}

declare module Ext.ux.colorpick {
	export interface IField extends Ext.form.field.IPicker, Ext.ux.colorpick.ISelection {
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeBodyEl?: any;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		matchFieldWidth?: boolean;
		/** [Method] NOTE Since much of the logic of a picker class is overriding methods from the base class we don t bother to split o  */
		afterRender?(): void;

		/** [Method] override as required by parent pickerfield */
		createPicker?(): void;

		/** [Method] Expects value formatted as per format config 
		* @param color Object 
		* @returns Ext.form.field.Text this 
		*/
		setValue?( color?:any ): Ext.form.field.IText;

	}

}

declare module Ext.ux.colorpick {
	export interface ISelector extends Ext.container.IContainer, Ext.ux.colorpick.ISelection {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String/Object/Ext.app.ViewController) */
		controller?: any;
		/** [Config Option] (Number) */
		fieldPad?: number;
		/** [Config Option] (Number) */
		fieldWidth?: number;
		/** [Config Option] (Number|String) */
		height?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Boolean) */
		showOkCancelButtons?: boolean;
		/** [Config Option] (Boolean) */
		showPreviousColor?: boolean;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Number|String) */
		width?: any;
		/** [Property] (String) */
		defaultBindProperty?: string;

	}

}

declare module Ext.ux.colorpick {
	export interface ISelectorModel extends Ext.app.IViewModel {
		/** [Config Option] (Object) */
		formulas?: any;
	}

}

declare module Ext.ux.colorpick {
	export interface ISlider extends Ext.container.IContainer {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String/Object/Ext.app.ViewController) */
		controller?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Object) */
		listeners?: any;
		/** [Config Option] (Boolean) */
		referenceHolder?: boolean;
		/** [Property] (Ext.util.AbstractMixedCollection) */
		items?: Ext.util.IAbstractMixedCollection;

	}

}

declare module Ext.ux.colorpick {
	export interface ISliderAlpha extends Ext.ux.colorpick.ISlider {
		/** [Config Option] (String/String[]) */
		cls?: any;
	}

}

declare module Ext.ux.colorpick {
	export interface ISliderHue extends Ext.ux.colorpick.ISlider {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

	}

}

declare module Ext.ux.colorpick {
	export interface ISliderSaturation extends Ext.ux.colorpick.ISlider {
		/** [Config Option] (String/String[]) */
		cls?: any;
	}

}

declare module Ext.ux.colorpick {
	export interface ISliderValue extends Ext.ux.colorpick.ISlider {
		/** [Config Option] (String/String[]) */
		cls?: any;
	}

}

declare module Ext.ux.rating {
	export interface IPicker extends Ext.IWidget {
		/** [Config Option] (Boolean/Object) */
		animate?: any;
		/** [Config Option] (String) */
		family?: string;
		/** [Config Option] (String/String[]/Number[]) */
		glyphs?: any;
		/** [Config Option] (Number) */
		limit?: number;
		/** [Config Option] (Number) */
		minimum?: number;
		/** [Config Option] (String/Object) */
		overStyle?: any;
		/** [Config Option] (Number) */
		rounding?: number;
		/** [Config Option] (String) */
		scale?: string;
		/** [Config Option] (String/Object) */
		selectedStyle?: any;
		/** [Config Option] (String/Object) */
		style?: any;
		/** [Config Option] (Object/String/String[]/Ext.XTemplate/Function) */
		tooltip?: any;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Number) */
		value?: number;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Object) */
		element?: any;

		/** [Method]  */
		destroy?(): void;

		/** [Method] Returns the value of animate  
		* @returns Boolean/Object 
		*/
		getAnimate?(): any;

		/** [Method] Returns the value of family  
		* @returns String 
		*/
		getFamily?(): string;

		/** [Method] Returns the value of glyphs  
		* @returns String/String[]/Number[] 
		*/
		getGlyphs?(): any;

		/** [Method] Returns the value of limit  
		* @returns Number 
		*/
		getLimit?(): number;

		/** [Method] Returns the value of minimum  
		* @returns Number 
		*/
		getMinimum?(): number;

		/** [Method] Returns the value of overStyle  
		* @returns String/Object 
		*/
		getOverStyle?(): any;

		/** [Method] Returns the value of rounding  
		* @returns Number 
		*/
		getRounding?(): number;

		/** [Method] Returns the value of scale  
		* @returns String 
		*/
		getScale?(): string;

		/** [Method] Returns the value of selectedStyle  
		* @returns String/Object 
		*/
		getSelectedStyle?(): any;

		/** [Method] Returns the value of style  
		* @returns String/Object 
		*/
		getStyle?(): any;

		/** [Method] Returns the value of tooltip  
		* @returns Object/String/String[]/Ext.XTemplate/Function 
		*/
		getTooltip?(): any;

		/** [Method] Returns the value of trackOver  
		* @returns Boolean 
		*/
		getTrackOver?(): boolean;

		/** [Method] Returns the value of value  
		* @returns Number 
		*/
		getValue?(): number;

		/** [Method] Initialize configuration for this class  
		* @param instanceConfig Object 
		* @returns Ext.Base this 
		*/
		initConfig?( instanceConfig?:any ): Ext.IBase;

		/** [Method] Sets the value of animate  
		* @param animate Boolean/Object The new value. 
		*/
		setAnimate?( animate?:any ): void;

		/** [Method] Sets a single multiple configuration options  
		* @returns Ext.Base this 
		*/
		setConfig?(): Ext.IBase;

		/** [Method] Sets the value of family  
		* @param family String The new value. 
		*/
		setFamily?( family?:string ): void;

		/** [Method] Sets the value of glyphs  
		* @param glyphs String/String[]/Number[] The new value. 
		*/
		setGlyphs?( glyphs?:any ): void;

		/** [Method] Sets the value of limit  
		* @param limit Number The new value. 
		*/
		setLimit?( limit?:number ): void;

		/** [Method] Sets the value of minimum  
		* @param minimum Number The new value. 
		*/
		setMinimum?( minimum?:number ): void;

		/** [Method] Sets the value of overStyle  
		* @param overStyle String/Object The new value. 
		*/
		setOverStyle?( overStyle?:any ): void;

		/** [Method] Sets the value of rounding  
		* @param rounding Number The new value. 
		*/
		setRounding?( rounding?:number ): void;

		/** [Method] Sets the value of scale  
		* @param scale String The new value. 
		*/
		setScale?( scale?:string ): void;

		/** [Method] Sets the value of selectedStyle  
		* @param selectedStyle String/Object The new value. 
		*/
		setSelectedStyle?( selectedStyle?:any ): void;

		/** [Method] Sets the value of style  
		* @param style String/Object The new value. 
		*/
		setStyle?( style?:any ): void;

		/** [Method] Sets the value of tooltip  
		* @param tooltip Object/String/String[]/Ext.XTemplate/Function The new value. 
		*/
		setTooltip?( tooltip?:any ): void;

		/** [Method] Sets the value of trackOver  
		* @param trackOver Boolean The new value. 
		*/
		setTrackOver?( trackOver?:boolean ): void;

		/** [Method] Sets the value of value  
		* @param value Number The new value. 
		*/
		setValue?( value?:number ): void;

	}

}

declare module Ext {
	export interface IVersion {
		/** [Property] (Number) */
		build?: number;

		/** [Property] (Number) */
		major?: number;

		/** [Property] (Number) */
		minor?: number;

		/** [Property] (Number) */
		patch?: number;

		/** [Property] (String) */
		release?: string;

		/** [Method] Compares this version instance to the specified other version  
		* @param other String/Number/Ext.Version The other version to which to compare. 
		* @returns Number -1 if this version is less than the target version, 1 if this version is greater, and 0 if they are equal. 
		*/
		compareTo?( other?:any ): number;

		/** [Method] Returns whether this version equals to the supplied argument 
		* @param target String/Number The version to compare with 
		* @returns Boolean true if this version equals to the target, false otherwise 
		*/
		equals?( target?:any ): boolean;

		/** [Method] Returns the build component value  
		* @returns Number 
		*/
		getBuild?(): number;

		/** [Method] Returns the major component value  
		* @returns Number 
		*/
		getMajor?(): number;

		/** [Method] Returns the minor component value  
		* @returns Number 
		*/
		getMinor?(): number;

		/** [Method] Returns the patch component value  
		* @returns Number 
		*/
		getPatch?(): number;

		/** [Method] Returns the release component text e g beta  
		* @returns String 
		*/
		getRelease?(): string;

		/** [Method] Returns the release component value for comparison purposes  
		* @returns Number/String 
		*/
		getReleaseValue?(): any;

		/** [Method] Returns shortVersion version without dots and release 
		* @returns String 
		*/
		getShortVersion?(): string;

		/** [Method] Convenient alias to isGreaterThan 
		* @param target String/Number/Ext.Version 
		* @returns Boolean 
		*/
		gt?( target?:any ): boolean;

		/** [Method] Convenient alias to isGreaterThanOrEqual 
		* @param target String/Number/Ext.Version 
		* @returns Boolean 
		*/
		gtEq?( target?:any ): boolean;

		/** [Method] Returns whether this version if greater than the supplied argument 
		* @param target String/Number The version to compare with 
		* @returns Boolean true if this version if greater than the target, false otherwise 
		*/
		isGreaterThan?( target?:any ): boolean;

		/** [Method] Returns whether this version if greater than or equal to the supplied argument 
		* @param target String/Number The version to compare with 
		* @returns Boolean true if this version if greater than or equal to the target, false otherwise 
		*/
		isGreaterThanOrEqual?( target?:any ): boolean;

		/** [Method] Returns whether this version if smaller than the supplied argument 
		* @param target String/Number The version to compare with 
		* @returns Boolean true if this version if smaller than the target, false otherwise 
		*/
		isLessThan?( target?:any ): boolean;

		/** [Method] Returns whether this version if less than or equal to the supplied argument 
		* @param target String/Number The version to compare with 
		* @returns Boolean true if this version if less than or equal to the target, false otherwise 
		*/
		isLessThanOrEqual?( target?:any ): boolean;

		/** [Method] Convenient alias to isLessThan 
		* @param target String/Number/Ext.Version 
		* @returns Boolean 
		*/
		lt?( target?:any ): boolean;

		/** [Method] Convenient alias to isLessThanOrEqual 
		* @param target String/Number/Ext.Version 
		* @returns Boolean 
		*/
		ltEq?( target?:any ): boolean;

		/** [Method] Returns whether this version matches the supplied argument  
		* @param target String/Number The version to compare with 
		* @returns Boolean true if this version matches the target, false otherwise 
		*/
		match?( target?:any ): boolean;

		/** [Method] Returns this format  major minor patch build release 
		* @returns Number[] 
		*/
		toArray?(): number[];

	}
	export class Version {
		/** [Method] Compare 2 specified versions by ensuring the first parameter is a Version instance and then calling the compareTo met  
		* @param current String The current version to compare to 
		* @param target String The target version to compare to 
		* @returns Number Returns -1 if the current version is smaller than the target version, 1 if greater, and 0 if they're equivalent 
		*/
		static compare( current?:string, target?:string ): number;

		/** [Method] Converts a version component to a comparable value 
		* @param value Object The value to convert 
		* @returns Object 
		*/
		static getComponentValue( value?:any ): any;

	}

}

declare module Ext.view {
	export interface IAbstractView extends Ext.IComponent, Ext.util.IStoreHolder {
		/** [Config Option] (Boolean) */
		blockRefresh?: boolean;
		/** [Config Option] (Boolean) */
		deferEmptyText?: boolean;
		/** [Config Option] (Boolean) */
		deferInitialRefresh?: boolean;
		/** [Config Option] (Boolean) */
		disableSelection?: boolean;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (String) */
		itemSelector?: string;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		itemTpl?: any;
		/** [Config Option] (Boolean/Object) */
		loadMask?: any;
		/** [Config Option] (String) */
		loadingCls?: string;
		/** [Config Option] (Number) */
		loadingHeight?: number;
		/** [Config Option] (String) */
		loadingText?: string;
		/** [Config Option] (Boolean) */
		multiSelect?: boolean;
		/** [Config Option] (String) */
		overItemCls?: string;
		/** [Config Option] (Boolean) */
		preserveScrollOnRefresh?: boolean;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (String) */
		selectedItemCls?: string;
		/** [Config Option] (Ext.data.Model) */
		selection?: Ext.data.IModel;
		/** [Config Option] (Object/Ext.selection.DataViewModel) */
		selectionModel?: any;
		/** [Config Option] (Boolean) */
		simpleSelect?: boolean;
		/** [Config Option] (Boolean) */
		singleSelect?: boolean;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Boolean) */
		throttledUpdate?: boolean;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		tpl?: any;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Number) */
		updateDelay?: number;
		/** [Property] (String) */
		defaultBindProperty?: string;

		/** [Property] (Boolean) */
		focusable?: boolean;

		/** [Method] Adds a CSS Class to a specific item  
		* @param itemInfo HTMLElement/String/Number/Ext.data.Model An HTMLElement, index or instance of a model representing this item 
		* @param cls String 
		*/
		addItemCls?( itemInfo?:any, cls?:string ): void;

		/** [Method] Allows addition of behavior after rendering is complete  */
		afterRender?(): void;

		/** [Method] Occurs before componentLayout is run  */
		beforeLayout?(): void;

		/** [Method] Changes the data store bound to this view and refreshes it  
		* @param store Ext.data.Store The store to bind to this view 
		*/
		bindStore?( store?:Ext.data.IStore ): void;

		/** [Method] Binds listeners for this component to the store  
		* @param store Ext.data.AbstractStore The store to bind to 
		*/
		bindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

		/** [Method] Deselects all selected records  */
		clearSelections?(): void;

		/** [Method] Function which can be overridden which returns the data object passed to this DataView s template to render the whole  
		* @param records Ext.data.Model[] An Array of Ext.data.Models to be rendered into the DataView. 
		* @param startIndex Number the index number of the Record being prepared for rendering. 
		* @returns Object[] An Array of data objects to be processed by a repeating XTemplate. May also contain named properties. 
		*/
		collectData?( records?:Ext.data.IModel[], startIndex?:number ): any[];

		/** [Method] Deselects a record instance by record instance or index  
		* @param records Ext.data.Model[]/Number An array of records or an index 
		* @param suppressEvent Boolean Set to false to not fire a deselect event 
		*/
		deselect?( records?:any, suppressEvent?:boolean ): void;

		/** [Method] Returns the template node the passed child belongs to or null if it doesn t belong to one  
		* @param node HTMLElement 
		* @returns HTMLElement The template node 
		*/
		findItemByChild?( node?:HTMLElement ): HTMLElement;

		/** [Method] Returns the template node by the Ext event Event or null if it is not found  
		* @param e Ext.event.Event 
		*/
		findTargetByEvent?( e?:Ext.event.IEvent ): void;

		/** [Method] Gets a template node  
		* @param nodeInfo HTMLElement/String/Number/Ext.data.Model An HTMLElement template node, index of a template node, the id of a template node or the record associated with the node. 
		* @returns HTMLElement The node or null if it wasn't found 
		*/
		getNode?( nodeInfo?:any ): HTMLElement;

		/** [Method] Returns a CSS selector which selects the element which contains record nodes  */
		getNodeContainerSelector?(): void;

		/** [Method] Gets a range nodes  
		* @param start Number The index of the first node in the range 
		* @param end Number The index of the last node in the range 
		* @returns HTMLElement[] An array of nodes 
		*/
		getNodes?( start?:number, end?:number ): HTMLElement[];

		/** [Method] Gets a record from a node 
		* @param node Ext.dom.Element/HTMLElement The node to evaluate 
		* @returns Ext.data.Model record The Ext.data.Model object 
		*/
		getRecord?( node?:any ): Ext.data.IModel;

		/** [Method] Gets an array of the records from an array of nodes 
		* @param nodes HTMLElement[] The nodes to evaluate 
		* @returns Ext.data.Model[] records The Ext.data.Model objects 
		*/
		getRecords?( nodes?:HTMLElement[] ): Ext.data.IModel[];

		/** [Method] Gets the currently selected nodes  
		* @returns HTMLElement[] An array of HTMLElements 
		*/
		getSelectedNodes?(): HTMLElement[];

		/** [Method] Gets an array of the selected records 
		* @returns Ext.data.Model[] An array of Ext.data.Model objects 
		*/
		getSelectedRecords?(): Ext.data.IModel[];

		/** [Method] Gets the number of selected nodes  
		* @returns Number The node count 
		*/
		getSelectionCount?(): number;

		/** [Method] Returns the value of selectionModel  
		* @returns Object/Ext.selection.DataViewModel 
		*/
		getSelectionModel?(): any;

		/** [Method] Returns the value of store  
		* @returns Ext.data.Store 
		*/
		getStore?(): Ext.data.IStore;

		/** [Method] Gets the listeners to bind to a new store  
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?(): any;

		/** [Method] Finds the index of the passed node  
		* @param nodeInfo HTMLElement/String/Number/Ext.data.Model An HTMLElement template node, index of a template node, the id of a template node or a record associated with a node. 
		* @returns Number The index of the node or -1 
		*/
		indexOf?( nodeInfo?:any ): number;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] Returns true if the passed node is selected else false  
		* @param node HTMLElement/Number/Ext.data.Model The node, node index or record to check 
		* @returns Boolean True if selected, else false 
		*/
		isSelected?( node?:any ): boolean;

		/** [Method] Template method it is called when a new store is bound to the current instance  
		* @param store Object 
		* @param initial Object 
		* @param propName Object 
		*/
		onBindStore?( store?:any, initial?:any, propName?:any ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Called when focus enters this Component s hierarchy 
		* @param e Object 
		*/
		onFocusEnter?( e?:any ): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] Method to manage awareness of when components are removed from their respective Container firing a removed event  
		* @param isDestroying Object 
		*/
		onRemoved?( isDestroying?:any ): void;

		/** [Method] Template method called when this Component s DOM structure is created  */
		onRender?(): void;

		/** [Method] Called when the component is resized  */
		onResize?(): void;

		/** [Method] Template method it is called when an existing store is unbound from the current instance  
		* @param store Object 
		* @param initial Object 
		* @param propertyName Object 
		*/
		onUnbindStore?( store?:any, initial?:any, propertyName?:any ): void;

		/** [Method] Function which can be overridden to provide custom formatting for each Record that is used by this DataView s templat  
		* @param data Object/Object[] The raw data object that was used to create the Record. 
		* @param recordIndex Number the index number of the Record being prepared for rendering. 
		* @param record Ext.data.Model The Record being prepared for rendering. 
		* @returns Array/Object The formatted data in a format expected by the internal template's overwrite() method. (either an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})) 
		*/
		prepareData?( data?:any, recordIndex?:number, record?:Ext.data.IModel ): any;

		/** [Method] Refreshes the view by reloading the data from the store and re rendering the template  */
		refresh?(): void;

		/** [Method] Refreshes an individual node s data from the store  
		* @param record Ext.data.Model/Number The record or index of the record to update. 
		*/
		refreshNode?( record?:any ): void;

		/** [Method] Removes a CSS Class from a specific item  
		* @param itemInfo HTMLElement/String/Number/Ext.data.Model An HTMLElement, index or instance of a model representing this item 
		* @param cls String 
		*/
		removeItemCls?( itemInfo?:any, cls?:string ): void;

		/** [Method] Selects a record instance by record instance or index  
		* @param records Ext.data.Model[]/Number An array of records or an index 
		* @param keepExisting Boolean 
		* @param suppressEvent Boolean Set to false to not fire a select event 
		*/
		select?( records?:any, keepExisting?:boolean, suppressEvent?:boolean ): void;

		/** [Method] Sets the value of selection  
		* @param selection Ext.data.Model The new value. 
		*/
		setSelection?( selection?:Ext.data.IModel ): void;

		/** [Method] Sets the value of selectionModel  
		* @param selectionModel Object/Ext.selection.DataViewModel The new value. 
		*/
		setSelectionModel?( selectionModel?:any ): void;

		/** [Method] Sets the value of store  
		* @param store Ext.data.Store The new value. 
		*/
		setStore?( store?:Ext.data.IStore ): void;

		/** [Method] Unbinds listeners from this component to the store  
		* @param store Ext.data.AbstractStore The store to unbind from 
		*/
		unbindStoreListeners?( store?:Ext.data.IAbstractStore ): void;

	}

}

declare module Ext.view {
	export interface IBoundList extends Ext.view.IView, Ext.mixin.IQueryable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (Boolean) */
		focusOnToFront?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (Boolean) */
		preserveScrollOnRefresh?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (String/Boolean) */
		shadow?: any;
		/** [Config Option] (String/Ext.XTemplate) */
		tpl?: any;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
		/** [Property] (Ext.toolbar.Paging) */
		pagingToolbar?: Ext.toolbar.IPaging;

		/** [Method] Called by the layout system after the Component has been laid out  
		* @param width Object 
		* @param height Object 
		* @param oldWidth Object 
		* @param oldHeight Object 
		*/
		afterComponentLayout?( width?:any, height?:any, oldWidth?:any, oldHeight?:any ): void;

		/** [Method] Changes the data store bound to this view and refreshes it  
		* @param store Object 
		* @param initial Object 
		*/
		bindStore?( store?:any, initial?:any ): void;

		/** [Method] Retrieves the first direct child of this container which matches the passed selector or component  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching child Ext.Component (or null if no match was found). 
		*/
		child?( selector?:any ): any;

		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found). 
		*/
		down?( selector?:any ): any;

		/** [Method] A method that returns the inner template for displaying items in the list  
		* @param displayField String The displayField for the BoundList. 
		* @returns String The inner template 
		*/
		getInnerTpl?( displayField?:string ): string;

		/** [Method] Used by ComponentQuery and the up method to find the owning Component in the linkage hierarchy  */
		getRefOwner?(): void;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Allows addition of behavior to the hide operation  */
		onHide?(): void;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned. 
		* @returns Ext.Component[] Components which matched the selector 
		*/
		query?( selector?:string ): Ext.IComponent[];

		/** [Method] Retrieves all descendant components which match the passed function  
		* @param fn Function The matcher function. It will be called with a single argument, the component being tested. 
		* @param scope Object The scope in which to run the function. If not specified, it will default to the active component. 
		* @returns Ext.Component[] Components matched by the passed function 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.IComponent[];

		/** [Method] Finds a component at any level under this container matching the id itemId  
		* @param id String The id to find 
		* @returns Ext.Component The matching id, null if not found 
		*/
		queryById?( id?:string ): Ext.IComponent;

		/** [Method] Refreshes the view by reloading the data from the store and re rendering the template  */
		refresh?(): void;

		/** [Method] Traverses the tree rooted at this node in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPostOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at this node in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPreOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

	}

}

declare module Ext {
	export interface IBoundList extends Ext.view.IView, Ext.mixin.IQueryable {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (Boolean) */
		focusOnToFront?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (Boolean) */
		preserveScrollOnRefresh?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (String/Boolean) */
		shadow?: any;
		/** [Config Option] (String/Ext.XTemplate) */
		tpl?: any;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
		/** [Property] (Ext.toolbar.Paging) */
		pagingToolbar?: Ext.toolbar.IPaging;

		/** [Method] Called by the layout system after the Component has been laid out  
		* @param width Object 
		* @param height Object 
		* @param oldWidth Object 
		* @param oldHeight Object 
		*/
		afterComponentLayout?( width?:any, height?:any, oldWidth?:any, oldHeight?:any ): void;

		/** [Method] Changes the data store bound to this view and refreshes it  
		* @param store Object 
		* @param initial Object 
		*/
		bindStore?( store?:any, initial?:any ): void;

		/** [Method] Retrieves the first direct child of this container which matches the passed selector or component  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching child Ext.Component (or null if no match was found). 
		*/
		child?( selector?:any ): any;

		/** [Method] Retrieves the first descendant of this container which matches the passed selector  
		* @param selector String/Ext.Component An Ext.ComponentQuery selector or Ext.Component. If no selector is specified, the first child will be returned. 
		* @returns Object Ext.Component The matching descendant Ext.Component (or null if no match was found). 
		*/
		down?( selector?:any ): any;

		/** [Method] A method that returns the inner template for displaying items in the list  
		* @param displayField String The displayField for the BoundList. 
		* @returns String The inner template 
		*/
		getInnerTpl?( displayField?:string ): string;

		/** [Method] Used by ComponentQuery and the up method to find the owning Component in the linkage hierarchy  */
		getRefOwner?(): void;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Allows addition of behavior to the hide operation  */
		onHide?(): void;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Retrieves all descendant components which match the passed selector  
		* @param selector String Selector complying to an Ext.ComponentQuery selector. If no selector is specified all items will be returned. 
		* @returns Ext.Component[] Components which matched the selector 
		*/
		query?( selector?:string ): Ext.IComponent[];

		/** [Method] Retrieves all descendant components which match the passed function  
		* @param fn Function The matcher function. It will be called with a single argument, the component being tested. 
		* @param scope Object The scope in which to run the function. If not specified, it will default to the active component. 
		* @returns Ext.Component[] Components matched by the passed function 
		*/
		queryBy?( fn?:any, scope?:any ): Ext.IComponent[];

		/** [Method] Finds a component at any level under this container matching the id itemId  
		* @param id String The id to find 
		* @returns Ext.Component The matching id, null if not found 
		*/
		queryById?( id?:string ): Ext.IComponent;

		/** [Method] Refreshes the view by reloading the data from the store and re rendering the template  */
		refresh?(): void;

		/** [Method] Traverses the tree rooted at this node in post order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPostOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

		/** [Method] Traverses the tree rooted at this node in pre order mode calling the passed function on the nodes at each level  
		* @param selector Object A ComponentQuery selector used to filter candidate nodes before calling the function. An empty string matches any node. 
		* @param fn Function The function to call. Return false to aborl the traverse. 
		* @param scope Object The context (this reference) in which the function is executed. 
		* @param extraArgs Array A set of arguments to be appended to the function's argument list to pass down extra data known to the caller after the node being visited. 
		*/
		visitPreOrder?( selector?:any, fn?:any, scope?:any, extraArgs?:any[] ): void;

	}

}

declare module Ext.view {
	export interface IBoundListKeyNav extends Ext.view.INavigationModel {
		/** [Config Option] (Ext.view.BoundList) */
		boundList?: Ext.view.IBoundList;
		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Highlights the item at the given index  
		* @param index Number 
		*/
		focusItem?( index?:number ): void;

		/** [Method] Triggers selection of the currently highlighted item according to the behavior of the configured SelectionModel  
		* @param e Object 
		*/
		selectHighlighted?( e?:any ): void;

	}

}

declare module Ext.view {
	export interface IDragZone extends Ext.dd.IDragZone {
		/** [Config Option] (Object/Boolean) */
		containerScroll?: any;
		/** [Method] Called when a mousedown occurs in this container  
		* @param e Object 
		* @returns Object The dragData 
		*/
		getDragData?( e?:any ): any;

		/** [Method] Called before a repair of an invalid drop to get the XY to animate to  
		* @param e Object 
		* @param data Object 
		* @returns Number[] The xy location (e.g. [100, 200]) 
		*/
		getRepairXY?( e?:any, data?:any ): number[];

		/** [Method] Sets up the DragDrop object  
		* @param id Object 
		* @param sGroup Object 
		* @param config Object 
		*/
		init?( id?:any, sGroup?:any, config?:any ): void;

		/** [Method] Template method called upon mousedown  
		* @param e Ext.event.Event The mousedown event. 
		* @param record Ext.data.Model The record mousedowned upon. 
		* @param item HTMLElement The grid row mousedowned upon. 
		* @param index Number The row number mousedowned upon. 
		*/
		isPreventDrag?( e?:Ext.event.IEvent, record?:Ext.data.IModel, item?:HTMLElement, index?:number ): void;

		/** [Method] Called once drag threshold has been reached to initialize the proxy element  
		* @param x Object 
		* @param y Object 
		* @returns Boolean true to continue the drag, false to cancel 
		*/
		onInitDrag?( x?:any, y?:any ): boolean;

	}

}

declare module Ext.view {
	export interface IDropZone extends Ext.dd.IDropZone {
		/** [Method] Destroy this DragDrop instance */
		destroy?(): void;

		/** [Method] Returns a custom data object associated with the DOM node that is the target of the event  
		* @param e Object 
		* @returns Object data The custom data 
		*/
		getTargetFromEvent?( e?:any ): any;

		/** [Method] Moved out of the DropZone without dropping  
		* @param node Object 
		* @param dragZone Object 
		* @param e Object 
		* @param data Object 
		*/
		notifyOut?( node?:any, dragZone?:any, e?:any, data?:any ): void;

		/** [Method] Called when the DropZone determines that a Ext dd DragSource has been dropped on it but not on any of its registered  
		* @param dd Object 
		* @param e Object 
		* @param data Object 
		* @returns Boolean True if the drop was valid, else false 
		*/
		onContainerDrop?( dd?:any, e?:any, data?:any ): boolean;

		/** [Method] The mouse is past the end of all nodes or there are no nodes  
		* @param dd Object 
		* @param e Object 
		* @param data Object 
		* @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated 
		*/
		onContainerOver?( dd?:any, e?:any, data?:any ): string;

		/** [Method] Called when the DropZone determines that a Ext dd DragSource has been dropped onto the drop node  
		* @param targetNode Object 
		* @param dragZone Object 
		* @param e Object 
		* @param data Object 
		* @returns Boolean True if the drop was valid, else false 
		*/
		onNodeDrop?( targetNode?:any, dragZone?:any, e?:any, data?:any ): boolean;

		/** [Method] The mouse is over a View node 
		* @param node Object 
		* @param dragZone Object 
		* @param e Object 
		* @param data Object 
		* @returns String status The CSS class that communicates the drop status back to the source so that the underlying Ext.dd.StatusProxy can be updated 
		*/
		onNodeOver?( node?:any, dragZone?:any, e?:any, data?:any ): string;

	}

}

declare module Ext.view {
	export interface IMultiSelector extends Ext.grid.IPanel {
		/** [Config Option] (String) */
		addToolText?: string;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (String) */
		fieldName?: string;
		/** [Config Option] (String) */
		fieldTitle?: string;
		/** [Config Option] (String) */
		removeRowText?: string;
		/** [Config Option] (String) */
		removeRowTip?: string;
		/** [Config Option] (Object) */
		search?: any;
		/** [Method] Template method to be implemented in subclasses to add their tools after the collapsible tool  */
		addTools?(): void;

		/** [Method] Invoked before the Component is destroyed  */
		beforeDestroy?(): void;

		/** [Method] Returns the value of search  
		* @returns Object 
		*/
		getSearch?(): any;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

		/** [Method] Sets the value of search  
		* @param search Object The new value. 
		*/
		setSearch?( search?:any ): void;

	}

}

declare module Ext.view {
	export interface IMultiSelectorSearch extends Ext.panel.IPanel {
		/** [Config Option] (Boolean) */
		border?: boolean;
		/** [Config Option] (Boolean) */
		defaultListenerScope?: boolean;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		referenceHolder?: boolean;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (String) */
		searchText?: string;
		/** [Config Option] (Ext.data.Store/String/Object) */
		store?: any;
		/** [Method] Invoked after the Component is shown after onShow is called */
		afterShow?(): void;

		/** [Method] Returns the store that holds search results  
		* @returns Ext.data.Store 
		*/
		getSearchStore?(): Ext.data.IStore;

		/** [Method] The initComponent template method is an important initialization step for a Component  */
		initComponent?(): void;

	}

}

declare module Ext.view {
	export interface INavigationModel extends Ext.IBase, Ext.util.IObservable, Ext.mixin.IFactoryable {
		/** [Method] Called by Ext view AbstractView refresh before refresh to allow the current focus position to be cached  */
		beforeViewRefresh?(): void;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Called to focus an item in the client DataView  
		* @param item Ext.dom.Element 
		* @returns undefined 
		*/
		focusItem?( item?:Ext.dom.IElement ): void;

		/** [Method] Called by Ext view AbstractView refresh after refresh to allow cached focus position to be restored  */
		onViewRefresh?(): void;

	}

}

declare module Ext.view {
	export interface INodeCache extends Ext.IBase {
		/** [Method] Removes all elements from this NodeCache  
		* @param removeDom Boolean True to also remove the elements from the document. 
		*/
		clear?( removeDom?:boolean ): void;

		/** [Method] Clears this NodeCache and adds the elements passed  
		* @param els HTMLElement[] An array of DOM elements from which to fill this NodeCache. 
		* @returns Ext.view.NodeCache this 
		*/
		fill?( els?:HTMLElement[] ): Ext.view.INodeCache;

		/** [Method] Find the index of the passed element within the composite collection  
		* @param el String/HTMLElement/Ext.dom.Element/Number The id of an element, or an Ext.dom.Element, or an HTMLElement to find within the composite collection. 
		* @returns Number The index of the passed Ext.dom.Element in the composite collection, or -1 if not found. 
		*/
		indexOf?( el?:any ): number;

		/** [Method] Removes the specified element s 
		* @param el String/HTMLElement/Ext.dom.Element/Number The id of an element, the Element itself, the index of the element in this composite or an array of any of those. 
		* @param removeDom Boolean True to also remove the element from the document 
		*/
		removeElement?( el?:any, removeDom?:boolean ): void;

		/** [Method] Replaces the specified element with the passed element  
		* @param el String/HTMLElement/Ext.dom.Element/Number The id of an element, the Element itself, the index of the element in this composite to replace. 
		* @param replacement String/Ext.dom.Element The id of an element or the Element itself. 
		* @param domReplace Boolean True to remove and replace the element in the document too. 
		* @returns Ext.view.NodeCache this 
		*/
		replaceElement?( el?:any, replacement?:any, domReplace?:boolean ): Ext.view.INodeCache;

		/** [Method] Appends prepends records depending on direction flag 
		* @param newRecords Ext.data.Model[] Items to append/prepend 
		* @param direction Number -1' = scroll up,0` = scroll down. 
		* @param removeCount Number The number of records to remove from the end. if scrolling down, rows are removed from the top and the new rows are added at the bottom. 
		* @returns HTMLElement[] The view item nodes added either at the top or the bottom of the view. 
		*/
		scroll?( newRecords?:Ext.data.IModel[], direction?:number, removeCount?:number ): HTMLElement[];

	}

}

declare module Ext.view {
	export interface ITable extends Ext.view.IView {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Boolean) */
		enableTextSelection?: boolean;
		/** [Config Option] (String) */
		firstCls?: string;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (String) */
		itemSelector?: string;
		/** [Config Option] (String) */
		lastCls?: string;
		/** [Config Option] (Boolean) */
		markDirty?: boolean;
		/** [Config Option] (String) */
		overItemCls?: string;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (String) */
		selectedItemCls?: string;
		/** [Config Option] (Object/Ext.selection.DataViewModel) */
		selectionModel?: any;
		/** [Config Option] (Boolean) */
		stripeRows?: boolean;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
		/** [Method] Adds a CSS Class to a specific row  
		* @param rowInfo HTMLElement/String/Number/Ext.data.Model An HTMLElement, index or instance of a model representing this row 
		* @param cls String 
		*/
		addRowCls?( rowInfo?:any, cls?:string ): void;

		/** [Method] Sizes the passed header to fit the max content width  
		* @param header Ext.grid.column.Column/Number The header (or index of header) to auto size. 
		*/
		autoSizeColumn?( header?:any ): void;

		/** [Method] Function which can be overridden which returns the data object passed to this DataView s template to render the whole  
		* @param records Object 
		* @param startIndex Object 
		* @returns Object[] An Array of data objects to be processed by a repeating XTemplate. May also contain named properties. 
		*/
		collectData?( records?:any, startIndex?:any ): any[];

		/** [Method] Disable this view  
		* @param silent Boolean Passing true will suppress the disable event from being fired. 
		*/
		disable?( silent?:boolean ): void;

		/** [Method] Expands a particular header to fit the max content width  
		* @param header Object 
		*/
		expandToFit?( header?:any ): void;

		/** [Method] Focuses a particular cell and brings it into view  
		* @param pos Ext.grid.CellContext The cell to select 
		* @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds). 
		*/
		focusCell?( pos?:Ext.grid.ICellContext, delay?:any ): void;

		/** [Method] Focuses a particular row and brings it into view  
		* @param row HTMLElement/String/Number/Ext.data.Model An HTMLElement template node, index of a template node, the id of a template node or the 
		* @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds). record associated with the node. 
		*/
		focusNode?( row?:any, delay?:any ): void;

		/** [Method] Focuses a particular row and brings it into view  
		* @param row HTMLElement/String/Number/Ext.data.Model An HTMLElement template node, index of a template node, the id of a template node or the 
		* @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds). record associated with the node. 
		*/
		focusRow?( row?:any, delay?:any ): void;

		/** [Method] Returns a CSS selector which selects the outermost element s in this view  */
		getBodySelector?(): void;

		/** [Method] Returns a CSS selector which selects a particular column if the desired header is passed or a general cell selector 
		* @param header Ext.grid.column.Column The column for which to return the selector. If omitted, the general cell selector which matches ant cell will be returned. 
		*/
		getCellSelector?( header?:Ext.grid.column.IColumn ): void;

		/** [Method] Returns a CSS selector which selects the element s which define the width of a column  
		* @param header Object 
		*/
		getColumnSizerSelector?( header?:any ): void;

		/** [Method] Get a reference to a feature 
		* @param id String The id of the feature 
		* @returns Ext.grid.feature.Feature The feature. Undefined if not found 
		*/
		getFeature?( id?:string ): Ext.grid.feature.IFeature;

		/** [Method] Returns a CSS selector which selects items of the view rendered by the outerRowTpl */
		getItemSelector?(): void;

		/** [Method] Returns the element which is masked by the mask method or into which the LoadMask is rendered into  */
		getMaskTarget?(): void;

		/** [Method] Gets the current XY position of the component s underlying element  
		* @param record Object 
		* @param header Object 
		* @returns Number[] The XY position of the element (e.g., [100, 200]) 
		*/
		getPosition?( record?:any, header?:any ): number[];

		/** [Method] Gets a record from a node 
		* @param node Object 
		* @returns Ext.data.Model record The Ext.data.Model object 
		*/
		getRecord?( node?:any ): Ext.data.IModel;

		/** [Method] Returns the table row given the passed Record or index or node  
		* @param nodeInfo HTMLElement/String/Number/Ext.data.Model The node or record, or row index. to return the top level row. 
		* @returns HTMLElement The node or null if it wasn't found 
		*/
		getRow?( nodeInfo?:any ): HTMLElement;

		/** [Method] Override this function to apply custom CSS classes to rows during rendering  
		* @param record Ext.data.Model The record corresponding to the current row. 
		* @param index Number The row index. 
		* @param rowParams Object DEPRECATED. For row body use the getAdditionalData method of the rowbody feature. 
		* @param store Ext.data.Store The store this grid is bound to 
		* @returns String a CSS class name to add to the row. 
		*/
		getRowClass?( record?:Ext.data.IModel, index?:number, rowParams?:any, store?:Ext.data.IStore ): string;

		/** [Method] Returns the value of selectionModel  
		* @returns Object 
		*/
		getSelectionModel?(): any;

		/** [Method] Gets the listeners to bind to a new store  
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?(): any;

		/** [Method] Finds the index of the passed node  
		* @param node Object 
		* @returns Number The index of the node or -1 
		*/
		indexOf?( node?:any ): number;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] Template method it is called when a new store is bound to the current instance  
		* @param store Object 
		*/
		onBindStore?( store?:any ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Called when focus enters this Component s hierarchy 
		* @param e Object 
		*/
		onFocusEnter?( e?:any ): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] Refreshes the grid view  */
		refresh?(): void;

		/** [Method] Removes a CSS Class from a specific row  
		* @param rowInfo HTMLElement/String/Number/Ext.data.Model An HTMLElement, index or instance of a model representing this row 
		* @param cls String 
		*/
		removeRowCls?( rowInfo?:any, cls?:string ): void;

		/** [Method] Sets the value of selectionModel  
		* @param selectionModel Object The new value. 
		*/
		setSelectionModel?( selectionModel?:any ): void;

		/** [Method] Navigates from the passed record by the passed increment which may be ve or ve Skips hidden records  
		* @param startRec Ext.data.Model The Record to start from. 
		* @param distance Number The distance to move from the record. May be +ve or -ve. 
		*/
		walkRecs?( startRec?:Ext.data.IModel, distance?:number ): void;

		/** [Method] Increments the passed row index by the passed increment which may be ve or ve Skips hidden rows  
		* @param startRow Number The zero-based row index to start from. 
		* @param distance Number The distance to move the row by. May be +ve or -ve. 
		*/
		walkRows?( startRow?:number, distance?:number ): void;

	}

}

declare module Ext.grid {
	export interface IView extends Ext.view.IView {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Boolean) */
		enableTextSelection?: boolean;
		/** [Config Option] (String) */
		firstCls?: string;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (String) */
		itemSelector?: string;
		/** [Config Option] (String) */
		lastCls?: string;
		/** [Config Option] (Boolean) */
		markDirty?: boolean;
		/** [Config Option] (String) */
		overItemCls?: string;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (String) */
		selectedItemCls?: string;
		/** [Config Option] (Object/Ext.selection.DataViewModel) */
		selectionModel?: any;
		/** [Config Option] (Boolean) */
		stripeRows?: boolean;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
		/** [Method] Adds a CSS Class to a specific row  
		* @param rowInfo HTMLElement/String/Number/Ext.data.Model An HTMLElement, index or instance of a model representing this row 
		* @param cls String 
		*/
		addRowCls?( rowInfo?:any, cls?:string ): void;

		/** [Method] Sizes the passed header to fit the max content width  
		* @param header Ext.grid.column.Column/Number The header (or index of header) to auto size. 
		*/
		autoSizeColumn?( header?:any ): void;

		/** [Method] Function which can be overridden which returns the data object passed to this DataView s template to render the whole  
		* @param records Object 
		* @param startIndex Object 
		* @returns Object[] An Array of data objects to be processed by a repeating XTemplate. May also contain named properties. 
		*/
		collectData?( records?:any, startIndex?:any ): any[];

		/** [Method] Disable this view  
		* @param silent Boolean Passing true will suppress the disable event from being fired. 
		*/
		disable?( silent?:boolean ): void;

		/** [Method] Expands a particular header to fit the max content width  
		* @param header Object 
		*/
		expandToFit?( header?:any ): void;

		/** [Method] Focuses a particular cell and brings it into view  
		* @param pos Ext.grid.CellContext The cell to select 
		* @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds). 
		*/
		focusCell?( pos?:Ext.grid.ICellContext, delay?:any ): void;

		/** [Method] Focuses a particular row and brings it into view  
		* @param row HTMLElement/String/Number/Ext.data.Model An HTMLElement template node, index of a template node, the id of a template node or the 
		* @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds). record associated with the node. 
		*/
		focusNode?( row?:any, delay?:any ): void;

		/** [Method] Focuses a particular row and brings it into view  
		* @param row HTMLElement/String/Number/Ext.data.Model An HTMLElement template node, index of a template node, the id of a template node or the 
		* @param delay Boolean/Number Delay the focus this number of milliseconds (true for 10 milliseconds). record associated with the node. 
		*/
		focusRow?( row?:any, delay?:any ): void;

		/** [Method] Returns a CSS selector which selects the outermost element s in this view  */
		getBodySelector?(): void;

		/** [Method] Returns a CSS selector which selects a particular column if the desired header is passed or a general cell selector 
		* @param header Ext.grid.column.Column The column for which to return the selector. If omitted, the general cell selector which matches ant cell will be returned. 
		*/
		getCellSelector?( header?:Ext.grid.column.IColumn ): void;

		/** [Method] Returns a CSS selector which selects the element s which define the width of a column  
		* @param header Object 
		*/
		getColumnSizerSelector?( header?:any ): void;

		/** [Method] Get a reference to a feature 
		* @param id String The id of the feature 
		* @returns Ext.grid.feature.Feature The feature. Undefined if not found 
		*/
		getFeature?( id?:string ): Ext.grid.feature.IFeature;

		/** [Method] Returns a CSS selector which selects items of the view rendered by the outerRowTpl */
		getItemSelector?(): void;

		/** [Method] Returns the element which is masked by the mask method or into which the LoadMask is rendered into  */
		getMaskTarget?(): void;

		/** [Method] Gets the current XY position of the component s underlying element  
		* @param record Object 
		* @param header Object 
		* @returns Number[] The XY position of the element (e.g., [100, 200]) 
		*/
		getPosition?( record?:any, header?:any ): number[];

		/** [Method] Gets a record from a node 
		* @param node Object 
		* @returns Ext.data.Model record The Ext.data.Model object 
		*/
		getRecord?( node?:any ): Ext.data.IModel;

		/** [Method] Returns the table row given the passed Record or index or node  
		* @param nodeInfo HTMLElement/String/Number/Ext.data.Model The node or record, or row index. to return the top level row. 
		* @returns HTMLElement The node or null if it wasn't found 
		*/
		getRow?( nodeInfo?:any ): HTMLElement;

		/** [Method] Override this function to apply custom CSS classes to rows during rendering  
		* @param record Ext.data.Model The record corresponding to the current row. 
		* @param index Number The row index. 
		* @param rowParams Object DEPRECATED. For row body use the getAdditionalData method of the rowbody feature. 
		* @param store Ext.data.Store The store this grid is bound to 
		* @returns String a CSS class name to add to the row. 
		*/
		getRowClass?( record?:Ext.data.IModel, index?:number, rowParams?:any, store?:Ext.data.IStore ): string;

		/** [Method] Returns the value of selectionModel  
		* @returns Object 
		*/
		getSelectionModel?(): any;

		/** [Method] Gets the listeners to bind to a new store  
		* @returns Object The listeners to be bound to the store in object literal form. The scope may be omitted, it is assumed to be the current instance. 
		*/
		getStoreListeners?(): any;

		/** [Method] Finds the index of the passed node  
		* @param node Object 
		* @returns Number The index of the node or -1 
		*/
		indexOf?( node?:any ): number;

		/** [Method] private */
		initComponent?(): void;

		/** [Method] Template method it is called when a new store is bound to the current instance  
		* @param store Object 
		*/
		onBindStore?( store?:any ): void;

		/** [Method] Allows addition of behavior to the destroy operation  */
		onDestroy?(): void;

		/** [Method] Called when focus enters this Component s hierarchy 
		* @param e Object 
		*/
		onFocusEnter?( e?:any ): void;

		/** [Method] Called when focus exits from this Component s hierarchy 
		* @param e Object 
		*/
		onFocusLeave?( e?:any ): void;

		/** [Method] Refreshes the grid view  */
		refresh?(): void;

		/** [Method] Removes a CSS Class from a specific row  
		* @param rowInfo HTMLElement/String/Number/Ext.data.Model An HTMLElement, index or instance of a model representing this row 
		* @param cls String 
		*/
		removeRowCls?( rowInfo?:any, cls?:string ): void;

		/** [Method] Sets the value of selectionModel  
		* @param selectionModel Object The new value. 
		*/
		setSelectionModel?( selectionModel?:any ): void;

		/** [Method] Navigates from the passed record by the passed increment which may be ve or ve Skips hidden records  
		* @param startRec Ext.data.Model The Record to start from. 
		* @param distance Number The distance to move from the record. May be +ve or -ve. 
		*/
		walkRecs?( startRec?:Ext.data.IModel, distance?:number ): void;

		/** [Method] Increments the passed row index by the passed increment which may be ve or ve Skips hidden rows  
		* @param startRow Number The zero-based row index to start from. 
		* @param distance Number The distance to move the row by. May be +ve or -ve. 
		*/
		walkRows?( startRow?:number, distance?:number ): void;

	}

}

declare module Ext.view {
	export interface ITableLayout extends Ext.layout.component.IAuto {
		/** [Method] Called before any calculation cycles to prepare for layout  
		* @param ownerContext Object 
		*/
		beginLayout?( ownerContext?:any ): void;

		/** [Method] Called before any calculation cycles to reset DOM values and prepare for calculation  
		* @param ownerContext Object 
		* @param firstCycle Object 
		*/
		beginLayoutCycle?( ownerContext?:any, firstCycle?:any ): void;

		/** [Method] Called to perform the calculations for this layout  
		* @param ownerContext Object 
		*/
		calculate?( ownerContext?:any ): void;

		/** [Method] This method is called after all layouts are complete and their calculations flushed to the DOM  
		* @param ownerContext Object 
		*/
		finishedLayout?( ownerContext?:any ): void;

	}

}

declare module Ext.view {
	export interface IView extends Ext.view.IAbstractView {
		/** [Method] Changes the data store bound to this view and refreshes it  
		* @param store Object 
		* @param initial Object 
		* @param propertyName Object 
		*/
		bindStore?( store?:any, initial?:any, propertyName?:any ): void;

		/** [Method] Un highlights the currently highlighted item if any  */
		clearHighlight?(): void;

		/** [Method] Focuses a node in the view  
		* @param rec Ext.data.Model The record associated to the node that is to be focused. 
		*/
		focusNode?( rec?:Ext.data.IModel ): void;

		/** [Method] Highlights a given item in the View  
		* @param item HTMLElement The item to highlight 
		*/
		highlightItem?( item?:HTMLElement ): void;

		/** [Method] Refreshes the view by reloading the data from the store and re rendering the template  */
		refresh?(): void;

	}

}

declare module Ext {
	export interface IDataView extends Ext.view.IAbstractView {
		/** [Method] Changes the data store bound to this view and refreshes it  
		* @param store Object 
		* @param initial Object 
		* @param propertyName Object 
		*/
		bindStore?( store?:any, initial?:any, propertyName?:any ): void;

		/** [Method] Un highlights the currently highlighted item if any  */
		clearHighlight?(): void;

		/** [Method] Focuses a node in the view  
		* @param rec Ext.data.Model The record associated to the node that is to be focused. 
		*/
		focusNode?( rec?:Ext.data.IModel ): void;

		/** [Method] Highlights a given item in the View  
		* @param item HTMLElement The item to highlight 
		*/
		highlightItem?( item?:HTMLElement ): void;

		/** [Method] Refreshes the view by reloading the data from the store and re rendering the template  */
		refresh?(): void;

	}

}

declare module Ext {
	export interface IWidget extends Ext.IEvented, Ext.mixin.IInheritable, Ext.mixin.IBindable {
		/** [Config Option] (Number/String) */
		height?: any;
		/** [Config Option] (Number/String) */
		width?: any;
		/** [Property] (Object) */
		element?: any;

		/** [Property] (Array) */
		template?: any[];

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method]  
		* @param height Object 
		*/
		doSetHeight?( height?:any ): void;

		/** [Method]  
		* @param width Object 
		*/
		doSetWidth?( width?:any ): void;

		/** [Method] Returns the value of baseCls  
		* @returns String 
		*/
		getBaseCls?(): string;

		/** [Method] Returns the value of bind  
		* @returns Object 
		*/
		getBind?(): any;

		/** [Method] Returns the value of controller  
		* @returns String/Object/Ext.app.ViewController 
		*/
		getController?(): any;

		/** [Method] Returns the value of defaultListenerScope  
		* @returns Boolean 
		*/
		getDefaultListenerScope?(): boolean;

		/** [Method] A template method for modifying the element config before it is processed  
		* @returns Object the element config object 
		*/
		getElementConfig?(): any;

		/** [Method] Returns the value of height  
		* @returns Number/String 
		*/
		getHeight?(): any;

		/** [Method] This method returns an object containing the inherited properties for this instance  
		* @param inner Boolean Pass true to return inheritedStateInner instead of the normal inheritedState object. This is only needed internally and should not be passed by user code. 
		* @returns Object The inheritedState object containing inherited properties. 
		*/
		getInherited?( inner?:boolean ): any;

		/** [Method] This method returns the value of a config property that may be inherited from some ancestor  
		* @param property String The name of the config property to return. 
		* @param skipThis Boolean Pass true if the property should be ignored if found on this instance. In other words, true means the property must be inherited and not explicitly set on this instance. 
		* @returns Mixed The value of the requested property. 
		*/
		getInheritedConfig?( property?:string, skipThis?:boolean ): any;

		/** [Method] Returns the value of Ext Component itemId assigned to this component or when that is not set returns the value of E  
		* @returns String 
		*/
		getItemId?(): string;

		/** [Method] Returns the value of publishes  
		* @returns String/String[]/Object 
		*/
		getPublishes?(): any;

		/** [Method] Used by ComponentQuery and the up method to find the owning Component in the linkage hierarchy  */
		getRefOwner?(): void;

		/** [Method] Returns the value of reference  
		* @returns String 
		*/
		getReference?(): string;

		/** [Method] Returns the value of renderTo  
		* @returns Object 
		*/
		getRenderTo?(): any;

		/** [Method] Returns the value of session  
		* @returns Boolean/Object/Ext.data.Session 
		*/
		getSession?(): any;

		/** [Method] Returns the height and width of the Component  
		* @returns Object The current height and width of the Component. 
		*/
		getSize?(): any;

		/** [Method] Returns the value of twoWayBindable  
		* @returns String/String[]/Object 
		*/
		getTwoWayBindable?(): any;

		/** [Method] Returns the value of viewModel  
		* @returns String/Object/Ext.app.ViewModel 
		*/
		getViewModel?(): any;

		/** [Method] Returns the value of width  
		* @returns Number/String 
		*/
		getWidth?(): any;

		/** [Method] Initializes the Element for this Widget instance  */
		initElement?(): void;

		/** [Method] Called by getInherited to initialize the inheritedState the first time it is requested  
		* @param inheritedState Object 
		*/
		initInheritedState?( inheritedState?:any ): void;

		/** [Method] Tests whether this Widget matches a ComponentQuery selector string  
		* @param selector String The selector string to test against. 
		* @returns Boolean true if this Widget matches the selector. 
		*/
		is?( selector?:string ): boolean;

		/** [Method] Tests whether or not this Component is of a specific xtype  
		* @param xtype String The xtype to check for this Component. 
		* @param shallow Boolean false to check whether this Component is descended from the xtype (this is the default), or true to check whether this Component is directly of the specified xtype. 
		* @returns Boolean true if this component descends from the specified xtype, false otherwise. 
		*/
		isXType?( xtype?:string, shallow?:boolean ): boolean;

		/** [Method] Gets the controller that controls this view  
		* @param skipThis Boolean true to not consider the controller directly attached to this view (if it exists). 
		* @returns Ext.app.ViewController The controller. null if no controller is found. 
		*/
		lookupController?( skipThis?:boolean ): Ext.app.IViewController;

		/** [Method] Returns the Ext data Session for this instance  
		* @param skipThis Boolean Pass true to ignore a session configured on this instance and only consider an inherited session. 
		* @returns Ext.data.Session 
		*/
		lookupSession?( skipThis?:boolean ): Ext.data.ISession;

		/** [Method] Returns the Ext app ViewModel for this instance  
		* @param skipThis Boolean Pass true to ignore a viewModel configured on this instance and only consider an inherited view model. 
		* @returns Ext.app.ViewModel 
		*/
		lookupViewModel?( skipThis?:boolean ): Ext.app.IViewModel;

		/** [Method] Publish this components state to the ViewModel  
		* @param property String The name of the property to update. 
		* @param value Object The value of property. Only needed if property is given. 
		*/
		publishState?( property?:string, value?:any ): void;

		/** [Method] Gets the Controller or Component that is used as the event root for this view  
		* @param defaultType Object 
		* @returns Ext.app.ViewController/Ext.container.Container The default listener scope. 
		*/
		resolveListenerScope?( defaultType?:any ): any;

		/** [Method] Returns the default listener scope for a satellite of this component  
		* @param satellite Ext.mixin.Observable 
		* @param defaultScope Object 
		* @returns Object The listener scope 
		*/
		resolveSatelliteListenerScope?( satellite?:Ext.mixin.IObservable, defaultScope?:any ): any;

		/** [Method] Sets the value of baseCls  
		* @param baseCls String The new value. 
		*/
		setBaseCls?( baseCls?:string ): void;

		/** [Method] Sets the value of bind  
		* @param bind Object The new value. 
		*/
		setBind?( bind?:any ): void;

		/** [Method] Sets the value of controller  
		* @param controller String/Object/Ext.app.ViewController The new value. 
		*/
		setController?( controller?:any ): void;

		/** [Method] Sets the value of defaultListenerScope  
		* @param defaultListenerScope Boolean The new value. 
		*/
		setDefaultListenerScope?( defaultListenerScope?:boolean ): void;

		/** [Method] Sets the value of height  
		* @param height Number/String The new value. 
		*/
		setHeight?( height?:any ): void;

		/** [Method] Sets the value of publishes  
		* @param publishes String/String[]/Object The new value. 
		*/
		setPublishes?( publishes?:any ): void;

		/** [Method] Sets the value of reference  
		* @param reference String The new value. 
		*/
		setReference?( reference?:string ): void;

		/** [Method] Sets the value of renderTo  
		* @param renderTo Object The new value. 
		*/
		setRenderTo?( renderTo?:any ): void;

		/** [Method] Sets the value of session  
		* @param session Boolean/Object/Ext.data.Session The new value. 
		*/
		setSession?( session?:any ): void;

		/** [Method] Sets the size of the Component  
		* @param width Number The new width for the Component. 
		* @param height Number The new height for the Component. 
		*/
		setSize?( width?:number, height?:number ): void;

		/** [Method] Sets the value of twoWayBindable  
		* @param twoWayBindable String/String[]/Object The new value. 
		*/
		setTwoWayBindable?( twoWayBindable?:any ): void;

		/** [Method] Sets the value of viewModel  
		* @param viewModel String/Object/Ext.app.ViewModel The new value. 
		*/
		setViewModel?( viewModel?:any ): void;

		/** [Method] Sets the value of width  
		* @param width Number/String The new value. 
		*/
		setWidth?( width?:any ): void;

	}

}

declare module Ext.window {
	export interface IMessageBox extends Ext.window.IWindow {
		/** [Config Option] (String) */
		closeAction?: string;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number) */
		maxHeight?: number;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrapDock?: any;
		/** [Config Option] (String) */
		title?: string;
		/** [Property] (Number) */
		CANCEL?: number;

		/** [Property] (String) */
		ERROR?: string;

		/** [Property] (String) */
		INFO?: string;

		/** [Property] (Number) */
		NO?: number;

		/** [Property] (Number) */
		OK?: number;

		/** [Property] (Number) */
		OKCANCEL?: number;

		/** [Property] (String) */
		QUESTION?: string;

		/** [Property] (String) */
		WARNING?: string;

		/** [Property] (Number) */
		YES?: number;

		/** [Property] (Number) */
		YESNO?: number;

		/** [Property] (Number) */
		YESNOCANCEL?: number;

		/** [Property] (Object) */
		buttonText?: any;

		/** [Property] (Number) */
		defaultTextHeight?: number;

		/** [Property] (Number) */
		minProgressWidth?: number;

		/** [Property] (Number) */
		minPromptWidth?: number;

		/** [Method] Displays a standard read only message box with an OK button comparable to the basic JavaScript alert prompt 
		* @param title String The title bar text 
		* @param message String The message box body text 
		* @param fn Function The callback function invoked after the message box is closed. See show method for details. 
		* @param scope Object The scope (this reference) in which the callback is executed. 
		* @returns Ext.window.MessageBox this 
		*/
		alert?( title?:string, message?:string, fn?:any, scope?:any ): Ext.window.IMessageBox;

		/** [Method] Displays a confirmation message box with Yes and No buttons comparable to JavaScript s confirm 
		* @param title String The title bar text 
		* @param message String The message box body text 
		* @param fn Function The callback function invoked after the message box is closed. See show method for details. 
		* @param scope Object The scope (this reference) in which the callback is executed. 
		* @returns Ext.window.MessageBox this 
		*/
		confirm?( title?:string, message?:string, fn?:any, scope?:any ): Ext.window.IMessageBox;

		/** [Method] Hides this Component setting it to invisible using the configured hideMode  
		* @returns Ext.Component this 
		*/
		hide?(): Ext.IComponent;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Displays a message box with a progress bar  
		* @param title String The title bar text 
		* @param message String The message box body text 
		* @param progressText String The text to display inside the progress bar 
		* @returns Ext.window.MessageBox this 
		*/
		progress?( title?:string, message?:string, progressText?:string ): Ext.window.IMessageBox;

		/** [Method] Displays a message box with OK and Cancel buttons prompting the user to enter some text comparable to JavaScript s p  
		* @param title String The title bar text 
		* @param message String The message box body text 
		* @param fn Function The callback function invoked after the message box is closed. See show method for details. 
		* @param scope Object The scope (this reference) in which the callback is executed. 
		* @param multiline Boolean/Number True to create a multiline textbox using the defaultTextHeight property, or the height in pixels to create the textbox/ 
		* @param value String Default value of the text input element 
		* @returns Ext.window.MessageBox this 
		*/
		prompt?( title?:string, message?:string, fn?:any, scope?:any, multiline?:any, value?:string ): Ext.window.IMessageBox;

		/** [Method] Adds the specified icon to the dialog  
		* @param icon String A CSS classname specifying the icon's background image url, or empty string to clear the icon 
		* @param width Number The width of the icon. If not specified, the default is used 
		* @param height Number The height of the icon. If not specified, the default is used 
		* @returns Ext.window.MessageBox this 
		*/
		setIcon?( icon?:string, width?:number, height?:number ): Ext.window.IMessageBox;

		/** [Method] Displays a new message box or reinitializes an existing message box based on the config options passed in  
		* @param config Object The following config options are supported: 
		* @returns Ext.window.MessageBox this 
		*/
		show?( config?:any ): Ext.window.IMessageBox;

		/** [Method] Updates a progress style message box s text and progress bar  
		* @param value Number Any number between 0 and 1 (e.g., .5) 
		* @param progressText String The progress text to display inside the progress bar. 
		* @param message String The message box's body text is replaced with the specified string (defaults to undefined so that any existing body text will not get overwritten by default unless a new value is passed in) 
		* @returns Ext.window.MessageBox this 
		*/
		updateProgress?( value?:number, progressText?:string, message?:string ): Ext.window.IMessageBox;

		/** [Method] Displays a message box with an infinitely auto updating progress bar  
		* @param message String The message box body text 
		* @param title String The title bar text 
		* @param config Object A Ext.ProgressBar.wait config object 
		* @returns Ext.window.MessageBox this 
		*/
		wait?( message?:string, title?:string, config?:any ): Ext.window.IMessageBox;

	}

}

declare module Ext.window {
	export interface IToast extends Ext.window.IWindow {
		/** [Config Option] ("br"/"bl"/"tr"/"tl"/"t"/"l"/"b"/"r") */
		align?: any;
		/** [Config Option] (String/Ext.Component) */
		anchor?: any;
		/** [Config Option] (String) */
		anchorAlign?: string;
		/** [Config Option] (Number/String) */
		bodyPadding?: any;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (String/Boolean) */
		shadow?: any;
		/** [Config Option] (Boolean) */
		useXAxis?: boolean;
		/** [Method] Invoked after the Component is shown after onShow is called */
		afterShow?(): void;

		/** [Method] Invoked before the Component is shown  */
		beforeShow?(): void;

		/** [Method] Try to focus this component  
		* @returns Ext.Component The focused Component. Usually this Component. Some Containers may delegate focus to a descendant Component (Windows can do this through their defaultFocus config option. If this component is disabled, a closely related component will be focused and that will be returned. 
		*/
		focus?(): Ext.IComponent;

		/** [Method] Returns the focus holder element associated with this Window  
		* @returns Ext.dom.Element/Ext.Component the focus holding element or Component. 
		*/
		getFocusEl?(): any;

		/** [Method] Hides this Component setting it to invisible using the configured hideMode  
		* @returns Ext.Component this 
		*/
		hide?(): Ext.IComponent;

		/** [Method] Update the content area of a component  */
		update?(): void;

	}

}

declare module Ext.window {
	export interface IWindow extends Ext.panel.IPanel {
		/** [Config Option] (String/Ext.dom.Element) */
		animateTarget?: any;
		/** [Config Option] (Boolean) */
		autoRender?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (Boolean) */
		collapsed?: boolean;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Boolean) */
		constrainHeader?: boolean;
		/** [Config Option] (String/Number/Ext.Component) */
		defaultFocus?: any;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Boolean) */
		expandOnShow?: boolean;
		/** [Config Option] (Boolean/Function) */
		ghost?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (Boolean) */
		hideShadowOnDeactivate?: boolean;
		/** [Config Option] (Boolean) */
		maximizable?: boolean;
		/** [Config Option] (Boolean) */
		maximized?: boolean;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		minimizable?: boolean;
		/** [Config Option] (Boolean) */
		monitorResize?: boolean;
		/** [Config Option] (Function) */
		onEsc?: any;
		/** [Config Option] (Boolean) */
		overlapHeader?: boolean;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
		/** [Property] (Ext.util.ComponentDragger) */
		dd?: Ext.util.IComponentDragger;

		/** [Property] (Boolean) */
		isWindow?: boolean;

		/** [Method] Invoked after the Panel is Collapsed  */
		afterCollapse?(): void;

		/** [Method] Invoked after the Panel is Expanded  */
		afterExpand?(): void;

		/** [Method] Applies the state to the object  
		* @param state Object 
		*/
		applyState?( state?:any ): void;

		/** [Method] Gets the configured default focus item  */
		getDefaultFocus?(): void;

		/** [Method] Returns the focus holder element associated with this Window  
		* @returns Ext.dom.Element/Ext.Component the focus holding element or Component. 
		*/
		getFocusEl?(): any;

		/** [Method] Fits the window within its current container and automatically replaces the maximize tool button with the restore 
		* @param animate Boolean Pass true to animate this Window to full size. 
		* @returns Ext.window.Window this 
		*/
		maximize?( animate?:boolean ): Ext.window.IWindow;

		/** [Method] Placeholder method for minimizing the window  
		* @returns Ext.window.Window this 
		*/
		minimize?(): Ext.window.IWindow;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Restores a maximized window back to its original size and position prior to being maximized and also replaces the re  
		* @param animate Boolean Pass true to animate the restore. 
		* @returns Ext.window.Window this 
		*/
		restore?( animate?:boolean ): Ext.window.IWindow;

		/** [Method] A shortcut method for toggling between maximize and restore based on the current maximized state of the window  
		* @returns Ext.window.Window this 
		*/
		toggleMaximize?(): Ext.window.IWindow;

	}

}

declare module Ext {
	export interface IWindow extends Ext.panel.IPanel {
		/** [Config Option] (String/Ext.dom.Element) */
		animateTarget?: any;
		/** [Config Option] (Boolean) */
		autoRender?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (Boolean) */
		collapsed?: boolean;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Boolean) */
		constrainHeader?: boolean;
		/** [Config Option] (String/Number/Ext.Component) */
		defaultFocus?: any;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Boolean) */
		expandOnShow?: boolean;
		/** [Config Option] (Boolean/Function) */
		ghost?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (Boolean) */
		hideShadowOnDeactivate?: boolean;
		/** [Config Option] (Boolean) */
		maximizable?: boolean;
		/** [Config Option] (Boolean) */
		maximized?: boolean;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		minimizable?: boolean;
		/** [Config Option] (Boolean) */
		monitorResize?: boolean;
		/** [Config Option] (Function) */
		onEsc?: any;
		/** [Config Option] (Boolean) */
		overlapHeader?: boolean;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
		/** [Property] (Ext.util.ComponentDragger) */
		dd?: Ext.util.IComponentDragger;

		/** [Property] (Boolean) */
		isWindow?: boolean;

		/** [Method] Invoked after the Panel is Collapsed  */
		afterCollapse?(): void;

		/** [Method] Invoked after the Panel is Expanded  */
		afterExpand?(): void;

		/** [Method] Applies the state to the object  
		* @param state Object 
		*/
		applyState?( state?:any ): void;

		/** [Method] Gets the configured default focus item  */
		getDefaultFocus?(): void;

		/** [Method] Returns the focus holder element associated with this Window  
		* @returns Ext.dom.Element/Ext.Component the focus holding element or Component. 
		*/
		getFocusEl?(): any;

		/** [Method] Fits the window within its current container and automatically replaces the maximize tool button with the restore 
		* @param animate Boolean Pass true to animate this Window to full size. 
		* @returns Ext.window.Window this 
		*/
		maximize?( animate?:boolean ): Ext.window.IWindow;

		/** [Method] Placeholder method for minimizing the window  
		* @returns Ext.window.Window this 
		*/
		minimize?(): Ext.window.IWindow;

		/** [Method] Allows addition of behavior to the show operation  */
		onShow?(): void;

		/** [Method] Restores a maximized window back to its original size and position prior to being maximized and also replaces the re  
		* @param animate Boolean Pass true to animate the restore. 
		* @returns Ext.window.Window this 
		*/
		restore?( animate?:boolean ): Ext.window.IWindow;

		/** [Method] A shortcut method for toggling between maximize and restore based on the current maximized state of the window  
		* @returns Ext.window.Window this 
		*/
		toggleMaximize?(): Ext.window.IWindow;

	}

}

declare module Ext {
	export interface IWindowManager extends Ext.IZIndexManager {
	}
	export class WindowManager {
		/** [Property] (Boolean) */
		static isConfiguring: boolean;

		/** [Property] (Boolean) */
		static isFirstInstance: boolean;

		/** [Property] (Boolean) */
		static isInstance: boolean;

		/** [Property] (Ext.Class) */
		static self: Ext.IClass;

		/** [Method] Brings the specified Component to the front of any other active Components in this ZIndexManager  
		* @param comp String/Object The id of the Component or a Ext.Component instance. 
		* @param preventFocus Boolean Pass true to prevent the component being focused when moved to front. 
		* @returns Boolean True if the component was brought to the front, else false if it was already in front, or another component remains at the front due to configuration (eg Ext.util.Floating.alwaysOnTop, or if the component was not found. 
		*/
		static bringToFront( comp?:any, preventFocus?:boolean ): boolean;

		/** [Method] Call the original method that was previously overridden with override Ext define My Cat  constructor functi  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callOverridden(arguments) 
		* @returns Object Returns the result of calling the overridden method 
		*/
		static callOverridden( args?:any ): any;

		/** [Method] Call the parent method of the current method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callParent(arguments) 
		* @returns Object Returns the result of calling the parent method 
		*/
		static callParent( args?:any ): any;

		/** [Method] This method is used by an override to call the superclass method but bypass any overridden method  
		* @param args Array/Arguments The arguments, either an array or the arguments object from the current method, for example: this.callSuper(arguments) 
		* @returns Object Returns the result of calling the superclass method 
		*/
		static callSuper( args?:any ): any;

		/** [Method] This method is called to cleanup an object and its resources  */
		static destroy(): void;

		/** [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa  
		* @param fn Function The function to execute for each item 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration. 
		*/
		static each( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa  
		* @param fn Function The function to execute for each item 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration. 
		*/
		static eachBottomUp( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa  
		* @param fn Function The function to execute for each item 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration. 
		*/
		static eachTopDown( fn?:any, scope?:any ): void;

		/** [Method] Gets a registered Component by id  
		* @param id String/Object The id of the Component or a Ext.Component instance 
		* @returns Ext.Component 
		*/
		static get( id?:any ): Ext.IComponent;

		/** [Method] Gets the currently active Component in this ZIndexManager  
		* @returns Ext.Component The active Component 
		*/
		static getActive(): Ext.IComponent;

		/** [Method] Returns zero or more Components in this ZIndexManager using the custom search function passed to this method  
		* @param fn Function The search function 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Component being tested. That gets passed to the function if not specified. 
		* @returns Array An array of zero or more matching floating components. 
		*/
		static getBy( fn?:any, scope?:any ): any[];

		/** [Method] Returns a specified config property value  
		* @param name String The name of the config property to get. 
		* @param peek Boolean true to peek at the raw value without calling the getter. 
		* @returns Object The config property value. 
		*/
		static getConfig( name?:string, peek?:boolean ): any;

		/** [Method] Returns the initial configuration passed to constructor when instantiating this class  
		* @param name String Name of the config option to return. 
		* @returns Object/Mixed The full config object or a single config value when name parameter specified. 
		*/
		static getInitialConfig( name?:string ): any;

		/** [Method] Hides all Components managed by this ZIndexManager  */
		static hideAll(): void;

		/** [Method] Initialize configuration for this class  
		* @param config Object 
		* @returns Ext.Base this 
		*/
		static initConfig( config?:any ): Ext.IBase;

		/** [Method] Registers a floating Ext Component with this ZIndexManager  
		* @param comp Ext.Component The Component to register. 
		*/
		static register( comp?:Ext.IComponent ): void;

		/** [Method] Sends the specified Component to the back of other active Components in this ZIndexManager  
		* @param comp String/Object The id of the Component or a Ext.Component instance 
		* @returns Ext.Component The Component 
		*/
		static sendToBack( comp?:any ): Ext.IComponent;

		/** [Method] Sets a single multiple configuration options  
		* @param name String/Object The name of the property to set, or a set of key value pairs to set. 
		* @param value Object The value to set for the name parameter. 
		* @returns Ext.Base this 
		*/
		static setConfig( name?:any, value?:any ): Ext.IBase;

		/** [Method] Get the reference to the class from which this object was instantiated  
		* @returns Ext.Class 
		*/
		static statics(): Ext.IClass;

		/** [Method] Unregisters a Ext Component from this ZIndexManager  
		* @param comp Ext.Component The Component to unregister. 
		*/
		static unregister( comp?:Ext.IComponent ): void;

	}

}

declare module Ext {
	export interface IXTemplate extends Ext.ITemplate {
		/** [Config Option] (String/Array) */
		definitions?: any;
		/** [Config Option] (Boolean) */
		strict?: boolean;
		/** [Method] Returns an HTML fragment of this template with the specified values applied  
		* @param values Object 
		* @param parent Object 
		* @returns String The HTML fragment 
		*/
		apply?( values?:any, parent?:any ): string;

		/** [Method] Appends the result of this template to the provided output array  
		* @param values Object 
		* @param out Object 
		* @param parent Object 
		* @returns Array The given out array. 
		*/
		applyOut?( values?:any, out?:any, parent?:any ): any[];

		/** [Method] Does nothing  
		* @returns Ext.XTemplate this 
		*/
		compile?(): Ext.IXTemplate;

	}
	export class XTemplate {
		/** [Method] Add methods  properties to the prototype of this class  
		* @param members Object The members to add to this class. 
		* @param isStatic Boolean Pass true if the members are static. 
		* @param privacy Boolean Pass true if the members are private. This only has meaning in debug mode and only for methods. 
		*/
		static addMembers( members?:any, isStatic?:boolean, privacy?:boolean ): void;

		/** [Method] Add  override static properties of this class  
		* @param members Object 
		* @returns Ext.Base this 
		*/
		static addStatics( members?:any ): Ext.IBase;

		/** [Method]  
		* @param args Object 
		*/
		static callParent( args?:any ): void;

		/** [Method]  
		* @param args Object 
		*/
		static callSuper( args?:any ): void;

		/** [Method] Create a new instance of this Class  
		* @returns Object the created instance. 
		*/
		static create(): any;

		/** [Method] Create aliases for existing prototype methods  
		* @param alias String/Object The new method name, or an object to set multiple aliases. See flexSetter 
		* @param origin String/Object The original method name 
		*/
		static createAlias( alias?:any, origin?:any ): void;

		/** [Method] Creates a template from the passed element s value display none textarea preferred or innerHTML  
		* @param el String/HTMLElement A DOM element or its id 
		* @param config Object Config object 
		* @returns Ext.Template The created template 
		*/
		static from( el?:any, config?:any ): Ext.ITemplate;

		/** [Method] Get the current class name in string format  
		* @returns String className 
		*/
		static getName(): string;

		/** [Method] Gets an XTemplate from an object an instance of an Ext define d class 
		* @param instance Object The object from which to get the XTemplate (must be an instance of an Ext.define'd class). 
		* @param name String The name of the property by which to get the XTemplate. 
		* @returns Ext.XTemplate The XTemplate instance or null if not found. 
		*/
		static getTpl( instance?:any, name?:string ): Ext.IXTemplate;

		/** [Method] Override members of this class  
		* @param members Object The properties to add to this class. This should be specified as an object literal containing one or more properties. 
		* @returns Ext.Base this class 
		*/
		static override( members?:any ): Ext.IBase;

	}

}

declare module Ext {
	export interface IZIndexManager extends Ext.IBase {
		/** [Method] Brings the specified Component to the front of any other active Components in this ZIndexManager  
		* @param comp String/Object The id of the Component or a Ext.Component instance. 
		* @param preventFocus Boolean Pass true to prevent the component being focused when moved to front. 
		* @returns Boolean True if the component was brought to the front, else false if it was already in front, or another component remains at the front due to configuration (eg Ext.util.Floating.alwaysOnTop, or if the component was not found. 
		*/
		bringToFront?( comp?:any, preventFocus?:boolean ): boolean;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa  
		* @param fn Function The function to execute for each item 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration. 
		*/
		each?( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa  
		* @param fn Function The function to execute for each item 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration. 
		*/
		eachBottomUp?( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa  
		* @param fn Function The function to execute for each item 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration. 
		*/
		eachTopDown?( fn?:any, scope?:any ): void;

		/** [Method] Gets a registered Component by id  
		* @param id String/Object The id of the Component or a Ext.Component instance 
		* @returns Ext.Component 
		*/
		get?( id?:any ): Ext.IComponent;

		/** [Method] Gets the currently active Component in this ZIndexManager  
		* @returns Ext.Component The active Component 
		*/
		getActive?(): Ext.IComponent;

		/** [Method] Returns zero or more Components in this ZIndexManager using the custom search function passed to this method  
		* @param fn Function The search function 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Component being tested. That gets passed to the function if not specified. 
		* @returns Array An array of zero or more matching floating components. 
		*/
		getBy?( fn?:any, scope?:any ): any[];

		/** [Method] Hides all Components managed by this ZIndexManager  */
		hideAll?(): void;

		/** [Method] Registers a floating Ext Component with this ZIndexManager  
		* @param comp Ext.Component The Component to register. 
		*/
		register?( comp?:Ext.IComponent ): void;

		/** [Method] Sends the specified Component to the back of other active Components in this ZIndexManager  
		* @param comp String/Object The id of the Component or a Ext.Component instance 
		* @returns Ext.Component The Component 
		*/
		sendToBack?( comp?:any ): Ext.IComponent;

		/** [Method] Unregisters a Ext Component from this ZIndexManager  
		* @param comp Ext.Component The Component to unregister. 
		*/
		unregister?( comp?:Ext.IComponent ): void;

	}

}

declare module Ext {
	export interface IWindowGroup extends Ext.IBase {
		/** [Method] Brings the specified Component to the front of any other active Components in this ZIndexManager  
		* @param comp String/Object The id of the Component or a Ext.Component instance. 
		* @param preventFocus Boolean Pass true to prevent the component being focused when moved to front. 
		* @returns Boolean True if the component was brought to the front, else false if it was already in front, or another component remains at the front due to configuration (eg Ext.util.Floating.alwaysOnTop, or if the component was not found. 
		*/
		bringToFront?( comp?:any, preventFocus?:boolean ): boolean;

		/** [Method] This method is called to cleanup an object and its resources  */
		destroy?(): void;

		/** [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa  
		* @param fn Function The function to execute for each item 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration. 
		*/
		each?( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa  
		* @param fn Function The function to execute for each item 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration. 
		*/
		eachBottomUp?( fn?:any, scope?:any ): void;

		/** [Method] Executes the specified function once for every Component in this ZIndexManager passing each Component as the only pa  
		* @param fn Function The function to execute for each item 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the current Component in the iteration. 
		*/
		eachTopDown?( fn?:any, scope?:any ): void;

		/** [Method] Gets a registered Component by id  
		* @param id String/Object The id of the Component or a Ext.Component instance 
		* @returns Ext.Component 
		*/
		get?( id?:any ): Ext.IComponent;

		/** [Method] Gets the currently active Component in this ZIndexManager  
		* @returns Ext.Component The active Component 
		*/
		getActive?(): Ext.IComponent;

		/** [Method] Returns zero or more Components in this ZIndexManager using the custom search function passed to this method  
		* @param fn Function The search function 
		* @param scope Object The scope (this reference) in which the function is executed. Defaults to the Component being tested. That gets passed to the function if not specified. 
		* @returns Array An array of zero or more matching floating components. 
		*/
		getBy?( fn?:any, scope?:any ): any[];

		/** [Method] Hides all Components managed by this ZIndexManager  */
		hideAll?(): void;

		/** [Method] Registers a floating Ext Component with this ZIndexManager  
		* @param comp Ext.Component The Component to register. 
		*/
		register?( comp?:Ext.IComponent ): void;

		/** [Method] Sends the specified Component to the back of other active Components in this ZIndexManager  
		* @param comp String/Object The id of the Component or a Ext.Component instance 
		* @returns Ext.Component The Component 
		*/
		sendToBack?( comp?:any ): Ext.IComponent;

		/** [Method] Unregisters a Ext Component from this ZIndexManager  
		* @param comp Ext.Component The Component to unregister. 
		*/
		unregister?( comp?:Ext.IComponent ): void;

	}

}

