// Config for ExtJS 5.1.1
// Forked Project: http://www.sencha.com/products/extjs/
// Generated by Jeremie Turbet @IPBS - Toulouse
// 2016-f√©vr.-22 12:50:44 PM

declare module TypExt {
	 interface IAbstractManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IActionConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Function) */
		handler?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (String) */
		itemId?: string;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		text?: string;
	}

}

declare module TypExt {
	 interface IAjaxConfig extends TypExt.data.IConnectionConfig {
	}

}

declare module TypExt {
	 interface IAnimationQueueConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.app {
	 interface IApplicationConfig extends TypExt.app.IControllerConfig {
		/** [Config Option] (String) */
		appFolder?: string;
		/** [Config Option] (String) */
		appProperty?: string;
		/** [Config Option] (Boolean/String) */
		autoCreateViewport?: any;
		/** [Config Option] (String/String[]) */
		controllers?: any;
		/** [Config Option] (String) */
		defaultToken?: string;
		/** [Config Option] (Boolean) */
		enableQuickTips?: boolean;
		/** [Config Option] (String) */
		extend?: string;
		/** [Config Option] (String) */
		glyphFontFamily?: string;
		/** [Config Option] (String/Object) */
		mainView?: any;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (String/String[]) */
		namespaces?: any;
		/** [Config Option] (Object) */
		paths?: any;
		/** [Config Option] (String/String[]) */
		profiles?: any;
		/** [Config Option] (Object) */
		scope?: any;
	}

}

declare module TypExt.app {
	 interface IBaseControllerConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (Object) */
		control?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (Object) */
		listen?: any;
		/** [Config Option] (Object) */
		routes?: any;
	}

}

declare module TypExt.app.bind {
	 interface IAbstractStubConfig extends TypExt.util.ISchedulableConfig {
	}

}

declare module TypExt.app.bind {
	 interface IBaseBindingConfig extends TypExt.util.ISchedulableConfig {
		/** [Config Option] (Boolean) */
		single?: boolean;
	}

}

declare module TypExt.app.bind {
	 interface IBindingConfig extends TypExt.app.bind.IBaseBindingConfig {
		/** [Config Option] (Boolean) */
		deep?: boolean;
	}

}

declare module TypExt.app.bind {
	 interface IFormulaConfig extends TypExt.util.ISchedulableConfig {
		/** [Config Option] (Object) */
		bind?: any;
		/** [Config Option] (Function) */
		get?: any;
		/** [Config Option] (Function) */
		set?: any;
		/** [Config Option] (Boolean) */
		single?: boolean;
	}

}

declare module TypExt.app.bind {
	 interface ILinkStubConfig extends TypExt.app.bind.IStubConfig {
	}

}

declare module TypExt.app.bind {
	 interface IMultiConfig extends TypExt.app.bind.IBaseBindingConfig {
	}

}

declare module TypExt.app.bind {
	 interface IRootStubConfig extends TypExt.app.bind.IAbstractStubConfig {
	}

}

declare module TypExt.app.bind {
	 interface IStubConfig extends TypExt.app.bind.IAbstractStubConfig {
	}

}

declare module TypExt.app.bind {
	 interface ITemplateConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.app.bind {
	 interface ITemplateBindingConfig extends TypExt.app.bind.IBaseBindingConfig {
	}

}

declare module TypExt.app.bindinspector {
	 interface IEnvironmentConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.app.bindinspector {
	 interface IUtilConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.app {
	 interface IControllerConfig extends TypExt.app.IBaseControllerConfig {
		/** [Config Option] (Ext.app.Application) */
		application?: Ext.app.IApplication;
		/** [Config Option] (String/String[]) */
		models?: any;
		/** [Config Option] (Object[]) */
		refs?: any[];
		/** [Config Option] (String/String[]) */
		stores?: any;
		/** [Config Option] (String/String[]) */
		views?: any;
	}

}

declare module TypExt.app.domain {
	 interface IComponentConfig extends TypExt.app.IEventDomainConfig {
	}

}

declare module TypExt.app.domain {
	 interface IControllerConfig extends TypExt.app.IEventDomainConfig {
	}

}

declare module TypExt.app.domain {
	 interface IDirectConfig extends TypExt.app.IEventDomainConfig {
	}

}

declare module TypExt.app.domain {
	 interface IGlobalConfig extends TypExt.app.IEventDomainConfig {
	}

}

declare module TypExt.app.domain {
	 interface IStoreConfig extends TypExt.app.IEventDomainConfig {
	}

}

declare module TypExt.app.domain {
	 interface IViewConfig extends TypExt.app.IEventDomainConfig {
	}

}

declare module TypExt.app {
	 interface IEventBusConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.app {
	 interface IEventDomainConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		idProperty?: string;
	}

}

declare module TypExt.app {
	 interface IProfileConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (Ext.app.Application) */
		application?: Ext.app.IApplication;
		/** [Config Option] (Array) */
		controllers?: any[];
		/** [Config Option] (String) */
		mainView?: string;
		/** [Config Option] (Array) */
		models?: any[];
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (String) */
		namespace?: string;
		/** [Config Option] (Array) */
		stores?: any[];
		/** [Config Option] (Array) */
		views?: any[];
	}

}

declare module TypExt.app.route {
	 interface IQueueConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.app.route {
	 interface IRouteConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		action?: string;
		/** [Config Option] (Boolean) */
		allowInactive?: boolean;
		/** [Config Option] (Function) */
		before?: any;
		/** [Config Option] (Boolean) */
		caseInsensitive?: boolean;
		/** [Config Option] (Object) */
		conditions?: any;
		/** [Config Option] (String) */
		controller?: string;
		/** [Config Option] (String) */
		url?: string;
	}

}

declare module TypExt.app.route {
	 interface IRouterConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.app {
	 interface IUtilConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.app {
	 interface IViewControllerConfig extends TypExt.app.IBaseControllerConfig, TypExt.mixin.IFactoryableConfig {
	}

}

declare module TypExt.app {
	 interface IViewModelConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig,TypExt.mixin.IIdentifiableConfig {
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (Object) */
		formulas?: any;
		/** [Config Option] (Object) */
		links?: any;
		/** [Config Option] (Ext.app.ViewModel) */
		parent?: Ext.app.IViewModel;
		/** [Config Option] (String/Ext.data.schema.Schema) */
		schema?: any;
		/** [Config Option] (Ext.data.Session) */
		session?: Ext.data.ISession;
		/** [Config Option] (Object) */
		stores?: any;
		/** [Config Option] (Ext.container.Container) */
		view?: Ext.container.IContainer;
	}

}

declare module TypExt {
	 interface IArrayConfig {
	}

}

declare module TypExt {
	 interface IAssertConfig {
	}

}

declare module TypExt {
	 interface IBaseConfig extends TypExt.IClassConfig {
	}

}

declare module TypExt {
	 interface IBrowserConfig extends TypExt.env.IBrowserConfig {
	}

}

declare module TypExt.button {
	 interface IButtonConfig extends TypExt.IComponentConfig, TypExt.mixin.IQueryableConfig {
		/** [Config Option] (Boolean) */
		allowDepress?: boolean;
		/** [Config Option] (String) */
		arrowAlign?: string;
		/** [Config Option] (String) */
		arrowCls?: string;
		/** [Config Option] (Boolean) */
		arrowVisible?: boolean;
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		clickEvent?: string;
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		destroyMenu?: boolean;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Boolean) */
		enableToggle?: boolean;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (Boolean) */
		handleMouseEvents?: boolean;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		href?: string;
		/** [Config Option] (String) */
		hrefTarget?: string;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconAlign?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (Ext.menu.Menu/String/Object) */
		menu?: any;
		/** [Config Option] (String) */
		menuAlign?: string;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (String) */
		overCls?: string;
		/** [Config Option] (String) */
		overflowText?: string;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (Boolean) */
		pressed?: boolean;
		/** [Config Option] (Boolean) */
		preventDefault?: boolean;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/Object) */
		repeat?: any;
		/** [Config Option] ("small"/"medium"/"large") */
		scale?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		showEmptyMenu?: boolean;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		textAlign?: string;
		/** [Config Option] (String) */
		toggleGroup?: string;
		/** [Config Option] (Function/String) */
		toggleHandler?: any;
		/** [Config Option] (String/Object) */
		tooltip?: any;
		/** [Config Option] (String) */
		tooltipType?: string;
		/** [Config Option] (String/Number) */
		value?: any;
	}

}

declare module TypExt {
	 interface IButtonConfig extends TypExt.IComponentConfig, TypExt.mixin.IQueryableConfig {
		/** [Config Option] (Boolean) */
		allowDepress?: boolean;
		/** [Config Option] (String) */
		arrowAlign?: string;
		/** [Config Option] (String) */
		arrowCls?: string;
		/** [Config Option] (Boolean) */
		arrowVisible?: boolean;
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		clickEvent?: string;
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		destroyMenu?: boolean;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Boolean) */
		enableToggle?: boolean;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (Boolean) */
		handleMouseEvents?: boolean;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		href?: string;
		/** [Config Option] (String) */
		hrefTarget?: string;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconAlign?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (Ext.menu.Menu/String/Object) */
		menu?: any;
		/** [Config Option] (String) */
		menuAlign?: string;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (String) */
		overCls?: string;
		/** [Config Option] (String) */
		overflowText?: string;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (Boolean) */
		pressed?: boolean;
		/** [Config Option] (Boolean) */
		preventDefault?: boolean;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/Object) */
		repeat?: any;
		/** [Config Option] ("small"/"medium"/"large") */
		scale?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		showEmptyMenu?: boolean;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		textAlign?: string;
		/** [Config Option] (String) */
		toggleGroup?: string;
		/** [Config Option] (Function/String) */
		toggleHandler?: any;
		/** [Config Option] (String/Object) */
		tooltip?: any;
		/** [Config Option] (String) */
		tooltipType?: string;
		/** [Config Option] (String/Number) */
		value?: any;
	}

}

declare module TypExt.button {
	 interface ICycleConfig extends TypExt.button.ISplitConfig {
		/** [Config Option] (Function/String) */
		changeHandler?: any;
		/** [Config Option] (Number/String) */
		forceGlyph?: any;
		/** [Config Option] (String) */
		forceIcon?: string;
		/** [Config Option] (Object[]) */
		items?: any[];
		/** [Config Option] (String) */
		prependText?: string;
		/** [Config Option] (Boolean) */
		showText?: boolean;
	}

}

declare module TypExt {
	 interface ICycleButtonConfig extends TypExt.button.ISplitConfig {
		/** [Config Option] (Function/String) */
		changeHandler?: any;
		/** [Config Option] (Number/String) */
		forceGlyph?: any;
		/** [Config Option] (String) */
		forceIcon?: string;
		/** [Config Option] (Object[]) */
		items?: any[];
		/** [Config Option] (String) */
		prependText?: string;
		/** [Config Option] (Boolean) */
		showText?: boolean;
	}

}

declare module TypExt.button {
	 interface IManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IButtonToggleManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.button {
	 interface ISegmentedConfig extends TypExt.container.IContainerConfig {
		/** [Config Option] (Boolean) */
		allowDepress?: boolean;
		/** [Config Option] (Boolean) */
		allowMultiple?: boolean;
		/** [Config Option] (Boolean) */
		allowToggle?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		defaultUI?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (String/Number/String[]/Number[]) */
		value?: any;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module TypExt.button {
	 interface ISplitConfig extends TypExt.button.IButtonConfig {
		/** [Config Option] (Function/String) */
		arrowHandler?: any;
		/** [Config Option] (String) */
		arrowTooltip?: string;
	}

}

declare module TypExt {
	 interface ISplitButtonConfig extends TypExt.button.IButtonConfig {
		/** [Config Option] (Function/String) */
		arrowHandler?: any;
		/** [Config Option] (String) */
		arrowTooltip?: string;
	}

}

declare module TypExt.chart {
	 interface IAbstractChartConfig extends TypExt.draw.IContainerConfig {
		/** [Config Option] (Boolean/Object) */
		animation?: any;
		/** [Config Option] (Ext.chart.axis.Axis/Array/Object) */
		axes?: any;
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Array) */
		colors?: any[];
		/** [Config Option] (Object) */
		highlightItem?: any;
		/** [Config Option] (Object|Number|String) */
		insetPadding?: any;
		/** [Config Option] (Array) */
		interactions?: any[];
		/** [Config Option] (Ext.chart.Legend/Object) */
		legend?: any;
		/** [Config Option] (Ext.chart.series.Series/Array) */
		series?: any;
		/** [Config Option] (Ext.data.Store/String/Object) */
		store?: any;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (String) */
		theme?: string;
	}

}

declare module TypExt.chart.axis {
	 interface IAxisConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (Boolean) */
		adjustByMajorUnit?: boolean;
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Ext.chart.AbstractChart) */
		chart?: Ext.chart.IAbstractChart;
		/** [Config Option] (Array) */
		fields?: any[];
		/** [Config Option] (Number|Object) */
		floating?: any;
		/** [Config Option] (Object) */
		grid?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Object) */
		label?: any;
		/** [Config Option] (Boolean) */
		labelInSpan?: boolean;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Array|Object) */
		limits?: any;
		/** [Config Option] (Ext.chart.axis.Axis|String|Number) */
		linkedTo?: any;
		/** [Config Option] (Number) */
		majorTickSteps?: number;
		/** [Config Option] (Number) */
		margin?: number;
		/** [Config Option] (Number) */
		maxZoom?: number;
		/** [Config Option] (Number) */
		maximum?: number;
		/** [Config Option] (Number) */
		minZoom?: number;
		/** [Config Option] (Number) */
		minimum?: number;
		/** [Config Option] (Number) */
		minorTickSteps?: number;
		/** [Config Option] (Boolean) */
		needHighPrecision?: boolean;
		/** [Config Option] (String) */
		position?: string;
		/** [Config Option] (Boolean) */
		reconcileRange?: boolean;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (String|Object) */
		title?: any;
		/** [Config Option] (Number) */
		titleMargin?: number;
		/** [Config Option] (Array) */
		visibleRange?: any[];
	}

}

declare module TypExt.chart.axis {
	 interface IAxis3DConfig extends TypExt.chart.axis.IAxisConfig {
		/** [Config Option] (String) */
		position?: string;
	}

}

declare module TypExt.chart.axis {
	 interface ICategoryConfig extends TypExt.chart.axis.IAxisConfig {
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
	}

}

declare module TypExt.chart.axis {
	 interface ICategory3DConfig extends TypExt.chart.axis.IAxis3DConfig {
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
	}

}

declare module TypExt.chart.axis.layout {
	 interface ICombineDuplicateConfig extends TypExt.chart.axis.layout.IDiscreteConfig {
	}

}

declare module TypExt.chart.axis.layout {
	 interface IContinuousConfig extends TypExt.chart.axis.layout.ILayoutConfig {
	}

}

declare module TypExt.chart.axis.layout {
	 interface IDiscreteConfig extends TypExt.chart.axis.layout.ILayoutConfig {
	}

}

declare module TypExt.chart.axis.layout {
	 interface ILayoutConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (Ext.chart.axis.Axis) */
		axis?: Ext.chart.axis.IAxis;
	}

}

declare module TypExt.chart.axis {
	 interface INumericConfig extends TypExt.chart.axis.IAxisConfig {
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
	}

}

declare module TypExt.chart.axis {
	 interface INumeric3DConfig extends TypExt.chart.axis.IAxis3DConfig {
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
	}

}

declare module TypExt.chart.axis.segmenter {
	 interface INamesConfig extends TypExt.chart.axis.segmenter.ISegmenterConfig {
	}

}

declare module TypExt.chart.axis.segmenter {
	 interface INumericConfig extends TypExt.chart.axis.segmenter.ISegmenterConfig {
	}

}

declare module TypExt.chart.axis.segmenter {
	 interface ISegmenterConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Ext.chart.axis.Axis) */
		axis?: Ext.chart.axis.IAxis;
	}

}

declare module TypExt.chart.axis.segmenter {
	 interface ITimeConfig extends TypExt.chart.axis.segmenter.ISegmenterConfig {
		/** [Config Option] (Object) */
		step?: any;
	}

}

declare module TypExt.chart.axis.sprite {
	 interface IAxisConfig extends TypExt.draw.sprite.ISpriteConfig, TypExt.chart.IMarkerHolderConfig {
		/** [Config Option] (Ext.chart.axis.Axis) */
		axis?: Ext.chart.axis.IAxis;
		/** [Config Option] (Boolean) */
		axisLine?: boolean;
		/** [Config Option] (Number) */
		baseRotation?: number;
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		dataMax?: number;
		/** [Config Option] (Number) */
		dataMin?: number;
		/** [Config Option] (Boolean) */
		enlargeEstStepSizeByText?: boolean;
		/** [Config Option] (Boolean) */
		grid?: boolean;
		/** [Config Option] (Object) */
		label?: any;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Number) */
		length?: number;
		/** [Config Option] (Number) */
		majorTickSize?: number;
		/** [Config Option] (Boolean) */
		majorTicks?: boolean;
		/** [Config Option] (Number) */
		max?: number;
		/** [Config Option] (Number) */
		min?: number;
		/** [Config Option] (Number) */
		minStepSize?: number;
		/** [Config Option] (Number) */
		minorTickSize?: number;
		/** [Config Option] (Boolean) */
		minorTricks?: boolean;
		/** [Config Option] (String) */
		position?: string;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Number) */
		textPadding?: number;
		/** [Config Option] (Number) */
		visibleMax?: number;
		/** [Config Option] (Number) */
		visibleMin?: number;
	}

}

declare module TypExt.chart.axis.sprite {
	 interface IAxis3DConfig extends TypExt.chart.axis.sprite.IAxisConfig {
	}

}

declare module TypExt.chart.axis {
	 interface ITimeConfig extends TypExt.chart.axis.INumericConfig {
		/** [Config Option] (Boolean) */
		calculateByLabelSize?: boolean;
		/** [Config Option] (String/Boolean) */
		dateFormat?: any;
		/** [Config Option] (Date) */
		fromDate?: any;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Array) */
		step?: any[];
		/** [Config Option] (Date) */
		toDate?: any;
	}

}

declare module TypExt.chart.axis {
	 interface ITime3DConfig extends TypExt.chart.axis.INumeric3DConfig {
		/** [Config Option] (Boolean) */
		calculateByLabelSize?: boolean;
		/** [Config Option] (String/Boolean) */
		dateFormat?: any;
		/** [Config Option] (Date) */
		fromDate?: any;
		/** [Config Option] (Object|Ext.chart.axis.layout.Layout) */
		layout?: any;
		/** [Config Option] (Object|Ext.chart.axis.segmenter.Segmenter) */
		segmenter?: any;
		/** [Config Option] (Array) */
		step?: any[];
		/** [Config Option] (Date) */
		toDate?: any;
	}

}

declare module TypExt.chart {
	 interface ICartesianChartConfig extends TypExt.chart.IAbstractChartConfig {
		/** [Config Option] (Boolean) */
		flipXY?: boolean;
		/** [Config Option] (Object) */
		innerPadding?: any;
	}

}

declare module TypExt.chart {
	 interface IChartConfig extends TypExt.chart.IAbstractChartConfig {
		/** [Config Option] (Boolean) */
		flipXY?: boolean;
		/** [Config Option] (Object) */
		innerPadding?: any;
	}

}

declare module TypExt.chart.grid {
	 interface ICircularGridConfig extends TypExt.draw.sprite.ICircleConfig {
	}

}

declare module TypExt.chart.grid {
	 interface IHorizontalGridConfig extends TypExt.draw.sprite.ISpriteConfig {
	}

}

declare module TypExt.chart.grid {
	 interface IHorizontalGrid3DConfig extends TypExt.chart.grid.IHorizontalGridConfig {
	}

}

declare module TypExt.chart.grid {
	 interface IRadialGridConfig extends TypExt.draw.sprite.IPathConfig {
	}

}

declare module TypExt.chart.grid {
	 interface IVerticalGridConfig extends TypExt.draw.sprite.ISpriteConfig {
	}

}

declare module TypExt.chart.grid {
	 interface IVerticalGrid3DConfig extends TypExt.chart.grid.IVerticalGridConfig {
	}

}

declare module TypExt.chart.interactions {
	 interface IAbstractConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (Ext.chart.AbstractChart) */
		chart?: Ext.chart.IAbstractChart;
		/** [Config Option] (Boolean) */
		enabled?: boolean;
	}

}

declare module TypExt.chart.interactions {
	 interface ICrosshairConfig extends TypExt.chart.interactions.IAbstractConfig {
		/** [Config Option] (Object) */
		axes?: any;
		/** [Config Option] (String) */
		gesture?: string;
		/** [Config Option] (Object) */
		lines?: any;
	}

}

declare module TypExt.chart.interactions {
	 interface ICrossZoomConfig extends TypExt.chart.interactions.IAbstractConfig {
		/** [Config Option] (Object/Array) */
		axes?: any;
		/** [Config Option] (Object) */
		gestures?: any;
	}

}

declare module TypExt.chart.interactions {
	 interface IItemHighlightConfig extends TypExt.chart.interactions.IAbstractConfig {
		/** [Config Option] (Object) */
		gestures?: any;
	}

}

declare module TypExt.chart.interactions {
	 interface IItemInfoConfig extends TypExt.chart.interactions.IAbstractConfig {
		/** [Config Option] (Object) */
		extjsGestures?: any;
	}

}

declare module TypExt.chart.interactions {
	 interface IPanZoomConfig extends TypExt.chart.interactions.IAbstractConfig {
		/** [Config Option] (Object/Array) */
		axes?: any;
		/** [Config Option] (Object) */
		overflowArrowOptions?: any;
		/** [Config Option] (Boolean) */
		showOverflowArrows?: boolean;
		/** [Config Option] (Boolean) */
		zoomOnPanGesture?: boolean;
	}

}

declare module TypExt.chart.interactions {
	 interface IRotateConfig extends TypExt.chart.interactions.IAbstractConfig {
		/** [Config Option] (Object) */
		gestures?: any;
	}

}

declare module TypExt.chart.interactions {
	 interface IRotatePie3DConfig extends TypExt.chart.interactions.IRotateConfig {
	}

}

declare module TypExt.chart.label {
	 interface ICalloutConfig extends TypExt.draw.modifier.IModifierConfig {
	}

}

declare module TypExt.chart.label {
	 interface ILabelConfig extends TypExt.draw.sprite.ITextConfig {
		/** [Config Option] (Boolean|Object) */
		calloutLine?: any;
		/** [Config Option] (Object) */
		fx?: any;
	}

}

declare module TypExt.chart {
	 interface ILegendConfig extends TypExt.chart.ILegendBaseConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		disableSelection?: boolean;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Array) */
		rect?: any[];
		/** [Config Option] (Boolean) */
		toggleable?: boolean;
	}

}

declare module TypExt.chart {
	 interface ILegendBaseConfig extends TypExt.view.IViewConfig {
		/** [Config Option] (String) */
		itemSelector?: string;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		tpl?: any;
	}

}

declare module TypExt.chart {
	 interface IMarkerHolderConfig extends TypExt.IMixinConfig {
	}

}

declare module TypExt.chart {
	 interface IMarkersConfig extends TypExt.draw.sprite.IInstancingConfig {
	}

}

declare module TypExt.chart.plugin {
	 interface IItemEventsConfig extends TypExt.plugin.IAbstractConfig {
		/** [Config Option] (Boolean) */
		moveEvents?: boolean;
	}

}

declare module TypExt.chart {
	 interface IPolarChartConfig extends TypExt.chart.IAbstractChartConfig {
		/** [Config Option] (Number) */
		innerPadding?: number;
		/** [Config Option] (Number) */
		radius?: number;
	}

}

declare module TypExt.chart.series {
	 interface IAreaConfig extends TypExt.chart.series.IStackedCartesianConfig {
		/** [Config Option] (Boolean) */
		splitStacks?: boolean;
	}

}

declare module TypExt.chart.series {
	 interface IBarConfig extends TypExt.chart.series.IStackedCartesianConfig {
	}

}

declare module TypExt.chart.series {
	 interface IBar3DConfig extends TypExt.chart.series.IBarConfig {
		/** [Config Option] (Object) */
		highlightCfg?: any;
	}

}

declare module TypExt.chart.series {
	 interface ICandleStickConfig extends TypExt.chart.series.ICartesianConfig {
		/** [Config Option] (String) */
		closeField?: string;
		/** [Config Option] (String) */
		highField?: string;
		/** [Config Option] (String) */
		lowField?: string;
		/** [Config Option] (String) */
		openField?: string;
	}

}

declare module TypExt.chart.series {
	 interface ICartesianConfig extends TypExt.chart.series.ISeriesConfig {
		/** [Config Option] (Ext.chart.axis.Axis|Number|String) */
		xAxis?: any;
		/** [Config Option] (String) */
		xField?: string;
		/** [Config Option] (Ext.chart.axis.Axis|Number|String) */
		yAxis?: any;
		/** [Config Option] (String|String[]) */
		yField?: any;
	}

}

declare module TypExt.chart.series {
	 interface IGaugeConfig extends TypExt.chart.series.ISeriesConfig {
		/** [Config Option] (String) */
		angleField?: string;
		/** [Config Option] (Array) */
		colors?: any[];
		/** [Config Option] (Number) */
		donut?: number;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Number) */
		maximum?: number;
		/** [Config Option] (Number) */
		minimum?: number;
		/** [Config Option] (Boolean) */
		needle?: boolean;
		/** [Config Option] (Number) */
		needleLength?: number;
		/** [Config Option] (Number) */
		needleLengthRatio?: number;
		/** [Config Option] (Number) */
		needleWidth?: number;
		/** [Config Option] (Array) */
		sectors?: any[];
		/** [Config Option] (Boolean) */
		showInLegend?: boolean;
		/** [Config Option] (Number) */
		totalAngle?: number;
		/** [Config Option] (Number) */
		value?: number;
		/** [Config Option] (Boolean) */
		wholeDisk?: boolean;
	}

}

declare module TypExt.chart.series {
	 interface ILineConfig extends TypExt.chart.series.ICartesianConfig {
		/** [Config Option] (Boolean) */
		fill?: boolean;
		/** [Config Option] (Number) */
		selectionTolerance?: number;
		/** [Config Option] (Boolean/Number) */
		smooth?: any;
		/** [Config Option] (Boolean) */
		step?: boolean;
		/** [Config Option] (Object) */
		style?: any;
	}

}

declare module TypExt.chart.series {
	 interface IPieConfig extends TypExt.chart.series.IPolarConfig {
		/** [Config Option] (Number) */
		Allows?: number;
		/** [Config Option] (Boolean) */
		clockwise?: boolean;
		/** [Config Option] (Number) */
		donut?: number;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Array) */
		hidden?: any[];
		/** [Config Option] (Object) */
		highlightCfg?: any;
		/** [Config Option] (String) */
		labelField?: string;
		/** [Config Option] (String) */
		lengthField?: string;
		/** [Config Option] (Number) */
		rotation?: number;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (Number) */
		totalAngle?: number;
	}

}

declare module TypExt.chart.series {
	 interface IPie3DConfig extends TypExt.chart.series.IPolarConfig {
		/** [Config Option] (Boolean/Number) */
		donut?: any;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Number) */
		rotation?: number;
	}

}

declare module TypExt.chart.series {
	 interface IPolarConfig extends TypExt.chart.series.ISeriesConfig {
		/** [Config Option] (String) */
		angleField?: string;
		/** [Config Option] (Array) */
		center?: any[];
		/** [Config Option] (String) */
		lengthField?: string;
		/** [Config Option] (Number) */
		offsetX?: number;
		/** [Config Option] (Number) */
		offsetY?: number;
		/** [Config Option] (Number) */
		radius?: number;
		/** [Config Option] (Number) */
		rotation?: number;
		/** [Config Option] (Boolean) */
		showInLegend?: boolean;
		/** [Config Option] (String) */
		xField?: string;
		/** [Config Option] (String) */
		yField?: string;
	}

}

declare module TypExt.chart.series {
	 interface IRadarConfig extends TypExt.chart.series.IPolarConfig {
		/** [Config Option] (Object) */
		style?: any;
	}

}

declare module TypExt.chart.series {
	 interface IScatterConfig extends TypExt.chart.series.ICartesianConfig {
		/** [Config Option] (Object) */
		itemInstancing?: any;
	}

}

declare module TypExt.chart.series {
	 interface ISeriesConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig,TypExt.mixin.IBindableConfig {
		/** [Config Option] (Object) */
		animation?: any;
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Array) */
		colors?: any[];
		/** [Config Option] (Boolean|Array) */
		hidden?: any;
		/** [Config Option] (Boolean/Object) */
		highlight?: any;
		/** [Config Option] (Object) */
		highlightCfg?: any;
		/** [Config Option] (Object) */
		highlightItem?: any;
		/** [Config Option] (Object) */
		itemInstancing?: any;
		/** [Config Option] (Object) */
		label?: any;
		/** [Config Option] (String|String[]) */
		labelField?: any;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Object|Boolean) */
		marker?: any;
		/** [Config Option] (Object) */
		markerSubStyle?: any;
		/** [Config Option] (Object) */
		overlaySurface?: any;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Boolean) */
		showInLegend?: boolean;
		/** [Config Option] (Boolean) */
		showMarkers?: boolean;
		/** [Config Option] (Object) */
		store?: any;
		/** [Config Option] (Object) */
		style?: any;
		/** [Config Option] (Object) */
		subStyle?: any;
		/** [Config Option] (Object) */
		surface?: any;
		/** [Config Option] (String|String[]) */
		title?: any;
		/** [Config Option] (Object) */
		tooltip?: any;
		/** [Config Option] (Boolean|Number) */
		useDarkerStrokeColor?: any;
	}

}

declare module TypExt.chart.series.sprite {
	 interface IAggregativeConfig extends TypExt.chart.series.sprite.ICartesianConfig {
		/** [Config Option] (Object) */
		dataClose?: any;
		/** [Config Option] (Object) */
		dataHigh?: any;
		/** [Config Option] (Object) */
		dataLow?: any;
		/** [Config Option] (Object) */
		dataOpen?: any;
	}

}

declare module TypExt.chart.series.sprite {
	 interface IAreaConfig extends TypExt.chart.series.sprite.IStackedCartesianConfig {
		/** [Config Option] (Boolean) */
		step?: boolean;
	}

}

declare module TypExt.chart.series.sprite {
	 interface IBarConfig extends TypExt.chart.series.sprite.IStackedCartesianConfig {
		/** [Config Option] (Number) */
		inGroupGapWidth?: number;
		/** [Config Option] (Number) */
		maxBarWidth?: number;
		/** [Config Option] (Number) */
		minBarWidth?: number;
		/** [Config Option] (Number) */
		minGapWidth?: number;
		/** [Config Option] (Number) */
		radius?: number;
	}

}

declare module TypExt.chart.series.sprite {
	 interface IBar3DConfig extends TypExt.chart.series.sprite.IBarConfig {
		/** [Config Option] (Number) */
		brightnessFactor?: number;
		/** [Config Option] (Number) */
		saturationFactor?: number;
	}

}

declare module TypExt.chart.series.sprite {
	 interface IBoxConfig extends TypExt.draw.sprite.ISpriteConfig {
		/** [Config Option] (Number) */
		brightnessFactor?: number;
		/** [Config Option] (Number) */
		depth?: number;
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (String) */
		orientation?: string;
		/** [Config Option] (Number) */
		saturationFactor?: number;
		/** [Config Option] (Boolean) */
		showStroke?: boolean;
		/** [Config Option] (Number) */
		width?: number;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
	}

}

declare module TypExt.chart.series.sprite {
	 interface ICandleStickConfig extends TypExt.chart.series.sprite.IAggregativeConfig {
		/** [Config Option] (Number) */
		barWidth?: number;
		/** [Config Option] (String) */
		ohlcType?: string;
		/** [Config Option] (Number) */
		padding?: number;
	}

}

declare module TypExt.chart.series.sprite {
	 interface ICartesianConfig extends TypExt.draw.sprite.ISpriteConfig, TypExt.chart.IMarkerHolderConfig {
		/** [Config Option] (Number) */
		dataMaxX?: number;
		/** [Config Option] (Number) */
		dataMaxY?: number;
		/** [Config Option] (Number) */
		dataMinX?: number;
		/** [Config Option] (Number) */
		dataMinY?: number;
		/** [Config Option] (Object) */
		dataX?: any;
		/** [Config Option] (Object) */
		dataY?: any;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Boolean) */
		flipXY?: boolean;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Object) */
		labels?: any;
		/** [Config Option] (Array) */
		rangeX?: any[];
		/** [Config Option] (Array) */
		rangeY?: any[];
		/** [Config Option] (Number) */
		selectionTolerance?: number;
	}

}

declare module TypExt.chart.series.sprite {
	 interface ILineConfig extends TypExt.chart.series.sprite.IAggregativeConfig {
		/** [Config Option] (Boolean) */
		fillArea?: boolean;
		/** [Config Option] (Boolean) */
		preciseStroke?: boolean;
		/** [Config Option] (Boolean) */
		smooth?: boolean;
		/** [Config Option] (Boolean) */
		step?: boolean;
		/** [Config Option] (Number) */
		yCap?: number;
	}

}

declare module TypExt.chart.series.sprite {
	 interface IPie3DPartConfig extends TypExt.draw.sprite.IPathConfig, TypExt.chart.IMarkerHolderConfig {
		/** [Config Option] (Object) */
		baseColor?: any;
		/** [Config Option] (Number) */
		baseRotation?: number;
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		distortion?: number;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		endRho?: number;
		/** [Config Option] (Number) */
		margin?: number;
		/** [Config Option] (String) */
		part?: string;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Config Option] (Number) */
		startRho?: number;
		/** [Config Option] (Number) */
		thickness?: number;
	}

}

declare module TypExt.chart.series.sprite {
	 interface IPieSliceConfig extends TypExt.draw.sprite.ISectorConfig, TypExt.chart.IMarkerHolderConfig {
		/** [Config Option] (Boolean) */
		doCallout?: boolean;
		/** [Config Option] (String) */
		label?: string;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
	}

}

declare module TypExt.chart.series.sprite {
	 interface IPolarConfig extends TypExt.draw.sprite.ISpriteConfig, TypExt.chart.IMarkerHolderConfig {
		/** [Config Option] (Number) */
		baseRotation?: number;
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		dataMaxX?: number;
		/** [Config Option] (Number) */
		dataMaxY?: number;
		/** [Config Option] (Number) */
		dataMinX?: number;
		/** [Config Option] (Number) */
		dataMinY?: number;
		/** [Config Option] (Object) */
		dataX?: any;
		/** [Config Option] (Object) */
		dataY?: any;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		endRho?: number;
		/** [Config Option] (Number) */
		labelOverflowPadding?: number;
		/** [Config Option] (Object) */
		labels?: any;
		/** [Config Option] (Array) */
		rangeX?: any[];
		/** [Config Option] (Array) */
		rangeY?: any[];
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Config Option] (Number) */
		startRho?: number;
	}

}

declare module TypExt.chart.series.sprite {
	 interface IRadarConfig extends TypExt.chart.series.sprite.IPolarConfig {
	}

}

declare module TypExt.chart.series.sprite {
	 interface IScatterConfig extends TypExt.chart.series.sprite.ICartesianConfig {
	}

}

declare module TypExt.chart.series.sprite {
	 interface IStackedCartesianConfig extends TypExt.chart.series.sprite.ICartesianConfig {
	}

}

declare module TypExt.chart.series {
	 interface IStackedCartesianConfig extends TypExt.chart.series.ICartesianConfig {
		/** [Config Option] (Boolean) */
		fullStack?: boolean;
		/** [Config Option] (Boolean) */
		fullStackTotal?: boolean;
		/** [Config Option] (Array) */
		hidden?: any[];
		/** [Config Option] (Boolean) */
		splitStacks?: boolean;
		/** [Config Option] (Boolean) */
		stacked?: boolean;
	}

}

declare module TypExt.chart {
	 interface ISpaceFillingChartConfig extends TypExt.chart.IAbstractChartConfig {
	}

}

declare module TypExt.chart.theme {
	 interface IBaseConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Object) */
		axis?: any;
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (String/Ext.draw.Color) */
		baseColor?: any;
		/** [Config Option] (Object) */
		chart?: any;
		/** [Config Option] (Array) */
		colors?: any[];
		/** [Config Option] (Object) */
		gradients?: any;
		/** [Config Option] (Object) */
		series?: any;
		/** [Config Option] (Object) */
		sprites?: any;
		/** [Config Option] (Boolean) */
		useGradients?: boolean;
	}

}

declare module TypExt.chart.theme {
	 interface IDefaultConfig extends TypExt.chart.theme.IBaseConfig {
	}

}

declare module TypExt.chart {
	 interface ITipSurfaceConfig extends TypExt.draw.IContainerConfig {
	}

}

declare module TypExt {
	 interface IClassConfig {
		/** [Config Option] (String/String[]) */
		alias?: any;
		/** [Config Option] (String/String[]) */
		alternateClassName?: any;
		/** [Config Option] (Object) */
		cachedConfig?: any;
		/** [Config Option] (Object) */
		config?: any;
		/** [Config Option] (String) */
		extend?: string;
		/** [Config Option] (Object) */
		inheritableStatics?: any;
		/** [Config Option] (String[]/Object) */
		mixins?: any;
		/** [Config Option] (String) */
		override?: string;
		/** [Config Option] (Object) */
		platformConfig?: any;
		/** [Config Option] (Object) */
		privates?: any;
		/** [Config Option] (String[]) */
		requires?: string[];
		/** [Config Option] (Boolean) */
		singleton?: boolean;
		/** [Config Option] (Object) */
		statics?: any;
		/** [Config Option] (String[]) */
		uses?: string[];
		/** [Config Option] (Ext.enums.Widget) */
		xtype?: Ext.enums.IWidget;
	}

}

declare module TypExt {
	 interface IClassManagerConfig {
	}

}

declare module TypExt {
	 interface IComponentConfig extends TypExt.IBaseConfig, TypExt.mixin.IInheritableConfig,TypExt.util.IFloatingConfig,TypExt.util.IPositionableConfig,TypExt.util.IObservableConfig,TypExt.mixin.IBindableConfig,TypExt.util.IAnimateConfig,TypExt.util.IElementContainerConfig,TypExt.util.IRenderableConfig,TypExt.state.IStatefulConfig,TypExt.util.IFocusableConfig {
		/** [Config Option] (String) */
		alignTarget?: string;
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (Boolean/String/HTMLElement/Ext.dom.Element) */
		autoRender?: any;
		/** [Config Option] (Boolean) */
		autoScroll?: boolean;
		/** [Config Option] (Boolean) */
		autoShow?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String/Boolean) */
		border?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number) */
		columnWidth?: number;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Ext.util.Region/Ext.dom.Element) */
		constrainTo?: any;
		/** [Config Option] (Object/String) */
		constraintInsets?: any;
		/** [Config Option] (String) */
		contentEl?: string;
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (String) */
		defaultAlign?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] ('top'/'bottom'/'left'/'right') */
		dock?: any;
		/** [Config Option] (Boolean/Object) */
		draggable?: any;
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (Boolean) */
		floating?: boolean;
		/** [Config Option] (Boolean) */
		formBind?: boolean;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Number|String) */
		height?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (String/Object) */
		html?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String) */
		itemId?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (Boolean) */
		liveDrag?: boolean;
		/** [Config Option] (Ext.ComponentLoader/Object) */
		loader?: any;
		/** [Config Option] (Number/String) */
		margin?: any;
		/** [Config Option] (String) */
		maskElement?: string;
		/** [Config Option] (Number) */
		maxHeight?: number;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		modelValidation?: boolean;
		/** [Config Option] (String) */
		overCls?: string;
		/** [Config Option] (String) */
		overflowX?: string;
		/** [Config Option] (String) */
		overflowY?: string;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Ext.plugin.Abstract[]/Ext.plugin.Abstract/Object[]/Object/Ext.enums.Plugin[]/Ext.enums.Plugin) */
		plugins?: any;
		/** [Config Option] ("north"/"south"/"east"/"west"/"center") */
		region?: any;
		/** [Config Option] (Object) */
		renderData?: any;
		/** [Config Option] (Object) */
		renderSelectors?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		renderTo?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (String) */
		resizeHandles?: string;
		/** [Config Option] (Boolean) */
		rtl?: boolean;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (String/Object) */
		style?: any;
		/** [Config Option] (Boolean) */
		toFrontOnShow?: boolean;
		/** [Config Option] (Ext.XTemplate/Ext.Template/String/String[]) */
		tpl?: any;
		/** [Config Option] (String) */
		tplWriteMode?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Number) */
		weight?: number;
		/** [Config Option] (Number|String) */
		width?: any;
		/** [Config Option] (Ext.enums.Widget) */
		xtype?: Ext.enums.IWidget;
	}

}

declare module TypExt {
	 interface IAbstractComponentConfig extends TypExt.IBaseConfig, TypExt.mixin.IInheritableConfig,TypExt.util.IFloatingConfig,TypExt.util.IPositionableConfig,TypExt.util.IObservableConfig,TypExt.mixin.IBindableConfig,TypExt.util.IAnimateConfig,TypExt.util.IElementContainerConfig,TypExt.util.IRenderableConfig,TypExt.state.IStatefulConfig,TypExt.util.IFocusableConfig {
		/** [Config Option] (String) */
		alignTarget?: string;
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (Boolean/String/HTMLElement/Ext.dom.Element) */
		autoRender?: any;
		/** [Config Option] (Boolean) */
		autoScroll?: boolean;
		/** [Config Option] (Boolean) */
		autoShow?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String/Boolean) */
		border?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number) */
		columnWidth?: number;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Ext.util.Region/Ext.dom.Element) */
		constrainTo?: any;
		/** [Config Option] (Object/String) */
		constraintInsets?: any;
		/** [Config Option] (String) */
		contentEl?: string;
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (String) */
		defaultAlign?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] ('top'/'bottom'/'left'/'right') */
		dock?: any;
		/** [Config Option] (Boolean/Object) */
		draggable?: any;
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (Boolean) */
		floating?: boolean;
		/** [Config Option] (Boolean) */
		formBind?: boolean;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Number|String) */
		height?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (String/Object) */
		html?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String) */
		itemId?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (Boolean) */
		liveDrag?: boolean;
		/** [Config Option] (Ext.ComponentLoader/Object) */
		loader?: any;
		/** [Config Option] (Number/String) */
		margin?: any;
		/** [Config Option] (String) */
		maskElement?: string;
		/** [Config Option] (Number) */
		maxHeight?: number;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		modelValidation?: boolean;
		/** [Config Option] (String) */
		overCls?: string;
		/** [Config Option] (String) */
		overflowX?: string;
		/** [Config Option] (String) */
		overflowY?: string;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Ext.plugin.Abstract[]/Ext.plugin.Abstract/Object[]/Object/Ext.enums.Plugin[]/Ext.enums.Plugin) */
		plugins?: any;
		/** [Config Option] ("north"/"south"/"east"/"west"/"center") */
		region?: any;
		/** [Config Option] (Object) */
		renderData?: any;
		/** [Config Option] (Object) */
		renderSelectors?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		renderTo?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (String) */
		resizeHandles?: string;
		/** [Config Option] (Boolean) */
		rtl?: boolean;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (String/Object) */
		style?: any;
		/** [Config Option] (Boolean) */
		toFrontOnShow?: boolean;
		/** [Config Option] (Ext.XTemplate/Ext.Template/String/String[]) */
		tpl?: any;
		/** [Config Option] (String) */
		tplWriteMode?: string;
		/** [Config Option] (String) */
		ui?: string;
		/** [Config Option] (Number) */
		weight?: number;
		/** [Config Option] (Number|String) */
		width?: any;
		/** [Config Option] (Ext.enums.Widget) */
		xtype?: Ext.enums.IWidget;
	}

}

declare module TypExt {
	 interface IComponentLoaderConfig extends TypExt.IElementLoaderConfig {
		/** [Config Option] (Boolean/Object) */
		loadMask?: any;
		/** [Config Option] (Boolean/Object) */
		loadOnRender?: any;
		/** [Config Option] (String/Function) */
		renderer?: any;
		/** [Config Option] (Boolean) */
		scripts?: boolean;
		/** [Config Option] (Ext.Component/String) */
		target?: any;
	}

}

declare module TypExt {
	 interface IComponentManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IComponentMgrConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IComponentQueryConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IConfigConfig {
		/** [Config Option] (Function) */
		merge?: any;
	}

}

declare module TypExt {
	 interface IConfiguratorConfig {
	}

}

declare module TypExt.container {
	 interface IButtonGroupConfig extends TypExt.panel.IPanelConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number) */
		columns?: number;
		/** [Config Option] (String) */
		defaultButtonUI?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		titleAlign?: string;
	}

}

declare module TypExt {
	 interface IButtonGroupConfig extends TypExt.panel.IPanelConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number) */
		columns?: number;
		/** [Config Option] (String) */
		defaultButtonUI?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		titleAlign?: string;
	}

}

declare module TypExt.container {
	 interface IContainerConfig extends TypExt.IComponentConfig, TypExt.mixin.IQueryableConfig {
		/** [Config Option] (String/Number) */
		activeItem?: any;
		/** [Config Option] (Number/Object) */
		anchorSize?: any;
		/** [Config Option] (Boolean) */
		autoDestroy?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String[]) */
		bubbleEvents?: string[];
		/** [Config Option] (String) */
		defaultFocus?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Object/Function) */
		defaults?: any;
		/** [Config Option] (Boolean) */
		detachOnRemove?: boolean;
		/** [Config Option] (Object/Object[]) */
		items?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Boolean) */
		referenceHolder?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean) */
		suspendLayout?: boolean;
	}

}

declare module TypExt {
	 interface IContainerConfig extends TypExt.IComponentConfig, TypExt.mixin.IQueryableConfig {
		/** [Config Option] (String/Number) */
		activeItem?: any;
		/** [Config Option] (Number/Object) */
		anchorSize?: any;
		/** [Config Option] (Boolean) */
		autoDestroy?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String[]) */
		bubbleEvents?: string[];
		/** [Config Option] (String) */
		defaultFocus?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Object/Function) */
		defaults?: any;
		/** [Config Option] (Boolean) */
		detachOnRemove?: boolean;
		/** [Config Option] (Object/Object[]) */
		items?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Boolean) */
		referenceHolder?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean) */
		suspendLayout?: boolean;
	}

}

declare module TypExt {
	 interface IAbstractContainerConfig extends TypExt.IComponentConfig, TypExt.mixin.IQueryableConfig {
		/** [Config Option] (String/Number) */
		activeItem?: any;
		/** [Config Option] (Number/Object) */
		anchorSize?: any;
		/** [Config Option] (Boolean) */
		autoDestroy?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String[]) */
		bubbleEvents?: string[];
		/** [Config Option] (String) */
		defaultFocus?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Object/Function) */
		defaults?: any;
		/** [Config Option] (Boolean) */
		detachOnRemove?: boolean;
		/** [Config Option] (Object/Object[]) */
		items?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Boolean) */
		referenceHolder?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean) */
		suspendLayout?: boolean;
	}

}

declare module TypExt.container {
	 interface IDockingContainerConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Object) */
		defaultDockWeights?: any;
	}

}

declare module TypExt.container {
	 interface IMonitorConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.container {
	 interface IViewportConfig extends TypExt.container.IContainerConfig, TypExt.mixin.IResponsiveConfig {
		/** [Config Option] (Number) */
		maxUserScale?: number;
	}

}

declare module TypExt {
	 interface IViewportConfig extends TypExt.container.IContainerConfig, TypExt.mixin.IResponsiveConfig {
		/** [Config Option] (Number) */
		maxUserScale?: number;
	}

}

declare module TypExt.dashboard {
	 interface IColumnConfig extends TypExt.container.IContainerConfig {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
	}

}

declare module TypExt.dashboard {
	 interface IDashboardConfig extends TypExt.panel.IPanelConfig {
		/** [Config Option] (String/String[]) */
		bodyCls?: any;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number[]) */
		columnWidths?: number[];
		/** [Config Option] (Object[]) */
		defaultContent?: any[];
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number) */
		maxColumns?: number;
		/** [Config Option] (Object) */
		parts?: any;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean) */
		stateful?: boolean;
	}

}

declare module TypExt.dashboard {
	 interface IDropZoneConfig extends TypExt.dd.IDropTargetConfig {
		/** [Config Option] (Boolean) */
		containerScroll?: boolean;
		/** [Config Option] (String) */
		overClass?: string;
	}

}

declare module TypExt.dashboard {
	 interface IPanelConfig extends TypExt.panel.IPanelConfig {
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (Boolean) */
		animCollapse?: boolean;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (Boolean/Object) */
		draggable?: any;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (String) */
		resizeHandles?: string;
		/** [Config Option] (Boolean) */
		stateful?: boolean;
		/** [Config Option] (Boolean) */
		titleCollapse?: boolean;
	}

}

declare module TypExt.dashboard {
	 interface IPartConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig,TypExt.mixin.IIdentifiableConfig {
		/** [Config Option] (Object/Ext.util.ObjectTemplate) */
		viewTemplate?: any;
	}

}

declare module TypExt.data {
	 interface IAbstractStoreConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig,TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Boolean) */
		autoDestroy?: boolean;
		/** [Config Option] (Object[]/Function[]) */
		filters?: any;
		/** [Config Option] (String) */
		groupDir?: string;
		/** [Config Option] (String) */
		groupField?: string;
		/** [Config Option] (Object/Ext.util.Grouper) */
		grouper?: any;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (Boolean) */
		remoteFilter?: boolean;
		/** [Config Option] (Boolean) */
		remoteSort?: boolean;
		/** [Config Option] (Ext.util.Sorter[]/Object[]) */
		sorters?: any;
		/** [Config Option] (Boolean) */
		statefulFilters?: boolean;
		/** [Config Option] (String) */
		storeId?: string;
	}

}

declare module TypExt.data {
	 interface IArrayStoreConfig extends TypExt.data.IStoreConfig {
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
	}

}

declare module TypExt.data {
	 interface ISimpleStoreConfig extends TypExt.data.IStoreConfig {
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
	}

}

declare module TypExt.data {
	 interface IBatchConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (Boolean) */
		pauseOnException?: boolean;
	}

}

declare module TypExt.data {
	 interface IBufferedStoreConfig extends TypExt.data.IProxyStoreConfig {
		/** [Config Option] (Number) */
		leadingBufferZone?: number;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (Number) */
		purgePageCount?: number;
		/** [Config Option] (Boolean) */
		remoteFilter?: boolean;
		/** [Config Option] (Boolean) */
		remoteSort?: boolean;
		/** [Config Option] (Boolean) */
		sortOnLoad?: boolean;
		/** [Config Option] (Boolean) */
		trackRemoved?: boolean;
		/** [Config Option] (Number) */
		trailingBufferZone?: number;
	}

}

declare module TypExt.data {
	 interface IChainedStoreConfig extends TypExt.data.IAbstractStoreConfig, TypExt.data.ILocalStoreConfig {
		/** [Config Option] (Boolean) */
		remoteFilter?: boolean;
		/** [Config Option] (Boolean) */
		remoteSort?: boolean;
		/** [Config Option] (Ext.data.Store/String) */
		source?: any;
	}

}

declare module TypExt.data {
	 interface IConnectionConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (Boolean) */
		async?: boolean;
		/** [Config Option] (Boolean) */
		autoAbort?: boolean;
		/** [Config Option] (Boolean) */
		binary?: boolean;
		/** [Config Option] (Boolean) */
		cors?: boolean;
		/** [Config Option] (Object) */
		defaultHeaders?: any;
		/** [Config Option] (String) */
		defaultPostHeader?: string;
		/** [Config Option] (String) */
		defaultXhrHeader?: string;
		/** [Config Option] (Boolean) */
		disableCaching?: boolean;
		/** [Config Option] (String) */
		disableCachingParam?: string;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: boolean;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
	}

}

declare module TypExt.data {
	 interface IDirectStoreConfig extends TypExt.data.IStoreConfig {
	}

}

declare module TypExt.data {
	 interface IErrorConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (String) */
		message?: string;
	}

}

declare module TypExt.data {
	 interface IErrorCollectionConfig extends TypExt.util.IMixedCollectionConfig {
	}

}

declare module TypExt.data {
	 interface IErrorsConfig extends TypExt.util.IMixedCollectionConfig {
	}

}

declare module TypExt.data.field {
	 interface IBooleanConfig extends TypExt.data.field.IFieldConfig {
	}

}

declare module TypExt.data.field {
	 interface IDateConfig extends TypExt.data.field.IFieldConfig {
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (String) */
		dateReadFormat?: string;
		/** [Config Option] (String) */
		dateWriteFormat?: string;
		/** [Config Option] (Function/String) */
		sortType?: any;
	}

}

declare module TypExt.data.field {
	 interface IFieldConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Boolean) */
		allowNull?: boolean;
		/** [Config Option] (Function) */
		calculate?: any;
		/** [Config Option] (Function) */
		convert?: any;
		/** [Config Option] (Boolean) */
		critical?: boolean;
		/** [Config Option] (Object) */
		defaultValue?: any;
		/** [Config Option] (String/String[]) */
		depends?: any;
		/** [Config Option] (String/Number/Function) */
		mapping?: any;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		persist?: boolean;
		/** [Config Option] (String/Object) */
		reference?: any;
		/** [Config Option] (Function) */
		serialize?: any;
		/** [Config Option] (Function/String) */
		sortType?: any;
		/** [Config Option] (Boolean) */
		unique?: boolean;
		/** [Config Option] (Object[]) */
		validators?: any[];
	}

}

declare module TypExt.data {
	 interface IFieldConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Boolean) */
		allowNull?: boolean;
		/** [Config Option] (Function) */
		calculate?: any;
		/** [Config Option] (Function) */
		convert?: any;
		/** [Config Option] (Boolean) */
		critical?: boolean;
		/** [Config Option] (Object) */
		defaultValue?: any;
		/** [Config Option] (String/String[]) */
		depends?: any;
		/** [Config Option] (String/Number/Function) */
		mapping?: any;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		persist?: boolean;
		/** [Config Option] (String/Object) */
		reference?: any;
		/** [Config Option] (Function) */
		serialize?: any;
		/** [Config Option] (Function/String) */
		sortType?: any;
		/** [Config Option] (Boolean) */
		unique?: boolean;
		/** [Config Option] (Object[]) */
		validators?: any[];
	}

}

declare module TypExt.data.field {
	 interface IIntegerConfig extends TypExt.data.field.IFieldConfig {
	}

}

declare module TypExt.data.field {
	 interface INumberConfig extends TypExt.data.field.IIntegerConfig {
	}

}

declare module TypExt.data.field {
	 interface IStringConfig extends TypExt.data.field.IFieldConfig {
		/** [Config Option] (Function/String) */
		sortType?: any;
	}

}

declare module TypExt.data.flash {
	 interface IBinaryXhrConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.data.identifier {
	 interface IGeneratorConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (String) */
		id?: string;
	}

}

declare module TypExt.data.identifier {
	 interface INegativeConfig extends TypExt.data.identifier.ISequentialConfig {
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Number) */
		seed?: number;
	}

}

declare module TypExt.data.identifier {
	 interface ISequentialConfig extends TypExt.data.identifier.IGeneratorConfig {
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (String) */
		prefix?: string;
		/** [Config Option] (Number) */
		seed?: number;
	}

}

declare module TypExt.data.identifier {
	 interface IUuidConfig extends TypExt.data.identifier.IGeneratorConfig {
		/** [Config Option] (Number) */
		clockSeq?: number;
		/** [Config Option] (Object) */
		id?: any;
		/** [Config Option] (Number/Object) */
		salt?: any;
		/** [Config Option] (Number/Object) */
		timestamp?: any;
		/** [Config Option] (Number) */
		version?: number;
	}

}

declare module TypExt.data {
	 interface IJsonPConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.data {
	 interface IJsonPStoreConfig extends TypExt.data.IStoreConfig {
	}

}

declare module TypExt.data {
	 interface IJsonStoreConfig extends TypExt.data.IStoreConfig {
	}

}

declare module TypExt.data {
	 interface ILocalStoreConfig extends TypExt.IMixinConfig {
	}

}

declare module TypExt.data.matrix {
	 interface IMatrixConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.data.matrix {
	 interface ISideConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.data.matrix {
	 interface ISliceConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.data {
	 interface IModelConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Object[]) */
		associations?: any[];
		/** [Config Option] (String/Object/String[]/Object[]) */
		belongsTo?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (Boolean) */
		convertOnSet?: boolean;
		/** [Config Option] (Object[]/String[]) */
		fields?: any;
		/** [Config Option] (String/Object/String[]/Object[]) */
		hasMany?: any;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (String/Object) */
		identifier?: any;
		/** [Config Option] (Object) */
		manyToMany?: any;
		/** [Config Option] (String/Object/Ext.data.proxy.Proxy) */
		proxy?: any;
		/** [Config Option] (String/Object) */
		schema?: any;
		/** [Config Option] (String) */
		validationSeparator?: string;
		/** [Config Option] (Object[]) */
		validators?: any[];
		/** [Config Option] (String) */
		versionProperty?: string;
	}

}

declare module TypExt.data {
	 interface IRecordConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Object[]) */
		associations?: any[];
		/** [Config Option] (String/Object/String[]/Object[]) */
		belongsTo?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (Boolean) */
		convertOnSet?: boolean;
		/** [Config Option] (Object[]/String[]) */
		fields?: any;
		/** [Config Option] (String/Object/String[]/Object[]) */
		hasMany?: any;
		/** [Config Option] (String) */
		idProperty?: string;
		/** [Config Option] (String/Object) */
		identifier?: any;
		/** [Config Option] (Object) */
		manyToMany?: any;
		/** [Config Option] (String/Object/Ext.data.proxy.Proxy) */
		proxy?: any;
		/** [Config Option] (String/Object) */
		schema?: any;
		/** [Config Option] (String) */
		validationSeparator?: string;
		/** [Config Option] (Object[]) */
		validators?: any[];
		/** [Config Option] (String) */
		versionProperty?: string;
	}

}

declare module TypExt.data {
	 interface IModelManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IModelMgrConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.data {
	 interface INodeInterfaceConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Boolean) */
		allowDrag?: boolean;
		/** [Config Option] (Boolean) */
		allowDrop?: boolean;
		/** [Config Option] (Boolean) */
		checked?: boolean;
		/** [Config Option] (Ext.data.NodeInterface[]) */
		children?: Ext.data.INodeInterface[];
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		expandable?: boolean;
		/** [Config Option] (Boolean) */
		expanded?: boolean;
		/** [Config Option] (String) */
		href?: string;
		/** [Config Option] (String) */
		hrefTarget?: string;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Boolean) */
		leaf?: boolean;
		/** [Config Option] (Number) */
		qshowDelay?: number;
		/** [Config Option] (String) */
		qtip?: string;
		/** [Config Option] (String) */
		qtitle?: string;
		/** [Config Option] (String) */
		text?: string;
	}

}

declare module TypExt.data {
	 interface INodeStoreConfig extends TypExt.data.IStoreConfig {
		/** [Config Option] (Boolean) */
		folderSort?: boolean;
		/** [Config Option] (Ext.data.Model) */
		node?: Ext.data.IModel;
		/** [Config Option] (Boolean) */
		recursive?: boolean;
		/** [Config Option] (Boolean) */
		rootVisible?: boolean;
	}

}

declare module TypExt.data.operation {
	 interface ICreateConfig extends TypExt.data.operation.IOperationConfig {
	}

}

declare module TypExt.data.operation {
	 interface IDestroyConfig extends TypExt.data.operation.IOperationConfig {
	}

}

declare module TypExt.data.operation {
	 interface IOperationConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Ext.data.Batch) */
		batch?: Ext.data.IBatch;
		/** [Config Option] (Function) */
		callback?: any;
		/** [Config Option] (Object) */
		id?: any;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (Ext.data.proxy.Proxy) */
		proxy?: Ext.data.proxy.IProxy;
		/** [Config Option] (Ext.data.Model[]) */
		records?: Ext.data.IModel[];
		/** [Config Option] (Ext.data.Request) */
		request?: Ext.data.IRequest;
		/** [Config Option] (Ext.data.ResultSet) */
		resultSet?: Ext.data.IResultSet;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		synchronous?: boolean;
		/** [Config Option] (String) */
		url?: string;
	}

}

declare module TypExt.data {
	 interface IOperationConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Ext.data.Batch) */
		batch?: Ext.data.IBatch;
		/** [Config Option] (Function) */
		callback?: any;
		/** [Config Option] (Object) */
		id?: any;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (Ext.data.proxy.Proxy) */
		proxy?: Ext.data.proxy.IProxy;
		/** [Config Option] (Ext.data.Model[]) */
		records?: Ext.data.IModel[];
		/** [Config Option] (Ext.data.Request) */
		request?: Ext.data.IRequest;
		/** [Config Option] (Ext.data.ResultSet) */
		resultSet?: Ext.data.IResultSet;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		synchronous?: boolean;
		/** [Config Option] (String) */
		url?: string;
	}

}

declare module TypExt.data.operation {
	 interface IReadConfig extends TypExt.data.operation.IOperationConfig {
		/** [Config Option] (Ext.util.Filter[]) */
		filters?: Ext.util.IFilter[];
		/** [Config Option] (Ext.util.Grouper) */
		grouper?: Ext.util.IGrouper;
		/** [Config Option] (Number) */
		limit?: number;
		/** [Config Option] (Number) */
		page?: number;
		/** [Config Option] (Ext.util.Sorter[]) */
		sorters?: Ext.util.ISorter[];
		/** [Config Option] (Number) */
		start?: number;
	}

}

declare module TypExt.data.operation {
	 interface IUpdateConfig extends TypExt.data.operation.IOperationConfig {
	}

}

declare module TypExt.data {
	 interface IPageMapConfig extends TypExt.util.ILruCacheConfig {
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (String) */
		rootProperty?: string;
	}

}

declare module TypExt.data.proxy {
	 interface IAjaxConfig extends TypExt.data.proxy.IServerConfig {
		/** [Config Option] (Object) */
		actionMethods?: any;
		/** [Config Option] (Boolean) */
		binary?: boolean;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (Boolean) */
		paramsAsJson?: boolean;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: boolean;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
	}

}

declare module TypExt.data {
	 interface IHttpProxyConfig extends TypExt.data.proxy.IServerConfig {
		/** [Config Option] (Object) */
		actionMethods?: any;
		/** [Config Option] (Boolean) */
		binary?: boolean;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (Boolean) */
		paramsAsJson?: boolean;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: boolean;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
	}

}

declare module TypExt.data {
	 interface IAjaxProxyConfig extends TypExt.data.proxy.IServerConfig {
		/** [Config Option] (Object) */
		actionMethods?: any;
		/** [Config Option] (Boolean) */
		binary?: boolean;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (Boolean) */
		paramsAsJson?: boolean;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Boolean) */
		useDefaultXhrHeader?: boolean;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
	}

}

declare module TypExt.data.proxy {
	 interface IClientConfig extends TypExt.data.proxy.IProxyConfig {
	}

}

declare module TypExt.data {
	 interface IClientProxyConfig extends TypExt.data.proxy.IProxyConfig {
	}

}

declare module TypExt.data.proxy {
	 interface IDirectConfig extends TypExt.data.proxy.IServerConfig {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Function/String) */
		directFn?: any;
		/** [Config Option] (Object/Array) */
		metadata?: any;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
	}

}

declare module TypExt.data {
	 interface IDirectProxyConfig extends TypExt.data.proxy.IServerConfig {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Function/String) */
		directFn?: any;
		/** [Config Option] (Object/Array) */
		metadata?: any;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
	}

}

declare module TypExt.data.proxy {
	 interface IJsonPConfig extends TypExt.data.proxy.IServerConfig {
		/** [Config Option] (Boolean) */
		autoAppendParams?: boolean;
		/** [Config Option] (String) */
		callbackKey?: string;
		/** [Config Option] (String) */
		recordParam?: string;
	}

}

declare module TypExt.data {
	 interface IScriptTagProxyConfig extends TypExt.data.proxy.IServerConfig {
		/** [Config Option] (Boolean) */
		autoAppendParams?: boolean;
		/** [Config Option] (String) */
		callbackKey?: string;
		/** [Config Option] (String) */
		recordParam?: string;
	}

}

declare module TypExt.data.proxy {
	 interface ILocalStorageConfig extends TypExt.data.proxy.IWebStorageConfig {
	}

}

declare module TypExt.data {
	 interface ILocalStorageProxyConfig extends TypExt.data.proxy.IWebStorageConfig {
	}

}

declare module TypExt.data.proxy {
	 interface IMemoryConfig extends TypExt.data.proxy.IClientConfig {
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (Boolean) */
		enablePaging?: boolean;
	}

}

declare module TypExt.data {
	 interface IMemoryProxyConfig extends TypExt.data.proxy.IClientConfig {
		/** [Config Option] (Object) */
		data?: any;
		/** [Config Option] (Boolean) */
		enablePaging?: boolean;
	}

}

declare module TypExt.data.proxy {
	 interface IProxyConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig,TypExt.mixin.IObservableConfig {
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		batchOrder?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Object/String/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Object/String/Ext.data.writer.Writer) */
		writer?: any;
	}

}

declare module TypExt.data {
	 interface IDataProxyConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig,TypExt.mixin.IObservableConfig {
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		batchOrder?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Object/String/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Object/String/Ext.data.writer.Writer) */
		writer?: any;
	}

}

declare module TypExt.data {
	 interface IProxyConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig,TypExt.mixin.IObservableConfig {
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		batchOrder?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Object/String/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Object/String/Ext.data.writer.Writer) */
		writer?: any;
	}

}

declare module TypExt.data.proxy {
	 interface IRestConfig extends TypExt.data.proxy.IAjaxConfig {
		/** [Config Option] (Object) */
		actionMethods?: any;
		/** [Config Option] (Boolean) */
		appendId?: boolean;
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		format?: string;
	}

}

declare module TypExt.data {
	 interface IRestProxyConfig extends TypExt.data.proxy.IAjaxConfig {
		/** [Config Option] (Object) */
		actionMethods?: any;
		/** [Config Option] (Boolean) */
		appendId?: boolean;
		/** [Config Option] (Boolean) */
		batchActions?: boolean;
		/** [Config Option] (String) */
		format?: string;
	}

}

declare module TypExt.data.proxy {
	 interface IServerConfig extends TypExt.data.proxy.IProxyConfig {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (String) */
		cacheString?: string;
		/** [Config Option] (String) */
		directionParam?: string;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String) */
		filterParam?: string;
		/** [Config Option] (String) */
		groupDirectionParam?: string;
		/** [Config Option] (String) */
		groupParam?: string;
		/** [Config Option] (String) */
		idParam?: string;
		/** [Config Option] (String) */
		limitParam?: string;
		/** [Config Option] (Boolean) */
		noCache?: boolean;
		/** [Config Option] (String) */
		pageParam?: string;
		/** [Config Option] (Boolean) */
		simpleGroupMode?: boolean;
		/** [Config Option] (Boolean) */
		simpleSortMode?: boolean;
		/** [Config Option] (String) */
		sortParam?: string;
		/** [Config Option] (String) */
		startParam?: string;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
	}

}

declare module TypExt.data {
	 interface IServerProxyConfig extends TypExt.data.proxy.IProxyConfig {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (String) */
		cacheString?: string;
		/** [Config Option] (String) */
		directionParam?: string;
		/** [Config Option] (Object) */
		extraParams?: any;
		/** [Config Option] (String) */
		filterParam?: string;
		/** [Config Option] (String) */
		groupDirectionParam?: string;
		/** [Config Option] (String) */
		groupParam?: string;
		/** [Config Option] (String) */
		idParam?: string;
		/** [Config Option] (String) */
		limitParam?: string;
		/** [Config Option] (Boolean) */
		noCache?: boolean;
		/** [Config Option] (String) */
		pageParam?: string;
		/** [Config Option] (Boolean) */
		simpleGroupMode?: boolean;
		/** [Config Option] (Boolean) */
		simpleSortMode?: boolean;
		/** [Config Option] (String) */
		sortParam?: string;
		/** [Config Option] (String) */
		startParam?: string;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
	}

}

declare module TypExt.data.proxy {
	 interface ISessionStorageConfig extends TypExt.data.proxy.IWebStorageConfig {
	}

}

declare module TypExt.data {
	 interface ISessionStorageProxyConfig extends TypExt.data.proxy.IWebStorageConfig {
	}

}

declare module TypExt.data.proxy {
	 interface ISqlConfig extends TypExt.data.proxy.IClientConfig {
		/** [Config Option] (String) */
		database?: string;
		/** [Config Option] (String) */
		table?: string;
	}

}

declare module TypExt.data.proxy {
	 interface IWebStorageConfig extends TypExt.data.proxy.IClientConfig {
		/** [Config Option] (String) */
		id?: string;
	}

}

declare module TypExt.data {
	 interface IWebStorageProxyConfig extends TypExt.data.proxy.IClientConfig {
		/** [Config Option] (String) */
		id?: string;
	}

}

declare module TypExt.data {
	 interface IProxyStoreConfig extends TypExt.data.IAbstractStoreConfig {
		/** [Config Option] (Boolean/Object) */
		autoLoad?: any;
		/** [Config Option] (Boolean) */
		autoSync?: boolean;
		/** [Config Option] (String) */
		batchUpdateMode?: string;
		/** [Config Option] (Object[]) */
		fields?: any[];
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (String/Ext.data.proxy.Proxy/Object) */
		proxy?: any;
		/** [Config Option] (Boolean) */
		sortOnLoad?: boolean;
		/** [Config Option] (Boolean) */
		trackRemoved?: boolean;
	}

}

declare module TypExt.data.reader {
	 interface IArrayConfig extends TypExt.data.reader.IJsonConfig {
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
	}

}

declare module TypExt.data {
	 interface IArrayReaderConfig extends TypExt.data.reader.IJsonConfig {
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
	}

}

declare module TypExt.data.reader {
	 interface IJsonConfig extends TypExt.data.reader.IReaderConfig {
		/** [Config Option] (String) */
		metaProperty?: string;
		/** [Config Option] (Boolean) */
		preserveRawData?: boolean;
		/** [Config Option] (String) */
		record?: string;
		/** [Config Option] (Boolean) */
		useSimpleAccessors?: boolean;
	}

}

declare module TypExt.data {
	 interface IJsonReaderConfig extends TypExt.data.reader.IReaderConfig {
		/** [Config Option] (String) */
		metaProperty?: string;
		/** [Config Option] (Boolean) */
		preserveRawData?: boolean;
		/** [Config Option] (String) */
		record?: string;
		/** [Config Option] (Boolean) */
		useSimpleAccessors?: boolean;
	}

}

declare module TypExt.data.reader {
	 interface IReaderConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig,TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Boolean) */
		implicitIncludes?: boolean;
		/** [Config Option] (Boolean) */
		keepRawData?: boolean;
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Boolean) */
		readRecordsOnFailure?: boolean;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Config Option] (Function|Object) */
		transform?: any;
		/** [Config Option] (String) */
		typeProperty?: string;
	}

}

declare module TypExt.data {
	 interface IReaderConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig,TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Boolean) */
		implicitIncludes?: boolean;
		/** [Config Option] (Boolean) */
		keepRawData?: boolean;
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Boolean) */
		readRecordsOnFailure?: boolean;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Config Option] (Function|Object) */
		transform?: any;
		/** [Config Option] (String) */
		typeProperty?: string;
	}

}

declare module TypExt.data {
	 interface IDataReaderConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig,TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Boolean) */
		implicitIncludes?: boolean;
		/** [Config Option] (Boolean) */
		keepRawData?: boolean;
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String/Ext.data.Model) */
		model?: any;
		/** [Config Option] (Boolean) */
		readRecordsOnFailure?: boolean;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
		/** [Config Option] (Function|Object) */
		transform?: any;
		/** [Config Option] (String) */
		typeProperty?: string;
	}

}

declare module TypExt.data.reader {
	 interface IXmlConfig extends TypExt.data.reader.IReaderConfig {
		/** [Config Option] (String) */
		namespace?: string;
		/** [Config Option] (String) */
		record?: string;
	}

}

declare module TypExt.data {
	 interface IXmlReaderConfig extends TypExt.data.reader.IReaderConfig {
		/** [Config Option] (String) */
		namespace?: string;
		/** [Config Option] (String) */
		record?: string;
	}

}

declare module TypExt.data {
	 interface IRequestConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		action?: string;
		/** [Config Option] (Boolean) */
		binary?: boolean;
		/** [Config Option] (String) */
		callbackKey?: string;
		/** [Config Option] (Boolean) */
		disableCaching?: boolean;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (Object) */
		jsonData?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Ext.data.operation.Operation) */
		operation?: Ext.data.operation.IOperation;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (String) */
		password?: string;
		/** [Config Option] (Ext.data.proxy.Proxy) */
		proxy?: Ext.data.proxy.IProxy;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String) */
		username?: string;
		/** [Config Option] (Boolean) */
		withCredentials?: boolean;
		/** [Config Option] (Object) */
		xmlData?: any;
	}

}

declare module TypExt.data {
	 interface IResultSetConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Number) */
		count?: number;
		/** [Config Option] (Boolean) */
		loaded?: boolean;
		/** [Config Option] (String) */
		message?: string;
		/** [Config Option] (Ext.data.Model[]/Object[]) */
		records?: any;
		/** [Config Option] (Boolean) */
		success?: boolean;
		/** [Config Option] (Number) */
		total?: number;
	}

}

declare module TypExt.data.schema {
	 interface IAssociationConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		name?: string;
	}

}

declare module TypExt.data.schema {
	 interface IManyToManyConfig extends TypExt.data.schema.IAssociationConfig {
	}

}

declare module TypExt.data.schema {
	 interface IManyToOneConfig extends TypExt.data.schema.IAssociationConfig {
	}

}

declare module TypExt.data.schema {
	 interface INamerConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
	}

}

declare module TypExt.data.schema {
	 interface IOneToOneConfig extends TypExt.data.schema.IAssociationConfig {
	}

}

declare module TypExt.data.schema {
	 interface IRoleConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.data.schema {
	 interface ISchemaConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Object) */
		defaultIdentifier?: any;
		/** [Config Option] (String/Object/Ext.data.schema.Namer) */
		namer?: any;
		/** [Config Option] (String) */
		namespace?: string;
		/** [Config Option] (Object/Ext.util.ObjectTemplate) */
		proxy?: any;
		/** [Config Option] (String) */
		urlPrefix?: string;
	}

}

declare module TypExt.data.session {
	 interface IBatchVisitorConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.data.session {
	 interface IChangesVisitorConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.data.session {
	 interface IChildChangesVisitorConfig extends TypExt.data.session.IChangesVisitorConfig {
	}

}

declare module TypExt.data {
	 interface ISessionConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Boolean) */
		autoDestroy?: boolean;
		/** [Config Option] (Ext.data.Session) */
		parent?: Ext.data.ISession;
		/** [Config Option] (String/Ext.data.schema.Schema) */
		schema?: any;
	}

}

declare module TypExt.data.soap {
	 interface IProxyConfig extends TypExt.data.proxy.IAjaxConfig {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Ext.XTemplate/Array) */
		createBodyTpl?: any;
		/** [Config Option] (Ext.XTemplate/Array) */
		destroyBodyTpl?: any;
		/** [Config Option] (Array) */
		envelopeTpl?: any[];
		/** [Config Option] (String) */
		operationParam?: string;
		/** [Config Option] (Ext.XTemplate/Array) */
		readBodyTpl?: any;
		/** [Config Option] (Object/String/Ext.data.soap.Reader) */
		reader?: any;
		/** [Config Option] (Object) */
		soapAction?: any;
		/** [Config Option] (String) */
		targetNamespace?: string;
		/** [Config Option] (Ext.XTemplate/Array) */
		updateBodyTpl?: any;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (Ext.XTemplate/Array) */
		writeBodyTpl?: any;
	}

}

declare module TypExt.data.soap {
	 interface IReaderConfig extends TypExt.data.reader.IXmlConfig {
	}

}

declare module TypExt.data {
	 interface ISortTypesConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.data {
	 interface IStoreConfig extends TypExt.data.IProxyStoreConfig, TypExt.data.ILocalStoreConfig {
		/** [Config Option] (Boolean) */
		clearOnPageLoad?: boolean;
		/** [Config Option] (Boolean) */
		clearRemovedOnLoad?: boolean;
		/** [Config Option] (Object[]/Ext.data.Model[]) */
		data?: any;
		/** [Config Option] (Ext.data.Session) */
		session?: Ext.data.ISession;
	}

}

declare module TypExt.data {
	 interface IStoreManagerConfig extends TypExt.util.IMixedCollectionConfig {
	}

}

declare module TypExt {
	 interface IStoreMgrConfig extends TypExt.util.IMixedCollectionConfig {
	}

}

declare module TypExt.data {
	 interface IStoreMgrConfig extends TypExt.util.IMixedCollectionConfig {
	}

}

declare module TypExt {
	 interface IStoreManagerConfig extends TypExt.util.IMixedCollectionConfig {
	}

}

declare module TypExt.data {
	 interface ITreeModelConfig extends TypExt.data.IModelConfig, TypExt.mixin.IQueryableConfig {
		/** [Config Option] (String) */
		childType?: string;
	}

}

declare module TypExt.data {
	 interface ITreeStoreConfig extends TypExt.data.INodeStoreConfig {
		/** [Config Option] (Boolean) */
		clearOnLoad?: boolean;
		/** [Config Option] (Boolean) */
		clearRemovedOnLoad?: boolean;
		/** [Config Option] (String) */
		defaultRootId?: string;
		/** [Config Option] (String) */
		defaultRootProperty?: string;
		/** [Config Option] (String) */
		defaultRootText?: string;
		/** [Config Option] (Object[]) */
		fields?: any[];
		/** [Config Option] (Boolean) */
		folderSort?: boolean;
		/** [Config Option] (Boolean) */
		lazyFill?: boolean;
		/** [Config Option] (String) */
		nodeParam?: string;
		/** [Config Option] (String) */
		parentIdProperty?: string;
		/** [Config Option] (Boolean) */
		recursive?: boolean;
		/** [Config Option] (Ext.data.TreeModel/Ext.data.NodeInterface/Object) */
		root?: any;
		/** [Config Option] (Boolean) */
		rootVisible?: boolean;
	}

}

declare module TypExt.data {
	 interface ITypesConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.data {
	 interface IValidationConfig extends TypExt.data.IModelConfig {
	}

}

declare module TypExt.data.validator {
	 interface IBoundConfig extends TypExt.data.validator.IValidatorConfig {
		/** [Config Option] (String) */
		bothMessage?: string;
		/** [Config Option] (String) */
		emptyMessage?: string;
		/** [Config Option] (Number) */
		max?: number;
		/** [Config Option] (String) */
		maxOnlyMessage?: string;
		/** [Config Option] (Number) */
		min?: number;
		/** [Config Option] (String) */
		minOnlyMessage?: string;
	}

}

declare module TypExt.data.validator {
	 interface IEmailConfig extends TypExt.data.validator.IFormatConfig {
		/** [Config Option] (RegExp) */
		matcher?: RegExp;
		/** [Config Option] (String) */
		message?: string;
	}

}

declare module TypExt.data.validator {
	 interface IExclusionConfig extends TypExt.data.validator.IListConfig {
		/** [Config Option] (String) */
		message?: string;
	}

}

declare module TypExt.data.validator {
	 interface IFormatConfig extends TypExt.data.validator.IValidatorConfig {
		/** [Config Option] (RegExp) */
		matcher?: RegExp;
		/** [Config Option] (String) */
		message?: string;
	}

}

declare module TypExt.data.validator {
	 interface IInclusionConfig extends TypExt.data.validator.IListConfig {
		/** [Config Option] (String) */
		message?: string;
	}

}

declare module TypExt.data.validator {
	 interface ILengthConfig extends TypExt.data.validator.IBoundConfig {
		/** [Config Option] (String) */
		bothMessage?: string;
		/** [Config Option] (Number) */
		max?: number;
		/** [Config Option] (String) */
		maxOnlyMessage?: string;
		/** [Config Option] (Number) */
		min?: number;
		/** [Config Option] (String) */
		minOnlyMessage?: string;
	}

}

declare module TypExt.data.validator {
	 interface IListConfig extends TypExt.data.validator.IValidatorConfig {
		/** [Config Option] (Array) */
		list?: any[];
	}

}

declare module TypExt.data.validator {
	 interface IPresenceConfig extends TypExt.data.validator.IValidatorConfig {
		/** [Config Option] (Boolean) */
		allowEmpty?: boolean;
		/** [Config Option] (String) */
		message?: string;
	}

}

declare module TypExt.data.validator {
	 interface IRangeConfig extends TypExt.data.validator.IBoundConfig {
		/** [Config Option] (String) */
		bothMessage?: string;
		/** [Config Option] (Number) */
		max?: number;
		/** [Config Option] (String) */
		maxOnlyMessage?: string;
		/** [Config Option] (Number) */
		min?: number;
		/** [Config Option] (String) */
		minOnlyMessage?: string;
		/** [Config Option] (String) */
		nanMessage?: string;
	}

}

declare module TypExt.data.validator {
	 interface IValidatorConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
	}

}

declare module TypExt.data.writer {
	 interface IJsonConfig extends TypExt.data.writer.IWriterConfig {
		/** [Config Option] (Boolean) */
		allowSingle?: boolean;
		/** [Config Option] (Boolean) */
		encode?: boolean;
		/** [Config Option] (Boolean) */
		expandData?: boolean;
		/** [Config Option] (String) */
		rootProperty?: string;
	}

}

declare module TypExt.data {
	 interface IJsonWriterConfig extends TypExt.data.writer.IWriterConfig {
		/** [Config Option] (Boolean) */
		allowSingle?: boolean;
		/** [Config Option] (Boolean) */
		encode?: boolean;
		/** [Config Option] (Boolean) */
		expandData?: boolean;
		/** [Config Option] (String) */
		rootProperty?: string;
	}

}

declare module TypExt.data.writer {
	 interface IWriterConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Object) */
		allDataOptions?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (String) */
		nameProperty?: string;
		/** [Config Option] (Object) */
		partialDataOptions?: any;
		/** [Config Option] (Function|Object) */
		transform?: any;
		/** [Config Option] (Boolean) */
		writeAllFields?: boolean;
		/** [Config Option] (Boolean) */
		writeRecordId?: boolean;
	}

}

declare module TypExt.data {
	 interface IDataWriterConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Object) */
		allDataOptions?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (String) */
		nameProperty?: string;
		/** [Config Option] (Object) */
		partialDataOptions?: any;
		/** [Config Option] (Function|Object) */
		transform?: any;
		/** [Config Option] (Boolean) */
		writeAllFields?: boolean;
		/** [Config Option] (Boolean) */
		writeRecordId?: boolean;
	}

}

declare module TypExt.data {
	 interface IWriterConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Object) */
		allDataOptions?: any;
		/** [Config Option] (String) */
		clientIdProperty?: string;
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (String) */
		nameProperty?: string;
		/** [Config Option] (Object) */
		partialDataOptions?: any;
		/** [Config Option] (Function|Object) */
		transform?: any;
		/** [Config Option] (Boolean) */
		writeAllFields?: boolean;
		/** [Config Option] (Boolean) */
		writeRecordId?: boolean;
	}

}

declare module TypExt.data.writer {
	 interface IXmlConfig extends TypExt.data.writer.IWriterConfig {
		/** [Config Option] (String) */
		defaultDocumentRoot?: string;
		/** [Config Option] (String) */
		documentRoot?: string;
		/** [Config Option] (String) */
		header?: string;
		/** [Config Option] (String) */
		record?: string;
	}

}

declare module TypExt.data {
	 interface IXmlWriterConfig extends TypExt.data.writer.IWriterConfig {
		/** [Config Option] (String) */
		defaultDocumentRoot?: string;
		/** [Config Option] (String) */
		documentRoot?: string;
		/** [Config Option] (String) */
		header?: string;
		/** [Config Option] (String) */
		record?: string;
	}

}

declare module TypExt.data {
	 interface IXmlStoreConfig extends TypExt.data.IStoreConfig {
	}

}

declare module TypExt {
	 interface IDateConfig {
	}

}

declare module TypExt.dd {
	 interface IDDConfig extends TypExt.dd.IDragDropConfig {
	}

}

declare module TypExt.dd {
	 interface IDDProxyConfig extends TypExt.dd.IDDConfig {
	}

}

declare module TypExt.dd {
	 interface IDDTargetConfig extends TypExt.dd.IDragDropConfig {
	}

}

declare module TypExt.dd {
	 interface IDragDropConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.dd {
	 interface IDragDropElementConfig {
	}

}

declare module TypExt.dd.dragdropmanager {
	 interface IElementWrapperConfig {
	}

}

declare module TypExt.dd {
	 interface IDragDropManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.dd {
	 interface IDragDropMgrConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.dd {
	 interface IDDMConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.dd {
	 interface IDragSourceConfig extends TypExt.dd.IDDProxyConfig {
		/** [Config Option] (Boolean) */
		animRepair?: boolean;
		/** [Config Option] (String) */
		ddGroup?: string;
		/** [Config Option] (String) */
		dropAllowed?: string;
		/** [Config Option] (String) */
		dropNotAllowed?: string;
		/** [Config Option] (String) */
		repairHighlightColor?: string;
	}

}

declare module TypExt.dd {
	 interface IDragTrackerConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig {
		/** [Config Option] (Boolean/Number) */
		autoStart?: any;
		/** [Config Option] (Ext.util.Region/Ext.dom.Element) */
		constrainTo?: any;
		/** [Config Option] (String) */
		delegate?: string;
		/** [Config Option] (Ext.dom.Element/HTMLElement/String) */
		el?: any;
		/** [Config Option] (String) */
		overCls?: string;
		/** [Config Option] (Boolean) */
		preventDefault?: boolean;
		/** [Config Option] (Boolean) */
		stopEvent?: boolean;
		/** [Config Option] (Number) */
		tolerance?: number;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
	}

}

declare module TypExt.dd {
	 interface IDragZoneConfig extends TypExt.dd.IDragSourceConfig {
		/** [Config Option] (Object/Boolean) */
		containerScroll?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		scrollEl?: any;
	}

}

declare module TypExt.dd {
	 interface IDropTargetConfig extends TypExt.dd.IDDTargetConfig {
		/** [Config Option] (Boolean) */
		containerScroll?: boolean;
		/** [Config Option] (String) */
		ddGroup?: string;
		/** [Config Option] (String) */
		dropAllowed?: string;
		/** [Config Option] (String) */
		dropNotAllowed?: string;
		/** [Config Option] (String) */
		overClass?: string;
	}

}

declare module TypExt.dd {
	 interface IDropZoneConfig extends TypExt.dd.IDropTargetConfig {
	}

}

declare module TypExt.dd {
	 interface IRegistryConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.dd {
	 interface IScrollManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.dd {
	 interface IStatusProxyConfig extends TypExt.IComponentConfig {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		dropAllowed?: string;
		/** [Config Option] (String) */
		dropNotAllowed?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
	}

}

declare module TypExt.direct {
	 interface IEventConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.direct {
	 interface IExceptionEventConfig extends TypExt.direct.IRemotingEventConfig {
	}

}

declare module TypExt.direct {
	 interface IJsonProviderConfig extends TypExt.direct.IProviderConfig {
	}

}

declare module TypExt.direct {
	 interface IManagerConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
	}

}

declare module TypExt {
	 interface IDirectConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
	}

}

declare module TypExt.direct {
	 interface IPollingProviderConfig extends TypExt.direct.IJsonProviderConfig {
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Number) */
		interval?: number;
		/** [Config Option] (String/Function) */
		pollFn?: any;
		/** [Config Option] (String/Function) */
		url?: any;
	}

}

declare module TypExt.direct {
	 interface IProviderConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig {
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String[]) */
		relayedEvents?: string[];
	}

}

declare module TypExt.direct {
	 interface IRemotingEventConfig extends TypExt.direct.IEventConfig {
	}

}

declare module TypExt.direct {
	 interface IRemotingMethodConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.direct {
	 interface IRemotingProviderConfig extends TypExt.direct.IJsonProviderConfig {
		/** [Config Option] (Object) */
		actions?: any;
		/** [Config Option] (Boolean) */
		disableNestedActions?: boolean;
		/** [Config Option] (Number/Boolean) */
		enableBuffer?: any;
		/** [Config Option] (String) */
		enableUrlEncode?: string;
		/** [Config Option] (Number) */
		maxRetries?: number;
		/** [Config Option] (String/Object) */
		namespace?: any;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
	}

}

declare module TypExt.direct {
	 interface ITransactionConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Ext.direct.Provider) */
		provider?: Ext.direct.IProvider;
	}

}

declare module TypExt.dom {
	 interface IButtonElementConfig extends TypExt.dom.IElementConfig {
	}

}

declare module TypExt.dom {
	 interface ICompositeElementConfig extends TypExt.dom.ICompositeElementLiteConfig {
	}

}

declare module TypExt {
	 interface ICompositeElementConfig extends TypExt.dom.ICompositeElementLiteConfig {
	}

}

declare module TypExt.dom {
	 interface ICompositeElementLiteConfig extends TypExt.IBaseConfig, TypExt.dom.IElementConfig {
	}

}

declare module TypExt {
	 interface ICompositeElementLiteConfig extends TypExt.IBaseConfig, TypExt.dom.IElementConfig {
	}

}

declare module TypExt.dom {
	 interface IElementConfig extends TypExt.IBaseConfig, TypExt.util.IPositionableConfig,TypExt.mixin.IObservableConfig {
	}

}

declare module TypExt {
	 interface IElementConfig extends TypExt.IBaseConfig, TypExt.util.IPositionableConfig,TypExt.mixin.IObservableConfig {
	}

}

declare module TypExt.dom {
	 interface IElementEventConfig extends TypExt.util.IEventConfig {
	}

}

declare module TypExt.dom {
	 interface IFlyConfig extends TypExt.dom.IElementConfig {
	}

}

declare module TypExt.dom.element {
	 interface IFlyConfig extends TypExt.dom.IElementConfig {
	}

}

declare module TypExt.dom {
	 interface IGarbageCollectorConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.dom {
	 interface IHelperConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IDomHelperConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.dom {
	 interface ILayerConfig extends TypExt.IElementConfig {
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Object) */
		dh?: any;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (String/Boolean) */
		shadow?: any;
		/** [Config Option] (Number) */
		shadowOffset?: number;
		/** [Config Option] (String/Boolean) */
		shim?: any;
		/** [Config Option] (Boolean) */
		useDisplay?: boolean;
		/** [Config Option] (String) */
		visibilityCls?: string;
		/** [Config Option] (Number) */
		zindex?: number;
	}

}

declare module TypExt {
	 interface ILayerConfig extends TypExt.IElementConfig {
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Object) */
		dh?: any;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (String/Boolean) */
		shadow?: any;
		/** [Config Option] (Number) */
		shadowOffset?: number;
		/** [Config Option] (String/Boolean) */
		shim?: any;
		/** [Config Option] (Boolean) */
		useDisplay?: boolean;
		/** [Config Option] (String) */
		visibilityCls?: string;
		/** [Config Option] (Number) */
		zindex?: number;
	}

}

declare module TypExt.dom {
	 interface IQueryConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IDomQueryConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.core {
	 interface IDomQueryConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.dom {
	 interface IShadowConfig extends TypExt.dom.IUnderlayConfig {
		/** [Config Option] (String) */
		mode?: string;
		/** [Config Option] (Number) */
		offset?: number;
	}

}

declare module TypExt {
	 interface IShadowConfig extends TypExt.dom.IUnderlayConfig {
		/** [Config Option] (String) */
		mode?: string;
		/** [Config Option] (Number) */
		offset?: number;
	}

}

declare module TypExt.dom {
	 interface IShimConfig extends TypExt.dom.IUnderlayConfig {
	}

}

declare module TypExt.dom {
	 interface IUnderlayConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Ext.dom.Element) */
		target?: Ext.dom.IElement;
		/** [Config Option] (Number) */
		zIndex?: number;
	}

}

declare module TypExt.dom {
	 interface IUnderlayPoolConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.draw {
	 interface IAnimatorConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.draw {
	 interface IColorConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Number) */
		lightnessFactor?: number;
	}

}

declare module TypExt.draw {
	 interface IContainerConfig extends TypExt.draw.IContainerBaseConfig {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		engine?: string;
		/** [Config Option] (Object[]) */
		gradients?: any[];
		/** [Config Option] (Function) */
		resizeHandler?: any;
		/** [Config Option] (Object[]) */
		sprites?: any[];
	}

}

declare module TypExt.draw {
	 interface IComponentConfig extends TypExt.draw.IContainerBaseConfig {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		engine?: string;
		/** [Config Option] (Object[]) */
		gradients?: any[];
		/** [Config Option] (Function) */
		resizeHandler?: any;
		/** [Config Option] (Object[]) */
		sprites?: any[];
	}

}

declare module TypExt.draw {
	 interface IContainerBaseConfig extends TypExt.panel.IPanelConfig {
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
	}

}

declare module TypExt.draw {
	 interface IDrawConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.draw.engine {
	 interface ICanvasConfig extends TypExt.draw.ISurfaceConfig {
		/** [Config Option] (Boolean) */
		highPrecision?: boolean;
	}

}

declare module TypExt.draw.engine {
	 interface IExcanvasConfig {
	}

}

declare module TypExt.draw.engine {
	 interface ISvgConfig extends TypExt.draw.ISurfaceConfig {
		/** [Config Option] (Boolean) */
		highPrecision?: boolean;
	}

}

declare module TypExt.draw.engine.svgcontext {
	 interface IGradientConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.draw.engine {
	 interface ISvgContextConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.draw.gradient {
	 interface IGradientConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Array) */
		stops?: any[];
	}

}

declare module TypExt.draw.gradient {
	 interface IGradientDefinitionConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.draw.gradient {
	 interface ILinearConfig extends TypExt.draw.gradient.IGradientConfig {
		/** [Config Option] (Number) */
		degrees?: number;
		/** [Config Option] (Number) */
		radians?: number;
	}

}

declare module TypExt.draw.gradient {
	 interface IRadialConfig extends TypExt.draw.gradient.IGradientConfig {
		/** [Config Option] (Object) */
		end?: any;
		/** [Config Option] (Object) */
		start?: any;
	}

}

declare module TypExt.draw {
	 interface ILimitedCacheConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Function) */
		feeder?: any;
		/** [Config Option] (Number) */
		limit?: number;
		/** [Config Option] (Object) */
		scope?: any;
	}

}

declare module TypExt.draw {
	 interface IMatrixConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.draw.modifier {
	 interface IAnimationConfig extends TypExt.draw.modifier.IModifierConfig {
		/** [Config Option] (Object) */
		customDuration?: any;
		/** [Config Option] (Object) */
		customDurations?: any;
		/** [Config Option] (Object) */
		customEasings?: any;
		/** [Config Option] (Number) */
		duration?: number;
		/** [Config Option] (Function) */
		easing?: any;
	}

}

declare module TypExt.draw.modifier {
	 interface IHighlightConfig extends TypExt.draw.modifier.IModifierConfig {
		/** [Config Option] (Boolean) */
		enabled?: boolean;
		/** [Config Option] (Object) */
		highlightStyle?: any;
	}

}

declare module TypExt.draw.modifier {
	 interface IModifierConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (Ext.draw.modifier.Modifier) */
		next?: Ext.draw.modifier.IModifier;
		/** [Config Option] (Ext.draw.modifier.Modifier) */
		previous?: Ext.draw.modifier.IModifier;
		/** [Config Option] (Ext.draw.sprite.Sprite) */
		sprite?: Ext.draw.sprite.ISprite;
	}

}

declare module TypExt.draw.modifier {
	 interface ITargetConfig extends TypExt.draw.modifier.IModifierConfig {
	}

}

declare module TypExt.draw {
	 interface IPathConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.draw {
	 interface IPathUtilConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.draw.plugin {
	 interface ISpriteEventsConfig extends TypExt.plugin.IAbstractConfig {
	}

}

declare module TypExt.draw {
	 interface ISegmentTreeConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.draw.sprite {
	 interface IAnimationParserConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.draw.sprite {
	 interface IArcConfig extends TypExt.draw.sprite.ICircleConfig {
		/** [Config Option] (Boolean) */
		anticlockwise?: boolean;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		startAngle?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface IArrowConfig extends TypExt.draw.sprite.IPathConfig {
		/** [Config Option] (Number) */
		size?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface IAttributeDefinitionConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Object) */
		aliases?: any;
		/** [Config Option] (Object) */
		animationProcessors?: any;
		/** [Config Option] (Object) */
		defaults?: any;
		/** [Config Option] (Object) */
		dirtyTriggers?: any;
		/** [Config Option] (Object) */
		processors?: any;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Config Option] (Object) */
		updaters?: any;
	}

}

declare module TypExt.draw.sprite {
	 interface IAttributeParserConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.draw.sprite {
	 interface ICircleConfig extends TypExt.draw.sprite.IPathConfig {
		/** [Config Option] (Number) */
		cx?: number;
		/** [Config Option] (Number) */
		cy?: number;
		/** [Config Option] (Number) */
		r?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface ICompositeConfig extends TypExt.draw.sprite.ISpriteConfig {
	}

}

declare module TypExt.draw.sprite {
	 interface ICrossConfig extends TypExt.draw.sprite.IPathConfig {
		/** [Config Option] (Number) */
		size?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface IDiamondConfig extends TypExt.draw.sprite.IPathConfig {
		/** [Config Option] (Number) */
		size?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface IEllipseConfig extends TypExt.draw.sprite.IPathConfig {
		/** [Config Option] (Number) */
		axisRotation?: number;
		/** [Config Option] (Number) */
		cx?: number;
		/** [Config Option] (Number) */
		cy?: number;
		/** [Config Option] (Number) */
		rx?: number;
		/** [Config Option] (Number) */
		ry?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface IEllipticalArcConfig extends TypExt.draw.sprite.IEllipseConfig {
		/** [Config Option] (Boolean) */
		anticlockwise?: boolean;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		startAngle?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface IImageConfig extends TypExt.draw.sprite.IRectConfig {
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (String) */
		src?: string;
		/** [Config Option] (Number) */
		width?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface IInstancingConfig extends TypExt.draw.sprite.ISpriteConfig {
		/** [Config Option] (Object) */
		template?: any;
	}

}

declare module TypExt.draw.sprite {
	 interface ILineConfig extends TypExt.draw.sprite.ISpriteConfig {
	}

}

declare module TypExt.draw.sprite {
	 interface IPathConfig extends TypExt.draw.sprite.ISpriteConfig {
		/** [Config Option] (String) */
		path?: string;
	}

}

declare module TypExt.draw.sprite {
	 interface IPlusConfig extends TypExt.draw.sprite.IPathConfig {
		/** [Config Option] (Number) */
		size?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface IRectConfig extends TypExt.draw.sprite.IPathConfig {
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (Number) */
		radius?: number;
		/** [Config Option] (Number) */
		width?: number;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface ISectorConfig extends TypExt.draw.sprite.IPathConfig {
		/** [Config Option] (Number) */
		centerX?: number;
		/** [Config Option] (Number) */
		centerY?: number;
		/** [Config Option] (Number) */
		endAngle?: number;
		/** [Config Option] (Number) */
		endRho?: number;
		/** [Config Option] (Number) */
		margin?: number;
		/** [Config Option] (Number) */
		startAngle?: number;
		/** [Config Option] (Number) */
		startRho?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface ISpriteConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (Number) */
		fillOpacity?: number;
		/** [Config Option] (String) */
		fillStyle?: string;
		/** [Config Option] (Number) */
		globalAlpha?: number;
		/** [Config Option] (String) */
		globalCompositeOperation?: string;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		lineCap?: string;
		/** [Config Option] (Array) */
		lineDash?: any[];
		/** [Config Option] (Number) */
		lineDashOffset?: number;
		/** [Config Option] (String) */
		lineJoin?: string;
		/** [Config Option] (Number) */
		lineWidth?: number;
		/** [Config Option] (Number) */
		miterLimit?: number;
		/** [Config Option] (Number) */
		rotationCenterX?: number;
		/** [Config Option] (Number) */
		rotationCenterY?: number;
		/** [Config Option] (Number) */
		rotationRads?: number;
		/** [Config Option] (Number) */
		scalingCenterX?: number;
		/** [Config Option] (Number) */
		scalingCenterY?: number;
		/** [Config Option] (Number) */
		scalingX?: number;
		/** [Config Option] (Number) */
		scalingY?: number;
		/** [Config Option] (Number) */
		shadowBlur?: number;
		/** [Config Option] (String) */
		shadowColor?: string;
		/** [Config Option] (Number) */
		shadowOffsetX?: number;
		/** [Config Option] (Number) */
		shadowOffsetY?: number;
		/** [Config Option] (Number) */
		strokeOpacity?: number;
		/** [Config Option] (String) */
		strokeStyle?: string;
		/** [Config Option] (Ext.draw.Surface) */
		surface?: Ext.draw.ISurface;
		/** [Config Option] (Boolean) */
		transformFillStroke?: boolean;
		/** [Config Option] (Number) */
		translationX?: number;
		/** [Config Option] (Number) */
		translationY?: number;
		/** [Config Option] (Number) */
		zIndex?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface ISquareConfig extends TypExt.draw.sprite.IRectConfig {
		/** [Config Option] (Number) */
		size?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface ITextConfig extends TypExt.draw.sprite.ISpriteConfig {
		/** [Config Option] (String) */
		font?: string;
		/** [Config Option] (String) */
		fontFamily?: string;
		/** [Config Option] (String/Number) */
		fontSize?: any;
		/** [Config Option] (String) */
		fontStyle?: string;
		/** [Config Option] (String) */
		fontVariant?: string;
		/** [Config Option] (String) */
		fontWeight?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		textAlign?: string;
		/** [Config Option] (String) */
		textBaseline?: string;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
	}

}

declare module TypExt.draw.sprite {
	 interface ITickConfig extends TypExt.draw.sprite.ILineConfig {
		/** [Config Option] (Number) */
		size?: number;
		/** [Config Option] (Object) */
		x?: any;
		/** [Config Option] (Object) */
		y?: any;
	}

}

declare module TypExt.draw.sprite {
	 interface ITriangleConfig extends TypExt.draw.sprite.IPathConfig {
		/** [Config Option] (Number) */
		size?: number;
	}

}

declare module TypExt.draw {
	 interface ISurfaceConfig extends TypExt.draw.ISurfaceBaseConfig {
		/** [Config Option] (Object) */
		background?: any;
		/** [Config Option] (Boolean) */
		dirty?: boolean;
		/** [Config Option] (Boolean) */
		flipRtlText?: boolean;
		/** [Config Option] (Array) */
		items?: any[];
		/** [Config Option] (Array) */
		rect?: any[];
	}

}

declare module TypExt.draw {
	 interface ISurfaceBaseConfig extends TypExt.IWidgetConfig {
	}

}

declare module TypExt.draw {
	 interface ITextMeasurerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.draw {
	 interface ITimingFunctionsConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IEditorConfig extends TypExt.container.IContainerConfig {
		/** [Config Option] (String) */
		alignment?: string;
		/** [Config Option] (Boolean) */
		allowBlur?: boolean;
		/** [Config Option] (Boolean/Object) */
		autoSize?: any;
		/** [Config Option] (Boolean) */
		cancelOnEsc?: boolean;
		/** [Config Option] (Boolean) */
		completeOnEnter?: boolean;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Ext.form.field.Field) */
		field?: Ext.form.field.IField;
		/** [Config Option] (Boolean) */
		focusOnToFront?: boolean;
		/** [Config Option] (Boolean) */
		hideEl?: boolean;
		/** [Config Option] (Boolean) */
		ignoreNoChange?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number[]) */
		offsets?: number[];
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		parentEl?: any;
		/** [Config Option] (Boolean) */
		revertInvalid?: boolean;
		/** [Config Option] (Boolean/String) */
		shadow?: any;
		/** [Config Option] (Boolean) */
		swallowKeys?: boolean;
		/** [Config Option] (Boolean) */
		updateEl?: boolean;
		/** [Config Option] (Object) */
		value?: any;
	}

}

declare module TypExt {
	 interface IElementLoaderConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig {
		/** [Config Option] (Object) */
		ajaxOptions?: any;
		/** [Config Option] (Boolean/Object) */
		autoLoad?: any;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Function/String) */
		callback?: any;
		/** [Config Option] (Function/String) */
		failure?: any;
		/** [Config Option] (Boolean/String) */
		loadMask?: any;
		/** [Config Option] (Object) */
		params?: any;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object) */
		rendererScope?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		scripts?: boolean;
		/** [Config Option] (Function/String) */
		success?: any;
		/** [Config Option] (HTMLElement/Ext.dom.Element/String) */
		target?: any;
		/** [Config Option] (String) */
		url?: string;
	}

}

declare module TypExt.enums {
	 interface IFeatureConfig {
	}

}

declare module TypExt.enums {
	 interface ILayoutConfig {
	}

}

declare module TypExt.enums {
	 interface IPluginConfig {
	}

}

declare module TypExt.enums {
	 interface IWidgetConfig {
	}

}

declare module TypExt.env {
	 interface IBrowserConfig {
	}

}

declare module TypExt.env {
	 interface IOSConfig {
	}

}

declare module TypExt.env {
	 interface IReadyConfig {
	}

}

declare module TypExt {
	 interface IErrorConfig {
	}

}

declare module TypExt.event {
	 interface IEventConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IEventObjectImplConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.event.gesture {
	 interface IDoubleTapConfig extends TypExt.event.gesture.ISingleTouchConfig {
		/** [Config Option] (Number) */
		moveDistance?: number;
		/** [Config Option] (Number) */
		tapDistance?: number;
	}

}

declare module TypExt.event.gesture {
	 interface IDragConfig extends TypExt.event.gesture.ISingleTouchConfig {
		/** [Config Option] (Number) */
		minDistance?: number;
	}

}

declare module TypExt.event.gesture {
	 interface IEdgeSwipeConfig extends TypExt.event.gesture.ISwipeConfig {
	}

}

declare module TypExt.event.gesture {
	 interface ILongPressConfig extends TypExt.event.gesture.ISingleTouchConfig {
	}

}

declare module TypExt.event.gesture {
	 interface IMultiTouchConfig extends TypExt.event.gesture.IRecognizerConfig {
	}

}

declare module TypExt.event.gesture {
	 interface IPinchConfig extends TypExt.event.gesture.IMultiTouchConfig {
	}

}

declare module TypExt.event.gesture {
	 interface IRecognizerConfig extends TypExt.IBaseConfig, TypExt.mixin.IIdentifiableConfig {
	}

}

declare module TypExt.event.gesture {
	 interface IRotateConfig extends TypExt.event.gesture.IMultiTouchConfig {
	}

}

declare module TypExt.event.gesture {
	 interface ISingleTouchConfig extends TypExt.event.gesture.IRecognizerConfig {
	}

}

declare module TypExt.event.gesture {
	 interface ISwipeConfig extends TypExt.event.gesture.ISingleTouchConfig {
	}

}

declare module TypExt.event.gesture {
	 interface ITapConfig extends TypExt.event.gesture.ISingleTouchConfig {
		/** [Config Option] (Number) */
		moveDistance?: number;
	}

}

declare module TypExt.event.publisher {
	 interface IDomConfig extends TypExt.event.publisher.IPublisherConfig {
	}

}

declare module TypExt.event.publisher {
	 interface IElementPaintConfig extends TypExt.event.publisher.IPublisherConfig {
	}

}

declare module TypExt.event.publisher {
	 interface IElementSizeConfig extends TypExt.event.publisher.IPublisherConfig {
	}

}

declare module TypExt.event.publisher {
	 interface IFocusConfig extends TypExt.event.publisher.IDomConfig {
	}

}

declare module TypExt.event.publisher {
	 interface IGestureConfig extends TypExt.event.publisher.IDomConfig {
	}

}

declare module TypExt.event.publisher {
	 interface IMouseEnterLeaveConfig extends TypExt.event.publisher.IDomConfig {
	}

}

declare module TypExt.event.publisher {
	 interface IPublisherConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IEventedConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
	}

}

declare module TypExt {
	 interface IEventedBaseConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
	}

}

declare module TypExt {
	 interface IEventManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IFactoryConfig {
		/** [Config Option] (String) */
		aliasPrefix?: string;
		/** [Config Option] (String) */
		defaultProperty?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (String) */
		instanceProp?: string;
		/** [Config Option] (String) */
		xclass?: string;
	}

}

declare module TypExt {
	 interface IFeatureConfig {
	}

}

declare module TypExt.flash {
	 interface IComponentConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String) */
		backgroundColor?: string;
		/** [Config Option] (Boolean) */
		expressInstall?: boolean;
		/** [Config Option] (Object) */
		flashAttributes?: any;
		/** [Config Option] (Object) */
		flashParams?: any;
		/** [Config Option] (Object) */
		flashVars?: any;
		/** [Config Option] (String) */
		flashVersion?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String/Number) */
		swfHeight?: any;
		/** [Config Option] (String/Number) */
		swfWidth?: any;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String) */
		wmode?: string;
	}

}

declare module TypExt {
	 interface IFlashComponentConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String) */
		backgroundColor?: string;
		/** [Config Option] (Boolean) */
		expressInstall?: boolean;
		/** [Config Option] (Object) */
		flashAttributes?: any;
		/** [Config Option] (Object) */
		flashParams?: any;
		/** [Config Option] (Object) */
		flashVars?: any;
		/** [Config Option] (String) */
		flashVersion?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String/Number) */
		swfHeight?: any;
		/** [Config Option] (String/Number) */
		swfWidth?: any;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String) */
		wmode?: string;
	}

}

declare module TypExt {
	 interface IFocusManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IFocusMgrConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.form.action {
	 interface IActionConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Function/String) */
		failure?: any;
		/** [Config Option] (Ext.form.Basic) */
		form?: Ext.form.IBasic;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Object/String) */
		params?: any;
		/** [Config Option] (Boolean) */
		reset?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		submitEmptyText?: boolean;
		/** [Config Option] (Function/String) */
		success?: any;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String) */
		waitMsg?: string;
		/** [Config Option] (String) */
		waitTitle?: string;
	}

}

declare module TypExt.form {
	 interface IActionConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Function/String) */
		failure?: any;
		/** [Config Option] (Ext.form.Basic) */
		form?: Ext.form.IBasic;
		/** [Config Option] (Object) */
		headers?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (Object/String) */
		params?: any;
		/** [Config Option] (Boolean) */
		reset?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		submitEmptyText?: boolean;
		/** [Config Option] (Function/String) */
		success?: any;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String) */
		waitMsg?: string;
		/** [Config Option] (String) */
		waitTitle?: string;
	}

}

declare module TypExt.form.action {
	 interface IDirectActionConfig extends TypExt.IMixinConfig {
	}

}

declare module TypExt.form.action {
	 interface IDirectLoadConfig extends TypExt.form.action.ILoadConfig, TypExt.form.action.IDirectActionConfig {
	}

}

declare module TypExt.form.action {
	 interface IDirectSubmitConfig extends TypExt.form.action.ISubmitConfig, TypExt.form.action.IDirectActionConfig {
	}

}

declare module TypExt.form.action {
	 interface ILoadConfig extends TypExt.form.action.IActionConfig {
	}

}

declare module TypExt.form.action {
	 interface IStandardSubmitConfig extends TypExt.form.action.ISubmitConfig {
		/** [Config Option] (String) */
		target?: string;
	}

}

declare module TypExt.form.action {
	 interface ISubmitConfig extends TypExt.form.action.IActionConfig {
		/** [Config Option] (Boolean) */
		clientValidation?: boolean;
	}

}

declare module TypExt.form {
	 interface IBasicConfig extends TypExt.util.IObservableConfig {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		errorReader?: any;
		/** [Config Option] (Boolean) */
		jsonSubmit?: boolean;
		/** [Config Option] (Object/Array) */
		metadata?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: boolean;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		waitMsgTarget?: any;
		/** [Config Option] (String) */
		waitTitle?: string;
	}

}

declare module TypExt.form {
	 interface IBasicFormConfig extends TypExt.util.IObservableConfig {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		errorReader?: any;
		/** [Config Option] (Boolean) */
		jsonSubmit?: boolean;
		/** [Config Option] (Object/Array) */
		metadata?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: boolean;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		waitMsgTarget?: any;
		/** [Config Option] (String) */
		waitTitle?: string;
	}

}

declare module TypExt.form {
	 interface ICheckboxGroupConfig extends TypExt.form.IFieldContainerConfig, TypExt.form.field.IFieldConfig {
		/** [Config Option] (Boolean) */
		allowBlank?: boolean;
		/** [Config Option] (String) */
		blankText?: string;
		/** [Config Option] (String/Number/Number[]) */
		columns?: any;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Ext.form.field.Checkbox[]/Object[]) */
		items?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module TypExt.form {
	 interface ICheckboxManagerConfig extends TypExt.util.IMixedCollectionConfig {
	}

}

declare module TypExt.form.field {
	 interface IBaseConfig extends TypExt.IComponentConfig, TypExt.form.ILabelableConfig,TypExt.form.field.IFieldConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number) */
		checkChangeBuffer?: number;
		/** [Config Option] (String[]) */
		checkChangeEvents?: string[];
		/** [Config Option] (String) */
		dirtyCls?: string;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		fieldStyle?: string;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		inputAttrTpl?: any;
		/** [Config Option] (String) */
		inputId?: string;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (String) */
		readOnlyCls?: string;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Boolean) */
		validateOnBlur?: boolean;
	}

}

declare module TypExt.form {
	 interface IFieldConfig extends TypExt.IComponentConfig, TypExt.form.ILabelableConfig,TypExt.form.field.IFieldConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number) */
		checkChangeBuffer?: number;
		/** [Config Option] (String[]) */
		checkChangeEvents?: string[];
		/** [Config Option] (String) */
		dirtyCls?: string;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		fieldStyle?: string;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		inputAttrTpl?: any;
		/** [Config Option] (String) */
		inputId?: string;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (String) */
		readOnlyCls?: string;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Boolean) */
		validateOnBlur?: boolean;
	}

}

declare module TypExt.form {
	 interface IBaseFieldConfig extends TypExt.IComponentConfig, TypExt.form.ILabelableConfig,TypExt.form.field.IFieldConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number) */
		checkChangeBuffer?: number;
		/** [Config Option] (String[]) */
		checkChangeEvents?: string[];
		/** [Config Option] (String) */
		dirtyCls?: string;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		fieldStyle?: string;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		inputAttrTpl?: any;
		/** [Config Option] (String) */
		inputId?: string;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (Boolean) */
		liquidLayout?: boolean;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (String) */
		readOnlyCls?: string;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Boolean) */
		validateOnBlur?: boolean;
	}

}

declare module TypExt.form.field {
	 interface ICheckboxConfig extends TypExt.form.field.IBaseConfig {
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterBoxLabelTextTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterBoxLabelTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeBoxLabelTextTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeBoxLabelTpl?: any;
		/** [Config Option] (String) */
		boxLabel?: string;
		/** [Config Option] (String) */
		boxLabelAlign?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		boxLabelAttrTpl?: any;
		/** [Config Option] (String) */
		boxLabelCls?: string;
		/** [Config Option] (String[]) */
		checkChangeEvents?: string[];
		/** [Config Option] (Boolean) */
		checked?: boolean;
		/** [Config Option] (String) */
		checkedCls?: string;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		inputValue?: string;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		uncheckedValue?: string;
	}

}

declare module TypExt.form {
	 interface ICheckboxConfig extends TypExt.form.field.IBaseConfig {
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterBoxLabelTextTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterBoxLabelTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeBoxLabelTextTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeBoxLabelTpl?: any;
		/** [Config Option] (String) */
		boxLabel?: string;
		/** [Config Option] (String) */
		boxLabelAlign?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		boxLabelAttrTpl?: any;
		/** [Config Option] (String) */
		boxLabelCls?: string;
		/** [Config Option] (String[]) */
		checkChangeEvents?: string[];
		/** [Config Option] (Boolean) */
		checked?: boolean;
		/** [Config Option] (String) */
		checkedCls?: string;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (String) */
		inputValue?: string;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		uncheckedValue?: string;
	}

}

declare module TypExt.form.field {
	 interface IComboBoxConfig extends TypExt.form.field.IPickerConfig, TypExt.util.IStoreHolderConfig {
		/** [Config Option] (String) */
		allQuery?: string;
		/** [Config Option] (Boolean) */
		anyMatch?: boolean;
		/** [Config Option] (Boolean) */
		autoLoadOnValue?: boolean;
		/** [Config Option] (Boolean) */
		autoSelect?: boolean;
		/** [Config Option] (Boolean) */
		caseSensitive?: boolean;
		/** [Config Option] (Boolean) */
		clearFilterOnBlur?: boolean;
		/** [Config Option] (Boolean) */
		collapseOnSelect?: boolean;
		/** [Config Option] (Object) */
		defaultListConfig?: any;
		/** [Config Option] (String) */
		delimiter?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		displayTpl?: any;
		/** [Config Option] (Boolean) */
		enableRegEx?: boolean;
		/** [Config Option] (Boolean) */
		forceSelection?: boolean;
		/** [Config Option] (Boolean) */
		growToLongestValue?: boolean;
		/** [Config Option] (String) */
		hiddenName?: string;
		/** [Config Option] (Object) */
		listConfig?: any;
		/** [Config Option] (Number) */
		minChars?: number;
		/** [Config Option] (Boolean) */
		multiSelect?: boolean;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (Boolean) */
		pinList?: boolean;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Boolean) */
		queryCaching?: boolean;
		/** [Config Option] (Number) */
		queryDelay?: number;
		/** [Config Option] (String) */
		queryMode?: string;
		/** [Config Option] (String) */
		queryParam?: string;
		/** [Config Option] (Boolean) */
		selectOnTab?: boolean;
		/** [Config Option] (Ext.data.Model) */
		selection?: Ext.data.IModel;
		/** [Config Option] (Ext.data.Store/String/Array/Object) */
		store?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		transform?: any;
		/** [Config Option] (Boolean) */
		transformInPlace?: boolean;
		/** [Config Option] (String) */
		triggerAction?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Boolean) */
		typeAhead?: boolean;
		/** [Config Option] (Number) */
		typeAheadDelay?: number;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Config Option] (String) */
		valueNotFoundText?: string;
	}

}

declare module TypExt.form {
	 interface IComboBoxConfig extends TypExt.form.field.IPickerConfig, TypExt.util.IStoreHolderConfig {
		/** [Config Option] (String) */
		allQuery?: string;
		/** [Config Option] (Boolean) */
		anyMatch?: boolean;
		/** [Config Option] (Boolean) */
		autoLoadOnValue?: boolean;
		/** [Config Option] (Boolean) */
		autoSelect?: boolean;
		/** [Config Option] (Boolean) */
		caseSensitive?: boolean;
		/** [Config Option] (Boolean) */
		clearFilterOnBlur?: boolean;
		/** [Config Option] (Boolean) */
		collapseOnSelect?: boolean;
		/** [Config Option] (Object) */
		defaultListConfig?: any;
		/** [Config Option] (String) */
		delimiter?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		displayTpl?: any;
		/** [Config Option] (Boolean) */
		enableRegEx?: boolean;
		/** [Config Option] (Boolean) */
		forceSelection?: boolean;
		/** [Config Option] (Boolean) */
		growToLongestValue?: boolean;
		/** [Config Option] (String) */
		hiddenName?: string;
		/** [Config Option] (Object) */
		listConfig?: any;
		/** [Config Option] (Number) */
		minChars?: number;
		/** [Config Option] (Boolean) */
		multiSelect?: boolean;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (Boolean) */
		pinList?: boolean;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Boolean) */
		queryCaching?: boolean;
		/** [Config Option] (Number) */
		queryDelay?: number;
		/** [Config Option] (String) */
		queryMode?: string;
		/** [Config Option] (String) */
		queryParam?: string;
		/** [Config Option] (Boolean) */
		selectOnTab?: boolean;
		/** [Config Option] (Ext.data.Model) */
		selection?: Ext.data.IModel;
		/** [Config Option] (Ext.data.Store/String/Array/Object) */
		store?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		transform?: any;
		/** [Config Option] (Boolean) */
		transformInPlace?: boolean;
		/** [Config Option] (String) */
		triggerAction?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Boolean) */
		typeAhead?: boolean;
		/** [Config Option] (Number) */
		typeAheadDelay?: number;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Config Option] (String) */
		valueNotFoundText?: string;
	}

}

declare module TypExt.form.field {
	 interface IDateConfig extends TypExt.form.field.IPickerConfig {
		/** [Config Option] (String) */
		altFormats?: string;
		/** [Config Option] (String[]) */
		disabledDates?: string[];
		/** [Config Option] (String) */
		disabledDatesText?: string;
		/** [Config Option] (Number[]) */
		disabledDays?: number[];
		/** [Config Option] (String) */
		disabledDaysText?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (Boolean) */
		matchFieldWidth?: boolean;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date/String) */
		maxValue?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Date/String) */
		minValue?: any;
		/** [Config Option] (Boolean) */
		showToday?: boolean;
		/** [Config Option] (Number) */
		startDay?: number;
		/** [Config Option] (String) */
		submitFormat?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (Boolean) */
		useStrict?: boolean;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
	}

}

declare module TypExt.form {
	 interface IDateFieldConfig extends TypExt.form.field.IPickerConfig {
		/** [Config Option] (String) */
		altFormats?: string;
		/** [Config Option] (String[]) */
		disabledDates?: string[];
		/** [Config Option] (String) */
		disabledDatesText?: string;
		/** [Config Option] (Number[]) */
		disabledDays?: number[];
		/** [Config Option] (String) */
		disabledDaysText?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (Boolean) */
		matchFieldWidth?: boolean;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date/String) */
		maxValue?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Date/String) */
		minValue?: any;
		/** [Config Option] (Boolean) */
		showToday?: boolean;
		/** [Config Option] (Number) */
		startDay?: number;
		/** [Config Option] (String) */
		submitFormat?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (Boolean) */
		useStrict?: boolean;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
	}

}

declare module TypExt.form {
	 interface IDateConfig extends TypExt.form.field.IPickerConfig {
		/** [Config Option] (String) */
		altFormats?: string;
		/** [Config Option] (String[]) */
		disabledDates?: string[];
		/** [Config Option] (String) */
		disabledDatesText?: string;
		/** [Config Option] (Number[]) */
		disabledDays?: number[];
		/** [Config Option] (String) */
		disabledDaysText?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (Boolean) */
		matchFieldWidth?: boolean;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date/String) */
		maxValue?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Date/String) */
		minValue?: any;
		/** [Config Option] (Boolean) */
		showToday?: boolean;
		/** [Config Option] (Number) */
		startDay?: number;
		/** [Config Option] (String) */
		submitFormat?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (Boolean) */
		useStrict?: boolean;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
	}

}

declare module TypExt.form.field {
	 interface IDisplayConfig extends TypExt.form.field.IBaseConfig {
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (Boolean) */
		htmlEncode?: boolean;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
	}

}

declare module TypExt.form {
	 interface IDisplayFieldConfig extends TypExt.form.field.IBaseConfig {
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (Boolean) */
		htmlEncode?: boolean;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
	}

}

declare module TypExt.form {
	 interface IDisplayConfig extends TypExt.form.field.IBaseConfig {
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldCls?: string;
		/** [Config Option] (Boolean) */
		htmlEncode?: boolean;
		/** [Config Option] (Function) */
		renderer?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
	}

}

declare module TypExt.form.field {
	 interface IFieldConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String) */
		name?: string;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
		/** [Config Option] (Boolean) */
		validateOnChange?: boolean;
		/** [Config Option] (Boolean/String) */
		validation?: any;
		/** [Config Option] (Object) */
		value?: any;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
	}

}

declare module TypExt.form.field {
	 interface IFileConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (Object) */
		buttonConfig?: any;
		/** [Config Option] (Number) */
		buttonMargin?: number;
		/** [Config Option] (Boolean) */
		buttonOnly?: boolean;
		/** [Config Option] (String) */
		buttonText?: string;
		/** [Config Option] (Boolean) */
		clearOnSubmit?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
		/** [Config Option] (Object) */
		triggers?: any;
	}

}

declare module TypExt.form {
	 interface IFileUploadFieldConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (Object) */
		buttonConfig?: any;
		/** [Config Option] (Number) */
		buttonMargin?: number;
		/** [Config Option] (Boolean) */
		buttonOnly?: boolean;
		/** [Config Option] (String) */
		buttonText?: string;
		/** [Config Option] (Boolean) */
		clearOnSubmit?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
		/** [Config Option] (Object) */
		triggers?: any;
	}

}

declare module TypExt.ux.form {
	 interface IFileUploadFieldConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (Object) */
		buttonConfig?: any;
		/** [Config Option] (Number) */
		buttonMargin?: number;
		/** [Config Option] (Boolean) */
		buttonOnly?: boolean;
		/** [Config Option] (String) */
		buttonText?: string;
		/** [Config Option] (Boolean) */
		clearOnSubmit?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
		/** [Config Option] (Object) */
		triggers?: any;
	}

}

declare module TypExt.form {
	 interface IFileConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (Object) */
		buttonConfig?: any;
		/** [Config Option] (Number) */
		buttonMargin?: number;
		/** [Config Option] (Boolean) */
		buttonOnly?: boolean;
		/** [Config Option] (String) */
		buttonText?: string;
		/** [Config Option] (Boolean) */
		clearOnSubmit?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (Boolean) */
		submitValue?: boolean;
		/** [Config Option] (Object) */
		triggers?: any;
	}

}

declare module TypExt.form.field {
	 interface IFileButtonConfig extends TypExt.button.IButtonConfig {
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Boolean) */
		preventDefault?: boolean;
		/** [Config Option] (Number) */
		tabIndex?: number;
	}

}

declare module TypExt.form.field {
	 interface IHiddenConfig extends TypExt.form.field.IBaseConfig {
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (Boolean) */
		hideLabel?: boolean;
		/** [Config Option] (String) */
		inputType?: string;
	}

}

declare module TypExt.form {
	 interface IHiddenConfig extends TypExt.form.field.IBaseConfig {
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (Boolean) */
		hideLabel?: boolean;
		/** [Config Option] (String) */
		inputType?: string;
	}

}

declare module TypExt.form.field {
	 interface IHtmlEditorConfig extends TypExt.form.IFieldContainerConfig, TypExt.form.field.IFieldConfig {
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterIFrameTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterTextAreaTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeIFrameTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeTextAreaTpl?: any;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		createLinkText?: string;
		/** [Config Option] (String) */
		defaultButtonUI?: string;
		/** [Config Option] (String) */
		defaultLinkValue?: string;
		/** [Config Option] (String) */
		defaultValue?: string;
		/** [Config Option] (Boolean) */
		enableAlignments?: boolean;
		/** [Config Option] (Boolean) */
		enableColors?: boolean;
		/** [Config Option] (Boolean) */
		enableFont?: boolean;
		/** [Config Option] (Boolean) */
		enableFontSize?: boolean;
		/** [Config Option] (Boolean) */
		enableFormat?: boolean;
		/** [Config Option] (Boolean) */
		enableLinks?: boolean;
		/** [Config Option] (Boolean) */
		enableLists?: boolean;
		/** [Config Option] (Boolean) */
		enableSourceEdit?: boolean;
		/** [Config Option] (String[]) */
		fontFamilies?: string[];
		/** [Config Option] (String/Array/Ext.XTemplate) */
		iframeAttrTpl?: any;
	}

}

declare module TypExt.form {
	 interface IHtmlEditorConfig extends TypExt.form.IFieldContainerConfig, TypExt.form.field.IFieldConfig {
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterIFrameTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterTextAreaTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeIFrameTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeTextAreaTpl?: any;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		createLinkText?: string;
		/** [Config Option] (String) */
		defaultButtonUI?: string;
		/** [Config Option] (String) */
		defaultLinkValue?: string;
		/** [Config Option] (String) */
		defaultValue?: string;
		/** [Config Option] (Boolean) */
		enableAlignments?: boolean;
		/** [Config Option] (Boolean) */
		enableColors?: boolean;
		/** [Config Option] (Boolean) */
		enableFont?: boolean;
		/** [Config Option] (Boolean) */
		enableFontSize?: boolean;
		/** [Config Option] (Boolean) */
		enableFormat?: boolean;
		/** [Config Option] (Boolean) */
		enableLinks?: boolean;
		/** [Config Option] (Boolean) */
		enableLists?: boolean;
		/** [Config Option] (Boolean) */
		enableSourceEdit?: boolean;
		/** [Config Option] (String[]) */
		fontFamilies?: string[];
		/** [Config Option] (String/Array/Ext.XTemplate) */
		iframeAttrTpl?: any;
	}

}

declare module TypExt.form.field {
	 interface INumberConfig extends TypExt.form.field.ISpinnerConfig {
		/** [Config Option] (Boolean) */
		allowDecimals?: boolean;
		/** [Config Option] (Boolean) */
		allowExponential?: boolean;
		/** [Config Option] (Boolean) */
		autoStripChars?: boolean;
		/** [Config Option] (String) */
		baseChars?: string;
		/** [Config Option] (Number) */
		decimalPrecision?: number;
		/** [Config Option] (String) */
		decimalSeparator?: string;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (String) */
		nanText?: string;
		/** [Config Option] (String) */
		negativeText?: string;
		/** [Config Option] (Number) */
		step?: number;
		/** [Config Option] (Boolean) */
		submitLocaleSeparator?: boolean;
	}

}

declare module TypExt.form {
	 interface INumberFieldConfig extends TypExt.form.field.ISpinnerConfig {
		/** [Config Option] (Boolean) */
		allowDecimals?: boolean;
		/** [Config Option] (Boolean) */
		allowExponential?: boolean;
		/** [Config Option] (Boolean) */
		autoStripChars?: boolean;
		/** [Config Option] (String) */
		baseChars?: string;
		/** [Config Option] (Number) */
		decimalPrecision?: number;
		/** [Config Option] (String) */
		decimalSeparator?: string;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (String) */
		nanText?: string;
		/** [Config Option] (String) */
		negativeText?: string;
		/** [Config Option] (Number) */
		step?: number;
		/** [Config Option] (Boolean) */
		submitLocaleSeparator?: boolean;
	}

}

declare module TypExt.form {
	 interface INumberConfig extends TypExt.form.field.ISpinnerConfig {
		/** [Config Option] (Boolean) */
		allowDecimals?: boolean;
		/** [Config Option] (Boolean) */
		allowExponential?: boolean;
		/** [Config Option] (Boolean) */
		autoStripChars?: boolean;
		/** [Config Option] (String) */
		baseChars?: string;
		/** [Config Option] (Number) */
		decimalPrecision?: number;
		/** [Config Option] (String) */
		decimalSeparator?: string;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (String) */
		nanText?: string;
		/** [Config Option] (String) */
		negativeText?: string;
		/** [Config Option] (Number) */
		step?: number;
		/** [Config Option] (Boolean) */
		submitLocaleSeparator?: boolean;
	}

}

declare module TypExt.form.field {
	 interface IPickerConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		matchFieldWidth?: boolean;
		/** [Config Option] (String) */
		openCls?: string;
		/** [Config Option] (String) */
		pickerAlign?: string;
		/** [Config Option] (Number[]) */
		pickerOffset?: number[];
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (Object) */
		triggers?: any;
	}

}

declare module TypExt.form {
	 interface IPickerConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		matchFieldWidth?: boolean;
		/** [Config Option] (String) */
		openCls?: string;
		/** [Config Option] (String) */
		pickerAlign?: string;
		/** [Config Option] (Number[]) */
		pickerOffset?: number[];
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (Object) */
		triggers?: any;
	}

}

declare module TypExt.form.field {
	 interface IRadioConfig extends TypExt.form.field.ICheckboxConfig {
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (Number) */
		tabIndex?: number;
	}

}

declare module TypExt.form {
	 interface IRadioConfig extends TypExt.form.field.ICheckboxConfig {
		/** [Config Option] (String) */
		inputType?: string;
		/** [Config Option] (Number) */
		tabIndex?: number;
	}

}

declare module TypExt.form.field {
	 interface ISpinnerConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (Boolean) */
		keyNavEnabled?: boolean;
		/** [Config Option] (Boolean) */
		mouseWheelEnabled?: boolean;
		/** [Config Option] (Boolean) */
		repeatTriggerClick?: boolean;
		/** [Config Option] (Boolean) */
		spinDownEnabled?: boolean;
		/** [Config Option] (Boolean) */
		spinUpEnabled?: boolean;
		/** [Config Option] (Object) */
		triggers?: any;
	}

}

declare module TypExt.form {
	 interface ISpinnerConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (Boolean) */
		keyNavEnabled?: boolean;
		/** [Config Option] (Boolean) */
		mouseWheelEnabled?: boolean;
		/** [Config Option] (Boolean) */
		repeatTriggerClick?: boolean;
		/** [Config Option] (Boolean) */
		spinDownEnabled?: boolean;
		/** [Config Option] (Boolean) */
		spinUpEnabled?: boolean;
		/** [Config Option] (Object) */
		triggers?: any;
	}

}

declare module TypExt.form.field {
	 interface ITagConfig extends TypExt.form.field.IComboBoxConfig {
		/** [Config Option] (Boolean) */
		createNewOnBlur?: boolean;
		/** [Config Option] (Boolean) */
		createNewOnEnter?: boolean;
		/** [Config Option] (String) */
		delimiter?: string;
		/** [Config Option] (Boolean) */
		encodeSubmitValue?: boolean;
		/** [Config Option] (Boolean) */
		filterPickList?: boolean;
		/** [Config Option] (Boolean) */
		forceSelection?: boolean;
		/** [Config Option] (Boolean) */
		grow?: boolean;
		/** [Config Option] (Number/Boolean) */
		growMax?: any;
		/** [Config Option] (Number/Boolean) */
		growMin?: any;
		/** [Config Option] (String/Ext.XTemplate) */
		labelTpl?: any;
		/** [Config Option] (Boolean) */
		multiSelect?: boolean;
		/** [Config Option] (Boolean) */
		selectOnFocus?: boolean;
		/** [Config Option] (Boolean) */
		stacked?: boolean;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Config Option] (Boolean) */
		triggerOnClick?: boolean;
		/** [Config Option] (String) */
		valueParam?: string;
	}

}

declare module TypExt.form.field {
	 interface ITextConfig extends TypExt.form.field.IBaseConfig {
		/** [Config Option] (Boolean) */
		allowBlank?: boolean;
		/** [Config Option] (Boolean) */
		allowOnlyWhitespace?: boolean;
		/** [Config Option] (String) */
		blankText?: string;
		/** [Config Option] (Boolean) */
		disableKeyFilter?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (String) */
		emptyCls?: string;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Boolean) */
		enableKeyEvents?: boolean;
		/** [Config Option] (Boolean) */
		enforceMaxLength?: boolean;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (Boolean) */
		grow?: boolean;
		/** [Config Option] (String) */
		growAppend?: string;
		/** [Config Option] (Number) */
		growMax?: number;
		/** [Config Option] (Number) */
		growMin?: number;
		/** [Config Option] (Boolean) */
		hideTrigger?: boolean;
		/** [Config Option] (String) */
		inputWrapCls?: string;
		/** [Config Option] (RegExp) */
		maskRe?: RegExp;
		/** [Config Option] (Number) */
		maxLength?: number;
		/** [Config Option] (String) */
		maxLengthText?: string;
		/** [Config Option] (Number) */
		minLength?: number;
		/** [Config Option] (String) */
		minLengthText?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (RegExp) */
		regex?: RegExp;
		/** [Config Option] (String) */
		regexText?: string;
		/** [Config Option] (Boolean) */
		repeatTriggerClick?: boolean;
		/** [Config Option] (String) */
		requiredCls?: string;
		/** [Config Option] (Boolean) */
		selectOnFocus?: boolean;
		/** [Config Option] (Number) */
		size?: number;
		/** [Config Option] (RegExp) */
		stripCharsRe?: RegExp;
		/** [Config Option] (String) */
		triggerWrapCls?: string;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Config Option] (Boolean) */
		validateBlank?: boolean;
		/** [Config Option] (Function) */
		validator?: any;
		/** [Config Option] (String) */
		vtype?: string;
		/** [Config Option] (String) */
		vtypeText?: string;
	}

}

declare module TypExt.form {
	 interface ITextFieldConfig extends TypExt.form.field.IBaseConfig {
		/** [Config Option] (Boolean) */
		allowBlank?: boolean;
		/** [Config Option] (Boolean) */
		allowOnlyWhitespace?: boolean;
		/** [Config Option] (String) */
		blankText?: string;
		/** [Config Option] (Boolean) */
		disableKeyFilter?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (String) */
		emptyCls?: string;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Boolean) */
		enableKeyEvents?: boolean;
		/** [Config Option] (Boolean) */
		enforceMaxLength?: boolean;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (Boolean) */
		grow?: boolean;
		/** [Config Option] (String) */
		growAppend?: string;
		/** [Config Option] (Number) */
		growMax?: number;
		/** [Config Option] (Number) */
		growMin?: number;
		/** [Config Option] (Boolean) */
		hideTrigger?: boolean;
		/** [Config Option] (String) */
		inputWrapCls?: string;
		/** [Config Option] (RegExp) */
		maskRe?: RegExp;
		/** [Config Option] (Number) */
		maxLength?: number;
		/** [Config Option] (String) */
		maxLengthText?: string;
		/** [Config Option] (Number) */
		minLength?: number;
		/** [Config Option] (String) */
		minLengthText?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (RegExp) */
		regex?: RegExp;
		/** [Config Option] (String) */
		regexText?: string;
		/** [Config Option] (Boolean) */
		repeatTriggerClick?: boolean;
		/** [Config Option] (String) */
		requiredCls?: string;
		/** [Config Option] (Boolean) */
		selectOnFocus?: boolean;
		/** [Config Option] (Number) */
		size?: number;
		/** [Config Option] (RegExp) */
		stripCharsRe?: RegExp;
		/** [Config Option] (String) */
		triggerWrapCls?: string;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Config Option] (Boolean) */
		validateBlank?: boolean;
		/** [Config Option] (Function) */
		validator?: any;
		/** [Config Option] (String) */
		vtype?: string;
		/** [Config Option] (String) */
		vtypeText?: string;
	}

}

declare module TypExt.form {
	 interface ITextConfig extends TypExt.form.field.IBaseConfig {
		/** [Config Option] (Boolean) */
		allowBlank?: boolean;
		/** [Config Option] (Boolean) */
		allowOnlyWhitespace?: boolean;
		/** [Config Option] (String) */
		blankText?: string;
		/** [Config Option] (Boolean) */
		disableKeyFilter?: boolean;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (String) */
		emptyCls?: string;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Boolean) */
		enableKeyEvents?: boolean;
		/** [Config Option] (Boolean) */
		enforceMaxLength?: boolean;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (Boolean) */
		grow?: boolean;
		/** [Config Option] (String) */
		growAppend?: string;
		/** [Config Option] (Number) */
		growMax?: number;
		/** [Config Option] (Number) */
		growMin?: number;
		/** [Config Option] (Boolean) */
		hideTrigger?: boolean;
		/** [Config Option] (String) */
		inputWrapCls?: string;
		/** [Config Option] (RegExp) */
		maskRe?: RegExp;
		/** [Config Option] (Number) */
		maxLength?: number;
		/** [Config Option] (String) */
		maxLengthText?: string;
		/** [Config Option] (Number) */
		minLength?: number;
		/** [Config Option] (String) */
		minLengthText?: string;
		/** [Config Option] (Boolean) */
		readOnly?: boolean;
		/** [Config Option] (RegExp) */
		regex?: RegExp;
		/** [Config Option] (String) */
		regexText?: string;
		/** [Config Option] (Boolean) */
		repeatTriggerClick?: boolean;
		/** [Config Option] (String) */
		requiredCls?: string;
		/** [Config Option] (Boolean) */
		selectOnFocus?: boolean;
		/** [Config Option] (Number) */
		size?: number;
		/** [Config Option] (RegExp) */
		stripCharsRe?: RegExp;
		/** [Config Option] (String) */
		triggerWrapCls?: string;
		/** [Config Option] (Object) */
		triggers?: any;
		/** [Config Option] (Boolean) */
		validateBlank?: boolean;
		/** [Config Option] (Function) */
		validator?: any;
		/** [Config Option] (String) */
		vtype?: string;
		/** [Config Option] (String) */
		vtypeText?: string;
	}

}

declare module TypExt.form.field {
	 interface ITextAreaConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (Boolean) */
		enterIsSpecial?: boolean;
		/** [Config Option] (String) */
		growAppend?: string;
		/** [Config Option] (Number) */
		growMax?: number;
		/** [Config Option] (Number) */
		growMin?: number;
		/** [Config Option] (Boolean) */
		preventScrollbars?: boolean;
	}

}

declare module TypExt.form {
	 interface ITextAreaConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (Boolean) */
		enterIsSpecial?: boolean;
		/** [Config Option] (String) */
		growAppend?: string;
		/** [Config Option] (Number) */
		growMax?: number;
		/** [Config Option] (Number) */
		growMin?: number;
		/** [Config Option] (Boolean) */
		preventScrollbars?: boolean;
	}

}

declare module TypExt.form.field {
	 interface ITimeConfig extends TypExt.form.field.IComboBoxConfig {
		/** [Config Option] (String) */
		altFormats?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date/String) */
		maxValue?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Date/String) */
		minValue?: any;
		/** [Config Option] (Number) */
		pickerMaxHeight?: number;
		/** [Config Option] (String) */
		queryMode?: string;
		/** [Config Option] (Boolean) */
		selectOnTab?: boolean;
		/** [Config Option] (Boolean) */
		snapToIncrement?: boolean;
		/** [Config Option] (String) */
		submitFormat?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
	}

}

declare module TypExt.form {
	 interface ITimeFieldConfig extends TypExt.form.field.IComboBoxConfig {
		/** [Config Option] (String) */
		altFormats?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date/String) */
		maxValue?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Date/String) */
		minValue?: any;
		/** [Config Option] (Number) */
		pickerMaxHeight?: number;
		/** [Config Option] (String) */
		queryMode?: string;
		/** [Config Option] (Boolean) */
		selectOnTab?: boolean;
		/** [Config Option] (Boolean) */
		snapToIncrement?: boolean;
		/** [Config Option] (String) */
		submitFormat?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
	}

}

declare module TypExt.form {
	 interface ITimeConfig extends TypExt.form.field.IComboBoxConfig {
		/** [Config Option] (String) */
		altFormats?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (String) */
		invalidText?: string;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date/String) */
		maxValue?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (Date/String) */
		minValue?: any;
		/** [Config Option] (Number) */
		pickerMaxHeight?: number;
		/** [Config Option] (String) */
		queryMode?: string;
		/** [Config Option] (Boolean) */
		selectOnTab?: boolean;
		/** [Config Option] (Boolean) */
		snapToIncrement?: boolean;
		/** [Config Option] (String) */
		submitFormat?: string;
		/** [Config Option] (String) */
		triggerCls?: string;
		/** [Config Option] (String) */
		valueField?: string;
		/** [Config Option] (String[]/String) */
		valuePublishEvent?: any;
	}

}

declare module TypExt.form.field {
	 interface ITriggerConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (String) */
		triggerCls?: string;
	}

}

declare module TypExt.form {
	 interface ITriggerFieldConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (String) */
		triggerCls?: string;
	}

}

declare module TypExt.form {
	 interface ITwinTriggerFieldConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (String) */
		triggerCls?: string;
	}

}

declare module TypExt.form {
	 interface ITriggerConfig extends TypExt.form.field.ITextConfig {
		/** [Config Option] (String) */
		triggerCls?: string;
	}

}

declare module TypExt.form.field {
	 interface IVTypesConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.form {
	 interface IVTypesConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.form {
	 interface IFieldAncestorConfig extends TypExt.IMixinConfig {
		/** [Config Option] (Object) */
		fieldDefaults?: any;
	}

}

declare module TypExt.form {
	 interface IFieldContainerConfig extends TypExt.container.IContainerConfig, TypExt.form.ILabelableConfig,TypExt.form.IFieldAncestorConfig {
		/** [Config Option] (Boolean) */
		combineErrors?: boolean;
		/** [Config Option] (Boolean) */
		combineLabels?: boolean;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		invalidCls?: string;
		/** [Config Option] (String) */
		labelConnector?: string;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
	}

}

declare module TypExt.form {
	 interface IFieldSetConfig extends TypExt.container.IContainerConfig, TypExt.form.IFieldAncestorConfig {
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		checkboxName?: string;
		/** [Config Option] (Boolean) */
		checkboxToggle?: boolean;
		/** [Config Option] (String) */
		checkboxUI?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		collapsed?: boolean;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String[]) */
		stateEvents?: string[];
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (Boolean) */
		toggleOnTitleClick?: boolean;
	}

}

declare module TypExt.form {
	 interface ILabelConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (String) */
		forId?: string;
		/** [Config Option] (String) */
		html?: string;
		/** [Config Option] (String) */
		text?: string;
	}

}

declare module TypExt.form {
	 interface ILabelableConfig extends TypExt.IMixinConfig {
		/** [Config Option] (String) */
		activeError?: string;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		activeErrorsTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterBodyEl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterLabelTextTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterLabelTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		afterSubTpl?: any;
		/** [Config Option] (Boolean) */
		autoFitErrors?: boolean;
		/** [Config Option] (String) */
		baseBodyCls?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeBodyEl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeLabelTextTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeLabelTpl?: any;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeSubTpl?: any;
		/** [Config Option] (String) */
		errorMsgCls?: string;
		/** [Config Option] (String) */
		fieldBodyCls?: string;
		/** [Config Option] (String) */
		fieldLabel?: string;
		/** [Config Option] (String) */
		formItemCls?: string;
		/** [Config Option] (Boolean) */
		hideEmptyLabel?: boolean;
		/** [Config Option] (Boolean) */
		hideLabel?: boolean;
		/** [Config Option] (String) */
		invalidCls?: string;
		/** [Config Option] (String) */
		labelAlign?: string;
		/** [Config Option] (String/Array/Ext.XTemplate) */
		labelAttrTpl?: any;
		/** [Config Option] (String) */
		labelCls?: string;
		/** [Config Option] (String) */
		labelClsExtra?: string;
		/** [Config Option] (Number) */
		labelPad?: number;
		/** [Config Option] (String) */
		labelSeparator?: string;
		/** [Config Option] (String) */
		labelStyle?: string;
		/** [Config Option] (Number) */
		labelWidth?: number;
		/** [Config Option] (String) */
		msgTarget?: string;
		/** [Config Option] (Boolean) */
		preventMark?: boolean;
	}

}

declare module TypExt.form {
	 interface IPanelConfig extends TypExt.panel.IPanelConfig, TypExt.form.IFieldAncestorConfig {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		errorReader?: any;
		/** [Config Option] (Boolean) */
		jsonSubmit?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Config Option] (Boolean) */
		pollForChanges?: boolean;
		/** [Config Option] (Number) */
		pollInterval?: number;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: boolean;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		waitMsgTarget?: any;
		/** [Config Option] (String) */
		waitTitle?: string;
	}

}

declare module TypExt {
	 interface IFormPanelConfig extends TypExt.panel.IPanelConfig, TypExt.form.IFieldAncestorConfig {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		errorReader?: any;
		/** [Config Option] (Boolean) */
		jsonSubmit?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Config Option] (Boolean) */
		pollForChanges?: boolean;
		/** [Config Option] (Number) */
		pollInterval?: number;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: boolean;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		waitMsgTarget?: any;
		/** [Config Option] (String) */
		waitTitle?: string;
	}

}

declare module TypExt.form {
	 interface IFormPanelConfig extends TypExt.panel.IPanelConfig, TypExt.form.IFieldAncestorConfig {
		/** [Config Option] (Object) */
		api?: any;
		/** [Config Option] (Object) */
		baseParams?: any;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		errorReader?: any;
		/** [Config Option] (Boolean) */
		jsonSubmit?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		method?: string;
		/** [Config Option] (String/String[]) */
		paramOrder?: any;
		/** [Config Option] (Boolean) */
		paramsAsHash?: boolean;
		/** [Config Option] (Boolean) */
		pollForChanges?: boolean;
		/** [Config Option] (Number) */
		pollInterval?: number;
		/** [Config Option] (Object/Ext.data.reader.Reader) */
		reader?: any;
		/** [Config Option] (Boolean) */
		standardSubmit?: boolean;
		/** [Config Option] (Number) */
		timeout?: number;
		/** [Config Option] (Boolean) */
		trackResetOnLoad?: boolean;
		/** [Config Option] (String) */
		url?: string;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		waitMsgTarget?: any;
		/** [Config Option] (String) */
		waitTitle?: string;
	}

}

declare module TypExt.form {
	 interface IRadioGroupConfig extends TypExt.form.ICheckboxGroupConfig, TypExt.util.IFocusableContainerConfig {
		/** [Config Option] (Boolean) */
		allowBlank?: boolean;
		/** [Config Option] (String) */
		blankText?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Ext.form.field.Radio[]/Object[]) */
		items?: any;
	}

}

declare module TypExt.form {
	 interface IRadioManagerConfig extends TypExt.util.IMixedCollectionConfig {
	}

}

declare module TypExt.form.trigger {
	 interface IComponentConfig extends TypExt.form.trigger.ITriggerConfig {
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Object/Ext.Component/Ext.Widget) */
		component?: any;
	}

}

declare module TypExt.form.trigger {
	 interface ISpinnerConfig extends TypExt.form.trigger.ITriggerConfig {
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (Function/String) */
		downHandler?: any;
		/** [Config Option] (Function/String) */
		upHandler?: any;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module TypExt.form.trigger {
	 interface ITriggerConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (String) */
		cls?: string;
		/** [Config Option] (String) */
		extraCls?: string;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (Boolean) */
		hideOnReadOnly?: boolean;
		/** [Config Option] (Boolean) */
		repeatClick?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Number) */
		weight?: number;
		/** [Config Option] (Number) */
		width?: number;
	}

}

declare module TypExt {
	 interface IFunctionConfig {
	}

}

declare module TypExt.fx {
	 interface IAnimConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig {
		/** [Config Option] (Boolean) */
		alternate?: boolean;
		/** [Config Option] (Boolean) */
		autoEnd?: boolean;
		/** [Config Option] (Function/String) */
		callback?: any;
		/** [Config Option] (Number) */
		delay?: number;
		/** [Config Option] (Number) */
		duration?: number;
		/** [Config Option] (Boolean) */
		dynamic?: boolean;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Object) */
		from?: any;
		/** [Config Option] (Number) */
		iterations?: number;
		/** [Config Option] (Object) */
		keyframes?: any;
		/** [Config Option] (Boolean) */
		remove?: boolean;
		/** [Config Option] (Boolean) */
		reverse?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String/Object) */
		target?: any;
		/** [Config Option] (Object) */
		to?: any;
	}

}

declare module TypExt.fx.animation {
	 interface IAbstractConfig extends TypExt.IEventedConfig {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (String) */
		easing?: string;
	}

}

declare module TypExt.fx.animation {
	 interface ICubeConfig extends TypExt.fx.animation.IAbstractConfig {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (String) */
		direction?: string;
	}

}

declare module TypExt.fx.animation {
	 interface IFadeConfig extends TypExt.fx.animation.IAbstractConfig {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: boolean;
	}

}

declare module TypExt.fx.animation {
	 interface IFadeInConfig extends TypExt.fx.animation.IAbstractConfig {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: boolean;
	}

}

declare module TypExt.fx.animation {
	 interface IFadeOutConfig extends TypExt.fx.animation.IFadeConfig {
		/** [Config Option] (Object) */
		before?: any;
	}

}

declare module TypExt.fx.animation {
	 interface IFlipConfig extends TypExt.fx.animation.IAbstractConfig {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
	}

}

declare module TypExt.fx {
	 interface IAnimationConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		type?: string;
	}

}

declare module TypExt.fx.animation {
	 interface IPopConfig extends TypExt.fx.animation.IAbstractConfig {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: boolean;
	}

}

declare module TypExt.fx.animation {
	 interface IPopInConfig extends TypExt.fx.animation.IAbstractConfig {
		/** [Config Option] (Object) */
		before?: any;
		/** [Config Option] (Boolean) */
		out?: boolean;
	}

}

declare module TypExt.fx.animation {
	 interface IPopOutConfig extends TypExt.fx.animation.IPopConfig {
		/** [Config Option] (Object) */
		before?: any;
	}

}

declare module TypExt.fx.animation {
	 interface ISlideConfig extends TypExt.fx.animation.IAbstractConfig {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Number) */
		offset?: number;
		/** [Config Option] (Boolean) */
		out?: boolean;
	}

}

declare module TypExt.fx.animation {
	 interface ISlideInConfig extends TypExt.fx.animation.IAbstractConfig {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Number) */
		offset?: number;
		/** [Config Option] (Boolean) */
		out?: boolean;
	}

}

declare module TypExt.fx.animation {
	 interface ISlideOutConfig extends TypExt.fx.animation.ISlideConfig {
	}

}

declare module TypExt.fx.animation {
	 interface IWipeConfig extends TypExt.fx.IAnimationConfig {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Boolean) */
		out?: boolean;
	}

}

declare module TypExt.fx.animation {
	 interface IWipeInConfig extends TypExt.fx.IAnimationConfig {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Boolean) */
		out?: boolean;
	}

}

declare module TypExt.fx.animation {
	 interface IWipeOutConfig extends TypExt.fx.animation.IWipeConfig {
	}

}

declare module TypExt.fx {
	 interface IAnimatorConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig {
		/** [Config Option] (Number) */
		delay?: number;
		/** [Config Option] (Number) */
		duration?: number;
		/** [Config Option] (Boolean) */
		dynamic?: boolean;
		/** [Config Option] (String) */
		easing?: string;
		/** [Config Option] (Number) */
		iterations?: number;
		/** [Config Option] (Object) */
		keyframes?: any;
		/** [Config Option] (Ext.fx.target.Target) */
		target?: Ext.fx.target.ITarget;
	}

}

declare module TypExt.fx {
	 interface ICubicBezierConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.fx {
	 interface IDrawPathConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.fx.easing {
	 interface IAbstractConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.fx.easing {
	 interface IBounceConfig extends TypExt.fx.easing.IAbstractConfig {
	}

}

declare module TypExt.fx.easing {
	 interface IBoundMomentumConfig extends TypExt.fx.easing.IAbstractConfig {
		/** [Config Option] (Object) */
		bounce?: any;
		/** [Config Option] (Number) */
		minVelocity?: number;
		/** [Config Option] (Object) */
		momentum?: any;
		/** [Config Option] (Number) */
		startVelocity?: number;
	}

}

declare module TypExt.fx.easing {
	 interface IEaseInConfig extends TypExt.fx.easing.ILinearConfig {
	}

}

declare module TypExt.fx.easing {
	 interface IEaseOutConfig extends TypExt.fx.easing.ILinearConfig {
	}

}

declare module TypExt.fx.easing {
	 interface IEasingConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.fx {
	 interface IEasingConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.fx.easing {
	 interface ILinearConfig extends TypExt.fx.easing.IAbstractConfig {
	}

}

declare module TypExt.fx.easing {
	 interface IMomentumConfig extends TypExt.fx.easing.IAbstractConfig {
	}

}

declare module TypExt.fx.layout.card {
	 interface IAbstractConfig extends TypExt.IEventedConfig {
	}

}

declare module TypExt.fx.layout.card {
	 interface ICoverConfig extends TypExt.fx.layout.card.IStyleConfig {
	}

}

declare module TypExt.fx.layout.card {
	 interface ICubeConfig extends TypExt.fx.layout.card.IStyleConfig {
	}

}

declare module TypExt.fx.layout.card {
	 interface IFadeConfig extends TypExt.fx.layout.card.IStyleConfig {
	}

}

declare module TypExt.fx.layout.card {
	 interface IFlipConfig extends TypExt.fx.layout.card.IStyleConfig {
	}

}

declare module TypExt.fx.layout {
	 interface ICardConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.fx.layout.card {
	 interface IPopConfig extends TypExt.fx.layout.card.IStyleConfig {
	}

}

declare module TypExt.fx.layout.card {
	 interface IRevealConfig extends TypExt.fx.layout.card.IStyleConfig {
	}

}

declare module TypExt.fx.layout.card {
	 interface IScrollConfig extends TypExt.fx.layout.card.IAbstractConfig {
	}

}

declare module TypExt.fx.layout.card {
	 interface IScrollCoverConfig extends TypExt.fx.layout.card.IScrollConfig {
	}

}

declare module TypExt.fx.layout.card {
	 interface IScrollRevealConfig extends TypExt.fx.layout.card.IScrollConfig {
	}

}

declare module TypExt.fx.layout.card {
	 interface ISlideConfig extends TypExt.fx.layout.card.IStyleConfig {
	}

}

declare module TypExt.fx.layout.card {
	 interface IStyleConfig extends TypExt.fx.layout.card.IAbstractConfig {
	}

}

declare module TypExt.fx {
	 interface IManagerConfig extends TypExt.IBaseConfig, TypExt.fx.IQueueConfig {
	}

}

declare module TypExt.fx {
	 interface IPropertyHandlerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.fx {
	 interface IQueueConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.fx.runner {
	 interface ICssConfig extends TypExt.IEventedConfig {
	}

}

declare module TypExt.fx.runner {
	 interface ICssAnimationConfig extends TypExt.fx.runner.ICssConfig {
	}

}

declare module TypExt.fx.runner {
	 interface ICssTransitionConfig extends TypExt.fx.runner.ICssConfig {
	}

}

declare module TypExt {
	 interface IAnimatorConfig extends TypExt.fx.runner.ICssConfig {
	}

}

declare module TypExt.fx {
	 interface IRunnerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.fx {
	 interface IStateConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.fx.target {
	 interface IComponentConfig extends TypExt.fx.target.ITargetConfig {
	}

}

declare module TypExt.fx.target {
	 interface ICompositeElementConfig extends TypExt.fx.target.IElementConfig {
	}

}

declare module TypExt.fx.target {
	 interface ICompositeElementCSSConfig extends TypExt.fx.target.ICompositeElementConfig {
	}

}

declare module TypExt.fx.target {
	 interface ICompositeSpriteConfig extends TypExt.fx.target.ISpriteConfig {
	}

}

declare module TypExt.fx.target {
	 interface IElementConfig extends TypExt.fx.target.ITargetConfig {
	}

}

declare module TypExt.fx.target {
	 interface IElementCSSConfig extends TypExt.fx.target.IElementConfig {
	}

}

declare module TypExt.fx.target {
	 interface ISpriteConfig extends TypExt.fx.target.ITargetConfig {
	}

}

declare module TypExt.fx.target {
	 interface ITargetConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IGlobalEventsConfig extends TypExt.mixin.IObservableConfig {
	}

}

declare module TypExt.grid {
	 interface ICellContextConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.grid {
	 interface ICellEditorConfig extends TypExt.IEditorConfig {
		/** [Config Option] (String) */
		alignment?: string;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Boolean) */
		hideEl?: boolean;
		/** [Config Option] (Boolean/String) */
		shadow?: any;
		/** [Config Option] (Boolean) */
		shim?: boolean;
	}

}

declare module TypExt.grid.column {
	 interface IActionConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (String) */
		altText?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Function) */
		getClass?: any;
		/** [Config Option] (Function) */
		getTip?: any;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Function) */
		isDisabled?: any;
		/** [Config Option] (Object[]) */
		items?: any[];
		/** [Config Option] (String) */
		menuText?: string;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		sortable?: boolean;
		/** [Config Option] (Boolean) */
		stopSelection?: boolean;
		/** [Config Option] (String) */
		tooltip?: string;
	}

}

declare module TypExt.grid {
	 interface IActionColumnConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (String) */
		altText?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Function) */
		getClass?: any;
		/** [Config Option] (Function) */
		getTip?: any;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Function) */
		isDisabled?: any;
		/** [Config Option] (Object[]) */
		items?: any[];
		/** [Config Option] (String) */
		menuText?: string;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		sortable?: boolean;
		/** [Config Option] (Boolean) */
		stopSelection?: boolean;
		/** [Config Option] (String) */
		tooltip?: string;
	}

}

declare module TypExt.grid.column {
	 interface IBooleanConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (String) */
		falseText?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Config Option] (String) */
		trueText?: string;
		/** [Config Option] (String) */
		undefinedText?: string;
	}

}

declare module TypExt.grid {
	 interface IBooleanColumnConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (String) */
		falseText?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Config Option] (String) */
		trueText?: string;
		/** [Config Option] (String) */
		undefinedText?: string;
	}

}

declare module TypExt.grid.column {
	 interface ICheckConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (Boolean) */
		stopSelection?: boolean;
		/** [Config Option] (String) */
		tdCls?: string;
	}

}

declare module TypExt.ux {
	 interface ICheckColumnConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (Boolean) */
		stopSelection?: boolean;
		/** [Config Option] (String) */
		tdCls?: string;
	}

}

declare module TypExt.grid.column {
	 interface ICheckColumnConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (Boolean) */
		stopSelection?: boolean;
		/** [Config Option] (String) */
		tdCls?: string;
	}

}

declare module TypExt.grid.column {
	 interface IColumnConfig extends TypExt.grid.header.IContainerConfig {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		cellWrap?: boolean;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Object[]) */
		columns?: any[];
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		dataIndex?: string;
		/** [Config Option] (Boolean) */
		detachOnRemove?: boolean;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Function/String) */
		editRenderer?: any;
		/** [Config Option] (Object/String) */
		editor?: any;
		/** [Config Option] (String) */
		emptyCellText?: string;
		/** [Config Option] (Boolean) */
		enableFocusableContainer?: boolean;
		/** [Config Option] (Object/String) */
		field?: any;
		/** [Config Option] (Boolean) */
		fixed?: boolean;
		/** [Config Option] (String) */
		formatter?: string;
		/** [Config Option] (Boolean) */
		groupable?: boolean;
		/** [Config Option] (String) */
		header?: string;
		/** [Config Option] (Boolean) */
		hideable?: boolean;
		/** [Config Option] (Boolean) */
		lockable?: boolean;
		/** [Config Option] (Boolean) */
		locked?: boolean;
		/** [Config Option] (Boolean) */
		menuDisabled?: boolean;
		/** [Config Option] (String) */
		menuText?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Function/String) */
		renderer?: any;
		/** [Config Option] (Boolean) */
		resizable?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		sortable?: boolean;
		/** [Config Option] (String) */
		stateId?: string;
		/** [Config Option] (Function/String) */
		summaryRenderer?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		tdCls?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		tooltip?: string;
		/** [Config Option] (String) */
		tooltipType?: string;
		/** [Config Option] (Function/String) */
		updater?: any;
		/** [Config Option] (Boolean) */
		variableRowHeight?: boolean;
	}

}

declare module TypExt.grid {
	 interface IColumnConfig extends TypExt.grid.header.IContainerConfig {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		cellWrap?: boolean;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Object[]) */
		columns?: any[];
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		dataIndex?: string;
		/** [Config Option] (Boolean) */
		detachOnRemove?: boolean;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Function/String) */
		editRenderer?: any;
		/** [Config Option] (Object/String) */
		editor?: any;
		/** [Config Option] (String) */
		emptyCellText?: string;
		/** [Config Option] (Boolean) */
		enableFocusableContainer?: boolean;
		/** [Config Option] (Object/String) */
		field?: any;
		/** [Config Option] (Boolean) */
		fixed?: boolean;
		/** [Config Option] (String) */
		formatter?: string;
		/** [Config Option] (Boolean) */
		groupable?: boolean;
		/** [Config Option] (String) */
		header?: string;
		/** [Config Option] (Boolean) */
		hideable?: boolean;
		/** [Config Option] (Boolean) */
		lockable?: boolean;
		/** [Config Option] (Boolean) */
		locked?: boolean;
		/** [Config Option] (Boolean) */
		menuDisabled?: boolean;
		/** [Config Option] (String) */
		menuText?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Function/String) */
		renderer?: any;
		/** [Config Option] (Boolean) */
		resizable?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		sortable?: boolean;
		/** [Config Option] (String) */
		stateId?: string;
		/** [Config Option] (Function/String) */
		summaryRenderer?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (String) */
		tdCls?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String) */
		tooltip?: string;
		/** [Config Option] (String) */
		tooltipType?: string;
		/** [Config Option] (Function/String) */
		updater?: any;
		/** [Config Option] (Boolean) */
		variableRowHeight?: boolean;
	}

}

declare module TypExt.grid.column {
	 interface IDateConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
	}

}

declare module TypExt.grid {
	 interface IDateColumnConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
	}

}

declare module TypExt.grid.column {
	 interface INumberConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
	}

}

declare module TypExt.grid {
	 interface INumberColumnConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
	}

}

declare module TypExt.grid.column {
	 interface IRowNumbererConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		dataIndex?: string;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Boolean) */
		hideable?: boolean;
		/** [Config Option] (Boolean) */
		lockable?: boolean;
		/** [Config Option] (Boolean) */
		menuDisabled?: boolean;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Config Option] (Boolean) */
		resizable?: boolean;
		/** [Config Option] (String) */
		tdCls?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (Number) */
		width?: number;
	}

}

declare module TypExt.grid {
	 interface IRowNumbererConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String) */
		dataIndex?: string;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Boolean) */
		hideable?: boolean;
		/** [Config Option] (Boolean) */
		lockable?: boolean;
		/** [Config Option] (Boolean) */
		menuDisabled?: boolean;
		/** [Config Option] (Boolean) */
		producesHTML?: boolean;
		/** [Config Option] (Boolean) */
		resizable?: boolean;
		/** [Config Option] (String) */
		tdCls?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (Number) */
		width?: number;
	}

}

declare module TypExt.grid.column {
	 interface ITemplateConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (String/Ext.XTemplate) */
		tpl?: any;
	}

}

declare module TypExt.grid {
	 interface ITemplateColumnConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (String/Ext.XTemplate) */
		tpl?: any;
	}

}

declare module TypExt.grid.column {
	 interface IWidgetConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (Object) */
		defaultWidgetUI?: any;
		/** [Config Option] (Function/String) */
		onWidgetAttach?: any;
		/** [Config Option] (Boolean) */
		sortable?: boolean;
		/** [Config Option] (Boolean) */
		stopSelection?: boolean;
		/** [Config Option] (Object) */
		widget?: any;
	}

}

declare module TypExt.grid {
	 interface IColumnComponentLayoutConfig extends TypExt.layout.component.IAutoConfig {
		/** [Config Option] (Boolean) */
		setWidthInDom?: boolean;
	}

}

declare module TypExt.grid {
	 interface IColumnLayoutConfig extends TypExt.layout.container.IHBoxConfig {
	}

}

declare module TypExt.grid {
	 interface IColumnManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.grid {
	 interface IColumnModelConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.grid.feature {
	 interface IAbstractSummaryConfig extends TypExt.grid.feature.IFeatureConfig {
		/** [Config Option] (Boolean) */
		showSummaryRow?: boolean;
	}

}

declare module TypExt.grid.feature {
	 interface IFeatureConfig extends TypExt.util.IObservableConfig {
	}

}

declare module TypExt.grid.feature {
	 interface IGroupingConfig extends TypExt.grid.feature.IFeatureConfig, TypExt.grid.feature.IAbstractSummaryConfig {
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (Number) */
		depthToIndent?: number;
		/** [Config Option] (Boolean) */
		enableGroupingMenu?: boolean;
		/** [Config Option] (Boolean) */
		enableNoGroups?: boolean;
		/** [Config Option] (String) */
		groupByText?: string;
		/** [Config Option] (String/Array/Ext.Template) */
		groupHeaderTpl?: any;
		/** [Config Option] (Array) */
		groupers?: any[];
		/** [Config Option] (Boolean) */
		hideGroupedHeader?: boolean;
		/** [Config Option] (String) */
		remoteRoot?: string;
		/** [Config Option] (String) */
		showGroupsText?: string;
		/** [Config Option] (Boolean) */
		showSummaryRow?: boolean;
		/** [Config Option] (Boolean) */
		startCollapsed?: boolean;
	}

}

declare module TypExt.grid.feature {
	 interface IGroupingSummaryConfig extends TypExt.grid.feature.IGroupingConfig {
		/** [Config Option] (Boolean) */
		showSummaryRow?: boolean;
	}

}

declare module TypExt.grid.feature {
	 interface IGroupStoreConfig extends TypExt.util.IObservableConfig {
	}

}

declare module TypExt.grid.feature {
	 interface IRowBodyConfig extends TypExt.grid.feature.IFeatureConfig {
		/** [Config Option] (Boolean) */
		bodyBefore?: boolean;
	}

}

declare module TypExt.grid.feature {
	 interface ISummaryConfig extends TypExt.grid.feature.IAbstractSummaryConfig {
		/** [Config Option] (String) */
		dock?: string;
	}

}

declare module TypExt.grid.filters.filter {
	 interface IBaseConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Boolean) */
		active?: boolean;
		/** [Config Option] (String) */
		dataIndex?: string;
		/** [Config Option] (Object) */
		itemDefaults?: any;
		/** [Config Option] (Number) */
		updateBuffer?: number;
	}

}

declare module TypExt.grid.filters.filter {
	 interface IBooleanConfig extends TypExt.grid.filters.filter.ISingleFilterConfig {
		/** [Config Option] (Boolean) */
		defaultValue?: boolean;
		/** [Config Option] (String) */
		noText?: string;
		/** [Config Option] (Number) */
		updateBuffer?: number;
		/** [Config Option] (String) */
		yesText?: string;
	}

}

declare module TypExt.grid.filters.filter {
	 interface IDateConfig extends TypExt.grid.filters.filter.ITriFilterConfig {
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (Object) */
		fields?: any;
		/** [Config Option] (Object) */
		itemDefaults?: any;
		/** [Config Option] (Date) */
		maxDate?: any;
		/** [Config Option] (Date) */
		minDate?: any;
		/** [Config Option] (Object) */
		pickerDefaults?: any;
		/** [Config Option] (Number) */
		updateBuffer?: number;
	}

}

declare module TypExt.grid.filters.filter {
	 interface IListConfig extends TypExt.grid.filters.filter.ISingleFilterConfig {
		/** [Config Option] (String) */
		idField?: string;
		/** [Config Option] (Object) */
		itemDefaults?: any;
		/** [Config Option] (String) */
		labelField?: string;
		/** [Config Option] (String) */
		labelIndex?: string;
		/** [Config Option] (Boolean) */
		loadOnShow?: boolean;
		/** [Config Option] (String) */
		loadingText?: string;
		/** [Config Option] (Array) */
		options?: any[];
		/** [Config Option] (Boolean) */
		single?: boolean;
		/** [Config Option] (Ext.data.Store) */
		store?: Ext.data.IStore;
	}

}

declare module TypExt.grid.filters.filter {
	 interface INumberConfig extends TypExt.grid.filters.filter.ITriFilterConfig {
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Object) */
		fields?: any;
		/** [Config Option] (Object) */
		itemDefaults?: any;
	}

}

declare module TypExt.grid.filters.filter {
	 interface ISingleFilterConfig extends TypExt.grid.filters.filter.IBaseConfig {
	}

}

declare module TypExt.grid.filters.filter {
	 interface IStringConfig extends TypExt.grid.filters.filter.ISingleFilterConfig {
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Object) */
		itemDefaults?: any;
	}

}

declare module TypExt.grid.filters.filter {
	 interface ITriFilterConfig extends TypExt.grid.filters.filter.IBaseConfig {
	}

}

declare module TypExt.grid.filters {
	 interface IFiltersConfig extends TypExt.plugin.IAbstractConfig, TypExt.util.IStoreHolderConfig {
		/** [Config Option] (String) */
		menuFilterText?: string;
		/** [Config Option] (String) */
		pluginId?: string;
		/** [Config Option] (Boolean) */
		showMenu?: boolean;
		/** [Config Option] (String) */
		stateId?: string;
	}

}

declare module TypExt.grid.header {
	 interface IContainerConfig extends TypExt.container.IContainerConfig, TypExt.util.IFocusableContainerConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String/Boolean) */
		border?: any;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Number) */
		defaultWidth?: number;
		/** [Config Option] (Boolean) */
		detachOnRemove?: boolean;
		/** [Config Option] ('top'/'bottom'/'left'/'right') */
		dock?: any;
		/** [Config Option] (Boolean) */
		enableColumnHide?: boolean;
		/** [Config Option] (Boolean) */
		enableFocusableContainer?: boolean;
		/** [Config Option] (Boolean) */
		sealed?: boolean;
		/** [Config Option] (Boolean) */
		sortable?: boolean;
		/** [Config Option] (Number) */
		weight?: number;
	}

}

declare module TypExt.grid.header {
	 interface IDragZoneConfig extends TypExt.dd.IDragZoneConfig {
	}

}

declare module TypExt.grid.header {
	 interface IDropZoneConfig extends TypExt.dd.IDropZoneConfig {
	}

}

declare module TypExt.grid.locking {
	 interface IHeaderContainerConfig extends TypExt.grid.header.IContainerConfig {
	}

}

declare module TypExt.grid.locking {
	 interface ILockableConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Object) */
		layout?: any;
		/** [Config Option] (Object) */
		lockedGridConfig?: any;
		/** [Config Option] (Object) */
		lockedViewConfig?: any;
		/** [Config Option] (Object) */
		normalGridConfig?: any;
		/** [Config Option] (Object) */
		normalViewConfig?: any;
		/** [Config Option] (Number) */
		scrollDelta?: number;
		/** [Config Option] (Boolean) */
		split?: boolean;
		/** [Config Option] (String) */
		subGridXType?: string;
		/** [Config Option] (Boolean) */
		syncRowHeight?: boolean;
	}

}

declare module TypExt.grid {
	 interface ILockableConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Object) */
		layout?: any;
		/** [Config Option] (Object) */
		lockedGridConfig?: any;
		/** [Config Option] (Object) */
		lockedViewConfig?: any;
		/** [Config Option] (Object) */
		normalGridConfig?: any;
		/** [Config Option] (Object) */
		normalViewConfig?: any;
		/** [Config Option] (Number) */
		scrollDelta?: number;
		/** [Config Option] (Boolean) */
		split?: boolean;
		/** [Config Option] (String) */
		subGridXType?: string;
		/** [Config Option] (Boolean) */
		syncRowHeight?: boolean;
	}

}

declare module TypExt.grid.locking {
	 interface IRowSynchronizerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.grid.locking {
	 interface IViewConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig,TypExt.util.IStoreHolderConfig,TypExt.util.IFocusableConfig {
	}

}

declare module TypExt.grid {
	 interface ILockingViewConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig,TypExt.util.IStoreHolderConfig,TypExt.util.IFocusableConfig {
	}

}

declare module TypExt.grid {
	 interface INavigationModelConfig extends TypExt.view.INavigationModelConfig {
	}

}

declare module TypExt.grid {
	 interface IPanelConfig extends TypExt.panel.ITableConfig {
		/** [Config Option] (Ext.grid.column.Column[]/Object) */
		columns?: any;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
	}

}

declare module TypExt.list {
	 interface IListViewConfig extends TypExt.panel.ITableConfig {
		/** [Config Option] (Ext.grid.column.Column[]/Object) */
		columns?: any;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
	}

}

declare module TypExt {
	 interface IListViewConfig extends TypExt.panel.ITableConfig {
		/** [Config Option] (Ext.grid.column.Column[]/Object) */
		columns?: any;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
	}

}

declare module TypExt.grid {
	 interface IGridPanelConfig extends TypExt.panel.ITableConfig {
		/** [Config Option] (Ext.grid.column.Column[]/Object) */
		columns?: any;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
	}

}

declare module TypExt.grid.plugin {
	 interface IBufferedRendererConfig extends TypExt.IAbstractPluginConfig {
		/** [Config Option] (Number) */
		leadingBufferZone?: number;
		/** [Config Option] (Number) */
		numFromEdge?: number;
		/** [Config Option] (Number) */
		scrollToLoadBuffer?: number;
		/** [Config Option] (Boolean) */
		synchronousRender?: boolean;
		/** [Config Option] (Number) */
		trailingBufferZone?: number;
	}

}

declare module TypExt.grid.plugin {
	 interface ICellEditingConfig extends TypExt.grid.plugin.IEditingConfig {
	}

}

declare module TypExt.grid.plugin {
	 interface IClipboardConfig extends TypExt.plugin.IAbstractClipboardConfig {
		/** [Config Option] (Object) */
		formats?: any;
	}

}

declare module TypExt.grid.plugin {
	 interface IDragDropConfig extends TypExt.plugin.IAbstractConfig {
		/** [Config Option] (Object/Boolean) */
		containerScroll?: any;
		/** [Config Option] (String) */
		ddGroup?: string;
		/** [Config Option] (String) */
		dragGroup?: string;
		/** [Config Option] (String) */
		dragText?: string;
		/** [Config Option] (Object) */
		dragZone?: any;
		/** [Config Option] (String) */
		dropGroup?: string;
		/** [Config Option] (Object) */
		dropZone?: any;
		/** [Config Option] (Boolean) */
		enableDrag?: boolean;
		/** [Config Option] (Boolean) */
		enableDrop?: boolean;
	}

}

declare module TypExt.grid.plugin {
	 interface IEditingConfig extends TypExt.plugin.IAbstractConfig, TypExt.util.IObservableConfig {
		/** [Config Option] (Number) */
		clicksToEdit?: number;
		/** [Config Option] (String) */
		default?: string;
		/** [Config Option] (String) */
		triggerEvent?: string;
	}

}

declare module TypExt.grid.plugin {
	 interface IHeaderReordererConfig extends TypExt.plugin.IAbstractConfig {
	}

}

declare module TypExt.grid.plugin {
	 interface IHeaderResizerConfig extends TypExt.plugin.IAbstractConfig {
		/** [Config Option] (Boolean) */
		dynamic?: boolean;
	}

}

declare module TypExt.grid.plugin {
	 interface IRowEditingConfig extends TypExt.grid.plugin.IEditingConfig {
		/** [Config Option] (Boolean) */
		autoCancel?: boolean;
		/** [Config Option] (Number) */
		clicksToMoveEditor?: number;
		/** [Config Option] (Boolean) */
		errorSummary?: boolean;
	}

}

declare module TypExt.grid.plugin {
	 interface IRowExpanderConfig extends TypExt.plugin.IAbstractConfig {
		/** [Config Option] (Boolean) */
		bodyBefore?: boolean;
		/** [Config Option] (Number) */
		columnWidth?: number;
		/** [Config Option] (Boolean) */
		expandOnDblClick?: boolean;
		/** [Config Option] (Boolean) */
		expandOnEnter?: boolean;
		/** [Config Option] (Number) */
		headerWidth?: number;
		/** [Config Option] (Ext.XTemplate) */
		lockedTpl?: Ext.IXTemplate;
		/** [Config Option] (Ext.XTemplate) */
		rowBodyTpl?: Ext.IXTemplate;
		/** [Config Option] (Boolean) */
		selectRowOnExpand?: boolean;
	}

}

declare module TypExt.grid.property {
	 interface IGridConfig extends TypExt.grid.IPanelConfig {
		/** [Config Option] (Boolean) */
		columnLines?: boolean;
		/** [Config Option] (Object) */
		customEditors?: any;
		/** [Config Option] (Object) */
		customRenderers?: any;
		/** [Config Option] (Boolean) */
		enableColumnMove?: boolean;
		/** [Config Option] (Boolean) */
		inferTypes?: boolean;
		/** [Config Option] (Number/String) */
		nameColumnWidth?: any;
		/** [Config Option] (String) */
		nameField?: string;
		/** [Config Option] (Object) */
		propertyNames?: any;
		/** [Config Option] (Object) */
		source?: any;
		/** [Config Option] (Object) */
		sourceConfig?: any;
		/** [Config Option] (String) */
		valueField?: string;
	}

}

declare module TypExt.grid {
	 interface IPropertyGridConfig extends TypExt.grid.IPanelConfig {
		/** [Config Option] (Boolean) */
		columnLines?: boolean;
		/** [Config Option] (Object) */
		customEditors?: any;
		/** [Config Option] (Object) */
		customRenderers?: any;
		/** [Config Option] (Boolean) */
		enableColumnMove?: boolean;
		/** [Config Option] (Boolean) */
		inferTypes?: boolean;
		/** [Config Option] (Number/String) */
		nameColumnWidth?: any;
		/** [Config Option] (String) */
		nameField?: string;
		/** [Config Option] (Object) */
		propertyNames?: any;
		/** [Config Option] (Object) */
		source?: any;
		/** [Config Option] (Object) */
		sourceConfig?: any;
		/** [Config Option] (String) */
		valueField?: string;
	}

}

declare module TypExt.grid.property {
	 interface IHeaderContainerConfig extends TypExt.grid.header.IContainerConfig {
	}

}

declare module TypExt.grid {
	 interface IPropertyColumnModelConfig extends TypExt.grid.header.IContainerConfig {
	}

}

declare module TypExt.grid.property {
	 interface IPropertyConfig extends TypExt.data.IModelConfig {
		/** [Config Option] (String) */
		idProperty?: string;
	}

}

declare module TypExt {
	 interface IPropGridPropertyConfig extends TypExt.data.IModelConfig {
		/** [Config Option] (String) */
		idProperty?: string;
	}

}

declare module TypExt.grid.property {
	 interface IReaderConfig extends TypExt.data.reader.IReaderConfig {
		/** [Config Option] (String) */
		messageProperty?: string;
		/** [Config Option] (String) */
		successProperty?: string;
		/** [Config Option] (String) */
		totalProperty?: string;
	}

}

declare module TypExt.grid.property {
	 interface IStoreConfig extends TypExt.data.IStoreConfig {
		/** [Config Option] (Boolean) */
		remoteSort?: boolean;
	}

}

declare module TypExt.grid {
	 interface IPropertyStoreConfig extends TypExt.data.IStoreConfig {
		/** [Config Option] (Boolean) */
		remoteSort?: boolean;
	}

}

declare module TypExt.grid {
	 interface IRowEditorConfig extends TypExt.form.IPanelConfig {
		/** [Config Option] (Boolean) */
		border?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
	}

}

declare module TypExt.grid {
	 interface IRowEditorButtonsConfig extends TypExt.container.IContainerConfig {
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
	}

}

declare module TypExt.grid.selection {
	 interface ICellsConfig extends TypExt.grid.selection.ISelectionConfig {
	}

}

declare module TypExt.grid.selection {
	 interface IColumnsConfig extends TypExt.grid.selection.ISelectionConfig {
	}

}

declare module TypExt.grid.selection {
	 interface IRowsConfig extends TypExt.grid.selection.ISelectionConfig {
	}

}

declare module TypExt.grid.selection {
	 interface ISelectionConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.grid.selection {
	 interface ISpreadsheetModelConfig extends TypExt.selection.IModelConfig {
		/** [Config Option] (Boolean) */
		cellSelect?: boolean;
		/** [Config Option] (Number/String) */
		checkboxColumnIndex?: any;
		/** [Config Option] (Number/String) */
		checkboxHeaderWidth?: any;
		/** [Config Option] (Boolean) */
		checkboxSelect?: boolean;
		/** [Config Option] (Boolean) */
		columnSelect?: boolean;
		/** [Config Option] (Boolean) */
		dragSelect?: boolean;
		/** [Config Option] (Number/String) */
		rowNumbererHeaderWidth?: any;
		/** [Config Option] (Boolean) */
		rowSelect?: boolean;
		/** [Config Option] (Ext.grid.selection.Selection) */
		selected?: Ext.grid.selection.ISelection;
		/** [Config Option] (Boolean) */
		showHeaderCheckbox?: boolean;
	}

}

declare module TypExt.grid {
	 interface IViewDropZoneConfig extends TypExt.view.IDropZoneConfig {
	}

}

declare module TypExt {
	 interface IImgConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String) */
		alt?: string;
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (String) */
		imgCls?: string;
		/** [Config Option] (String) */
		src?: string;
		/** [Config Option] (String) */
		title?: string;
	}

}

declare module TypExt {
	 interface IInventoryConfig {
	}

}

declare module TypExt {
		/** [Config Option] (Object) */
		var debugConfig: any;
		/** [Config Option] (String/Object) */
		var manifest: any;
}

declare module TypExt {
	 interface IJSONConfig {
	}

}

declare module TypExt.layout.component {
	 interface IAutoConfig extends TypExt.layout.component.IComponentConfig {
		/** [Config Option] (Boolean) */
		setHeightInDom?: boolean;
		/** [Config Option] (Boolean) */
		setWidthInDom?: boolean;
	}

}

declare module TypExt.layout.component {
	 interface IBodyConfig extends TypExt.layout.component.IAutoConfig {
	}

}

declare module TypExt.layout.component {
	 interface IBoundListConfig extends TypExt.layout.component.IAutoConfig {
	}

}

declare module TypExt.layout.component {
	 interface IComponentConfig extends TypExt.layout.ILayoutConfig {
	}

}

declare module TypExt.layout.component {
	 interface IDockConfig extends TypExt.layout.component.IComponentConfig {
	}

}

declare module TypExt.layout.component {
	 interface IAbstractDockConfig extends TypExt.layout.component.IComponentConfig {
	}

}

declare module TypExt.layout.component.field {
	 interface IFieldContainerConfig extends TypExt.layout.component.IAutoConfig {
	}

}

declare module TypExt.layout.component.field {
	 interface IHtmlEditorConfig extends TypExt.layout.component.field.IFieldContainerConfig {
	}

}

declare module TypExt.layout.component {
	 interface IFieldSetConfig extends TypExt.layout.component.IBodyConfig {
	}

}

declare module TypExt.layout.component {
	 interface IProgressBarConfig extends TypExt.layout.component.IAutoConfig {
	}

}

declare module TypExt.layout.container {
	 interface IAbsoluteConfig extends TypExt.layout.container.IAnchorConfig {
		/** [Config Option] (Boolean) */
		ignoreOnContentChange?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
	}

}

declare module TypExt.layout {
	 interface IAbsoluteLayoutConfig extends TypExt.layout.container.IAnchorConfig {
		/** [Config Option] (Boolean) */
		ignoreOnContentChange?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
	}

}

declare module TypExt.layout.container {
	 interface IAccordionConfig extends TypExt.layout.container.IVBoxConfig {
		/** [Config Option] (Boolean) */
		activeOnTop?: boolean;
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (Boolean) */
		animate?: boolean;
		/** [Config Option] (Boolean) */
		autoWidth?: boolean;
		/** [Config Option] (Boolean) */
		collapseFirst?: boolean;
		/** [Config Option] (Boolean) */
		enableSplitters?: boolean;
		/** [Config Option] (Boolean) */
		fill?: boolean;
		/** [Config Option] (Boolean) */
		hideCollapseTool?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Boolean) */
		multi?: boolean;
		/** [Config Option] (Boolean) */
		titleCollapse?: boolean;
	}

}

declare module TypExt.layout {
	 interface IAccordionLayoutConfig extends TypExt.layout.container.IVBoxConfig {
		/** [Config Option] (Boolean) */
		activeOnTop?: boolean;
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (Boolean) */
		animate?: boolean;
		/** [Config Option] (Boolean) */
		autoWidth?: boolean;
		/** [Config Option] (Boolean) */
		collapseFirst?: boolean;
		/** [Config Option] (Boolean) */
		enableSplitters?: boolean;
		/** [Config Option] (Boolean) */
		fill?: boolean;
		/** [Config Option] (Boolean) */
		hideCollapseTool?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Boolean) */
		multi?: boolean;
		/** [Config Option] (Boolean) */
		titleCollapse?: boolean;
	}

}

declare module TypExt.layout.container {
	 interface IAnchorConfig extends TypExt.layout.container.IAutoConfig {
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (String) */
		defaultAnchor?: string;
	}

}

declare module TypExt.layout {
	 interface IAnchorLayoutConfig extends TypExt.layout.container.IAutoConfig {
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (String) */
		defaultAnchor?: string;
	}

}

declare module TypExt.layout.container {
	 interface IAutoConfig extends TypExt.layout.container.IContainerConfig {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		reserveScrollbar?: boolean;
	}

}

declare module TypExt.layout.container {
	 interface IBorderConfig extends TypExt.layout.container.IContainerConfig {
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Number/String/Object) */
		padding?: any;
		/** [Config Option] (Object) */
		regionWeights?: any;
		/** [Config Option] (Boolean/Ext.resizer.BorderSplitter) */
		split?: any;
		/** [Config Option] (Boolean) */
		splitterResize?: boolean;
	}

}

declare module TypExt.layout {
	 interface IBorderLayoutConfig extends TypExt.layout.container.IContainerConfig {
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Number/String/Object) */
		padding?: any;
		/** [Config Option] (Object) */
		regionWeights?: any;
		/** [Config Option] (Boolean/Ext.resizer.BorderSplitter) */
		split?: any;
		/** [Config Option] (Boolean) */
		splitterResize?: boolean;
	}

}

declare module TypExt.layout.container {
	 interface IBoxConfig extends TypExt.layout.container.IContainerConfig {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] ("round"/"floor"/"ceil") */
		alignRoundingMethod?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		constrainAlign?: boolean;
		/** [Config Option] (Boolean) */
		enableSplitters?: boolean;
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (String/Ext.layout.container.boxOverflow.None) */
		overflowHandler?: any;
		/** [Config Option] (String) */
		pack?: string;
		/** [Config Option] (String) */
		padding?: string;
		/** [Config Option] (String/Ext.Component) */
		stretchMaxPartner?: any;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module TypExt.layout {
	 interface IBoxLayoutConfig extends TypExt.layout.container.IContainerConfig {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] ("round"/"floor"/"ceil") */
		alignRoundingMethod?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		constrainAlign?: boolean;
		/** [Config Option] (Boolean) */
		enableSplitters?: boolean;
		/** [Config Option] (Number) */
		flex?: number;
		/** [Config Option] (String/Ext.layout.container.boxOverflow.None) */
		overflowHandler?: any;
		/** [Config Option] (String) */
		pack?: string;
		/** [Config Option] (String) */
		padding?: string;
		/** [Config Option] (String/Ext.Component) */
		stretchMaxPartner?: any;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module TypExt.layout.container.boxoverflow {
	 interface IMenuConfig extends TypExt.layout.container.boxoverflow.INoneConfig {
	}

}

declare module TypExt.layout.boxoverflow {
	 interface IMenuConfig extends TypExt.layout.container.boxoverflow.INoneConfig {
	}

}

declare module TypExt.layout.container.boxoverflow {
	 interface INoneConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
	}

}

declare module TypExt.layout.boxoverflow {
	 interface INoneConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
	}

}

declare module TypExt.layout.container.boxoverflow {
	 interface IScrollerConfig extends TypExt.layout.container.boxoverflow.INoneConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (Boolean) */
		animateScroll?: boolean;
		/** [Config Option] (Number) */
		scrollDuration?: number;
		/** [Config Option] (Number) */
		scrollIncrement?: number;
		/** [Config Option] (Number) */
		scrollRepeatInterval?: number;
		/** [Config Option] (Number) */
		wheelIncrement?: number;
	}

}

declare module TypExt.layout.boxoverflow {
	 interface IScrollerConfig extends TypExt.layout.container.boxoverflow.INoneConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (Boolean) */
		animateScroll?: boolean;
		/** [Config Option] (Number) */
		scrollDuration?: number;
		/** [Config Option] (Number) */
		scrollIncrement?: number;
		/** [Config Option] (Number) */
		scrollRepeatInterval?: number;
		/** [Config Option] (Number) */
		wheelIncrement?: number;
	}

}

declare module TypExt.layout.container {
	 interface ICardConfig extends TypExt.layout.container.IFitConfig {
		/** [Config Option] (Boolean) */
		deferredRender?: boolean;
	}

}

declare module TypExt.layout {
	 interface ICardLayoutConfig extends TypExt.layout.container.IFitConfig {
		/** [Config Option] (Boolean) */
		deferredRender?: boolean;
	}

}

declare module TypExt.layout.container {
	 interface ICenterConfig extends TypExt.layout.container.IFitConfig {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
	}

}

declare module TypExt.ux.layout {
	 interface ICenterConfig extends TypExt.layout.container.IFitConfig {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
	}

}

declare module TypExt.layout.container {
	 interface ICheckboxGroupConfig extends TypExt.layout.container.IContainerConfig {
		/** [Config Option] (Boolean) */
		autoFlex?: boolean;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
	}

}

declare module TypExt.layout.container {
	 interface IColumnConfig extends TypExt.layout.container.IAutoConfig {
		/** [Config Option] (String) */
		itemCls?: string;
	}

}

declare module TypExt.layout {
	 interface IColumnLayoutConfig extends TypExt.layout.container.IAutoConfig {
		/** [Config Option] (String) */
		itemCls?: string;
	}

}

declare module TypExt.layout.container {
	 interface IColumnSplitterConfig extends TypExt.resizer.ISplitterConfig {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number|String) */
		height?: any;
		/** [Config Option] (Number|String) */
		width?: any;
	}

}

declare module TypExt.layout.container {
	 interface IColumnSplitterTrackerConfig extends TypExt.resizer.ISplitterTrackerConfig {
	}

}

declare module TypExt.layout.container {
	 interface IContainerConfig extends TypExt.layout.ILayoutConfig, TypExt.util.IElementContainerConfig {
		/** [Config Option] (String) */
		itemCls?: string;
	}

}

declare module TypExt.layout {
	 interface IContainerLayoutConfig extends TypExt.layout.ILayoutConfig, TypExt.util.IElementContainerConfig {
		/** [Config Option] (String) */
		itemCls?: string;
	}

}

declare module TypExt.layout.container {
	 interface IDashboardConfig extends TypExt.layout.container.IColumnConfig {
	}

}

declare module TypExt.layout.container {
	 interface IEditorConfig extends TypExt.layout.container.IContainerConfig {
	}

}

declare module TypExt.layout.container {
	 interface IFitConfig extends TypExt.layout.container.IContainerConfig {
	}

}

declare module TypExt.layout {
	 interface IFitLayoutConfig extends TypExt.layout.container.IContainerConfig {
	}

}

declare module TypExt.layout.container {
	 interface IFormConfig extends TypExt.layout.container.IAutoConfig {
		/** [Config Option] (Number) */
		itemSpacing?: number;
		/** [Config Option] (Number/String) */
		labelWidth?: any;
	}

}

declare module TypExt.layout {
	 interface IFormLayoutConfig extends TypExt.layout.container.IAutoConfig {
		/** [Config Option] (Number) */
		itemSpacing?: number;
		/** [Config Option] (Number/String) */
		labelWidth?: any;
	}

}

declare module TypExt.layout.container {
	 interface IHBoxConfig extends TypExt.layout.container.IBoxConfig {
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module TypExt.layout {
	 interface IHBoxLayoutConfig extends TypExt.layout.container.IBoxConfig {
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module TypExt.layout.container {
	 interface ISegmentedButtonConfig extends TypExt.layout.container.IContainerConfig {
	}

}

declare module TypExt.layout.container {
	 interface ITableConfig extends TypExt.layout.container.IContainerConfig {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Number) */
		columns?: number;
		/** [Config Option] (Object) */
		tableAttrs?: any;
		/** [Config Option] (Object) */
		tdAttrs?: any;
		/** [Config Option] (Object) */
		trAttrs?: any;
	}

}

declare module TypExt.layout {
	 interface ITableLayoutConfig extends TypExt.layout.container.IContainerConfig {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Number) */
		columns?: number;
		/** [Config Option] (Object) */
		tableAttrs?: any;
		/** [Config Option] (Object) */
		tdAttrs?: any;
		/** [Config Option] (Object) */
		trAttrs?: any;
	}

}

declare module TypExt.layout.container {
	 interface IVBoxConfig extends TypExt.layout.container.IBoxConfig {
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module TypExt.layout {
	 interface IVBoxLayoutConfig extends TypExt.layout.container.IBoxConfig {
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module TypExt.layout {
	 interface IContextConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.layout {
	 interface IContextItemConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.layout {
	 interface ILayoutConfig extends TypExt.IBaseConfig, TypExt.mixin.IFactoryableConfig {
	}

}

declare module TypExt.layout {
	 interface ISizeModelConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.layout {
	 interface ISizePolicyConfig {
	}

}

declare module TypExt {
	 interface ILoaderConfig {
	}

}

declare module TypExt {
	 interface ILoadMaskConfig extends TypExt.IComponentConfig, TypExt.util.IStoreHolderConfig {
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (String) */
		msg?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean) */
		shim?: boolean;
		/** [Config Option] (Ext.data.Store) */
		store?: Ext.data.IStore;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Ext.Component) */
		target?: Ext.IComponent;
		/** [Config Option] (Boolean) */
		useMsg?: boolean;
		/** [Config Option] (Boolean) */
		useTargetEl?: boolean;
	}

}

declare module TypExt.menu {
	 interface ICheckItemConfig extends TypExt.menu.IItemConfig {
		/** [Config Option] (Boolean) */
		checkChangeDisabled?: boolean;
		/** [Config Option] (Function/String) */
		checkHandler?: any;
		/** [Config Option] (Boolean) */
		checked?: boolean;
		/** [Config Option] (String) */
		checkedCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		group?: string;
		/** [Config Option] (String) */
		groupCls?: string;
		/** [Config Option] (Boolean) */
		hideOnClick?: boolean;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		uncheckedCls?: string;
	}

}

declare module TypExt.menu {
	 interface IColorPickerConfig extends TypExt.menu.IMenuConfig {
		/** [Config Option] (Boolean) */
		hideOnClick?: boolean;
		/** [Config Option] (String) */
		pickerId?: string;
	}

}

declare module TypExt.menu {
	 interface IDatePickerConfig extends TypExt.menu.IMenuConfig {
		/** [Config Option] (String) */
		ariaLabel?: string;
		/** [Config Option] (Boolean) */
		hideOnClick?: boolean;
		/** [Config Option] (String) */
		pickerId?: string;
	}

}

declare module TypExt.menu {
	 interface IItemConfig extends TypExt.IComponentConfig, TypExt.mixin.IQueryableConfig {
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		canActivate?: boolean;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Number) */
		clickHideDelay?: number;
		/** [Config Option] (Boolean) */
		destroyMenu?: boolean;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (Boolean) */
		hideOnClick?: boolean;
		/** [Config Option] (String) */
		href?: string;
		/** [Config Option] (String) */
		hrefTarget?: string;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Ext.menu.Menu/Object) */
		menu?: any;
		/** [Config Option] (String) */
		menuAlign?: string;
		/** [Config Option] (Number) */
		menuExpandDelay?: number;
		/** [Config Option] (Number) */
		menuHideDelay?: number;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String/Object) */
		tooltip?: any;
		/** [Config Option] (String) */
		tooltipType?: string;
	}

}

declare module TypExt.menu {
	 interface ITextItemConfig extends TypExt.IComponentConfig, TypExt.mixin.IQueryableConfig {
		/** [Config Option] (String) */
		activeCls?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		canActivate?: boolean;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Number) */
		clickHideDelay?: number;
		/** [Config Option] (Boolean) */
		destroyMenu?: boolean;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (Boolean) */
		hideOnClick?: boolean;
		/** [Config Option] (String) */
		href?: string;
		/** [Config Option] (String) */
		hrefTarget?: string;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Ext.menu.Menu/Object) */
		menu?: any;
		/** [Config Option] (String) */
		menuAlign?: string;
		/** [Config Option] (Number) */
		menuExpandDelay?: number;
		/** [Config Option] (Number) */
		menuHideDelay?: number;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String/Object) */
		tooltip?: any;
		/** [Config Option] (String) */
		tooltipType?: string;
	}

}

declare module TypExt.menu {
	 interface IManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.menu {
	 interface IMenuMgrConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.menu {
	 interface IMenuConfig extends TypExt.panel.IPanelConfig, TypExt.util.IFocusableContainerConfig {
		/** [Config Option] (Boolean) */
		allowOtherMenus?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultAlign?: string;
		/** [Config Option] (String) */
		defaultFocus?: string;
		/** [Config Option] (Boolean) */
		enableKeyNav?: boolean;
		/** [Config Option] (Boolean) */
		floating?: boolean;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (Boolean) */
		ignoreParentClicks?: boolean;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Boolean) */
		showSeparator?: boolean;
	}

}

declare module TypExt.menu {
	 interface ISeparatorConfig extends TypExt.menu.IItemConfig {
		/** [Config Option] (String) */
		separatorCls?: string;
	}

}

declare module TypExt {
	 interface IMessageBoxConfig extends TypExt.window.IMessageBoxConfig {
	}

}

declare module TypExt {
	 interface IMsgConfig extends TypExt.window.IMessageBoxConfig {
	}

}

declare module TypExt.mixin {
	 interface IBindableConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Object) */
		bind?: any;
		/** [Config Option] (String/Object/Ext.app.ViewController) */
		controller?: any;
		/** [Config Option] (Boolean) */
		defaultListenerScope?: boolean;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (String) */
		reference?: string;
		/** [Config Option] (Boolean/Object/Ext.data.Session) */
		session?: any;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (String/Object/Ext.app.ViewModel) */
		viewModel?: any;
	}

}

declare module TypExt.mixin {
	 interface IFactoryableConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.mixin {
	 interface IHookableConfig extends TypExt.IMixinConfig {
	}

}

declare module TypExt.mixin {
	 interface IIdentifiableConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.mixin {
	 interface IInheritableConfig extends TypExt.IMixinConfig {
	}

}

declare module TypExt {
	 interface IMixinConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.mixin {
	 interface IMashupConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.mixin {
	 interface IObservableConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Object) */
		listeners?: any;
	}

}

declare module TypExt.mixin {
	 interface IQueryableConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.mixin {
	 interface IResponsiveConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Object) */
		responsiveConfig?: any;
		/** [Config Option] (Object) */
		responsiveFormulas?: any;
	}

}

declare module TypExt.mixin {
	 interface ISelectableConfig extends TypExt.IMixinConfig {
		/** [Config Option] (Boolean) */
		allowDeselect?: boolean;
		/** [Config Option] (Boolean) */
		deselectOnContainerClick?: boolean;
		/** [Config Option] (Boolean) */
		disableSelection?: boolean;
		/** [Config Option] (Boolean) */
		locked?: boolean;
		/** [Config Option] (String) */
		mode?: string;
	}

}

declare module TypExt.mixin {
	 interface ITemplatableConfig extends TypExt.IMixinConfig {
	}

}

declare module TypExt.mixin {
	 interface ITraversableConfig extends TypExt.IMixinConfig {
	}

}

declare module TypExt {
	 interface INumberConfig {
	}

}

declare module TypExt {
	 interface IObjectConfig {
	}

}

declare module TypExt {
	 interface IOsConfig extends TypExt.env.IOSConfig {
	}

}

declare module TypExt.panel {
	 interface IBarConfig extends TypExt.container.IContainerConfig {
	}

}

declare module TypExt.panel {
	 interface IDDConfig extends TypExt.dd.IDragSourceConfig {
	}

}

declare module TypExt.panel {
	 interface IHeaderConfig extends TypExt.panel.IBarConfig {
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] ('top'/'right'/'bottom'/'left') */
		iconAlign?: any;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Number) */
		itemPosition?: number;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (String/Ext.panel.Title) */
		title?: any;
		/** [Config Option] (String) */
		titleAlign?: string;
		/** [Config Option] (Number) */
		titlePosition?: number;
		/** [Config Option] ('default'/0/1/2) */
		titleRotation?: any;
		/** [Config Option] (Number) */
		weight?: number;
	}

}

declare module TypExt.panel {
	 interface IPanelConfig extends TypExt.container.IContainerConfig, TypExt.container.IDockingContainerConfig {
		/** [Config Option] (Boolean) */
		animCollapse?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/Object[]) */
		bbar?: any;
		/** [Config Option] (Boolean) */
		bodyBorder?: boolean;
		/** [Config Option] (String/String[]) */
		bodyCls?: any;
		/** [Config Option] (Number/String) */
		bodyPadding?: any;
		/** [Config Option] (String/Object/Function) */
		bodyStyle?: any;
		/** [Config Option] (Boolean) */
		border?: boolean;
		/** [Config Option] (String) */
		buttonAlign?: string;
		/** [Config Option] (Object/Object[]) */
		buttons?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (String) */
		closeAction?: string;
		/** [Config Option] (String) */
		collapseDirection?: string;
		/** [Config Option] (Boolean) */
		collapseFirst?: boolean;
		/** [Config Option] (String) */
		collapseMode?: string;
		/** [Config Option] (Boolean) */
		collapsed?: boolean;
		/** [Config Option] (String) */
		collapsedCls?: string;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Boolean) */
		constrainHeader?: boolean;
		/** [Config Option] (Object/Object[]) */
		dockedItems?: any;
		/** [Config Option] (Boolean/Object) */
		draggable?: any;
		/** [Config Option] (Object/Object[]) */
		fbar?: any;
		/** [Config Option] (Boolean) */
		floatable?: boolean;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Boolean) */
		frameHeader?: boolean;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (Boolean/Object) */
		header?: any;
		/** [Config Option] (String) */
		headerOverCls?: string;
		/** [Config Option] (String) */
		headerPosition?: string;
		/** [Config Option] (Boolean) */
		hideCollapseTool?: boolean;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] ('top'/'right'/'bottom'/'left') */
		iconAlign?: any;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Object/Object[]) */
		lbar?: any;
		/** [Config Option] (Boolean) */
		manageHeight?: boolean;
		/** [Config Option] (String) */
		maskElement?: string;
		/** [Config Option] (Number) */
		minButtonWidth?: number;
		/** [Config Option] (Boolean) */
		overlapHeader?: boolean;
		/** [Config Option] (Ext.Component/Object) */
		placeholder?: any;
		/** [Config Option] (Number) */
		placeholderCollapseHideMode?: number;
		/** [Config Option] (Boolean) */
		preventHeader?: boolean;
		/** [Config Option] (Object/Object[]) */
		rbar?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrapDock?: any;
		/** [Config Option] (Boolean) */
		simpleDrag?: boolean;
		/** [Config Option] (Object/Object[]) */
		tbar?: any;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (String) */
		titleAlign?: string;
		/** [Config Option] (Boolean) */
		titleCollapse?: boolean;
		/** [Config Option] ('default'/0/1/2) */
		titleRotation?: any;
		/** [Config Option] (Object[]/Ext.panel.Tool[]) */
		tools?: any;
	}

}

declare module TypExt {
	 interface IPanelConfig extends TypExt.container.IContainerConfig, TypExt.container.IDockingContainerConfig {
		/** [Config Option] (Boolean) */
		animCollapse?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/Object[]) */
		bbar?: any;
		/** [Config Option] (Boolean) */
		bodyBorder?: boolean;
		/** [Config Option] (String/String[]) */
		bodyCls?: any;
		/** [Config Option] (Number/String) */
		bodyPadding?: any;
		/** [Config Option] (String/Object/Function) */
		bodyStyle?: any;
		/** [Config Option] (Boolean) */
		border?: boolean;
		/** [Config Option] (String) */
		buttonAlign?: string;
		/** [Config Option] (Object/Object[]) */
		buttons?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (String) */
		closeAction?: string;
		/** [Config Option] (String) */
		collapseDirection?: string;
		/** [Config Option] (Boolean) */
		collapseFirst?: boolean;
		/** [Config Option] (String) */
		collapseMode?: string;
		/** [Config Option] (Boolean) */
		collapsed?: boolean;
		/** [Config Option] (String) */
		collapsedCls?: string;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Boolean) */
		constrainHeader?: boolean;
		/** [Config Option] (Object/Object[]) */
		dockedItems?: any;
		/** [Config Option] (Boolean/Object) */
		draggable?: any;
		/** [Config Option] (Object/Object[]) */
		fbar?: any;
		/** [Config Option] (Boolean) */
		floatable?: boolean;
		/** [Config Option] (Boolean) */
		frame?: boolean;
		/** [Config Option] (Boolean) */
		frameHeader?: boolean;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (Boolean/Object) */
		header?: any;
		/** [Config Option] (String) */
		headerOverCls?: string;
		/** [Config Option] (String) */
		headerPosition?: string;
		/** [Config Option] (Boolean) */
		hideCollapseTool?: boolean;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] ('top'/'right'/'bottom'/'left') */
		iconAlign?: any;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Object/Object[]) */
		lbar?: any;
		/** [Config Option] (Boolean) */
		manageHeight?: boolean;
		/** [Config Option] (String) */
		maskElement?: string;
		/** [Config Option] (Number) */
		minButtonWidth?: number;
		/** [Config Option] (Boolean) */
		overlapHeader?: boolean;
		/** [Config Option] (Ext.Component/Object) */
		placeholder?: any;
		/** [Config Option] (Number) */
		placeholderCollapseHideMode?: number;
		/** [Config Option] (Boolean) */
		preventHeader?: boolean;
		/** [Config Option] (Object/Object[]) */
		rbar?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrap?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrapDock?: any;
		/** [Config Option] (Boolean) */
		simpleDrag?: boolean;
		/** [Config Option] (Object/Object[]) */
		tbar?: any;
		/** [Config Option] (String) */
		title?: string;
		/** [Config Option] (String) */
		titleAlign?: string;
		/** [Config Option] (Boolean) */
		titleCollapse?: boolean;
		/** [Config Option] ('default'/0/1/2) */
		titleRotation?: any;
		/** [Config Option] (Object[]/Ext.panel.Tool[]) */
		tools?: any;
	}

}

declare module TypExt.panel {
	 interface IPinnableConfig extends TypExt.IMixinConfig {
	}

}

declare module TypExt.panel {
	 interface IProxyConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Boolean) */
		insertProxy?: boolean;
		/** [Config Option] (Boolean) */
		moveOnDrag?: boolean;
	}

}

declare module TypExt.dd {
	 interface IPanelProxyConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Boolean) */
		insertProxy?: boolean;
		/** [Config Option] (Boolean) */
		moveOnDrag?: boolean;
	}

}

declare module TypExt.panel {
	 interface ITableConfig extends TypExt.panel.IPanelConfig, TypExt.grid.locking.ILockableConfig {
		/** [Config Option] (Boolean) */
		allowDeselect?: boolean;
		/** [Config Option] (Boolean) */
		autoLoad?: boolean;
		/** [Config Option] (Boolean) */
		bufferedRenderer?: boolean;
		/** [Config Option] (Boolean) */
		columnLines?: boolean;
		/** [Config Option] (Ext.grid.column.Column[]/Object) */
		columns?: any;
		/** [Config Option] (Boolean) */
		deferRowRender?: boolean;
		/** [Config Option] (Boolean) */
		disableSelection?: boolean;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (Boolean) */
		enableColumnHide?: boolean;
		/** [Config Option] (Boolean) */
		enableColumnMove?: boolean;
		/** [Config Option] (Boolean) */
		enableColumnResize?: boolean;
		/** [Config Option] (Boolean) */
		enableLocking?: boolean;
		/** [Config Option] (Ext.grid.feature.Feature[]/Object[]/Ext.enums.Feature[]) */
		features?: any;
		/** [Config Option] (Boolean) */
		forceFit?: boolean;
		/** [Config Option] (Boolean) */
		hideHeaders?: boolean;
		/** [Config Option] (Object) */
		layout?: any;
		/** [Config Option] (Number) */
		leadingBufferZone?: number;
		/** [Config Option] (Boolean) */
		multiColumnSort?: boolean;
		/** [Config Option] (Boolean) */
		multiSelect?: boolean;
		/** [Config Option] (Number) */
		numFromEdge?: number;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Boolean) */
		reserveScrollbar?: boolean;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (String/Boolean) */
		scroll?: any;
		/** [Config Option] (Boolean) */
		sealedColumns?: boolean;
		/** [Config Option] (Ext.selection.Model/Object/String) */
		selModel?: any;
		/** [Config Option] (String) */
		selType?: string;
		/** [Config Option] (Ext.data.Model) */
		selection?: Ext.data.IModel;
		/** [Config Option] (Boolean) */
		simpleSelect?: boolean;
		/** [Config Option] (Boolean) */
		sortableColumns?: boolean;
		/** [Config Option] (Ext.data.Store/String/Object) */
		store?: any;
		/** [Config Option] (Number) */
		trailingBufferZone?: number;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Boolean) */
		variableRowHeight?: boolean;
		/** [Config Option] (Ext.view.Table) */
		view?: Ext.view.ITable;
		/** [Config Option] (Object) */
		viewConfig?: any;
		/** [Config Option] (String) */
		viewType?: string;
	}

}

declare module TypExt.panel {
	 interface ITitleConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String/Object) */
		autoEl?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Number/String) */
		glyph?: any;
		/** [Config Option] (String) */
		icon?: string;
		/** [Config Option] ('top'/'right'/'bottom'/'left') */
		iconAlign?: any;
		/** [Config Option] (String) */
		iconCls?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (0/1/2) */
		rotation?: any;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] ('left'/'center'/'right') */
		textAlign?: any;
	}

}

declare module TypExt.panel {
	 interface IToolConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Function/String) */
		callback?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		disabledCls?: string;
		/** [Config Option] (Function) */
		handler?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (Boolean) */
		stopEvent?: boolean;
		/** [Config Option] (Ext.Component) */
		toolOwner?: Ext.IComponent;
		/** [Config Option] (String/Object) */
		tooltip?: any;
		/** [Config Option] (String) */
		tooltipType?: string;
		/** [Config Option] (String) */
		type?: string;
	}

}

declare module TypExt.perf {
	 interface IAccumulatorConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.perf {
	 interface IMonitorConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IPerfConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.picker {
	 interface IColorConfig extends TypExt.IComponentConfig {
		/** [Config Option] (Boolean) */
		allowReselect?: boolean;
		/** [Config Option] (String) */
		clickEvent?: string;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (String) */
		value?: string;
	}

}

declare module TypExt {
	 interface IColorPaletteConfig extends TypExt.IComponentConfig {
		/** [Config Option] (Boolean) */
		allowReselect?: boolean;
		/** [Config Option] (String) */
		clickEvent?: string;
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (Function/String) */
		handler?: any;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (String) */
		value?: string;
	}

}

declare module TypExt.picker {
	 interface IDateConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String) */
		ariaTitle?: string;
		/** [Config Option] (String) */
		ariaTitleDateFormat?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String/Boolean) */
		border?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String[]) */
		dayNames?: string[];
		/** [Config Option] (Boolean) */
		disableAnim?: boolean;
		/** [Config Option] (String) */
		disabledCellCls?: string;
		/** [Config Option] (String[]) */
		disabledDates?: string[];
		/** [Config Option] (RegExp) */
		disabledDatesRE?: RegExp;
		/** [Config Option] (String) */
		disabledDatesText?: string;
		/** [Config Option] (Number[]) */
		disabledDays?: number[];
		/** [Config Option] (String) */
		disabledDaysText?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Function) */
		handler?: any;
		/** [Config Option] (Object) */
		keyNavConfig?: any;
		/** [Config Option] (String) */
		longDayFormat?: string;
		/** [Config Option] (Date) */
		maxDate?: any;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date) */
		minDate?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (String[]) */
		monthNames?: string[];
		/** [Config Option] (String) */
		monthYearFormat?: string;
		/** [Config Option] (String) */
		monthYearText?: string;
		/** [Config Option] (String) */
		nextText?: string;
		/** [Config Option] (String) */
		prevText?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (Boolean) */
		showToday?: boolean;
		/** [Config Option] (Number) */
		startDay?: number;
		/** [Config Option] (String) */
		todayText?: string;
		/** [Config Option] (String) */
		todayTip?: string;
	}

}

declare module TypExt {
	 interface IDatePickerConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String) */
		ariaTitle?: string;
		/** [Config Option] (String) */
		ariaTitleDateFormat?: string;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Number/String/Boolean) */
		border?: any;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String[]) */
		dayNames?: string[];
		/** [Config Option] (Boolean) */
		disableAnim?: boolean;
		/** [Config Option] (String) */
		disabledCellCls?: string;
		/** [Config Option] (String[]) */
		disabledDates?: string[];
		/** [Config Option] (RegExp) */
		disabledDatesRE?: RegExp;
		/** [Config Option] (String) */
		disabledDatesText?: string;
		/** [Config Option] (Number[]) */
		disabledDays?: number[];
		/** [Config Option] (String) */
		disabledDaysText?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Function) */
		handler?: any;
		/** [Config Option] (Object) */
		keyNavConfig?: any;
		/** [Config Option] (String) */
		longDayFormat?: string;
		/** [Config Option] (Date) */
		maxDate?: any;
		/** [Config Option] (String) */
		maxText?: string;
		/** [Config Option] (Date) */
		minDate?: any;
		/** [Config Option] (String) */
		minText?: string;
		/** [Config Option] (String[]) */
		monthNames?: string[];
		/** [Config Option] (String) */
		monthYearFormat?: string;
		/** [Config Option] (String) */
		monthYearText?: string;
		/** [Config Option] (String) */
		nextText?: string;
		/** [Config Option] (String) */
		prevText?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (Boolean) */
		showToday?: boolean;
		/** [Config Option] (Number) */
		startDay?: number;
		/** [Config Option] (String) */
		todayText?: string;
		/** [Config Option] (String) */
		todayTip?: string;
	}

}

declare module TypExt.picker {
	 interface IMonthConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		cancelText?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		okText?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (Boolean) */
		showButtons?: boolean;
		/** [Config Option] (Date/Number[]) */
		value?: any;
	}

}

declare module TypExt {
	 interface IMonthPickerConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		cancelText?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String) */
		okText?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String) */
		selectedCls?: string;
		/** [Config Option] (Boolean) */
		showButtons?: boolean;
		/** [Config Option] (Date/Number[]) */
		value?: any;
	}

}

declare module TypExt.picker {
	 interface ITimeConfig extends TypExt.view.IBoundListConfig {
		/** [Config Option] (String) */
		componentCls?: string;
		/** [Config Option] (String) */
		format?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Date) */
		maxValue?: any;
		/** [Config Option] (Date) */
		minValue?: any;
	}

}

declare module TypExt.plugin {
	 interface IAbstractConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		pluginId?: string;
		/** [Config Option] (String|Array) */
		stateEvents?: any;
	}

}

declare module TypExt {
	 interface IAbstractPluginConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		pluginId?: string;
		/** [Config Option] (String|Array) */
		stateEvents?: any;
	}

}

declare module TypExt.plugin {
	 interface IAbstractClipboardConfig extends TypExt.plugin.IAbstractConfig {
		/** [Config Option] (Object) */
		formats?: any;
		/** [Config Option] (String/String[]) */
		memory?: any;
		/** [Config Option] (String/String[]) */
		source?: any;
		/** [Config Option] (String) */
		system?: string;
	}

}

declare module TypExt.plugin {
	 interface ILazyItemsConfig extends TypExt.plugin.IAbstractConfig {
	}

}

declare module TypExt.plugin {
	 interface IManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IPluginManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IPluginMgrConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.plugin {
	 interface IResponsiveConfig extends TypExt.mixin.IResponsiveConfig {
	}

}

declare module TypExt.plugin {
	 interface IViewportConfig extends TypExt.plugin.IResponsiveConfig {
	}

}

declare module TypExt {
	 interface IProgressBarConfig extends TypExt.IComponentConfig {
		/** [Config Option] (Boolean/Object) */
		animate?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		textEl?: any;
		/** [Config Option] (String/Ext.XTemplate) */
		textTpl?: any;
		/** [Config Option] (Number) */
		value?: number;
	}

}

declare module TypExt {
	 interface IProgressBarWidgetConfig extends TypExt.IWidgetConfig {
		/** [Config Option] (Boolean) */
		animate?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		text?: string;
		/** [Config Option] (String/Ext.XTemplate) */
		textTpl?: any;
		/** [Config Option] (Number) */
		value?: number;
	}

}

declare module TypExt.resizer {
	 interface IBorderSplitterConfig extends TypExt.resizer.ISplitterConfig {
		/** [Config Option] (String/Ext.panel.Panel) */
		collapseTarget?: any;
	}

}

declare module TypExt.resizer {
	 interface IBorderSplitterTrackerConfig extends TypExt.resizer.ISplitterTrackerConfig {
	}

}

declare module TypExt.resizer {
	 interface IHandleConfig extends TypExt.IComponentConfig {
		/** [Config Option] ("north"/"south"/"east"/"west"/"center") */
		region?: any;
	}

}

declare module TypExt.resizer {
	 interface IResizerConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig {
		/** [Config Option] (Ext.dom.Element/Ext.util.Region) */
		constrainTo?: any;
		/** [Config Option] (Boolean) */
		dynamic?: boolean;
		/** [Config Option] (String) */
		handles?: string;
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (Number) */
		heightIncrement?: number;
		/** [Config Option] (Number) */
		maxHeight?: number;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		pinned?: boolean;
		/** [Config Option] (Boolean) */
		preserveRatio?: boolean;
		/** [Config Option] (Ext.dom.Element/Ext.Component) */
		target?: any;
		/** [Config Option] (Boolean) */
		transparent?: boolean;
		/** [Config Option] (Number) */
		width?: number;
		/** [Config Option] (Number) */
		widthIncrement?: number;
	}

}

declare module TypExt {
	 interface IResizableConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig {
		/** [Config Option] (Ext.dom.Element/Ext.util.Region) */
		constrainTo?: any;
		/** [Config Option] (Boolean) */
		dynamic?: boolean;
		/** [Config Option] (String) */
		handles?: string;
		/** [Config Option] (Number) */
		height?: number;
		/** [Config Option] (Number) */
		heightIncrement?: number;
		/** [Config Option] (Number) */
		maxHeight?: number;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		pinned?: boolean;
		/** [Config Option] (Boolean) */
		preserveRatio?: boolean;
		/** [Config Option] (Ext.dom.Element/Ext.Component) */
		target?: any;
		/** [Config Option] (Boolean) */
		transparent?: boolean;
		/** [Config Option] (Number) */
		width?: number;
		/** [Config Option] (Number) */
		widthIncrement?: number;
	}

}

declare module TypExt.resizer {
	 interface IResizeTrackerConfig extends TypExt.dd.IDragTrackerConfig {
		/** [Config Option] (Ext.util.Region/Ext.dom.Element) */
		constrainTo?: any;
	}

}

declare module TypExt.resizer {
	 interface ISplitterConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (Boolean) */
		collapseOnDblClick?: boolean;
		/** [Config Option] (String/Ext.panel.Panel) */
		collapseTarget?: any;
		/** [Config Option] (String) */
		collapsedCls?: string;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (Number) */
		defaultSplitMax?: number;
		/** [Config Option] (Number) */
		defaultSplitMin?: number;
		/** [Config Option] (Boolean) */
		performCollapse?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Number) */
		size?: number;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Object) */
		tracker?: any;
	}

}

declare module TypExt.resizer {
	 interface ISplitterTrackerConfig extends TypExt.dd.IDragTrackerConfig {
	}

}

declare module TypExt.scroll {
	 interface IDomScrollerConfig extends TypExt.scroll.IScrollerConfig {
	}

}

declare module TypExt.scroll {
	 interface IIndicatorConfig extends TypExt.IWidgetConfig {
		/** [Config Option] (Number) */
		hideDelay?: number;
		/** [Config Option] (Number) */
		minLength?: number;
	}

}

declare module TypExt.scroll {
	 interface IScrollerConfig extends TypExt.IEventedConfig, TypExt.mixin.IFactoryableConfig {
		/** [Config Option] ('auto'/'vertical'/'horizontal'/'both') */
		direction?: any;
		/** [Config Option] (Boolean) */
		directionLock?: boolean;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		element?: any;
		/** [Config Option] (Boolean/Object) */
		indicators?: any;
		/** [Config Option] (Object) */
		momentumEasing?: any;
		/** [Config Option] (Boolean) */
		rtl?: boolean;
		/** [Config Option] (Boolean/String) */
		x?: any;
		/** [Config Option] (Boolean/String) */
		y?: any;
	}

}

declare module TypExt.scroll {
	 interface ITouchScrollerConfig extends TypExt.scroll.IScrollerConfig {
		/** [Config Option] (Boolean/Object) */
		indicators?: any;
		/** [Config Option] (Object) */
		momentumEasing?: any;
		/** [Config Option] (Number/Object) */
		slotSnapSize?: any;
	}

}

declare module TypExt.selection {
	 interface ICellModelConfig extends TypExt.selection.IDataViewModelConfig {
		/** [Config Option] (Boolean) */
		enableKeyNav?: boolean;
		/** [Config Option] ("SINGLE") */
		mode?: string;
		/** [Config Option] (Boolean) */
		preventWrap?: boolean;
	}

}

declare module TypExt.selection {
	 interface ICheckboxModelConfig extends TypExt.selection.IRowModelConfig {
		/** [Config Option] (Boolean) */
		allowDeselect?: boolean;
		/** [Config Option] (Boolean) */
		checkOnly?: boolean;
		/** [Config Option] (String) */
		checkSelector?: string;
		/** [Config Option] (Number/String) */
		injectCheckbox?: any;
		/** [Config Option] ("SINGLE"/"SIMPLE"/"MULTI") */
		mode?: any;
		/** [Config Option] (Boolean) */
		showHeaderCheckbox?: boolean;
	}

}

declare module TypExt.selection {
	 interface IDataViewModelConfig extends TypExt.selection.IModelConfig {
		/** [Config Option] (Boolean) */
		enableKeyNav?: boolean;
	}

}

declare module TypExt.selection {
	 interface IModelConfig extends TypExt.mixin.IObservableConfig, TypExt.util.IStoreHolderConfig,TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Boolean) */
		allowDeselect?: boolean;
		/** [Config Option] (Boolean) */
		ignoreRightMouseSelection?: boolean;
		/** [Config Option] ("SINGLE"/"SIMPLE"/"MULTI") */
		mode?: any;
		/** [Config Option] (Boolean) */
		pruneRemoved?: boolean;
		/** [Config Option] (Boolean) */
		toggleOnClick?: boolean;
	}

}

declare module TypExt {
	 interface IAbstractSelectionModelConfig extends TypExt.mixin.IObservableConfig, TypExt.util.IStoreHolderConfig,TypExt.mixin.IFactoryableConfig {
		/** [Config Option] (Boolean) */
		allowDeselect?: boolean;
		/** [Config Option] (Boolean) */
		ignoreRightMouseSelection?: boolean;
		/** [Config Option] ("SINGLE"/"SIMPLE"/"MULTI") */
		mode?: any;
		/** [Config Option] (Boolean) */
		pruneRemoved?: boolean;
		/** [Config Option] (Boolean) */
		toggleOnClick?: boolean;
	}

}

declare module TypExt.selection {
	 interface IRowModelConfig extends TypExt.selection.IDataViewModelConfig {
		/** [Config Option] (Boolean) */
		enableKeyNav?: boolean;
	}

}

declare module TypExt.selection {
	 interface ITreeModelConfig extends TypExt.selection.IRowModelConfig {
		/** [Config Option] (Boolean) */
		selectOnExpanderClick?: boolean;
	}

}

declare module TypExt.slider {
	 interface IMultiConfig extends TypExt.form.field.IBaseConfig {
		/** [Config Option] (Object/Boolean) */
		animate?: any;
		/** [Config Option] (Boolean) */
		clickToChange?: boolean;
		/** [Config Option] (Boolean) */
		constrainThumbs?: boolean;
		/** [Config Option] (Number/Boolean) */
		decimalPrecision?: any;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Number) */
		keyIncrement?: number;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Function) */
		tipText?: any;
		/** [Config Option] (Object/Boolean) */
		useTips?: any;
		/** [Config Option] (Number) */
		value?: number;
		/** [Config Option] (Number[]) */
		values?: number[];
		/** [Config Option] (Boolean) */
		vertical?: boolean;
		/** [Config Option] (Boolean) */
		zeroBasedSnapping?: boolean;
	}

}

declare module TypExt.slider {
	 interface IMultiSliderConfig extends TypExt.form.field.IBaseConfig {
		/** [Config Option] (Object/Boolean) */
		animate?: any;
		/** [Config Option] (Boolean) */
		clickToChange?: boolean;
		/** [Config Option] (Boolean) */
		constrainThumbs?: boolean;
		/** [Config Option] (Number/Boolean) */
		decimalPrecision?: any;
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (Number) */
		increment?: number;
		/** [Config Option] (Number) */
		keyIncrement?: number;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Function) */
		tipText?: any;
		/** [Config Option] (Object/Boolean) */
		useTips?: any;
		/** [Config Option] (Number) */
		value?: number;
		/** [Config Option] (Number[]) */
		values?: number[];
		/** [Config Option] (Boolean) */
		vertical?: boolean;
		/** [Config Option] (Boolean) */
		zeroBasedSnapping?: boolean;
	}

}

declare module TypExt.slider {
	 interface ISingleConfig extends TypExt.slider.IMultiConfig {
		/** [Config Option] (Boolean) */
		publishOnComplete?: boolean;
	}

}

declare module TypExt {
	 interface ISliderConfig extends TypExt.slider.IMultiConfig {
		/** [Config Option] (Boolean) */
		publishOnComplete?: boolean;
	}

}

declare module TypExt.form {
	 interface ISliderFieldConfig extends TypExt.slider.IMultiConfig {
		/** [Config Option] (Boolean) */
		publishOnComplete?: boolean;
	}

}

declare module TypExt.slider {
	 interface ISingleSliderConfig extends TypExt.slider.IMultiConfig {
		/** [Config Option] (Boolean) */
		publishOnComplete?: boolean;
	}

}

declare module TypExt.slider {
	 interface ISliderConfig extends TypExt.slider.IMultiConfig {
		/** [Config Option] (Boolean) */
		publishOnComplete?: boolean;
	}

}

declare module TypExt.slider {
	 interface IThumbConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Ext.slider.MultiSlider) */
		slider?: Ext.slider.IMultiSlider;
	}

}

declare module TypExt.slider {
	 interface ITipConfig extends TypExt.tip.ITipConfig {
		/** [Config Option] (String) */
		align?: string;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Array) */
		offsets?: any[];
		/** [Config Option] (String) */
		position?: string;
	}

}

declare module TypExt.slider {
	 interface IWidgetConfig extends TypExt.IWidgetConfig {
		/** [Config Option] (Boolean) */
		clickToChange?: boolean;
		/** [Config Option] (Number) */
		maxValue?: number;
		/** [Config Option] (Number) */
		minValue?: number;
		/** [Config Option] (Boolean) */
		publishOnComplete?: boolean;
		/** [Config Option] (Object) */
		twoWayBindable?: any;
		/** [Config Option] (Number/Number[]) */
		value?: any;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module TypExt.sparkline {
	 interface IBarConfig extends TypExt.sparkline.IBarBaseConfig {
		/** [Config Option] (String) */
		barColor?: string;
		/** [Config Option] (Number) */
		barSpacing?: number;
		/** [Config Option] (Number) */
		barWidth?: number;
		/** [Config Option] (Boolean) */
		chartRangeClip?: boolean;
		/** [Config Option] (Number) */
		chartRangeMax?: number;
		/** [Config Option] (Number) */
		chartRangeMin?: number;
		/** [Config Option] (Object) */
		colorMap?: any;
		/** [Config Option] (String) */
		negBarColor?: string;
		/** [Config Option] (String) */
		nullColor?: string;
		/** [Config Option] (String[]) */
		stackedBarColor?: string[];
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Config Option] (Boolean) */
		zeroAxis?: boolean;
		/** [Config Option] (String) */
		zeroColor?: string;
	}

}

declare module TypExt.sparkline {
	 interface IBarBaseConfig extends TypExt.sparkline.IBaseConfig {
	}

}

declare module TypExt.sparkline {
	 interface IBaseConfig extends TypExt.IWidgetConfig {
		/** [Config Option] (String) */
		fillColor?: string;
		/** [Config Option] (String) */
		highlightColor?: string;
		/** [Config Option] (Number) */
		highlightLighten?: number;
		/** [Config Option] (String) */
		lineColor?: string;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Config Option] (Boolean) */
		tooltipSkipNull?: boolean;
		/** [Config Option] (Number[]) */
		values?: number[];
	}

}

declare module TypExt.sparkline {
	 interface IBoxConfig extends TypExt.sparkline.IBaseConfig {
		/** [Config Option] (String) */
		boxFillColor?: string;
		/** [Config Option] (String) */
		boxLineColor?: string;
		/** [Config Option] (Number) */
		chartRangeMax?: number;
		/** [Config Option] (Number) */
		chartRangeMin?: number;
		/** [Config Option] (String) */
		medianColor?: string;
		/** [Config Option] (String) */
		outlierFillColor?: string;
		/** [Config Option] (Number) */
		outlierIQR?: number;
		/** [Config Option] (String) */
		outlierLineColor?: string;
		/** [Config Option] (Boolean) */
		raw?: boolean;
		/** [Config Option] (Boolean) */
		showOutliers?: boolean;
		/** [Config Option] (Number) */
		spotRadius?: number;
		/** [Config Option] (Number) */
		target?: number;
		/** [Config Option] (Number) */
		targetColor?: number;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Config Option] (String) */
		whiskerColor?: string;
	}

}

declare module TypExt.sparkline {
	 interface IBulletConfig extends TypExt.sparkline.IBaseConfig {
		/** [Config Option] (Number) */
		base?: number;
		/** [Config Option] (String) */
		performanceColor?: string;
		/** [Config Option] (String[]) */
		rangeColors?: string[];
		/** [Config Option] (String) */
		targetColor?: string;
		/** [Config Option] (Number) */
		targetWidth?: number;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
	}

}

declare module TypExt.sparkline {
	 interface ICanvasBaseConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.sparkline {
	 interface ICanvasCanvasConfig extends TypExt.sparkline.ICanvasBaseConfig {
	}

}

declare module TypExt.sparkline {
	 interface IDiscreteConfig extends TypExt.sparkline.IBarBaseConfig {
		/** [Config Option] (Boolean) */
		chartRangeClip?: boolean;
		/** [Config Option] (Number) */
		chartRangeMax?: number;
		/** [Config Option] (Number) */
		chartRangeMin?: number;
		/** [Config Option] (Number) */
		lineHeight?: number;
		/** [Config Option] (String) */
		thresholdColor?: string;
		/** [Config Option] (Number) */
		thresholdValue?: number;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
	}

}

declare module TypExt.sparkline {
	 interface ILineConfig extends TypExt.sparkline.IBaseConfig {
		/** [Config Option] (Number) */
		chartRangeMax?: number;
		/** [Config Option] (Number) */
		chartRangeMaxX?: number;
		/** [Config Option] (Number) */
		chartRangeMin?: number;
		/** [Config Option] (Number) */
		chartRangeMinX?: number;
		/** [Config Option] (Boolean) */
		drawNormalOnTop?: boolean;
		/** [Config Option] (String) */
		highlightLineColor?: string;
		/** [Config Option] (String) */
		highlightSpotColor?: string;
		/** [Config Option] (Number) */
		lineWidth?: number;
		/** [Config Option] (String) */
		maxSpotColor?: string;
		/** [Config Option] (String) */
		minSpotColor?: string;
		/** [Config Option] (String) */
		normalRangeColor?: string;
		/** [Config Option] (Number) */
		normalRangeMax?: number;
		/** [Config Option] (Number) */
		normalRangeMin?: number;
		/** [Config Option] (String) */
		spotColor?: string;
		/** [Config Option] (Number) */
		spotRadius?: number;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Config Option] (Object) */
		valueSpots?: any;
	}

}

declare module TypExt.sparkline {
	 interface IPieConfig extends TypExt.sparkline.IBaseConfig {
		/** [Config Option] (String) */
		borderColor?: string;
		/** [Config Option] (Number) */
		borderWidth?: number;
		/** [Config Option] (Number) */
		offset?: number;
		/** [Config Option] (String[]) */
		sliceColors?: string[];
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
	}

}

declare module TypExt.sparkline {
	 interface IRangeMapConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.sparkline {
	 interface IShapeConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.sparkline {
	 interface ITriStateConfig extends TypExt.sparkline.IBarBaseConfig {
		/** [Config Option] (Number) */
		barSpacing?: number;
		/** [Config Option] (Number) */
		barWidth?: number;
		/** [Config Option] (Object) */
		colorMap?: any;
		/** [Config Option] (String) */
		negBarColor?: string;
		/** [Config Option] (String) */
		posBarColor?: string;
		/** [Config Option] (String/Ext.XTemplate) */
		tipTpl?: any;
		/** [Config Option] (String) */
		zeroBarColor?: string;
	}

}

declare module TypExt.sparkline {
	 interface IVmlCanvasConfig extends TypExt.sparkline.ICanvasBaseConfig {
	}

}

declare module TypExt.state {
	 interface ICookieProviderConfig extends TypExt.state.IProviderConfig {
		/** [Config Option] (String) */
		domain?: string;
		/** [Config Option] (Date) */
		expires?: any;
		/** [Config Option] (String) */
		path?: string;
		/** [Config Option] (Boolean) */
		secure?: boolean;
	}

}

declare module TypExt.state {
	 interface ILocalStorageProviderConfig extends TypExt.state.IProviderConfig {
	}

}

declare module TypExt.state {
	 interface IManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.state {
	 interface IProviderConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig {
		/** [Config Option] (String) */
		prefix?: string;
	}

}

declare module TypExt.state {
	 interface IStatefulConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Number) */
		saveDelay?: number;
		/** [Config Option] (String[]) */
		stateEvents?: string[];
		/** [Config Option] (String) */
		stateId?: string;
		/** [Config Option] (Boolean) */
		stateful?: boolean;
	}

}

declare module TypExt {
	 interface IStringConfig {
	}

}

declare module TypExt {
	 interface ISupportsConfig {
	}

}

declare module TypExt.tab {
	 interface IBarConfig extends TypExt.panel.IBarConfig, TypExt.util.IFocusableContainerConfig {
		/** [Config Option] (Boolean) */
		activateOnFocus?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Boolean) */
		ensureActiveVisibleOnChange?: boolean;
		/** [Config Option] (Number) */
		maxTabWidth?: number;
		/** [Config Option] (Number) */
		minTabWidth?: number;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] ('default'/0/1/2) */
		tabRotation?: any;
		/** [Config Option] (Boolean) */
		tabStretchMax?: boolean;
	}

}

declare module TypExt.tab {
	 interface IPanelConfig extends TypExt.panel.IPanelConfig {
		/** [Config Option] (String/Number) */
		activeItem?: any;
		/** [Config Option] (String/Number/Ext.Component) */
		activeTab?: any;
		/** [Config Option] (Boolean) */
		deferredRender?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number) */
		maxTabWidth?: number;
		/** [Config Option] (Number) */
		minTabWidth?: number;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Boolean) */
		removePanelHeader?: boolean;
		/** [Config Option] (Object) */
		tabBar?: any;
		/** [Config Option] (Number) */
		tabBarHeaderPosition?: number;
		/** [Config Option] ("top"/"bottom"/"left"/"right") */
		tabPosition?: any;
		/** [Config Option] ('default'/0/1/2) */
		tabRotation?: any;
		/** [Config Option] (Boolean) */
		tabStretchMax?: boolean;
	}

}

declare module TypExt {
	 interface ITabPanelConfig extends TypExt.panel.IPanelConfig {
		/** [Config Option] (String/Number) */
		activeItem?: any;
		/** [Config Option] (String/Number/Ext.Component) */
		activeTab?: any;
		/** [Config Option] (Boolean) */
		deferredRender?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number) */
		maxTabWidth?: number;
		/** [Config Option] (Number) */
		minTabWidth?: number;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Boolean) */
		removePanelHeader?: boolean;
		/** [Config Option] (Object) */
		tabBar?: any;
		/** [Config Option] (Number) */
		tabBarHeaderPosition?: number;
		/** [Config Option] ("top"/"bottom"/"left"/"right") */
		tabPosition?: any;
		/** [Config Option] ('default'/0/1/2) */
		tabRotation?: any;
		/** [Config Option] (Boolean) */
		tabStretchMax?: boolean;
	}

}

declare module TypExt.tab {
	 interface ITabConfig extends TypExt.button.IButtonConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (String) */
		closeText?: string;
		/** [Config Option] (String) */
		overCls?: string;
		/** [Config Option] ('default'/0/1/2) */
		rotation?: any;
		/** [Config Option] ("small"/"medium"/"large") */
		scale?: any;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] ('top'/'right'/'bottom'/'left') */
		tabPosition?: any;
	}

}

declare module TypExt {
	 interface ITaskQueueConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface ITemplateConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Boolean) */
		compiled?: boolean;
		/** [Config Option] (Boolean) */
		disableFormats?: boolean;
	}

}

declare module TypExt.tip {
	 interface IQuickTipConfig extends TypExt.tip.IToolTipConfig {
		/** [Config Option] (Boolean) */
		interceptTitles?: boolean;
		/** [Config Option] (Boolean/Number) */
		shrinkWrapDock?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		target?: any;
		/** [Config Option] (String/Object) */
		text?: any;
		/** [Config Option] (String/Ext.panel.Title) */
		title?: any;
	}

}

declare module TypExt {
	 interface IQuickTipConfig extends TypExt.tip.IToolTipConfig {
		/** [Config Option] (Boolean) */
		interceptTitles?: boolean;
		/** [Config Option] (Boolean/Number) */
		shrinkWrapDock?: any;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		target?: any;
		/** [Config Option] (String/Object) */
		text?: any;
		/** [Config Option] (String/Ext.panel.Title) */
		title?: any;
	}

}

declare module TypExt.tip {
	 interface IQuickTipManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IQuickTipsConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.tip {
	 interface ITipConfig extends TypExt.panel.IPanelConfig {
		/** [Config Option] (Boolean/String/HTMLElement/Ext.dom.Element) */
		autoRender?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (String) */
		closeAction?: string;
		/** [Config Option] (Boolean) */
		constrainPosition?: boolean;
		/** [Config Option] (String) */
		defaultAlign?: string;
		/** [Config Option] (Boolean) */
		focusOnToFront?: boolean;
		/** [Config Option] (Boolean) */
		frameHeader?: boolean;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean/String) */
		shadow?: any;
		/** [Config Option] (Number) */
		width?: number;
	}

}

declare module TypExt {
	 interface ITipConfig extends TypExt.panel.IPanelConfig {
		/** [Config Option] (Boolean/String/HTMLElement/Ext.dom.Element) */
		autoRender?: any;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (String) */
		closeAction?: string;
		/** [Config Option] (Boolean) */
		constrainPosition?: boolean;
		/** [Config Option] (String) */
		defaultAlign?: string;
		/** [Config Option] (Boolean) */
		focusOnToFront?: boolean;
		/** [Config Option] (Boolean) */
		frameHeader?: boolean;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean/String) */
		shadow?: any;
		/** [Config Option] (Number) */
		width?: number;
	}

}

declare module TypExt.tip {
	 interface IToolTipConfig extends TypExt.tip.ITipConfig {
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (Number) */
		anchorOffset?: number;
		/** [Config Option] (Boolean) */
		anchorToTarget?: boolean;
		/** [Config Option] (Boolean) */
		autoHide?: boolean;
		/** [Config Option] (String) */
		delegate?: string;
		/** [Config Option] (Number) */
		dismissDelay?: number;
		/** [Config Option] (Number) */
		fadeOutDuration?: number;
		/** [Config Option] (String) */
		hideAction?: string;
		/** [Config Option] (Number) */
		hideDelay?: number;
		/** [Config Option] (Number[]) */
		mouseOffset?: number[];
		/** [Config Option] (Number) */
		showDelay?: number;
		/** [Config Option] (HTMLElement/Ext.dom.Element/String) */
		target?: any;
		/** [Config Option] (Boolean) */
		trackMouse?: boolean;
	}

}

declare module TypExt {
	 interface IToolTipConfig extends TypExt.tip.ITipConfig {
		/** [Config Option] (String) */
		anchor?: string;
		/** [Config Option] (Number) */
		anchorOffset?: number;
		/** [Config Option] (Boolean) */
		anchorToTarget?: boolean;
		/** [Config Option] (Boolean) */
		autoHide?: boolean;
		/** [Config Option] (String) */
		delegate?: string;
		/** [Config Option] (Number) */
		dismissDelay?: number;
		/** [Config Option] (Number) */
		fadeOutDuration?: number;
		/** [Config Option] (String) */
		hideAction?: string;
		/** [Config Option] (Number) */
		hideDelay?: number;
		/** [Config Option] (Number[]) */
		mouseOffset?: number[];
		/** [Config Option] (Number) */
		showDelay?: number;
		/** [Config Option] (HTMLElement/Ext.dom.Element/String) */
		target?: any;
		/** [Config Option] (Boolean) */
		trackMouse?: boolean;
	}

}

declare module TypExt.toolbar {
	 interface IBreadcrumbConfig extends TypExt.IContainerConfig, TypExt.util.IFocusableContainerConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		buttonUI?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		overflowHandler?: string;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (Ext.data.TreeModel/String) */
		selection?: any;
		/** [Config Option] (Boolean) */
		showIcons?: boolean;
		/** [Config Option] (Boolean) */
		showMenuIcons?: boolean;
		/** [Config Option] (Ext.data.TreeStore) */
		store?: Ext.data.ITreeStore;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Boolean) */
		useSplitButtons?: boolean;
	}

}

declare module TypExt.toolbar {
	 interface IFillConfig extends TypExt.IComponentConfig {
		/** [Config Option] (Number) */
		flex?: number;
	}

}

declare module TypExt.toolbar {
	 interface IItemConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String) */
		overflowText?: string;
	}

}

declare module TypExt.toolbar {
	 interface IPagingConfig extends TypExt.toolbar.IToolbarConfig, TypExt.util.IStoreHolderConfig {
		/** [Config Option] (String) */
		afterPageText?: string;
		/** [Config Option] (String) */
		beforePageText?: string;
		/** [Config Option] (Boolean) */
		displayInfo?: boolean;
		/** [Config Option] (String) */
		displayMsg?: string;
		/** [Config Option] (String) */
		emptyMsg?: string;
		/** [Config Option] (String) */
		firstText?: string;
		/** [Config Option] (Number) */
		inputItemWidth?: number;
		/** [Config Option] (String) */
		lastText?: string;
		/** [Config Option] (String) */
		nextText?: string;
		/** [Config Option] (Boolean) */
		prependButtons?: boolean;
		/** [Config Option] (String) */
		prevText?: string;
		/** [Config Option] (String) */
		refreshText?: string;
		/** [Config Option] (Ext.data.Store/String) */
		store?: any;
	}

}

declare module TypExt {
	 interface IPagingToolbarConfig extends TypExt.toolbar.IToolbarConfig, TypExt.util.IStoreHolderConfig {
		/** [Config Option] (String) */
		afterPageText?: string;
		/** [Config Option] (String) */
		beforePageText?: string;
		/** [Config Option] (Boolean) */
		displayInfo?: boolean;
		/** [Config Option] (String) */
		displayMsg?: string;
		/** [Config Option] (String) */
		emptyMsg?: string;
		/** [Config Option] (String) */
		firstText?: string;
		/** [Config Option] (Number) */
		inputItemWidth?: number;
		/** [Config Option] (String) */
		lastText?: string;
		/** [Config Option] (String) */
		nextText?: string;
		/** [Config Option] (Boolean) */
		prependButtons?: boolean;
		/** [Config Option] (String) */
		prevText?: string;
		/** [Config Option] (String) */
		refreshText?: string;
		/** [Config Option] (Ext.data.Store/String) */
		store?: any;
	}

}

declare module TypExt.toolbar {
	 interface ISeparatorConfig extends TypExt.toolbar.IItemConfig {
		/** [Config Option] (String) */
		baseCls?: string;
	}

}

declare module TypExt.toolbar {
	 interface ISpacerConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String) */
		baseCls?: string;
	}

}

declare module TypExt.toolbar {
	 interface ITextItemConfig extends TypExt.toolbar.IItemConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		text?: string;
	}

}

declare module TypExt.toolbar {
	 interface IToolbarConfig extends TypExt.container.IContainerConfig, TypExt.util.IFocusableContainerConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultButtonUI?: string;
		/** [Config Option] (String) */
		defaultFieldUI?: string;
		/** [Config Option] (String) */
		defaultFooterButtonUI?: string;
		/** [Config Option] (String) */
		defaultFooterFieldUI?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		enableOverflow?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		overflowHandler?: string;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module TypExt {
	 interface IToolbarConfig extends TypExt.container.IContainerConfig, TypExt.util.IFocusableContainerConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String) */
		defaultButtonUI?: string;
		/** [Config Option] (String) */
		defaultFieldUI?: string;
		/** [Config Option] (String) */
		defaultFooterButtonUI?: string;
		/** [Config Option] (String) */
		defaultFooterFieldUI?: string;
		/** [Config Option] (String) */
		defaultType?: string;
		/** [Config Option] (Boolean) */
		enableOverflow?: boolean;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (String) */
		overflowHandler?: string;
		/** [Config Option] (Boolean) */
		vertical?: boolean;
	}

}

declare module TypExt.tree {
	 interface IColumnConfig extends TypExt.grid.column.IColumnConfig {
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Boolean) */
		hideable?: boolean;
		/** [Config Option] (Boolean) */
		lockable?: boolean;
		/** [Config Option] (String) */
		tdCls?: string;
	}

}

declare module TypExt.tree {
	 interface INavigationModelConfig extends TypExt.grid.INavigationModelConfig {
	}

}

declare module TypExt.tree {
	 interface IPanelConfig extends TypExt.panel.ITableConfig {
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (Boolean) */
		folderSort?: boolean;
		/** [Config Option] (Boolean) */
		hideHeaders?: boolean;
		/** [Config Option] (Boolean) */
		lines?: boolean;
		/** [Config Option] (Ext.data.Model/Ext.data.TreeModel/Object) */
		root?: any;
		/** [Config Option] (Boolean) */
		rootVisible?: boolean;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (Boolean) */
		singleExpand?: boolean;
		/** [Config Option] (Ext.data.TreeStore) */
		store?: Ext.data.ITreeStore;
		/** [Config Option] (Boolean) */
		useArrows?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
	}

}

declare module TypExt.tree {
	 interface ITreePanelConfig extends TypExt.panel.ITableConfig {
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (Boolean) */
		folderSort?: boolean;
		/** [Config Option] (Boolean) */
		hideHeaders?: boolean;
		/** [Config Option] (Boolean) */
		lines?: boolean;
		/** [Config Option] (Ext.data.Model/Ext.data.TreeModel/Object) */
		root?: any;
		/** [Config Option] (Boolean) */
		rootVisible?: boolean;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (Boolean) */
		singleExpand?: boolean;
		/** [Config Option] (Ext.data.TreeStore) */
		store?: Ext.data.ITreeStore;
		/** [Config Option] (Boolean) */
		useArrows?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
	}

}

declare module TypExt {
	 interface ITreePanelConfig extends TypExt.panel.ITableConfig {
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (Boolean) */
		folderSort?: boolean;
		/** [Config Option] (Boolean) */
		hideHeaders?: boolean;
		/** [Config Option] (Boolean) */
		lines?: boolean;
		/** [Config Option] (Ext.data.Model/Ext.data.TreeModel/Object) */
		root?: any;
		/** [Config Option] (Boolean) */
		rootVisible?: boolean;
		/** [Config Option] (Boolean) */
		rowLines?: boolean;
		/** [Config Option] (Boolean) */
		singleExpand?: boolean;
		/** [Config Option] (Ext.data.TreeStore) */
		store?: Ext.data.ITreeStore;
		/** [Config Option] (Boolean) */
		useArrows?: boolean;
		/** [Config Option] (String) */
		viewType?: string;
	}

}

declare module TypExt.tree.plugin {
	 interface ITreeViewDragDropConfig extends TypExt.plugin.IAbstractConfig {
		/** [Config Option] (Boolean) */
		allowContainerDrops?: boolean;
		/** [Config Option] (Boolean) */
		allowParentInserts?: boolean;
		/** [Config Option] (Boolean) */
		appendOnly?: boolean;
		/** [Config Option] (Object/Boolean) */
		containerScroll?: any;
		/** [Config Option] (String) */
		ddGroup?: string;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (String) */
		dragGroup?: string;
		/** [Config Option] (String) */
		dragText?: string;
		/** [Config Option] (Object) */
		dragZone?: any;
		/** [Config Option] (String) */
		dropGroup?: string;
		/** [Config Option] (Object) */
		dropZone?: any;
		/** [Config Option] (Boolean) */
		enableDrag?: boolean;
		/** [Config Option] (Boolean) */
		enableDrop?: boolean;
		/** [Config Option] (Number) */
		expandDelay?: number;
		/** [Config Option] (String) */
		nodeHighlightColor?: string;
		/** [Config Option] (Boolean) */
		nodeHighlightOnDrop?: boolean;
		/** [Config Option] (Boolean) */
		nodeHighlightOnRepair?: boolean;
		/** [Config Option] (Boolean) */
		sortOnDrop?: boolean;
	}

}

declare module TypExt.tree {
	 interface IViewConfig extends TypExt.view.ITableConfig {
		/** [Config Option] (Boolean) */
		loadMask?: boolean;
		/** [Config Option] (String) */
		loadingCls?: string;
		/** [Config Option] (Boolean) */
		rootVisible?: boolean;
		/** [Config Option] (Object/Ext.selection.DataViewModel) */
		selectionModel?: any;
		/** [Config Option] (Boolean) */
		stripeRows?: boolean;
	}

}

declare module TypExt.tree {
	 interface IViewDragZoneConfig extends TypExt.view.IDragZoneConfig {
	}

}

declare module TypExt.tree {
	 interface IViewDropZoneConfig extends TypExt.view.IDropZoneConfig {
		/** [Config Option] (Boolean) */
		allowContainerDrops?: boolean;
		/** [Config Option] (Boolean) */
		allowParentInserts?: boolean;
		/** [Config Option] (Boolean) */
		appendOnly?: boolean;
		/** [Config Option] (Number) */
		expandDelay?: number;
	}

}

declare module TypExt.util {
	 interface IAbstractMixedCollectionConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig {
		/** [Config Option] (Boolean) */
		allowFunctions?: boolean;
	}

}

declare module TypExt.util {
	 interface IAnimateConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface IBagConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface IBase64Config extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface ICacheConfig {
		/** [Config Option] (Number) */
		maxSize?: number;
	}

}

declare module TypExt.util {
	 interface IClickRepeaterConfig extends TypExt.util.IObservableConfig {
		/** [Config Option] (Boolean) */
		accelerate?: boolean;
		/** [Config Option] (Number) */
		delay?: number;
		/** [Config Option] (String/HTMLElement/Ext.dom.Element) */
		el?: any;
		/** [Config Option] (Number) */
		interval?: number;
		/** [Config Option] (String) */
		pressedCls?: string;
		/** [Config Option] (Boolean) */
		preventDefault?: boolean;
		/** [Config Option] (Boolean) */
		stopDefault?: boolean;
	}

}

declare module TypExt.util {
	 interface ICollectionConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (Function) */
		decoder?: any;
		/** [Config Option] (String) */
		defaultSortDirection?: string;
		/** [Config Option] (Object) */
		extraKeys?: any;
		/** [Config Option] (Array/Ext.util.FilterCollection) */
		filters?: any;
		/** [Config Option] (Object) */
		grouper?: any;
		/** [Config Option] (Ext.util.GroupCollection) */
		groups?: Ext.util.IGroupCollection;
		/** [Config Option] (Function) */
		keyFn?: any;
		/** [Config Option] (Number) */
		multiSortLimit?: number;
		/** [Config Option] (String) */
		rootProperty?: string;
		/** [Config Option] (Array/Ext.util.SorterCollection) */
		sorters?: any;
		/** [Config Option] (Ext.util.Collection) */
		source?: Ext.util.ICollection;
	}

}

declare module TypExt.util {
	 interface ICollectionKeyConfig extends TypExt.IBaseConfig, TypExt.mixin.IIdentifiableConfig {
		/** [Config Option] (Function/String) */
		keyFn?: any;
		/** [Config Option] (String) */
		property?: string;
		/** [Config Option] (String) */
		rootProperty?: string;
	}

}

declare module TypExt.util {
	 interface IComponentDraggerConfig extends TypExt.dd.IDragTrackerConfig {
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Boolean) */
		constrainDelegate?: boolean;
		/** [Config Option] (String/Ext.dom.Element) */
		delegate?: any;
	}

}

declare module TypExt.util {
	 interface ICookiesConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface ICSSConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface ICSVConfig extends TypExt.util.IDelimitedValueConfig {
	}

}

declare module TypExt.util {
	 interface IDelayedTaskConfig {
	}

}

declare module TypExt.util {
	 interface IDelimitedValueConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		dateFormat?: string;
		/** [Config Option] (String) */
		delimiter?: string;
		/** [Config Option] (String) */
		lineBreak?: string;
		/** [Config Option] (String) */
		quote?: string;
	}

}

declare module TypExt.util {
	 interface IElementContainerConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
	}

}

declare module TypExt.util {
	 interface IEventConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface IFilterConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Boolean) */
		anyMatch?: boolean;
		/** [Config Option] (Boolean) */
		caseSensitive?: boolean;
		/** [Config Option] (Boolean) */
		disableOnEmpty?: boolean;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (Boolean) */
		exactMatch?: boolean;
		/** [Config Option] (Function) */
		filterFn?: any;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (String) */
		operator?: string;
		/** [Config Option] (String) */
		property?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (Object) */
		scope?: any;
		/** [Config Option] (RegExp/Mixed) */
		value?: any;
	}

}

declare module TypExt.util {
	 interface IFilterCollectionConfig extends TypExt.util.ICollectionConfig {
	}

}

declare module TypExt.util {
	 interface IFloatingConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Boolean/Number) */
		alwaysOnTop?: any;
		/** [Config Option] (Boolean) */
		animateShadow?: boolean;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Boolean) */
		fixed?: boolean;
		/** [Config Option] (Boolean) */
		focusOnToFront?: boolean;
		/** [Config Option] (Boolean) */
		modal?: boolean;
		/** [Config Option] (String/Boolean) */
		shadow?: any;
		/** [Config Option] (Number) */
		shadowOffset?: number;
		/** [Config Option] (Boolean) */
		shim?: boolean;
	}

}

declare module TypExt.util {
	 interface IFocusableConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		focusCls?: string;
		/** [Config Option] (Number) */
		tabIndex?: number;
	}

}

declare module TypExt.util {
	 interface IFocusableContainerConfig extends TypExt.IMixinConfig {
		/** [Config Option] (Number) */
		activeChildTabIndex?: number;
		/** [Config Option] (Boolean) */
		enableFocusableContainer?: boolean;
		/** [Config Option] (Number) */
		inactiveChildTabIndex?: number;
	}

}

declare module TypExt.util {
	 interface IFormatConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface IGroupConfig extends TypExt.util.ICollectionConfig {
	}

}

declare module TypExt.util {
	 interface IGroupCollectionConfig extends TypExt.util.ICollectionConfig {
		/** [Config Option] (Object) */
		grouper?: any;
	}

}

declare module TypExt.util {
	 interface IGrouperConfig extends TypExt.util.ISorterConfig {
		/** [Config Option] (Function) */
		groupFn?: any;
		/** [Config Option] (String) */
		property?: string;
		/** [Config Option] (String) */
		sortProperty?: string;
	}

}

declare module TypExt.util {
	 interface IHashMapConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (Function) */
		keyFn?: any;
	}

}

declare module TypExt.util {
	 interface IHistoryConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig {
	}

}

declare module TypExt {
	 interface IHistoryConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig {
	}

}

declare module TypExt.util {
	 interface IInflectorConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface IKeyMapConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Object/Object[][]) */
		binding?: any;
		/** [Config Option] (String) */
		eventName?: string;
		/** [Config Option] (Boolean) */
		ignoreInputFields?: boolean;
		/** [Config Option] (Function) */
		processEvent?: any;
		/** [Config Option] (Object) */
		processEventScope?: any;
		/** [Config Option] (Ext.Component/Ext.dom.Element/HTMLElement/String) */
		target?: any;
	}

}

declare module TypExt {
	 interface IKeyMapConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Object/Object[][]) */
		binding?: any;
		/** [Config Option] (String) */
		eventName?: string;
		/** [Config Option] (Boolean) */
		ignoreInputFields?: boolean;
		/** [Config Option] (Function) */
		processEvent?: any;
		/** [Config Option] (Object) */
		processEventScope?: any;
		/** [Config Option] (Ext.Component/Ext.dom.Element/HTMLElement/String) */
		target?: any;
	}

}

declare module TypExt.util {
	 interface IKeyNavConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		defaultEventAction?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String) */
		eventName?: string;
		/** [Config Option] (Boolean) */
		forceKeyDown?: boolean;
		/** [Config Option] (Boolean) */
		ignoreInputFields?: boolean;
		/** [Config Option] (Ext.util.KeyMap) */
		keyMap?: Ext.util.IKeyMap;
		/** [Config Option] (Function) */
		processEvent?: any;
		/** [Config Option] (Object) */
		processEventScope?: any;
		/** [Config Option] (Ext.Component/Ext.dom.Element/HTMLElement/String) */
		target?: any;
	}

}

declare module TypExt {
	 interface IKeyNavConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		defaultEventAction?: string;
		/** [Config Option] (Boolean) */
		disabled?: boolean;
		/** [Config Option] (String) */
		eventName?: string;
		/** [Config Option] (Boolean) */
		forceKeyDown?: boolean;
		/** [Config Option] (Boolean) */
		ignoreInputFields?: boolean;
		/** [Config Option] (Ext.util.KeyMap) */
		keyMap?: Ext.util.IKeyMap;
		/** [Config Option] (Function) */
		processEvent?: any;
		/** [Config Option] (Object) */
		processEventScope?: any;
		/** [Config Option] (Ext.Component/Ext.dom.Element/HTMLElement/String) */
		target?: any;
	}

}

declare module TypExt.util {
	 interface ILocalStorageConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Number) */
		flushDelay?: number;
		/** [Config Option] (String) */
		id?: string;
		/** [Config Option] (Boolean) */
		lazyKeys?: boolean;
		/** [Config Option] (String) */
		prefix?: string;
		/** [Config Option] (Boolean) */
		session?: boolean;
	}

}

declare module TypExt.util {
	 interface ILruCacheConfig extends TypExt.util.IHashMapConfig {
		/** [Config Option] (Number) */
		maxSize?: number;
	}

}

declare module TypExt.util {
	 interface IMementoConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface IMixedCollectionConfig extends TypExt.util.IAbstractMixedCollectionConfig, TypExt.util.ISortableConfig {
		/** [Config Option] (Boolean) */
		allowFunctions?: boolean;
	}

}

declare module TypExt.util {
	 interface IObjectTemplateConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface IObservableConfig extends TypExt.mixin.IObservableConfig {
	}

}

declare module TypExt.util {
	 interface IOffsetConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface IOperatorsConfig {
	}

}

declare module TypExt.util.paintmonitor {
	 interface IAbstractConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util.paintmonitor {
	 interface ICssAnimationConfig extends TypExt.util.paintmonitor.IAbstractConfig {
	}

}

declare module TypExt.util {
	 interface IPaintMonitorConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util.paintmonitor {
	 interface IOverflowChangeConfig extends TypExt.util.paintmonitor.IAbstractConfig {
	}

}

declare module TypExt.util {
	 interface IPointConfig extends TypExt.util.IRegionConfig {
	}

}

declare module TypExt.util {
	 interface IPositionableConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface IProtoElementConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface IQueueConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface IRegionConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface IRenderableConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface ISchedulableConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface ISchedulerConfig extends TypExt.IBaseConfig, TypExt.mixin.IObservableConfig {
		/** [Config Option] (String/Function) */
		preSort?: any;
		/** [Config Option] (Number) */
		tickDelay?: number;
	}

}

declare module TypExt.util.sizemonitor {
	 interface IAbstractConfig extends TypExt.IBaseConfig, TypExt.mixin.ITemplatableConfig {
	}

}

declare module TypExt.util.sizemonitor {
	 interface IDefaultConfig extends TypExt.util.sizemonitor.IAbstractConfig {
	}

}

declare module TypExt.util {
	 interface ISizeMonitorConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util.sizemonitor {
	 interface IOverflowChangeConfig extends TypExt.util.sizemonitor.IAbstractConfig {
	}

}

declare module TypExt.util.sizemonitor {
	 interface IScrollConfig extends TypExt.util.sizemonitor.IAbstractConfig {
	}

}

declare module TypExt.util {
	 interface ISortableConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		defaultSortDirection?: string;
		/** [Config Option] (Number) */
		multiSortLimit?: number;
		/** [Config Option] (String) */
		sortRoot?: string;
		/** [Config Option] (Ext.util.Sorter[]/Object[]) */
		sorters?: any;
	}

}

declare module TypExt.util {
	 interface ISorterConfig extends TypExt.IBaseConfig {
		/** [Config Option] (String) */
		direction?: string;
		/** [Config Option] (Mixed) */
		id?: any;
		/** [Config Option] (String) */
		property?: string;
		/** [Config Option] (String) */
		root?: string;
		/** [Config Option] (Function) */
		sorterFn?: any;
		/** [Config Option] (Function) */
		transform?: any;
	}

}

declare module TypExt.util {
	 interface ISorterCollectionConfig extends TypExt.util.ICollectionConfig {
	}

}

declare module TypExt.util {
	 interface IStoreHolderConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util {
	 interface ITaskManagerConfig extends TypExt.util.ITaskRunnerConfig {
	}

}

declare module TypExt {
	 interface ITaskManagerConfig extends TypExt.util.ITaskRunnerConfig {
	}

}

declare module TypExt.util {
	 interface ITaskRunnerConfig extends TypExt.IBaseConfig {
		/** [Config Option] (Boolean) */
		fireIdleEvent?: boolean;
		/** [Config Option] (Number) */
		interval?: number;
	}

}

declare module TypExt.util.taskrunner {
	 interface ITaskConfig {
	}

}

declare module TypExt.util {
	 interface ITextMetricsConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util.translatable {
	 interface IAbstractConfig extends TypExt.IEventedConfig {
	}

}

declare module TypExt.util.translatable {
	 interface ICssPositionConfig extends TypExt.util.translatable.IDomConfig {
	}

}

declare module TypExt.util.translatable {
	 interface ICssTransformConfig extends TypExt.util.translatable.IDomConfig {
	}

}

declare module TypExt.util.translatable {
	 interface IDomConfig extends TypExt.util.translatable.IAbstractConfig {
	}

}

declare module TypExt.util {
	 interface ITranslatableConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.util.translatable {
	 interface IScrollParentConfig extends TypExt.util.translatable.IDomConfig {
	}

}

declare module TypExt.util.translatable {
	 interface IScrollPositionConfig extends TypExt.util.translatable.IDomConfig {
	}

}

declare module TypExt.util {
	 interface ITSVConfig extends TypExt.util.IDelimitedValueConfig {
	}

}

declare module TypExt.util {
	 interface IXTemplateCompilerConfig extends TypExt.util.IXTemplateParserConfig {
	}

}

declare module TypExt.util {
	 interface IXTemplateParserConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.ux.colorpick {
	 interface IButtonConfig extends TypExt.IComponentConfig, TypExt.ux.colorpick.ISelectionConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/Object/Ext.app.ViewController) */
		controller?: any;
		/** [Config Option] (Number|String) */
		height?: any;
		/** [Config Option] (Object) */
		listeners?: any;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Number|String) */
		width?: any;
	}

}

declare module TypExt.ux.colorpick {
	 interface IColorMapConfig extends TypExt.container.IContainerConfig {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String/Object/Ext.app.ViewController) */
		controller?: any;
		/** [Config Option] (Object) */
		listeners?: any;
	}

}

declare module TypExt.ux.colorpick {
	 interface IColorPreviewConfig extends TypExt.IComponentConfig {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Number|String) */
		height?: any;
		/** [Config Option] (String/Object) */
		html?: any;
		/** [Config Option] (String/Object) */
		style?: any;
	}

}

declare module TypExt.ux.colorpick {
	 interface IFieldConfig extends TypExt.form.field.IPickerConfig, TypExt.ux.colorpick.ISelectionConfig {
		/** [Config Option] (String/Array/Ext.XTemplate) */
		beforeBodyEl?: any;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Boolean) */
		editable?: boolean;
		/** [Config Option] (Boolean) */
		matchFieldWidth?: boolean;
	}

}

declare module TypExt.ux.colorpick {
	 interface ISelectorConfig extends TypExt.container.IContainerConfig, TypExt.ux.colorpick.ISelectionConfig {
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (String/Object/Ext.app.ViewController) */
		controller?: any;
		/** [Config Option] (Number) */
		fieldPad?: number;
		/** [Config Option] (Number) */
		fieldWidth?: number;
		/** [Config Option] (Number|String) */
		height?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number/String) */
		padding?: any;
		/** [Config Option] (Boolean) */
		showOkCancelButtons?: boolean;
		/** [Config Option] (Boolean) */
		showPreviousColor?: boolean;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Number|String) */
		width?: any;
	}

}

declare module TypExt.ux.colorpick {
	 interface ISelectorModelConfig extends TypExt.app.IViewModelConfig {
		/** [Config Option] (Object) */
		formulas?: any;
	}

}

declare module TypExt.ux.colorpick {
	 interface ISliderConfig extends TypExt.container.IContainerConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String/Object/Ext.app.ViewController) */
		controller?: any;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Object) */
		listeners?: any;
		/** [Config Option] (Boolean) */
		referenceHolder?: boolean;
	}

}

declare module TypExt.ux.colorpick {
	 interface ISliderAlphaConfig extends TypExt.ux.colorpick.ISliderConfig {
		/** [Config Option] (String/String[]) */
		cls?: any;
	}

}

declare module TypExt.ux.colorpick {
	 interface ISliderHueConfig extends TypExt.ux.colorpick.ISliderConfig {
		/** [Config Option] (String/String[]) */
		cls?: any;
	}

}

declare module TypExt.ux.colorpick {
	 interface ISliderSaturationConfig extends TypExt.ux.colorpick.ISliderConfig {
		/** [Config Option] (String/String[]) */
		cls?: any;
	}

}

declare module TypExt.ux.colorpick {
	 interface ISliderValueConfig extends TypExt.ux.colorpick.ISliderConfig {
		/** [Config Option] (String/String[]) */
		cls?: any;
	}

}

declare module TypExt.ux.rating {
	 interface IPickerConfig extends TypExt.IWidgetConfig {
		/** [Config Option] (Boolean/Object) */
		animate?: any;
		/** [Config Option] (String) */
		family?: string;
		/** [Config Option] (String/String[]/Number[]) */
		glyphs?: any;
		/** [Config Option] (Number) */
		limit?: number;
		/** [Config Option] (Number) */
		minimum?: number;
		/** [Config Option] (String/Object) */
		overStyle?: any;
		/** [Config Option] (Number) */
		rounding?: number;
		/** [Config Option] (String) */
		scale?: string;
		/** [Config Option] (String/Object) */
		selectedStyle?: any;
		/** [Config Option] (String/Object) */
		style?: any;
		/** [Config Option] (Object/String/String[]/Ext.XTemplate/Function) */
		tooltip?: any;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Number) */
		value?: number;
	}

}

declare module TypExt {
	 interface IVersionConfig {
	}

}

declare module TypExt.view {
	 interface IAbstractViewConfig extends TypExt.IComponentConfig, TypExt.util.IStoreHolderConfig {
		/** [Config Option] (Boolean) */
		blockRefresh?: boolean;
		/** [Config Option] (Boolean) */
		deferEmptyText?: boolean;
		/** [Config Option] (Boolean) */
		deferInitialRefresh?: boolean;
		/** [Config Option] (Boolean) */
		disableSelection?: boolean;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (String) */
		itemSelector?: string;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		itemTpl?: any;
		/** [Config Option] (Boolean/Object) */
		loadMask?: any;
		/** [Config Option] (String) */
		loadingCls?: string;
		/** [Config Option] (Number) */
		loadingHeight?: number;
		/** [Config Option] (String) */
		loadingText?: string;
		/** [Config Option] (Boolean) */
		multiSelect?: boolean;
		/** [Config Option] (String) */
		overItemCls?: string;
		/** [Config Option] (Boolean) */
		preserveScrollOnRefresh?: boolean;
		/** [Config Option] (String/String[]/Object) */
		publishes?: any;
		/** [Config Option] (String) */
		selectedItemCls?: string;
		/** [Config Option] (Ext.data.Model) */
		selection?: Ext.data.IModel;
		/** [Config Option] (Object/Ext.selection.DataViewModel) */
		selectionModel?: any;
		/** [Config Option] (Boolean) */
		simpleSelect?: boolean;
		/** [Config Option] (Boolean) */
		singleSelect?: boolean;
		/** [Config Option] (Number) */
		tabIndex?: number;
		/** [Config Option] (Boolean) */
		throttledUpdate?: boolean;
		/** [Config Option] (String/String[]/Ext.XTemplate) */
		tpl?: any;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
		/** [Config Option] (String/String[]/Object) */
		twoWayBindable?: any;
		/** [Config Option] (Number) */
		updateDelay?: number;
	}

}

declare module TypExt.view {
	 interface IBoundListConfig extends TypExt.view.IViewConfig, TypExt.mixin.IQueryableConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (Boolean) */
		focusOnToFront?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (Boolean) */
		preserveScrollOnRefresh?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (String/Boolean) */
		shadow?: any;
		/** [Config Option] (String/Ext.XTemplate) */
		tpl?: any;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
	}

}

declare module TypExt {
	 interface IBoundListConfig extends TypExt.view.IViewConfig, TypExt.mixin.IQueryableConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Object/String[]/Object[]) */
		childEls?: any;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (String) */
		displayField?: string;
		/** [Config Option] (Boolean) */
		focusOnToFront?: boolean;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (Number) */
		pageSize?: number;
		/** [Config Option] (Boolean) */
		preserveScrollOnRefresh?: boolean;
		/** [Config Option] (Ext.XTemplate/String/String[]) */
		renderTpl?: any;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (String/Boolean) */
		shadow?: any;
		/** [Config Option] (String/Ext.XTemplate) */
		tpl?: any;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
	}

}

declare module TypExt.view {
	 interface IBoundListKeyNavConfig extends TypExt.view.INavigationModelConfig {
		/** [Config Option] (Ext.view.BoundList) */
		boundList?: Ext.view.IBoundList;
	}

}

declare module TypExt.view {
	 interface IDragZoneConfig extends TypExt.dd.IDragZoneConfig {
		/** [Config Option] (Object/Boolean) */
		containerScroll?: any;
	}

}

declare module TypExt.view {
	 interface IDropZoneConfig extends TypExt.dd.IDropZoneConfig {
	}

}

declare module TypExt.view {
	 interface IMultiSelectorConfig extends TypExt.grid.IPanelConfig {
		/** [Config Option] (String) */
		addToolText?: string;
		/** [Config Option] (String) */
		emptyText?: string;
		/** [Config Option] (String) */
		fieldName?: string;
		/** [Config Option] (String) */
		fieldTitle?: string;
		/** [Config Option] (String) */
		removeRowText?: string;
		/** [Config Option] (String) */
		removeRowTip?: string;
		/** [Config Option] (Object) */
		search?: any;
	}

}

declare module TypExt.view {
	 interface IMultiSelectorSearchConfig extends TypExt.panel.IPanelConfig {
		/** [Config Option] (Boolean) */
		border?: boolean;
		/** [Config Option] (Boolean) */
		defaultListenerScope?: boolean;
		/** [Config Option] (String) */
		field?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		referenceHolder?: boolean;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (String) */
		searchText?: string;
		/** [Config Option] (Ext.data.Store/String/Object) */
		store?: any;
	}

}

declare module TypExt.view {
	 interface INavigationModelConfig extends TypExt.IBaseConfig, TypExt.util.IObservableConfig,TypExt.mixin.IFactoryableConfig {
	}

}

declare module TypExt.view {
	 interface INodeCacheConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt.view {
	 interface ITableConfig extends TypExt.view.IViewConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Boolean) */
		enableTextSelection?: boolean;
		/** [Config Option] (String) */
		firstCls?: string;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (String) */
		itemSelector?: string;
		/** [Config Option] (String) */
		lastCls?: string;
		/** [Config Option] (Boolean) */
		markDirty?: boolean;
		/** [Config Option] (String) */
		overItemCls?: string;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (String) */
		selectedItemCls?: string;
		/** [Config Option] (Object/Ext.selection.DataViewModel) */
		selectionModel?: any;
		/** [Config Option] (Boolean) */
		stripeRows?: boolean;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
	}

}

declare module TypExt.grid {
	 interface IViewConfig extends TypExt.view.IViewConfig {
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (String/Object) */
		componentLayout?: any;
		/** [Config Option] (Boolean) */
		enableTextSelection?: boolean;
		/** [Config Option] (String) */
		firstCls?: string;
		/** [Config Option] (String) */
		itemCls?: string;
		/** [Config Option] (String) */
		itemSelector?: string;
		/** [Config Option] (String) */
		lastCls?: string;
		/** [Config Option] (Boolean) */
		markDirty?: boolean;
		/** [Config Option] (String) */
		overItemCls?: string;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (String) */
		selectedItemCls?: string;
		/** [Config Option] (Object/Ext.selection.DataViewModel) */
		selectionModel?: any;
		/** [Config Option] (Boolean) */
		stripeRows?: boolean;
		/** [Config Option] (Boolean) */
		trackOver?: boolean;
	}

}

declare module TypExt.view {
	 interface ITableLayoutConfig extends TypExt.layout.component.IAutoConfig {
	}

}

declare module TypExt.view {
	 interface IViewConfig extends TypExt.view.IAbstractViewConfig {
	}

}

declare module TypExt {
	 interface IDataViewConfig extends TypExt.view.IAbstractViewConfig {
	}

}

declare module TypExt {
	 interface IWidgetConfig extends TypExt.IEventedConfig, TypExt.mixin.IInheritableConfig,TypExt.mixin.IBindableConfig {
		/** [Config Option] (Number/String) */
		height?: any;
		/** [Config Option] (Number/String) */
		width?: any;
	}

}

declare module TypExt.window {
	 interface IMessageBoxConfig extends TypExt.window.IWindowConfig {
		/** [Config Option] (String) */
		closeAction?: string;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (Ext.enums.Layout/Object) */
		layout?: any;
		/** [Config Option] (Number) */
		maxHeight?: number;
		/** [Config Option] (Number) */
		maxWidth?: number;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (Boolean/String/Object) */
		scrollable?: any;
		/** [Config Option] (Boolean/Number) */
		shrinkWrapDock?: any;
		/** [Config Option] (String) */
		title?: string;
	}

}

declare module TypExt.window {
	 interface IToastConfig extends TypExt.window.IWindowConfig {
		/** [Config Option] ("br"/"bl"/"tr"/"tl"/"t"/"l"/"b"/"r") */
		align?: any;
		/** [Config Option] (String/Ext.Component) */
		anchor?: any;
		/** [Config Option] (String) */
		anchorAlign?: string;
		/** [Config Option] (Number/String) */
		bodyPadding?: any;
		/** [Config Option] (String/String[]) */
		cls?: any;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (String/Boolean) */
		shadow?: any;
		/** [Config Option] (Boolean) */
		useXAxis?: boolean;
	}

}

declare module TypExt.window {
	 interface IWindowConfig extends TypExt.panel.IPanelConfig {
		/** [Config Option] (String/Ext.dom.Element) */
		animateTarget?: any;
		/** [Config Option] (Boolean) */
		autoRender?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (Boolean) */
		collapsed?: boolean;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Boolean) */
		constrainHeader?: boolean;
		/** [Config Option] (String/Number/Ext.Component) */
		defaultFocus?: any;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Boolean) */
		expandOnShow?: boolean;
		/** [Config Option] (Boolean/Function) */
		ghost?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (Boolean) */
		hideShadowOnDeactivate?: boolean;
		/** [Config Option] (Boolean) */
		maximizable?: boolean;
		/** [Config Option] (Boolean) */
		maximized?: boolean;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		minimizable?: boolean;
		/** [Config Option] (Boolean) */
		monitorResize?: boolean;
		/** [Config Option] (Function) */
		onEsc?: any;
		/** [Config Option] (Boolean) */
		overlapHeader?: boolean;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
	}

}

declare module TypExt {
	 interface IWindowConfig extends TypExt.panel.IPanelConfig {
		/** [Config Option] (String/Ext.dom.Element) */
		animateTarget?: any;
		/** [Config Option] (Boolean) */
		autoRender?: boolean;
		/** [Config Option] (String) */
		baseCls?: string;
		/** [Config Option] (Boolean) */
		closable?: boolean;
		/** [Config Option] (Boolean) */
		collapsed?: boolean;
		/** [Config Option] (Boolean) */
		collapsible?: boolean;
		/** [Config Option] (Boolean) */
		constrain?: boolean;
		/** [Config Option] (Boolean) */
		constrainHeader?: boolean;
		/** [Config Option] (String/Number/Ext.Component) */
		defaultFocus?: any;
		/** [Config Option] (Boolean) */
		draggable?: boolean;
		/** [Config Option] (Boolean) */
		expandOnShow?: boolean;
		/** [Config Option] (Boolean/Function) */
		ghost?: any;
		/** [Config Option] (Boolean) */
		hidden?: boolean;
		/** [Config Option] (String) */
		hideMode?: string;
		/** [Config Option] (Boolean) */
		hideShadowOnDeactivate?: boolean;
		/** [Config Option] (Boolean) */
		maximizable?: boolean;
		/** [Config Option] (Boolean) */
		maximized?: boolean;
		/** [Config Option] (Number) */
		minHeight?: number;
		/** [Config Option] (Number) */
		minWidth?: number;
		/** [Config Option] (Boolean) */
		minimizable?: boolean;
		/** [Config Option] (Boolean) */
		monitorResize?: boolean;
		/** [Config Option] (Function) */
		onEsc?: any;
		/** [Config Option] (Boolean) */
		overlapHeader?: boolean;
		/** [Config Option] (Boolean) */
		plain?: boolean;
		/** [Config Option] (Boolean/Object) */
		resizable?: any;
		/** [Config Option] (Number) */
		x?: number;
		/** [Config Option] (Number) */
		y?: number;
	}

}

declare module TypExt {
	 interface IWindowManagerConfig extends TypExt.IZIndexManagerConfig {
	}

}

declare module TypExt {
	 interface IXTemplateConfig extends TypExt.ITemplateConfig {
		/** [Config Option] (String/Array) */
		definitions?: any;
		/** [Config Option] (Boolean) */
		strict?: boolean;
	}

}

declare module TypExt {
	 interface IZIndexManagerConfig extends TypExt.IBaseConfig {
	}

}

declare module TypExt {
	 interface IWindowGroupConfig extends TypExt.IBaseConfig {
	}

}

